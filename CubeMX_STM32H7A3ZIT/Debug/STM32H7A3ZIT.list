
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e73c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800e9ec  0800e9ec  0000f9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1ac  0800f1ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f1b4  0800f1b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f1b8  0800f1b8  000101b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800f1bc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023d0  24000160  0800f31c  00011160  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  24002530  0800f31c  00011530  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011160  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002927f  00000000  00000000  0001118e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005cc9  00000000  00000000  0003a40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f88  00000000  00000000  000400d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001805  00000000  00000000  00042060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037fd6  00000000  00000000  00043865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e9f9  00000000  00000000  0007b83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001482d1  00000000  00000000  000aa234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f2505  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008afc  00000000  00000000  001f2548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  001fb044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e9d4 	.word	0x0800e9d4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800e9d4 	.word	0x0800e9d4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <flashBoot>:
#include "sdram_init.h"

FMC_SDRAM_CommandTypeDef command;


void flashBoot(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	*(uint8_t *) (FLASH_COMMON_BANK_ADDR + FLASH_COMMAND_OFFSET) = 0xFF;
 8000394:	f04f 4301 	mov.w	r3, #2164260864	@ 0x81000000
 8000398:	22ff      	movs	r2, #255	@ 0xff
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_FMC_Init+0x158>)
 80003de:	4a49      	ldr	r2, [pc, #292]	@ (8000504 <MX_FMC_Init+0x15c>)
 80003e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_FMC_Init+0x158>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_FMC_Init+0x158>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f8:	2240      	movs	r2, #64	@ 0x40
 80003fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003fc:	4b40      	ldr	r3, [pc, #256]	@ (8000500 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_FMC_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_FMC_Init+0x158>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 800040e:	4b3c      	ldr	r3, [pc, #240]	@ (8000500 <MX_FMC_Init+0x158>)
 8000410:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_FMC_Init+0x158>)
 8000418:	2240      	movs	r2, #64	@ 0x40
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_FMC_Init+0x158>)
 800041e:	2240      	movs	r2, #64	@ 0x40
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_FMC_Init+0x158>)
 8000424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 1;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_FMC_Init+0x158>)
 800042c:	2201      	movs	r2, #1
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_FMC_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_FMC_Init+0x158>)
 8000438:	2201      	movs	r2, #1
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000446:	23fc      	movs	r3, #252	@ 0xfc
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800044a:	23fc      	movs	r3, #252	@ 0xfc
 800044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800044e:	23fc      	movs	r3, #252	@ 0xfc
 8000450:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000452:	23fc      	movs	r3, #252	@ 0xfc
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000456:	23fc      	movs	r3, #252	@ 0xfc
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800045a:	23fc      	movs	r3, #252	@ 0xfc
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800045e:	f107 0220 	add.w	r2, r7, #32
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	4825      	ldr	r0, [pc, #148]	@ (8000500 <MX_FMC_Init+0x158>)
 800046a:	f003 f807 	bl	800347c <HAL_NAND_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 8000474:	f000 ff52 	bl	800131c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <MX_FMC_Init+0x160>)
 800047a:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_FMC_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_FMC_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <MX_FMC_Init+0x160>)
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_FMC_Init+0x160>)
 800048c:	2204      	movs	r2, #4
 800048e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_FMC_Init+0x160>)
 8000492:	2210      	movs	r2, #16
 8000494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_FMC_Init+0x160>)
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_FMC_Init+0x160>)
 800049e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_FMC_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_FMC_Init+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004c2:	2309      	movs	r3, #9
 80004c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004c6:	2306      	movs	r3, #6
 80004c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004ca:	2309      	movs	r3, #9
 80004cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004ce:	2303      	movs	r3, #3
 80004d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <MX_FMC_Init+0x160>)
 80004e0:	f008 faa4 	bl	8008a2c <HAL_SDRAM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004ea:	f000 ff17 	bl	800131c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <MX_FMC_Init+0x168>)
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_FMC_Init+0x160>)
 80004f2:	f000 ff19 	bl	8001328 <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2400018c 	.word	0x2400018c
 8000504:	52004080 	.word	0x52004080
 8000508:	240001cc 	.word	0x240001cc
 800050c:	52004140 	.word	0x52004140
 8000510:	2400017c 	.word	0x2400017c

08000514 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	@ 0xe0
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <HAL_FMC_MspInit+0x188>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80af 	bne.w	8000692 <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <HAL_FMC_MspInit+0x188>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	22c0      	movs	r2, #192	@ 0xc0
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00d fbf9 	bl	800dd3a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_CLKP;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fe5b 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000568:	f000 fed8 	bl	800131c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800056e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000572:	4a4b      	ldr	r2, [pc, #300]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000578:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800057c:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800057e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ae:	4619      	mov	r1, r3
 80005b0:	483c      	ldr	r0, [pc, #240]	@ (80006a4 <HAL_FMC_MspInit+0x190>)
 80005b2:	f001 fe97 	bl	80022e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	230d      	movs	r3, #13
 80005b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 80005dc:	f001 fe82 	bl	80022e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000600:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000604:	4619      	mov	r1, r3
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <HAL_FMC_MspInit+0x198>)
 8000608:	f001 fe6c 	bl	80022e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800060c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000626:	230c      	movs	r3, #12
 8000628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <HAL_FMC_MspInit+0x19c>)
 8000634:	f001 fe56 	bl	80022e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000638:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000652:	230c      	movs	r3, #12
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <HAL_FMC_MspInit+0x1a0>)
 8000660:	f001 fe40 	bl	80022e4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800067e:	2309      	movs	r3, #9
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 800068c:	f001 fe2a 	bl	80022e4 <HAL_GPIO_Init>
 8000690:	e000      	b.n	8000694 <HAL_FMC_MspInit+0x180>
    return;
 8000692:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000694:	37e0      	adds	r7, #224	@ 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000200 	.word	0x24000200
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021400 	.word	0x58021400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff28 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006d4:	f7ff ff1e 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a65      	ldr	r2, [pc, #404]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b63      	ldr	r3, [pc, #396]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b5f      	ldr	r3, [pc, #380]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a5e      	ldr	r2, [pc, #376]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b5b      	ldr	r3, [pc, #364]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000738:	4a56      	ldr	r2, [pc, #344]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000742:	4b54      	ldr	r3, [pc, #336]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b50      	ldr	r3, [pc, #320]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000756:	4a4f      	ldr	r2, [pc, #316]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000760:	4b4c      	ldr	r3, [pc, #304]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b49      	ldr	r3, [pc, #292]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000774:	4a47      	ldr	r2, [pc, #284]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077e:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000792:	4a40      	ldr	r2, [pc, #256]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <MX_GPIO_Init+0x1b4>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2150      	movs	r1, #80	@ 0x50
 80007cc:	4832      	ldr	r0, [pc, #200]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 80007ce:	f001 ff39 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4830      	ldr	r0, [pc, #192]	@ (800089c <MX_GPIO_Init+0x1bc>)
 80007da:	f001 ff33 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	21c0      	movs	r1, #192	@ 0xc0
 80007e2:	482f      	ldr	r0, [pc, #188]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 80007e4:	f001 ff2e 	bl	8002644 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007e8:	232c      	movs	r3, #44	@ 0x2c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4827      	ldr	r0, [pc, #156]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 80007fc:	f001 fd72 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4820      	ldr	r0, [pc, #128]	@ (8000898 <MX_GPIO_Init+0x1b8>)
 8000818:	f001 fd64 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <MX_GPIO_Init+0x1bc>)
 8000836:	f001 fd55 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4813      	ldr	r0, [pc, #76]	@ (800089c <MX_GPIO_Init+0x1bc>)
 8000850:	f001 fd48 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000854:	2340      	movs	r3, #64	@ 0x40
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 800086c:	f001 fd3a 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_GPIO_Init+0x1c0>)
 8000888:	f001 fd2c 	bl	80022e4 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58024400 	.word	0x58024400
 8000898:	58021000 	.word	0x58021000
 800089c:	58020800 	.word	0x58020800
 80008a0:	58021400 	.word	0x58021400

080008a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008e0:	f001 fee4 	bl	80026ac <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 fd17 	bl	800131c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008f2:	f002 faf9 	bl	8002ee8 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fd0e 	bl	800131c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_I2C1_Init+0x74>)
 8000904:	f002 fb3b 	bl	8002f7e <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 fd05 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	24000204 	.word	0x24000204
 800091c:	40005400 	.word	0x40005400
 8000920:	20b0ccff 	.word	0x20b0ccff

08000924 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_I2C2_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <MX_I2C2_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800092e:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <MX_I2C2_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_I2C2_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_I2C2_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_I2C2_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000960:	f001 fea4 	bl	80026ac <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 fcd7 	bl	800131c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000972:	f002 fab9 	bl	8002ee8 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 fcce 	bl	800131c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_I2C2_Init+0x74>)
 8000984:	f002 fafb 	bl	8002f7e <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 fcc5 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24000258 	.word	0x24000258
 800099c:	40005800 	.word	0x40005800
 80009a0:	20b0ccff 	.word	0x20b0ccff

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0bc      	sub	sp, #240	@ 0xf0
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	22c0      	movs	r2, #192	@ 0xc0
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d f9b8 	bl	800dd3a <memset>
  if(i2cHandle->Instance==I2C1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a4d      	ldr	r2, [pc, #308]	@ (8000b04 <HAL_I2C_MspInit+0x160>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d146      	bne.n	8000a62 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009d4:	f04f 0208 	mov.w	r2, #8
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 fc14 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009f6:	f000 fc91 	bl	800131c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 80009fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a00:	4a41      	ldr	r2, [pc, #260]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a18:	23c0      	movs	r3, #192	@ 0xc0
 8000a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4833      	ldr	r0, [pc, #204]	@ (8000b0c <HAL_I2C_MspInit+0x168>)
 8000a3e:	f001 fc51 	bl	80022e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a42:	4b31      	ldr	r3, [pc, #196]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a48:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a52:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a60:	e04b      	b.n	8000afa <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a2a      	ldr	r2, [pc, #168]	@ (8000b10 <HAL_I2C_MspInit+0x16c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d146      	bne.n	8000afa <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a6c:	f04f 0208 	mov.w	r2, #8
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f005 fbc8 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a8e:	f000 fc45 	bl	800131c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a98:	4a1b      	ldr	r2, [pc, #108]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ab0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab8:	2312      	movs	r3, #18
 8000aba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aca:	2304      	movs	r3, #4
 8000acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <HAL_I2C_MspInit+0x168>)
 8000ad8:	f001 fc04 	bl	80022e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000ade:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ae2:	4a09      	ldr	r2, [pc, #36]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000ae4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ae8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_I2C_MspInit+0x164>)
 8000aee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
}
 8000afa:	bf00      	nop
 8000afc:	37f0      	adds	r7, #240	@ 0xf0
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020400 	.word	0x58020400
 8000b10:	40005800 	.word	0x40005800

08000b14 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <MX_I2S1_Init+0x64>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b20:	2206      	movs	r2, #6
 8000b22:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b30:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b38:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b3c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b40:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_I2S1_Init+0x60>)
 8000b62:	f002 fa59 	bl	8003018 <HAL_I2S_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fbd6 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	240002ac 	.word	0x240002ac
 8000b78:	40013000 	.word	0x40013000

08000b7c <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <MX_I2S2_Init+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000b9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b9e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000ba2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000ba6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2S2_Init+0x60>)
 8000bc8:	f002 fa26 	bl	8003018 <HAL_I2S_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bd2:	f000 fba3 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000300 	.word	0x24000300
 8000be0:	40003800 	.word	0x40003800

08000be4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0be      	sub	sp, #248	@ 0xf8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	22c0      	movs	r2, #192	@ 0xc0
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00d f898 	bl	800dd3a <memset>
  if(i2sHandle->Instance==SPI1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a75      	ldr	r2, [pc, #468]	@ (8000de4 <HAL_I2S_MspInit+0x200>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d173      	bne.n	8000cfc <HAL_I2S_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000c14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f005 faf4 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c36:	f000 fb71 	bl	800131c <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c40:	4a69      	ldr	r2, [pc, #420]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c46:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c4a:	4b67      	ldr	r3, [pc, #412]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b63      	ldr	r3, [pc, #396]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c5e:	4a62      	ldr	r2, [pc, #392]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c68:	4b5f      	ldr	r3, [pc, #380]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b5c      	ldr	r3, [pc, #368]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c86:	4b58      	ldr	r3, [pc, #352]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c94:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484c      	ldr	r0, [pc, #304]	@ (8000dec <HAL_I2S_MspInit+0x208>)
 8000cbc:	f001 fb12 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4842      	ldr	r0, [pc, #264]	@ (8000df0 <HAL_I2S_MspInit+0x20c>)
 8000ce6:	f001 fafd 	bl	80022e4 <HAL_GPIO_Init>

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2023      	movs	r0, #35	@ 0x23
 8000cf0:	f001 fa4b 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cf4:	2023      	movs	r0, #35	@ 0x23
 8000cf6:	f001 fa62 	bl	80021be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cfa:	e06f      	b.n	8000ddc <HAL_I2S_MspInit+0x1f8>
  else if(i2sHandle->Instance==SPI2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a3c      	ldr	r2, [pc, #240]	@ (8000df4 <HAL_I2S_MspInit+0x210>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d16a      	bne.n	8000ddc <HAL_I2S_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000d06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fa7b 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2S_MspInit+0x148>
      Error_Handler();
 8000d28:	f000 faf8 	bl	800131c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d32:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d50:	4a25      	ldr	r2, [pc, #148]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d5a:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_I2S_MspInit+0x204>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d86:	2342      	movs	r3, #66	@ 0x42
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <HAL_I2S_MspInit+0x20c>)
 8000dac:	f001 fa9a 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000db0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000db4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <HAL_I2S_MspInit+0x214>)
 8000dd8:	f001 fa84 	bl	80022e4 <HAL_GPIO_Init>
}
 8000ddc:	bf00      	nop
 8000dde:	37f8      	adds	r7, #248	@ 0xf8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013000 	.word	0x40013000
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58020800 	.word	0x58020800
 8000df4:	40003800 	.word	0x40003800
 8000df8:	58020400 	.word	0x58020400

08000dfc <LCD_Init>:
#include <stdio.h> //sprintf
#include <stdlib.h> //abs

#include "main.h"

void LCD_Init() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af02      	add	r7, sp, #8
	ssd1306_Init();
 8000e02:	f000 fbd9 	bl	80015b8 <ssd1306_Init>
	ssd1306_Fill(White);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fc40 	bl	800168c <ssd1306_Fill>
	ssd1306_SetCursor(2, 2);
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f000 fd86 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Clip", Font_6x8, Black);
 8000e14:	4b31      	ldr	r3, [pc, #196]	@ (8000edc <LCD_Init+0xe0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	9200      	str	r2, [sp, #0]
 8000e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1c:	4830      	ldr	r0, [pc, #192]	@ (8000ee0 <LCD_Init+0xe4>)
 8000e1e:	f000 fd59 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(52, 2);
 8000e22:	2102      	movs	r1, #2
 8000e24:	2034      	movs	r0, #52	@ 0x34
 8000e26:	f000 fd7b 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("||||||||||||", Font_6x8, Black);
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <LCD_Init+0xe0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e32:	482c      	ldr	r0, [pc, #176]	@ (8000ee4 <LCD_Init+0xe8>)
 8000e34:	f000 fd4e 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 12);
 8000e38:	210c      	movs	r1, #12
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f000 fd70 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Stored", Font_6x8, Black);
 8000e40:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <LCD_Init+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	9200      	str	r2, [sp, #0]
 8000e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e48:	4827      	ldr	r0, [pc, #156]	@ (8000ee8 <LCD_Init+0xec>)
 8000e4a:	f000 fd43 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 22);
 8000e4e:	2116      	movs	r1, #22
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fd65 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Active", Font_6x8, Black);
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <LCD_Init+0xe0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5e:	4823      	ldr	r0, [pc, #140]	@ (8000eec <LCD_Init+0xf0>)
 8000e60:	f000 fd38 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 32);
 8000e64:	2120      	movs	r1, #32
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 fd5a 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Pitch 0%", Font_6x8, Black);
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <LCD_Init+0xe0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	9200      	str	r2, [sp, #0]
 8000e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e74:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <LCD_Init+0xf4>)
 8000e76:	f000 fd2d 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 42);
 8000e7a:	212a      	movs	r1, #42	@ 0x2a
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f000 fd4f 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Mode--------", Font_6x8, Black);
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <LCD_Init+0xe0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8a:	481a      	ldr	r0, [pc, #104]	@ (8000ef4 <LCD_Init+0xf8>)
 8000e8c:	f000 fd22 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 42);
 8000e90:	212a      	movs	r1, #42	@ 0x2a
 8000e92:	2052      	movs	r0, #82	@ 0x52
 8000e94:	f000 fd44 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("REC", Font_6x8, Black);
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <LCD_Init+0xe0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	9200      	str	r2, [sp, #0]
 8000e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <LCD_Init+0xfc>)
 8000ea2:	f000 fd17 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 52);
 8000ea6:	2134      	movs	r1, #52	@ 0x34
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f000 fd39 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("Source------", Font_6x8, Black);
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <LCD_Init+0xe0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	9200      	str	r2, [sp, #0]
 8000eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <LCD_Init+0x100>)
 8000eb8:	f000 fd0c 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 52);
 8000ebc:	2134      	movs	r1, #52	@ 0x34
 8000ebe:	2052      	movs	r0, #82	@ 0x52
 8000ec0:	f000 fd2e 	bl	8001920 <ssd1306_SetCursor>
	ssd1306_WriteString("DIGITAL", Font_6x8, Black);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <LCD_Init+0xe0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	9200      	str	r2, [sp, #0]
 8000eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <LCD_Init+0x104>)
 8000ece:	f000 fd01 	bl	80018d4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000ed2:	f000 fbf3 	bl	80016bc <ssd1306_UpdateScreen>
	return;
 8000ed6:	bf00      	nop
}
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	0800f15c 	.word	0x0800f15c
 8000ee0:	0800e9ec 	.word	0x0800e9ec
 8000ee4:	0800e9f4 	.word	0x0800e9f4
 8000ee8:	0800ea04 	.word	0x0800ea04
 8000eec:	0800ea0c 	.word	0x0800ea0c
 8000ef0:	0800ea14 	.word	0x0800ea14
 8000ef4:	0800ea20 	.word	0x0800ea20
 8000ef8:	0800ea30 	.word	0x0800ea30
 8000efc:	0800ea34 	.word	0x0800ea34
 8000f00:	0800ea44 	.word	0x0800ea44

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f0e:	f000 f9bb 	bl	8001288 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 ffa9 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f921 	bl	800115c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f1a:	f000 f997 	bl	800124c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f7ff fbdf 	bl	80006e0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000f22:	f7ff fa41 	bl	80003a8 <MX_FMC_Init>
  MX_I2S1_Init();
 8000f26:	f7ff fdf5 	bl	8000b14 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000f2a:	f7ff fe27 	bl	8000b7c <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000f2e:	f000 fa67 	bl	8001400 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000f32:	f7ff fcb7 	bl	80008a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f36:	f7ff fcf5 	bl	8000924 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000f3a:	f00c f86b 	bl	800d014 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f3e:	f000 fef5 	bl	8001d2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  flashBoot();
 8000f42:	f7ff fa25 	bl	8000390 <flashBoot>

  NAND_AddressTypedef Address;
  uint8_t txBuf[BUFFER_SIZE];
  uint8_t rxBuf[BUFFER_SIZE];
  int memtest = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8000f4c:	443a      	add	r2, r7
 8000f4e:	6013      	str	r3, [r2, #0]
  NAND_IDTypeDef NAND_ID;
  LCD_Init();
 8000f50:	f7ff ff54 	bl	8000dfc <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 8000f54:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f803 2c98 	strb.w	r2, [r3, #-152]
	  NAND_ID.Device_Id = (uint16_t)0x00;
 8000f5e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f62:	2200      	movs	r2, #0
 8000f64:	f803 2c97 	strb.w	r2, [r3, #-151]
	  NAND_ID.Third_Id = (uint16_t)0x00;
 8000f68:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f803 2c96 	strb.w	r2, [r3, #-150]
	  NAND_ID.Fourth_Id = (uint16_t)0x00;
 8000f72:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f76:	2200      	movs	r2, #0
 8000f78:	f803 2c95 	strb.w	r2, [r3, #-149]
	  /* Read the NAND memory ID */
	  if(HAL_NAND_Read_ID(&hnand1, &NAND_ID) != HAL_OK)
 8000f7c:	4b70      	ldr	r3, [pc, #448]	@ (8001140 <main+0x23c>)
 8000f7e:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000f82:	f103 0308 	add.w	r3, r3, #8
 8000f86:	443b      	add	r3, r7
 8000f88:	4619      	mov	r1, r3
 8000f8a:	486e      	ldr	r0, [pc, #440]	@ (8001144 <main+0x240>)
 8000f8c:	f002 fac0 	bl	8003510 <HAL_NAND_Read_ID>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <main+0x96>
	  {
	  return NAND_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0cb      	b.n	8001132 <main+0x22e>
	  }
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 // HAL_Delay(1000);

	  Address.Page = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f241 02b4 	movw	r2, #4276	@ 0x10b4
 8000fa0:	443a      	add	r2, r7
 8000fa2:	8013      	strh	r3, [r2, #0]
	  Address.Plane = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f241 02b6 	movw	r2, #4278	@ 0x10b6
 8000faa:	443a      	add	r2, r7
 8000fac:	8013      	strh	r3, [r2, #0]
	  Address.Block = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f241 02b8 	movw	r2, #4280	@ 0x10b8
 8000fb4:	443a      	add	r2, r7
 8000fb6:	8013      	strh	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e01f      	b.n	8001002 <main+0xfe>
		txBuf[i] = i;
 8000fc2:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000fce:	443b      	add	r3, r7
 8000fd0:	f6a3 0254 	subw	r2, r3, #2132	@ 0x854
 8000fd4:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	460a      	mov	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
		rxBuf[i] = 0;
 8000fe0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	3b94      	subs	r3, #148	@ 0x94
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ff4:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 800100c:	dbd9      	blt.n	8000fc2 <main+0xbe>
	  }
	  // Erase block
	  if (HAL_NAND_Erase_Block(&hnand1, &Address) != HAL_OK)
 800100e:	f241 03b4 	movw	r3, #4276	@ 0x10b4
 8001012:	443b      	add	r3, r7
 8001014:	4619      	mov	r1, r3
 8001016:	484b      	ldr	r0, [pc, #300]	@ (8001144 <main+0x240>)
 8001018:	f002 fdaa 	bl	8003b70 <HAL_NAND_Erase_Block>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <main+0x122>
	  {
	  return NAND_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e085      	b.n	8001132 <main+0x22e>
	  }
	  // Write Block
	  if (HAL_NAND_Write_Page(&hnand1,
 8001026:	f607 0274 	addw	r2, r7, #2164	@ 0x874
 800102a:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 800102e:	4439      	add	r1, r7
 8001030:	2301      	movs	r3, #1
 8001032:	4844      	ldr	r0, [pc, #272]	@ (8001144 <main+0x240>)
 8001034:	f002 fc44 	bl	80038c0 <HAL_NAND_Write_Page_8b>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <main+0x13e>
			  	  	  	  	  &Address,
							  txBuf,
							  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e077      	b.n	8001132 <main+0x22e>
	  }
	  /* Read back data from the NAND memory */
	  if (HAL_NAND_Read_Page(&hnand1,
 8001042:	4a41      	ldr	r2, [pc, #260]	@ (8001148 <main+0x244>)
 8001044:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8001048:	4413      	add	r3, r2
 800104a:	19da      	adds	r2, r3, r7
 800104c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8001050:	4439      	add	r1, r7
 8001052:	2301      	movs	r3, #1
 8001054:	483b      	ldr	r0, [pc, #236]	@ (8001144 <main+0x240>)
 8001056:	f002 fad9 	bl	800360c <HAL_NAND_Read_Page_8b>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <main+0x160>
	  &Address,
	  rxBuf,
	  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e066      	b.n	8001132 <main+0x22e>
	  }
	  // Checking
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8001064:	2300      	movs	r3, #0
 8001066:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 800106a:	443a      	add	r2, r7
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e024      	b.n	80010ba <main+0x1b6>
		  if(rxBuf[i] != txBuf[i]) memtest = 0; // Check if all sent values were received
 8001070:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001074:	461a      	mov	r2, r3
 8001076:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 800107a:	443b      	add	r3, r7
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	3b94      	subs	r3, #148	@ 0x94
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8001088:	443b      	add	r3, r7
 800108a:	f6a3 0154 	subw	r1, r3, #2132	@ 0x854
 800108e:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8001092:	443b      	add	r3, r7
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	440b      	add	r3, r1
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d004      	beq.n	80010a8 <main+0x1a4>
 800109e:	2300      	movs	r3, #0
 80010a0:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 80010a4:	443a      	add	r2, r7
 80010a6:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 80010a8:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 80010ac:	443b      	add	r3, r7
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 80010b6:	443a      	add	r2, r7
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 80010be:	443b      	add	r3, r7
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 80010c6:	dbd3      	blt.n	8001070 <main+0x16c>
	  }
	  if(memtest) { //printfs
 80010c8:	f241 03c4 	movw	r3, #4292	@ 0x10c4
 80010cc:	443b      	add	r3, r7
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d017      	beq.n	8001104 <main+0x200>
	  			  uint8_t str[] = "Total Flash Success\r\n";
 80010d4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <main+0x248>)
 80010da:	f1a3 04b0 	sub.w	r4, r3, #176	@ 0xb0
 80010de:	4615      	mov	r5, r2
 80010e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010e8:	6020      	str	r0, [r4, #0]
 80010ea:	3404      	adds	r4, #4
 80010ec:	8021      	strh	r1, [r4, #0]
	  			  CDC_Transmit_HS(str, sizeof(str));
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <main+0x24c>)
 80010f0:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 80010f4:	f103 0308 	add.w	r3, r3, #8
 80010f8:	443b      	add	r3, r7
 80010fa:	2116      	movs	r1, #22
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00c f849 	bl	800d194 <CDC_Transmit_HS>
 8001102:	e727      	b.n	8000f54 <main+0x50>
	  		  } else {
	  			  uint8_t str[] = "Partial Flash Failure\r\n";
 8001104:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <main+0x250>)
 800110a:	f1a3 04c8 	sub.w	r4, r3, #200	@ 0xc8
 800110e:	4615      	mov	r5, r2
 8001110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001118:	e884 0003 	stmia.w	r4, {r0, r1}
	  			  CDC_Transmit_HS(str, sizeof(str));
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <main+0x254>)
 800111e:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8001122:	f103 0308 	add.w	r3, r3, #8
 8001126:	443b      	add	r3, r7
 8001128:	2118      	movs	r1, #24
 800112a:	4618      	mov	r0, r3
 800112c:	f00c f832 	bl	800d194 <CDC_Transmit_HS>
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 8001130:	e710      	b.n	8000f54 <main+0x50>

	   //uint8_t str[] = "Hello World\r\n";
	   //CDC_Transmit_HS(str, sizeof(str));
  }
  /* USER CODE END 3 */
}
 8001132:	4618      	mov	r0, r3
 8001134:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	bf00      	nop
 8001140:	ffffef68 	.word	0xffffef68
 8001144:	2400018c 	.word	0x2400018c
 8001148:	ffffef6c 	.word	0xffffef6c
 800114c:	0800ea90 	.word	0x0800ea90
 8001150:	ffffef50 	.word	0xffffef50
 8001154:	0800eaa8 	.word	0x0800eaa8
 8001158:	ffffef38 	.word	0xffffef38

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	@ 0x70
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	224c      	movs	r2, #76	@ 0x4c
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f00c fde5 	bl	800dd3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2220      	movs	r2, #32
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f00c fddf 	bl	800dd3a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800117c:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <SystemClock_Config+0xe8>)
 800117e:	f04f 32ff 	mov.w	r2, #4294967295
 8001182:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001186:	2002      	movs	r0, #2
 8001188:	f004 f854 	bl	8005234 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <SystemClock_Config+0xec>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a2c      	ldr	r2, [pc, #176]	@ (8001248 <SystemClock_Config+0xec>)
 8001196:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <SystemClock_Config+0xec>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011a8:	bf00      	nop
 80011aa:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <SystemClock_Config+0xec>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b6:	d1f8      	bne.n	80011aa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011b8:	2322      	movs	r3, #34	@ 0x22
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011bc:	2301      	movs	r3, #1
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011c0:	2340      	movs	r3, #64	@ 0x40
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80011d4:	2323      	movs	r3, #35	@ 0x23
 80011d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d8:	2302      	movs	r3, #2
 80011da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011e4:	230c      	movs	r3, #12
 80011e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 f867 	bl	80052c8 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001200:	f000 f88c 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	233f      	movs	r3, #63	@ 0x3f
 8001206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2303      	movs	r3, #3
 800120a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001214:	2340      	movs	r3, #64	@ 0x40
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001218:	2340      	movs	r3, #64	@ 0x40
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800121c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001222:	2340      	movs	r3, #64	@ 0x40
 8001224:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2106      	movs	r1, #6
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fc7e 	bl	8005b2c <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001236:	f000 f871 	bl	800131c <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3770      	adds	r7, #112	@ 0x70
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	58024400 	.word	0x58024400
 8001248:	58024800 	.word	0x58024800

0800124c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0b0      	sub	sp, #192	@ 0xc0
 8001250:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	22c0      	movs	r2, #192	@ 0xc0
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f00c fd6e 	bl	800dd3a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800125e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800126a:	2300      	movs	r3, #0
 800126c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4618      	mov	r0, r3
 8001272:	f004 ffd1 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 800127c:	f000 f84e 	bl	800131c <Error_Handler>
  }
}
 8001280:	bf00      	nop
 8001282:	37c0      	adds	r7, #192	@ 0xc0
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800129a:	f000 ffab 	bl	80021f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012aa:	231f      	movs	r3, #31
 80012ac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012ae:	2387      	movs	r3, #135	@ 0x87
 80012b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ca:	463b      	mov	r3, r7
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 ffc9 	bl	8002264 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80012d6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80012da:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80012dc:	2317      	movs	r3, #23
 80012de:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012e8:	2303      	movs	r3, #3
 80012ea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012f0:	463b      	mov	r3, r7
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 ffb6 	bl	8002264 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 80012fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001300:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001302:	231f      	movs	r3, #31
 8001304:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001306:	463b      	mov	r3, r7
 8001308:	4618      	mov	r0, r3
 800130a:	f000 ffab 	bl	8002264 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800130e:	2004      	movs	r0, #4
 8001310:	f000 ff88 	bl	8002224 <HAL_MPU_Enable>

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2210      	movs	r2, #16
 8001340:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800134e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f007 fba5 	bl	8008aa4 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f000 fe16 	bl	8001f8c <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2202      	movs	r2, #2
 8001364:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2210      	movs	r2, #16
 800136a:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2201      	movs	r2, #1
 8001370:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f007 fb90 	bl	8008aa4 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2210      	movs	r2, #16
 800138e:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800139c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f007 fb7e 	bl	8008aa4 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80013a8:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80013ac:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2210      	movs	r2, #16
 80013b8:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80013c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f007 fb69 	bl	8008aa4 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2203      	movs	r2, #3
 80013d6:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2210      	movs	r2, #16
 80013dc:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2202      	movs	r2, #2
 80013e2:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80013ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f007 fb57 	bl	8008aa4 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001406:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800140a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800141e:	4b13      	ldr	r3, [pc, #76]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001430:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_SPDIFRX_Init+0x6c>)
 800145a:	f007 fb59 	bl	8008b10 <HAL_SPDIFRX_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8001464:	f7ff ff5a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	24000354 	.word	0x24000354

08001470 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	@ 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22c0      	movs	r2, #192	@ 0xc0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00c fc52 	bl	800dd3a <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800149e:	d149      	bne.n	8001534 <HAL_SPDIFRX_MspInit+0xc4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80014a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 feaf 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 80014c0:	f7ff ff2c 	bl	800131c <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014ca:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80014d4:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80014da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014e8:	4a14      	ldr	r2, [pc, #80]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_SPDIFRX_MspInit+0xcc>)
 80014f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151c:	4619      	mov	r1, r3
 800151e:	4808      	ldr	r0, [pc, #32]	@ (8001540 <HAL_SPDIFRX_MspInit+0xd0>)
 8001520:	f000 fee0 	bl	80022e4 <HAL_GPIO_Init>

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2061      	movs	r0, #97	@ 0x61
 800152a:	f000 fe2e 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 800152e:	2061      	movs	r0, #97	@ 0x61
 8001530:	f000 fe45 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001534:	bf00      	nop
 8001536:	37e8      	adds	r7, #232	@ 0xe8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	58024400 	.word	0x58024400
 8001540:	58020c00 	.word	0x58020c00

08001544 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af04      	add	r7, sp, #16
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2301      	movs	r3, #1
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	2200      	movs	r2, #0
 8001570:	2178      	movs	r1, #120	@ 0x78
 8001572:	4803      	ldr	r0, [pc, #12]	@ (8001580 <ssd1306_WriteCommand+0x2c>)
 8001574:	f001 f936 	bl	80027e4 <HAL_I2C_Mem_Write>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	24000258 	.word	0x24000258

08001584 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af04      	add	r7, sp, #16
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f04f 32ff 	mov.w	r2, #4294967295
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	2178      	movs	r1, #120	@ 0x78
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <ssd1306_WriteData+0x30>)
 80015a6:	f001 f91d 	bl	80027e4 <HAL_I2C_Mem_Write>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	24000258 	.word	0x24000258

080015b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015bc:	f7ff ffc2 	bl	8001544 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015c0:	2064      	movs	r0, #100	@ 0x64
 80015c2:	f000 fce3 	bl	8001f8c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 f9d6 	bl	8001978 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015cc:	2020      	movs	r0, #32
 80015ce:	f7ff ffc1 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ffbe 	bl	8001554 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015d8:	20b0      	movs	r0, #176	@ 0xb0
 80015da:	f7ff ffbb 	bl	8001554 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015de:	20c8      	movs	r0, #200	@ 0xc8
 80015e0:	f7ff ffb8 	bl	8001554 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ffb5 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015ea:	2010      	movs	r0, #16
 80015ec:	f7ff ffb2 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015f0:	2040      	movs	r0, #64	@ 0x40
 80015f2:	f7ff ffaf 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015f6:	20ff      	movs	r0, #255	@ 0xff
 80015f8:	f000 f9aa 	bl	8001950 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015fc:	20a1      	movs	r0, #161	@ 0xa1
 80015fe:	f7ff ffa9 	bl	8001554 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001602:	20a6      	movs	r0, #166	@ 0xa6
 8001604:	f7ff ffa6 	bl	8001554 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001608:	20a8      	movs	r0, #168	@ 0xa8
 800160a:	f7ff ffa3 	bl	8001554 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800160e:	203f      	movs	r0, #63	@ 0x3f
 8001610:	f7ff ffa0 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001614:	20a4      	movs	r0, #164	@ 0xa4
 8001616:	f7ff ff9d 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800161a:	20d3      	movs	r0, #211	@ 0xd3
 800161c:	f7ff ff9a 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff ff97 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001626:	20d5      	movs	r0, #213	@ 0xd5
 8001628:	f7ff ff94 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800162c:	20f0      	movs	r0, #240	@ 0xf0
 800162e:	f7ff ff91 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001632:	20d9      	movs	r0, #217	@ 0xd9
 8001634:	f7ff ff8e 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001638:	2022      	movs	r0, #34	@ 0x22
 800163a:	f7ff ff8b 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800163e:	20da      	movs	r0, #218	@ 0xda
 8001640:	f7ff ff88 	bl	8001554 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001644:	2012      	movs	r0, #18
 8001646:	f7ff ff85 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800164a:	20db      	movs	r0, #219	@ 0xdb
 800164c:	f7ff ff82 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001650:	2020      	movs	r0, #32
 8001652:	f7ff ff7f 	bl	8001554 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001656:	208d      	movs	r0, #141	@ 0x8d
 8001658:	f7ff ff7c 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800165c:	2014      	movs	r0, #20
 800165e:	f7ff ff79 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001662:	2001      	movs	r0, #1
 8001664:	f000 f988 	bl	8001978 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001668:	2000      	movs	r0, #0
 800166a:	f000 f80f 	bl	800168c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800166e:	f000 f825 	bl	80016bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <ssd1306_Init+0xd0>)
 8001674:	2200      	movs	r2, #0
 8001676:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001678:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <ssd1306_Init+0xd0>)
 800167a:	2200      	movs	r2, #0
 800167c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800167e:	4b02      	ldr	r3, [pc, #8]	@ (8001688 <ssd1306_Init+0xd0>)
 8001680:	2201      	movs	r2, #1
 8001682:	711a      	strb	r2, [r3, #4]
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	240007a4 	.word	0x240007a4

0800168c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <ssd1306_Fill+0x14>
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <ssd1306_Fill+0x16>
 80016a0:	23ff      	movs	r3, #255	@ 0xff
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	4619      	mov	r1, r3
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <ssd1306_Fill+0x2c>)
 80016aa:	f00c fb46 	bl	800dd3a <memset>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240003a4 	.word	0x240003a4

080016bc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e016      	b.n	80016f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	3b50      	subs	r3, #80	@ 0x50
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff40 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff ff3d 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80016da:	2010      	movs	r0, #16
 80016dc:	f7ff ff3a 	bl	8001554 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	01db      	lsls	r3, r3, #7
 80016e4:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <ssd1306_UpdateScreen+0x4c>)
 80016e6:	4413      	add	r3, r2
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff4a 	bl	8001584 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3301      	adds	r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b07      	cmp	r3, #7
 80016fa:	d9e5      	bls.n	80016c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	240003a4 	.word	0x240003a4

0800170c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	460b      	mov	r3, r1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	4613      	mov	r3, r2
 800171c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db3d      	blt.n	80017a2 <ssd1306_DrawPixel+0x96>
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b3f      	cmp	r3, #63	@ 0x3f
 800172a:	d83a      	bhi.n	80017a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800172c:	797b      	ldrb	r3, [r7, #5]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d11a      	bne.n	8001768 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	b2d8      	uxtb	r0, r3
 800173a:	4603      	mov	r3, r0
 800173c:	01db      	lsls	r3, r3, #7
 800173e:	4413      	add	r3, r2
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <ssd1306_DrawPixel+0xa4>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	b25a      	sxtb	r2, r3
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	b25b      	sxtb	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b259      	sxtb	r1, r3
 8001758:	79fa      	ldrb	r2, [r7, #7]
 800175a:	4603      	mov	r3, r0
 800175c:	01db      	lsls	r3, r3, #7
 800175e:	4413      	add	r3, r2
 8001760:	b2c9      	uxtb	r1, r1
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <ssd1306_DrawPixel+0xa4>)
 8001764:	54d1      	strb	r1, [r2, r3]
 8001766:	e01d      	b.n	80017a4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001768:	79fa      	ldrb	r2, [r7, #7]
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	b2d8      	uxtb	r0, r3
 8001770:	4603      	mov	r3, r0
 8001772:	01db      	lsls	r3, r3, #7
 8001774:	4413      	add	r3, r2
 8001776:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <ssd1306_DrawPixel+0xa4>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	b25a      	sxtb	r2, r3
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4013      	ands	r3, r2
 8001790:	b259      	sxtb	r1, r3
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	4603      	mov	r3, r0
 8001796:	01db      	lsls	r3, r3, #7
 8001798:	4413      	add	r3, r2
 800179a:	b2c9      	uxtb	r1, r1
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <ssd1306_DrawPixel+0xa4>)
 800179e:	54d1      	strb	r1, [r2, r3]
 80017a0:	e000      	b.n	80017a4 <ssd1306_DrawPixel+0x98>
        return;
 80017a2:	bf00      	nop
    }
}
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	240003a4 	.word	0x240003a4

080017b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4604      	mov	r4, r0
 80017bc:	4638      	mov	r0, r7
 80017be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017c2:	4623      	mov	r3, r4
 80017c4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2b1f      	cmp	r3, #31
 80017ca:	d902      	bls.n	80017d2 <ssd1306_WriteChar+0x1e>
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80017d0:	d901      	bls.n	80017d6 <ssd1306_WriteChar+0x22>
        return 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e077      	b.n	80018c6 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	783b      	ldrb	r3, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	dc06      	bgt.n	80017f2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80017e4:	4b3a      	ldr	r3, [pc, #232]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 80017e6:	885b      	ldrh	r3, [r3, #2]
 80017e8:	461a      	mov	r2, r3
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80017ee:	2b40      	cmp	r3, #64	@ 0x40
 80017f0:	dd01      	ble.n	80017f6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e067      	b.n	80018c6 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e04e      	b.n	800189a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3b20      	subs	r3, #32
 8001802:	7879      	ldrb	r1, [r7, #1]
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4619      	mov	r1, r3
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	440b      	add	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	e036      	b.n	800188a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff ff5d 	bl	800170c <ssd1306_DrawPixel>
 8001852:	e017      	b.n	8001884 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4413      	add	r3, r2
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4413      	add	r3, r2
 800186e:	b2d9      	uxtb	r1, r3
 8001870:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	f7ff ff44 	bl	800170c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	3301      	adds	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	783b      	ldrb	r3, [r7, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4293      	cmp	r3, r2
 8001892:	d3c3      	bcc.n	800181c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	3301      	adds	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	787b      	ldrb	r3, [r7, #1]
 800189c:	461a      	mov	r2, r3
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d3ab      	bcc.n	80017fc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d005      	beq.n	80018ba <ssd1306_WriteChar+0x106>
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	3a20      	subs	r2, #32
 80018b4:	440a      	add	r2, r1
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	e000      	b.n	80018bc <ssd1306_WriteChar+0x108>
 80018ba:	783a      	ldrb	r2, [r7, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <ssd1306_WriteChar+0x11c>)
 80018c2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	240007a4 	.word	0x240007a4

080018d4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	4638      	mov	r0, r7
 80018de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80018e2:	e013      	b.n	800190c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	7818      	ldrb	r0, [r3, #0]
 80018e8:	7e3b      	ldrb	r3, [r7, #24]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	463b      	mov	r3, r7
 80018ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f0:	f7ff ff60 	bl	80017b4 <ssd1306_WriteChar>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d002      	beq.n	8001906 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	e008      	b.n	8001918 <ssd1306_WriteString+0x44>
        }
        str++;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e7      	bne.n	80018e4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	781b      	ldrb	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <ssd1306_SetCursor+0x2c>)
 8001936:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <ssd1306_SetCursor+0x2c>)
 800193e:	805a      	strh	r2, [r3, #2]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	240007a4 	.word	0x240007a4

08001950 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800195a:	2381      	movs	r3, #129	@ 0x81
 800195c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fdf7 	bl	8001554 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fdf3 	bl	8001554 <ssd1306_WriteCommand>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001988:	23af      	movs	r3, #175	@ 0xaf
 800198a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <ssd1306_SetDisplayOn+0x38>)
 800198e:	2201      	movs	r2, #1
 8001990:	715a      	strb	r2, [r3, #5]
 8001992:	e004      	b.n	800199e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001994:	23ae      	movs	r3, #174	@ 0xae
 8001996:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <ssd1306_SetDisplayOn+0x38>)
 800199a:	2200      	movs	r2, #0
 800199c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fdd7 	bl	8001554 <ssd1306_WriteCommand>
}
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	240007a4 	.word	0x240007a4

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_MspInit+0x30>)
 80019bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019c0:	4a08      	ldr	r2, [pc, #32]	@ (80019e4 <HAL_MspInit+0x30>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_MspInit+0x30>)
 80019cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	58024400 	.word	0x58024400

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019fa:	4807      	ldr	r0, [pc, #28]	@ (8001a18 <HardFault_Handler+0x28>)
 80019fc:	f000 fe3b 	bl	8002676 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	e002      	b.n	8001a0c <HardFault_Handler+0x1c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <HardFault_Handler+0x2c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	ddf8      	ble.n	8001a06 <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a14:	e7ef      	b.n	80019f6 <HardFault_Handler+0x6>
 8001a16:	bf00      	nop
 8001a18:	58020800 	.word	0x58020800
 8001a1c:	000f423f 	.word	0x000f423f

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 fa71 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <TIM2_IRQHandler+0x18>)
 8001a76:	f007 f9f4 	bl	8008e62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a7e:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <TIM2_IRQHandler+0x1c>)
 8001a80:	f000 fdf9 	bl	8002676 <HAL_GPIO_TogglePin>
 //HAL_Delay(1000);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	240007b0 	.word	0x240007b0
 8001a8c:	58020800 	.word	0x58020800

08001a90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <SPI1_IRQHandler+0x10>)
 8001a96:	f001 fbef 	bl	8003278 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	240002ac 	.word	0x240002ac

08001aa4 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001aaa:	f002 fa64 	bl	8003f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	24001ce0 	.word	0x24001ce0

08001ab8 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001abe:	f002 fa5a 	bl	8003f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	24001ce0 	.word	0x24001ce0

08001acc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <OTG_HS_IRQHandler+0x10>)
 8001ad2:	f002 fa50 	bl	8003f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24001ce0 	.word	0x24001ce0

08001ae0 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <SPDIF_RX_IRQHandler+0x10>)
 8001ae6:	f007 f881 	bl	8008bec <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	24000354 	.word	0x24000354

08001af4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e00a      	b.n	8001b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b06:	f3af 8000 	nop.w
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	60ba      	str	r2, [r7, #8]
 8001b12:	b2ca      	uxtb	r2, r1
 8001b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbf0      	blt.n	8001b06 <_read+0x12>
  }

  return len;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e009      	b.n	8001b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf1      	blt.n	8001b40 <_write+0x12>
  }
  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_close>:

int _close(int file)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_isatty>:

int _isatty(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	@ (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f00c f8ea 	bl	800ddd8 <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	24100000 	.word	0x24100000
 8001c30:	00001000 	.word	0x00001000
 8001c34:	240007ac 	.word	0x240007ac
 8001c38:	24002530 	.word	0x24002530

08001c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <SystemInit+0xd0>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c46:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <SystemInit+0xd0>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c50:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <SystemInit+0xd4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d807      	bhi.n	8001c6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d10 <SystemInit+0xd4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 030f 	bic.w	r3, r3, #15
 8001c64:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <SystemInit+0xd4>)
 8001c66:	f043 0303 	orr.w	r3, r3, #3
 8001c6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <SystemInit+0xd8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <SystemInit+0xd8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c78:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <SystemInit+0xd8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <SystemInit+0xd8>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4924      	ldr	r1, [pc, #144]	@ (8001d14 <SystemInit+0xd8>)
 8001c84:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <SystemInit+0xdc>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <SystemInit+0xd4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c96:	4b1e      	ldr	r3, [pc, #120]	@ (8001d10 <SystemInit+0xd4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 030f 	bic.w	r3, r3, #15
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <SystemInit+0xd4>)
 8001ca0:	f043 0303 	orr.w	r3, r3, #3
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <SystemInit+0xd8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <SystemInit+0xd8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <SystemInit+0xd8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <SystemInit+0xd8>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	@ (8001d1c <SystemInit+0xe0>)
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <SystemInit+0xd8>)
 8001cc0:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <SystemInit+0xe4>)
 8001cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <SystemInit+0xd8>)
 8001cc6:	4a17      	ldr	r2, [pc, #92]	@ (8001d24 <SystemInit+0xe8>)
 8001cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <SystemInit+0xd8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <SystemInit+0xd8>)
 8001cd2:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <SystemInit+0xe8>)
 8001cd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <SystemInit+0xd8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d14 <SystemInit+0xd8>)
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <SystemInit+0xe8>)
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <SystemInit+0xd8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <SystemInit+0xd8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <SystemInit+0xd8>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <SystemInit+0xd8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <SystemInit+0xec>)
 8001cfc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	52002000 	.word	0x52002000
 8001d14:	58024400 	.word	0x58024400
 8001d18:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d1c:	02020200 	.word	0x02020200
 8001d20:	01ff0000 	.word	0x01ff0000
 8001d24:	01010280 	.word	0x01010280
 8001d28:	52004000 	.word	0x52004000

08001d2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d52:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6349205;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d60:	4a18      	ldr	r2, [pc, #96]	@ (8001dc4 <MX_TIM2_Init+0x98>)
 8001d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d70:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d72:	f007 f81f 	bl	8008db4 <HAL_TIM_Base_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d7c:	f7ff face 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001d8e:	f007 f96f 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d98:	f7ff fac0 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_TIM2_Init+0x94>)
 8001daa:	f007 fbc9 	bl	8009540 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001db4:	f7ff fab2 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	240007b0 	.word	0x240007b0
 8001dc4:	0060e195 	.word	0x0060e195

08001dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd8:	d116      	bne.n	8001e08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001ddc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001de0:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_TIM_Base_MspInit+0x48>)
 8001dec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	201c      	movs	r0, #28
 8001dfe:	f000 f9c4 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e02:	201c      	movs	r0, #28
 8001e04:	f000 f9db 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	58024400 	.word	0x58024400

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e18:	f7ff ff10 	bl	8001c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e42:	f00b ffcf 	bl	800dde4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7ff f85d 	bl	8000f04 <main>
  bx  lr
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e54:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001e58:	0800f1bc 	.word	0x0800f1bc
  ldr r2, =_sbss
 8001e5c:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001e60:	24002530 	.word	0x24002530

08001e64 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f980 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e74:	f004 f810 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_Init+0x68>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4913      	ldr	r1, [pc, #76]	@ (8001ed4 <HAL_Init+0x6c>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_Init+0x68>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_Init+0x6c>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <HAL_Init+0x70>)
 8001eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_Init+0x74>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f000 f814 	bl	8001ee0 <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e002      	b.n	8001ec8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff fd77 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	0800f168 	.word	0x0800f168
 8001ed8:	24000004 	.word	0x24000004
 8001edc:	24000000 	.word	0x24000000

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee8:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_InitTick+0x60>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e021      	b.n	8001f38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	@ (8001f44 <HAL_InitTick+0x64>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_InitTick+0x60>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f965 	bl	80021da <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f000 f92f 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_InitTick+0x68>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2400000c 	.word	0x2400000c
 8001f44:	24000000 	.word	0x24000000
 8001f48:	24000008 	.word	0x24000008

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	2400000c 	.word	0x2400000c
 8001f70:	240007fc 	.word	0x240007fc

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	240007fc 	.word	0x240007fc

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2400000c 	.word	0x2400000c

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <__NVIC_SetPriorityGrouping+0x40>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002002:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <__NVIC_SetPriorityGrouping+0x40>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	60d3      	str	r3, [r2, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00
 8002018:	05fa0000 	.word	0x05fa0000

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff40 	bl	800201c <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff90 	bl	80020c8 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5f 	bl	8002074 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff33 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffa4 	bl	8002130 <SysTick_Config>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021f8:	f3bf 8f5f 	dmb	sy
}
 80021fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_MPU_Disable+0x28>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	4a06      	ldr	r2, [pc, #24]	@ (800221c <HAL_MPU_Disable+0x28>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002208:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800220a:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_MPU_Disable+0x2c>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	e000ed90 	.word	0xe000ed90

08002224 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800222c:	4a0b      	ldr	r2, [pc, #44]	@ (800225c <HAL_MPU_Enable+0x38>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_MPU_Enable+0x3c>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_MPU_Enable+0x3c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002242:	f3bf 8f4f 	dsb	sy
}
 8002246:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002248:	f3bf 8f6f 	isb	sy
}
 800224c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed90 	.word	0xe000ed90
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	785a      	ldrb	r2, [r3, #1]
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002272:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	4a19      	ldr	r2, [pc, #100]	@ (80022e0 <HAL_MPU_ConfigRegion+0x7c>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002280:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <HAL_MPU_ConfigRegion+0x7c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7b1b      	ldrb	r3, [r3, #12]
 800228c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7adb      	ldrb	r3, [r3, #11]
 8002292:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7a9b      	ldrb	r3, [r3, #10]
 800229a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800229c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7b5b      	ldrb	r3, [r3, #13]
 80022a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7b9b      	ldrb	r3, [r3, #14]
 80022aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7bdb      	ldrb	r3, [r3, #15]
 80022b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7a5b      	ldrb	r3, [r3, #9]
 80022ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7a1b      	ldrb	r3, [r3, #8]
 80022c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022d0:	6113      	str	r3, [r2, #16]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed90 	.word	0xe000ed90

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022f2:	4b89      	ldr	r3, [pc, #548]	@ (8002518 <HAL_GPIO_Init+0x234>)
 80022f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022f6:	e194      	b.n	8002622 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8186 	beq.w	800261c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d005      	beq.n	8002328 <HAL_GPIO_Init+0x44>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d130      	bne.n	800238a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800235e:	2201      	movs	r2, #1
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0201 	and.w	r2, r3, #1
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b03      	cmp	r3, #3
 8002394:	d017      	beq.n	80023c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d123      	bne.n	800241a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	2203      	movs	r2, #3
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 0203 	and.w	r2, r3, #3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80e0 	beq.w	800261c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HAL_GPIO_Init+0x238>)
 800245e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002462:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_GPIO_Init+0x238>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_GPIO_Init+0x238>)
 800246e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247a:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <HAL_GPIO_Init+0x23c>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_GPIO_Init+0x240>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d052      	beq.n	800254c <HAL_GPIO_Init+0x268>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <HAL_GPIO_Init+0x244>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d031      	beq.n	8002512 <HAL_GPIO_Init+0x22e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_GPIO_Init+0x248>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x22a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <HAL_GPIO_Init+0x24c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x226>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002534 <HAL_GPIO_Init+0x250>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x222>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002538 <HAL_GPIO_Init+0x254>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x21e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <HAL_GPIO_Init+0x258>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x21a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_GPIO_Init+0x25c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x216>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a18      	ldr	r2, [pc, #96]	@ (8002544 <HAL_GPIO_Init+0x260>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x212>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a17      	ldr	r2, [pc, #92]	@ (8002548 <HAL_GPIO_Init+0x264>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x20e>
 80024ee:	2309      	movs	r3, #9
 80024f0:	e02d      	b.n	800254e <HAL_GPIO_Init+0x26a>
 80024f2:	230a      	movs	r3, #10
 80024f4:	e02b      	b.n	800254e <HAL_GPIO_Init+0x26a>
 80024f6:	2308      	movs	r3, #8
 80024f8:	e029      	b.n	800254e <HAL_GPIO_Init+0x26a>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e027      	b.n	800254e <HAL_GPIO_Init+0x26a>
 80024fe:	2306      	movs	r3, #6
 8002500:	e025      	b.n	800254e <HAL_GPIO_Init+0x26a>
 8002502:	2305      	movs	r3, #5
 8002504:	e023      	b.n	800254e <HAL_GPIO_Init+0x26a>
 8002506:	2304      	movs	r3, #4
 8002508:	e021      	b.n	800254e <HAL_GPIO_Init+0x26a>
 800250a:	2303      	movs	r3, #3
 800250c:	e01f      	b.n	800254e <HAL_GPIO_Init+0x26a>
 800250e:	2302      	movs	r3, #2
 8002510:	e01d      	b.n	800254e <HAL_GPIO_Init+0x26a>
 8002512:	2301      	movs	r3, #1
 8002514:	e01b      	b.n	800254e <HAL_GPIO_Init+0x26a>
 8002516:	bf00      	nop
 8002518:	58000080 	.word	0x58000080
 800251c:	58024400 	.word	0x58024400
 8002520:	58000400 	.word	0x58000400
 8002524:	58020000 	.word	0x58020000
 8002528:	58020400 	.word	0x58020400
 800252c:	58020800 	.word	0x58020800
 8002530:	58020c00 	.word	0x58020c00
 8002534:	58021000 	.word	0x58021000
 8002538:	58021400 	.word	0x58021400
 800253c:	58021800 	.word	0x58021800
 8002540:	58021c00 	.word	0x58021c00
 8002544:	58022000 	.word	0x58022000
 8002548:	58022400 	.word	0x58022400
 800254c:	2300      	movs	r3, #0
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f002 0203 	and.w	r2, r2, #3
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	4093      	lsls	r3, r2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255e:	4938      	ldr	r1, [pc, #224]	@ (8002640 <HAL_GPIO_Init+0x35c>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f ae63 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	@ 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	58000400 	.word	0x58000400

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	041a      	lsls	r2, r3, #16
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43d9      	mvns	r1, r3
 8002694:	887b      	ldrh	r3, [r7, #2]
 8002696:	400b      	ands	r3, r1
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e08b      	b.n	80027d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe f966 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	@ 0x24
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	e006      	b.n	8002734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d108      	bne.n	800274e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	e007      	b.n	800275e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_I2C_Init+0x134>)
 800276a:	430b      	orrs	r3, r1
 800276c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69d9      	ldr	r1, [r3, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	02008000 	.word	0x02008000

080027e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 80f9 	bne.w	80029fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_I2C_Mem_Write+0x34>
 8002812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ed      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Write+0x4e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0e6      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283a:	f7ff fb9b 	bl	8001f74 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2319      	movs	r3, #25
 8002846:	2201      	movs	r2, #1
 8002848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f955 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0d1      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	@ 0x21
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002884:	88f8      	ldrh	r0, [r7, #6]
 8002886:	893a      	ldrh	r2, [r7, #8]
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f8b9 	bl	8002a0c <I2C_RequestMemoryWrite>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0a9      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2bff      	cmp	r3, #255	@ 0xff
 80028b4:	d90e      	bls.n	80028d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	@ 0xff
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fad9 	bl	8002e84 <I2C_TransferConfig>
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fac8 	bl	8002e84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f958 	bl	8002bae <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d034      	beq.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8d1 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04d      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	@ 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	@ 0xff
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa7d 	bl	8002e84 <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fa6c 	bl	8002e84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d19e      	bne.n	80028f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f93e 	bl	8002c3c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01a      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_I2C_Mem_Write+0x224>)
 80029de:	400b      	ands	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	fe00e800 	.word	0xfe00e800

08002a0c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <I2C_RequestMemoryWrite+0xa4>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa25 	bl	8002e84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8b5 	bl	8002bae <I2C_WaitOnTXISFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e02c      	b.n	8002aa8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a54:	893b      	ldrh	r3, [r7, #8]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a5e:	e015      	b.n	8002a8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a60:	893b      	ldrh	r3, [r7, #8]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	69b9      	ldr	r1, [r7, #24]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f89b 	bl	8002bae <I2C_WaitOnTXISFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e012      	b.n	8002aa8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a82:	893b      	ldrh	r3, [r7, #8]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2180      	movs	r1, #128	@ 0x80
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f830 	bl	8002afc <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	80002000 	.word	0x80002000

08002ab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d007      	beq.n	8002af0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	619a      	str	r2, [r3, #24]
  }
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0c:	e03b      	b.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8d6 	bl	8002cc4 <I2C_IsErrorOccurred>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e041      	b.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d02d      	beq.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7ff fa23 	bl	8001f74 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d122      	bne.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d113      	bne.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d0b4      	beq.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bba:	e033      	b.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f87f 	bl	8002cc4 <I2C_IsErrorOccurred>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e031      	b.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d025      	beq.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd8:	f7ff f9cc 	bl	8001f74 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11a      	bne.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d013      	beq.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d1c4      	bne.n	8002bbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c48:	e02f      	b.n	8002caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f838 	bl	8002cc4 <I2C_IsErrorOccurred>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e02d      	b.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7ff f989 	bl	8001f74 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d013      	beq.n	8002caa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e007      	b.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d1c8      	bne.n	8002c4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d068      	beq.n	8002dc2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cf8:	e049      	b.n	8002d8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d045      	beq.n	8002d8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7ff f937 	bl	8001f74 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_IsErrorOccurred+0x54>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d13a      	bne.n	8002d8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d3a:	d121      	bne.n	8002d80 <I2C_IsErrorOccurred+0xbc>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d42:	d01d      	beq.n	8002d80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d01a      	beq.n	8002d80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d5a:	f7ff f90b 	bl	8001f74 <HAL_GetTick>
 8002d5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d60:	e00e      	b.n	8002d80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d62:	f7ff f907 	bl	8001f74 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b19      	cmp	r3, #25
 8002d6e:	d907      	bls.n	8002d80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f043 0320 	orr.w	r3, r3, #32
 8002d76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d7e:	e006      	b.n	8002d8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d1e9      	bne.n	8002d62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d003      	beq.n	8002da4 <I2C_IsErrorOccurred+0xe0>
 8002d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0aa      	beq.n	8002cfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2220      	movs	r2, #32
 8002db2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fe3b 	bl	8002ab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <I2C_IsErrorOccurred+0x1bc>)
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3728      	adds	r7, #40	@ 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	817b      	strh	r3, [r7, #10]
 8002e92:	4613      	mov	r3, r2
 8002e94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e9c:	7a7b      	ldrb	r3, [r7, #9]
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	0d5b      	lsrs	r3, r3, #21
 8002ebe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <I2C_TransferConfig+0x60>)
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	ea02 0103 	and.w	r1, r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	03ff63ff 	.word	0x03ff63ff

08002ee8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d138      	bne.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e032      	b.n	8002f72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2224      	movs	r2, #36	@ 0x24
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e000      	b.n	8002f72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d139      	bne.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e033      	b.n	800300a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2224      	movs	r2, #36	@ 0x24
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e11a      	b.n	8003260 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fdd0 	bl	8000be4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d008      	beq.n	800308c <HAL_I2S_Init+0x74>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d004      	beq.n	800308c <HAL_I2S_Init+0x74>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b0a      	cmp	r3, #10
 8003088:	f040 8094 	bne.w	80031b4 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d067      	beq.n	8003164 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 800309c:	2302      	movs	r3, #2
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e001      	b.n	80030a6 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80030a2:	2301      	movs	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b30      	cmp	r3, #48	@ 0x30
 80030ac:	d003      	beq.n	80030b6 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80030b2:	2bb0      	cmp	r3, #176	@ 0xb0
 80030b4:	d102      	bne.n	80030bc <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80030b6:	2301      	movs	r3, #1
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	e001      	b.n	80030c0 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	@ (8003268 <HAL_I2S_Init+0x250>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d107      	bne.n	80030da <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80030ca:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f004 fa5f 	bl	8007594 <HAL_RCCEx_GetPeriphCLKFreq>
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	e006      	b.n	80030e8 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80030da:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f004 fa57 	bl	8007594 <HAL_RCCEx_GetPeriphCLKFreq>
 80030e6:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f0:	d113      	bne.n	800311a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 80030f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	3305      	adds	r3, #5
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	e014      	b.n	8003144 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800311a:	2220      	movs	r2, #32
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	fbb2 f2f3 	udiv	r2, r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	3305      	adds	r3, #5
 8003142:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4a49      	ldr	r2, [pc, #292]	@ (800326c <HAL_I2S_Init+0x254>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e003      	b.n	800316c <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003164:	2302      	movs	r3, #2
 8003166:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_I2S_Init+0x160>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d002      	beq.n	800317e <HAL_I2S_Init+0x166>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2bff      	cmp	r3, #255	@ 0xff
 800317c:	d907      	bls.n	800318e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e068      	b.n	8003260 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800319e:	4b34      	ldr	r3, [pc, #208]	@ (8003270 <HAL_I2S_Init+0x258>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	0411      	lsls	r1, r2, #16
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	0612      	lsls	r2, r2, #24
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003274 <HAL_I2S_Init+0x25c>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6851      	ldr	r1, [r2, #4]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6892      	ldr	r2, [r2, #8]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68d2      	ldr	r2, [r2, #12]
 80031cc:	4311      	orrs	r1, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6992      	ldr	r2, [r2, #24]
 80031d2:	4311      	orrs	r1, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6a12      	ldr	r2, [r2, #32]
 80031d8:	4311      	orrs	r1, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6912      	ldr	r2, [r2, #16]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f640 72f8 	movw	r2, #4088	@ 0xff8
 80031fa:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800320a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d007      	beq.n	800323a <HAL_I2S_Init+0x222>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b06      	cmp	r3, #6
 8003230:	d003      	beq.n	800323a <HAL_I2S_Init+0x222>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b0a      	cmp	r3, #10
 8003238:	d10a      	bne.n	8003250 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58001400 	.word	0x58001400
 800326c:	cccccccd 	.word	0xcccccccd
 8003270:	fe00ffff 	.word	0xfe00ffff
 8003274:	fdff9040 	.word	0xfdff9040

08003278 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d12f      	bne.n	8003304 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_I2S_IRQHandler+0x48>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01c      	beq.n	8003304 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6919      	ldr	r1, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b62      	ldr	r3, [pc, #392]	@ (8003460 <HAL_I2S_IRQHandler+0x1e8>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032e8:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8b2 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b03      	cmp	r3, #3
 800330e:	d12f      	bne.n	8003370 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_I2S_IRQHandler+0xb4>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01c      	beq.n	8003370 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 8003344:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0220 	orr.w	r2, r2, #32
 8003354:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003362:	f043 0204 	orr.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f87c 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b05      	cmp	r3, #5
 800337a:	d16c      	bne.n	8003456 <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_I2S_IRQHandler+0x13a>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_I2S_IRQHandler+0x156>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <HAL_I2S_IRQHandler+0x1ec>)
 80033e4:	400b      	ands	r3, r1
 80033e6:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0220 	orr.w	r2, r2, #32
 80033f6:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f82b 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01c      	beq.n	8003456 <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6919      	ldr	r1, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_I2S_IRQHandler+0x1ec>)
 8003428:	400b      	ands	r3, r1
 800342a:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800343a:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003448:	f043 0202 	orr.w	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f809 	bl	8003468 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	fffffe9e 	.word	0xfffffe9e
 8003464:	fffffe9c 	.word	0xfffffe9c

08003468 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e037      	b.n	8003502 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7fd f906 	bl	80006b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f006 f8ee 	bl	8009698 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	f006 f910 	bl	80096ec <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	f006 f925 	bl	8009726 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0204 	orr.w	r2, r2, #4
 80034ea:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <HAL_NAND_Init+0x90>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <HAL_NAND_Init+0x90>)
 80034f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034f6:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	52004000 	.word	0x52004000

08003510 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d101      	bne.n	8003532 <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	e066      	b.n	8003600 <HAL_NAND_Read_ID+0xf0>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d15f      	bne.n	80035fe <HAL_NAND_Read_ID+0xee>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_NAND_Read_ID+0x3c>
 8003548:	2302      	movs	r3, #2
 800354a:	e059      	b.n	8003600 <HAL_NAND_Read_ID+0xf0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 800355c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003560:	617b      	str	r3, [r7, #20]

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	2290      	movs	r2, #144	@ 0x90
 800356a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800356c:	f3bf 8f4f 	dsb	sy
}
 8003570:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800357c:	f3bf 8f4f 	dsb	sy
}
 8003580:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_NAND_Read_ID+0xa8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b2da      	uxtb	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	0e1b      	lsrs	r3, r3, #24
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	70da      	strb	r2, [r3, #3]
 80035b6:	e018      	b.n	80035ea <HAL_NAND_Read_ID+0xda>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3310      	adds	r3, #16
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_NAND_Read_ID+0xf0>
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	@ 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d101      	bne.n	8003636 <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
 8003634:	e140      	b.n	80038b8 <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	f040 8139 	bne.w	80038b6 <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_NAND_Read_Page_8b+0x46>
 800364e:	2302      	movs	r3, #2
 8003650:	e132      	b.n	80038b8 <HAL_NAND_Read_Page_8b+0x2ac>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8003662:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003666:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	4619      	mov	r1, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	889b      	ldrh	r3, [r3, #4]
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	885b      	ldrh	r3, [r3, #2]
 8003678:	4618      	mov	r0, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367e:	fb00 f303 	mul.w	r3, r0, r3
 8003682:	4413      	add	r3, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	440b      	add	r3, r1
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8003690:	e0fa      	b.n	8003888 <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800369c:	f3bf 8f4f 	dsb	sy
}
 80036a0:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036aa:	d848      	bhi.n	800373e <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d21a      	bcs.n	80036f4 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80036c8:	f3bf 8f4f 	dsb	sy
}
 80036cc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80036da:	f3bf 8f4f 	dsb	sy
}
 80036de:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	0a1a      	lsrs	r2, r3, #8
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80036ee:	f3bf 8f4f 	dsb	sy
}
 80036f2:	e07d      	b.n	80037f0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80036fe:	f3bf 8f4f 	dsb	sy
}
 8003702:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003710:	f3bf 8f4f 	dsb	sy
}
 8003714:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	0a1a      	lsrs	r2, r3, #8
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
}
 8003728:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	0c1a      	lsrs	r2, r3, #16
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003738:	f3bf 8f4f 	dsb	sy
}
 800373c:	e058      	b.n	80037f0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374e:	d222      	bcs.n	8003796 <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800375a:	f3bf 8f4f 	dsb	sy
}
 800375e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800376a:	f3bf 8f4f 	dsb	sy
}
 800376e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800377c:	f3bf 8f4f 	dsb	sy
}
 8003780:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	0a1a      	lsrs	r2, r3, #8
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003790:	f3bf 8f4f 	dsb	sy
}
 8003794:	e02c      	b.n	80037f0 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037a0:	f3bf 8f4f 	dsb	sy
}
 80037a4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037b0:	f3bf 8f4f 	dsb	sy
}
 80037b4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037c2:	f3bf 8f4f 	dsb	sy
}
 80037c6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	0a1a      	lsrs	r2, r3, #8
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d6:	f3bf 8f4f 	dsb	sy
}
 80037da:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	0c1a      	lsrs	r2, r3, #16
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037ea:	f3bf 8f4f 	dsb	sy
}
 80037ee:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f6:	2230      	movs	r2, #48	@ 0x30
 80037f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80037fa:	f3bf 8f4f 	dsb	sy
}
 80037fe:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d123      	bne.n	8003852 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe fbb3 	bl	8001f74 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8003810:	e011      	b.n	8003836 <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8003812:	f7fe fbaf 	bl	8001f74 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003820:	d909      	bls.n	8003836 <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e040      	b.n	80038b8 <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa37 	bl	8003caa <HAL_NAND_Read_Status>
 800383c:	4603      	mov	r3, r0
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	d1e7      	bne.n	8003812 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800384c:	f3bf 8f4f 	dsb	sy
}
 8003850:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003856:	e009      	b.n	800386c <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	701a      	strb	r2, [r3, #0]
        buff++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003868:	3301      	adds	r3, #1
 800386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003872:	429a      	cmp	r2, r3
 8003874:	d3f0      	bcc.n	8003858 <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	3301      	adds	r3, #1
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	3b01      	subs	r3, #1
 8003880:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_NAND_Read_Page_8b+0x296>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389c:	429a      	cmp	r2, r3
 800389e:	f4ff aef8 	bcc.w	8003692 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3730      	adds	r7, #48	@ 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	@ 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d101      	bne.n	80038ea <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
 80038e8:	e13e      	b.n	8003b68 <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 8137 	bne.w	8003b66 <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_NAND_Write_Page_8b+0x46>
 8003902:	2302      	movs	r3, #2
 8003904:	e130      	b.n	8003b68 <HAL_NAND_Write_Page_8b+0x2a8>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8003916:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800391a:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	4619      	mov	r1, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	885b      	ldrh	r3, [r3, #2]
 800392c:	4618      	mov	r0, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	fb00 f303 	mul.w	r3, r0, r3
 8003936:	4413      	add	r3, r2
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	440b      	add	r3, r1
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8003944:	e0f8      	b.n	8003b38 <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003950:	f3bf 8f4f 	dsb	sy
}
 8003954:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395c:	2280      	movs	r2, #128	@ 0x80
 800395e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003960:	f3bf 8f4f 	dsb	sy
}
 8003964:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800396e:	d848      	bhi.n	8003a02 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d21a      	bcs.n	80039b8 <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800398c:	f3bf 8f4f 	dsb	sy
}
 8003990:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800399e:	f3bf 8f4f 	dsb	sy
}
 80039a2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	0a1a      	lsrs	r2, r3, #8
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039b2:	f3bf 8f4f 	dsb	sy
}
 80039b6:	e07d      	b.n	8003ab4 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039c2:	f3bf 8f4f 	dsb	sy
}
 80039c6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039d4:	f3bf 8f4f 	dsb	sy
}
 80039d8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	0a1a      	lsrs	r2, r3, #8
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039e8:	f3bf 8f4f 	dsb	sy
}
 80039ec:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	0c1a      	lsrs	r2, r3, #16
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80039fc:	f3bf 8f4f 	dsb	sy
}
 8003a00:	e058      	b.n	8003ab4 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a0a:	fb02 f303 	mul.w	r3, r2, r3
 8003a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a12:	d222      	bcs.n	8003a5a <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a1e:	f3bf 8f4f 	dsb	sy
}
 8003a22:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a2e:	f3bf 8f4f 	dsb	sy
}
 8003a32:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a40:	f3bf 8f4f 	dsb	sy
}
 8003a44:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	0a1a      	lsrs	r2, r3, #8
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a54:	f3bf 8f4f 	dsb	sy
}
 8003a58:	e02c      	b.n	8003ab4 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a64:	f3bf 8f4f 	dsb	sy
}
 8003a68:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a74:	f3bf 8f4f 	dsb	sy
}
 8003a78:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a86:	f3bf 8f4f 	dsb	sy
}
 8003a8a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	0a1a      	lsrs	r2, r3, #8
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9a:	f3bf 8f4f 	dsb	sy
}
 8003a9e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	0c1a      	lsrs	r2, r3, #16
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aae:	f3bf 8f4f 	dsb	sy
}
 8003ab2:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab8:	e00c      	b.n	8003ad4 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
        buff++;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac8:	f3bf 8f4f 	dsb	sy
}
 8003acc:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8003ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3ed      	bcc.n	8003aba <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae8:	f3bf 8f4f 	dsb	sy
}
 8003aec:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fa41 	bl	8001f74 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8003af4:	e011      	b.n	8003b1a <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8003af6:	f7fe fa3d 	bl	8001f74 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b04:	d909      	bls.n	8003b1a <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e026      	b.n	8003b68 <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f8c5 	bl	8003caa <HAL_NAND_Read_Status>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d1e7      	bne.n	8003af6 <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	3301      	adds	r3, #1
 8003b2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	3301      	adds	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <HAL_NAND_Write_Page_8b+0x292>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f4ff aefa 	bcc.w	8003946 <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3730      	adds	r7, #48	@ 0x30
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d101      	bne.n	8003b8a <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
 8003b88:	e089      	b.n	8003c9e <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f040 8082 	bne.w	8003c9c <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_NAND_Erase_Block+0x36>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e07b      	b.n	8003c9e <HAL_NAND_Erase_Block+0x12e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8003bb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003bba:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc2:	2260      	movs	r2, #96	@ 0x60
 8003bc4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bc6:	f3bf 8f4f 	dsb	sy
}
 8003bca:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	889b      	ldrh	r3, [r3, #4]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	885b      	ldrh	r3, [r3, #2]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	fb00 f303 	mul.w	r3, r0, r3
 8003be6:	440b      	add	r3, r1
 8003be8:	b2d9      	uxtb	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	fb11 f303 	smulbb	r3, r1, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c02:	f3bf 8f4f 	dsb	sy
}
 8003c06:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	889b      	ldrh	r3, [r3, #4]
 8003c12:	461a      	mov	r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	885b      	ldrh	r3, [r3, #2]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	440b      	add	r3, r1
 8003c2e:	0a1a      	lsrs	r2, r3, #8
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c3a:	f3bf 8f4f 	dsb	sy
}
 8003c3e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	889b      	ldrh	r3, [r3, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	885b      	ldrh	r3, [r3, #2]
 8003c50:	4618      	mov	r0, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	440b      	add	r3, r1
 8003c66:	0c1a      	lsrs	r2, r3, #16
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c72:	f3bf 8f4f 	dsb	sy
}
 8003c76:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	22d0      	movs	r2, #208	@ 0xd0
 8003c80:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c82:	f3bf 8f4f 	dsb	sy
}
 8003c86:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8003cb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	2270      	movs	r2, #112	@ 0x70
 8003cc0:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e007      	b.n	8003ce8 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8003ce2:	2340      	movs	r3, #64	@ 0x40
 8003ce4:	e000      	b.n	8003ce8 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8003ce6:	2300      	movs	r3, #0
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0fe      	b.n	8003f04 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f009 fb82 	bl	800d424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 ff26 	bl	8009b7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7c1a      	ldrb	r2, [r3, #16]
 8003d3a:	f88d 2000 	strb.w	r2, [sp]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d42:	f005 fdf7 	bl	8009934 <USB_CoreInit>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d5      	b.n	8003f04 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f005 ff1e 	bl	8009ba0 <USB_SetCurrentMode>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0c6      	b.n	8003f04 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e04a      	b.n	8003e12 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3315      	adds	r3, #21
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3314      	adds	r3, #20
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	b298      	uxth	r0, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	332e      	adds	r3, #46	@ 0x2e
 8003db8:	4602      	mov	r2, r0
 8003dba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3318      	adds	r3, #24
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	331c      	adds	r3, #28
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3320      	adds	r3, #32
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3324      	adds	r3, #36	@ 0x24
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3af      	bcc.n	8003d7c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e044      	b.n	8003eac <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3b5      	bcc.n	8003e22 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7c1a      	ldrb	r2, [r3, #16]
 8003ebe:	f88d 2000 	strb.w	r2, [sp]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec6:	f005 feb7 	bl	8009c38 <USB_DevInit>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e013      	b.n	8003f04 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7b1b      	ldrb	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d102      	bne.n	8003ef8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 f96e 	bl	80051d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f006 fefa 	bl	800acf6 <USB_DevDisconnect>

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_PCD_Start+0x1c>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e022      	b.n	8003f6e <HAL_PCD_Start+0x62>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f005 fe01 	bl	8009b5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f006 fea8 	bl	800acb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f76:	b590      	push	{r4, r7, lr}
 8003f78:	b08d      	sub	sp, #52	@ 0x34
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f006 ff66 	bl	800ae5e <USB_GetMode>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 84b9 	bne.w	800490c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 feca 	bl	800ad38 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 84af 	beq.w	800490a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f006 feb7 	bl	800ad38 <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d107      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f002 0202 	and.w	r2, r2, #2
 8003fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f006 fea5 	bl	800ad38 <USB_ReadInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d161      	bne.n	80040bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0210 	bic.w	r2, r2, #16
 8004006:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	0c5b      	lsrs	r3, r3, #17
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2b02      	cmp	r3, #2
 8004032:	d124      	bne.n	800407e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d035      	beq.n	80040ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800404a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	6a38      	ldr	r0, [r7, #32]
 8004054:	f006 fcdc 	bl	800aa10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004064:	441a      	add	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004076:	441a      	add	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	615a      	str	r2, [r3, #20]
 800407c:	e016      	b.n	80040ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	0c5b      	lsrs	r3, r3, #17
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	2b06      	cmp	r3, #6
 8004088:	d110      	bne.n	80040ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004090:	2208      	movs	r2, #8
 8004092:	4619      	mov	r1, r3
 8004094:	6a38      	ldr	r0, [r7, #32]
 8004096:	f006 fcbb 	bl	800aa10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a6:	441a      	add	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0210 	orr.w	r2, r2, #16
 80040ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f006 fe39 	bl	800ad38 <USB_ReadInterrupts>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040d0:	f040 80a7 	bne.w	8004222 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f006 fe3e 	bl	800ad5e <USB_ReadDevAllOutEpInterrupt>
 80040e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040e4:	e099      	b.n	800421a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 808e 	beq.w	800420e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f006 fe62 	bl	800adc6 <USB_ReadDevOutEPInterrupt>
 8004102:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411a:	461a      	mov	r2, r3
 800411c:	2301      	movs	r3, #1
 800411e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fed0 	bl	8004ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	2308      	movs	r3, #8
 8004142:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 ffa6 	bl	8005098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004162:	461a      	mov	r2, r3
 8004164:	2310      	movs	r3, #16
 8004166:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d030      	beq.n	80041d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d109      	bne.n	8004192 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800418c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004190:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	3304      	adds	r3, #4
 80041a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	78db      	ldrb	r3, [r3, #3]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d108      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f009 fa89 	bl	800d6d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	2302      	movs	r3, #2
 80041d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	461a      	mov	r2, r3
 80041ec:	2320      	movs	r3, #32
 80041ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004206:	461a      	mov	r2, r3
 8004208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800420c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	3301      	adds	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f af62 	bne.w	80040e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f006 fd86 	bl	800ad38 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004236:	f040 80db 	bne.w	80043f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f006 fda7 	bl	800ad92 <USB_ReadDevAllInEpInterrupt>
 8004244:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800424a:	e0cd      	b.n	80043e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80c2 	beq.w	80043dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f006 fdcd 	bl	800ae02 <USB_ReadDevInEPInterrupt>
 8004268:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d057      	beq.n	8004324 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	2201      	movs	r2, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43db      	mvns	r3, r3
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004294:	4013      	ands	r3, r2
 8004296:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a4:	461a      	mov	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	799b      	ldrb	r3, [r3, #6]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d132      	bne.n	8004318 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	3320      	adds	r3, #32
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	331c      	adds	r3, #28
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4419      	add	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4403      	add	r3, r0
 80042e6:	3320      	adds	r3, #32
 80042e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d113      	bne.n	8004318 <HAL_PCD_IRQHandler+0x3a2>
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	3324      	adds	r3, #36	@ 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d108      	bne.n	8004318 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004310:	461a      	mov	r2, r3
 8004312:	2101      	movs	r1, #1
 8004314:	f006 fdd6 	bl	800aec4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	b2db      	uxtb	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f009 f953 	bl	800d5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433a:	461a      	mov	r2, r3
 800433c:	2308      	movs	r3, #8
 800433e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	461a      	mov	r2, r3
 8004358:	2310      	movs	r3, #16
 800435a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	2340      	movs	r3, #64	@ 0x40
 8004376:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004384:	6a38      	ldr	r0, [r7, #32]
 8004386:	f005 fdb5 	bl	8009ef4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3310      	adds	r3, #16
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	3304      	adds	r3, #4
 800439c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	78db      	ldrb	r3, [r3, #3]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d108      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f009 f9a0 	bl	800d6f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	2302      	movs	r3, #2
 80043c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fcea 	bl	8004db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	3301      	adds	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f47f af2e 	bne.w	800424c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f006 fc9f 	bl	800ad38 <USB_ReadInterrupts>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004404:	d122      	bne.n	800444c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004420:	2b01      	cmp	r3, #1
 8004422:	d108      	bne.n	8004436 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800442c:	2100      	movs	r1, #0
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fef4 	bl	800521c <HAL_PCDEx_LPM_Callback>
 8004434:	e002      	b.n	800443c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f009 f93e 	bl	800d6b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800444a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f006 fc71 	bl	800ad38 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004460:	d112      	bne.n	8004488 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d102      	bne.n	8004478 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f009 f8fa 	bl	800d66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004486:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f006 fc53 	bl	800ad38 <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800449c:	d121      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80044ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d111      	bne.n	80044dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	f003 020f 	and.w	r2, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044d2:	2101      	movs	r1, #1
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fea1 	bl	800521c <HAL_PCDEx_LPM_Callback>
 80044da:	e002      	b.n	80044e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f009 f8c5 	bl	800d66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f006 fc26 	bl	800ad38 <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f6:	f040 80b7 	bne.w	8004668 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2110      	movs	r1, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fced 	bl	8009ef4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451e:	e046      	b.n	80045ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452c:	461a      	mov	r2, r3
 800452e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004532:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800454e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004552:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004566:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004582:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004586:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	3301      	adds	r3, #1
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d3b2      	bcc.n	8004520 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7bdb      	ldrb	r3, [r3, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e6:	f043 030b 	orr.w	r3, r3, #11
 80045ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fc:	f043 030b 	orr.w	r3, r3, #11
 8004600:	6453      	str	r3, [r2, #68]	@ 0x44
 8004602:	e015      	b.n	8004630 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004612:	4619      	mov	r1, r3
 8004614:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004618:	4313      	orrs	r3, r2
 800461a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462a:	f043 030b 	orr.w	r3, r3, #11
 800462e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800463e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004642:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004652:	461a      	mov	r2, r3
 8004654:	f006 fc36 	bl	800aec4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f006 fb63 	bl	800ad38 <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d123      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f006 fbfa 	bl	800ae7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f005 fcaa 	bl	8009fe6 <USB_GetDevSpeed>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681c      	ldr	r4, [r3, #0]
 800469e:	f001 fd75 	bl	800618c <HAL_RCC_GetHCLKFreq>
 80046a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046a8:	461a      	mov	r2, r3
 80046aa:	4620      	mov	r0, r4
 80046ac:	f005 f9b4 	bl	8009a18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f008 ffb2 	bl	800d61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f006 fb34 	bl	800ad38 <USB_ReadInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d10a      	bne.n	80046f0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f008 ff8f 	bl	800d5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f002 0208 	and.w	r2, r2, #8
 80046ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f006 fb1f 	bl	800ad38 <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004700:	2b80      	cmp	r3, #128	@ 0x80
 8004702:	d123      	bne.n	800474c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
 8004714:	e014      	b.n	8004740 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb0a 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	791b      	ldrb	r3, [r3, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	4293      	cmp	r3, r2
 800474a:	d3e4      	bcc.n	8004716 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f006 faf1 	bl	800ad38 <USB_ReadInterrupts>
 8004756:	4603      	mov	r3, r0
 8004758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004760:	d13c      	bne.n	80047dc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
 8004766:	e02b      	b.n	80047c0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3318      	adds	r3, #24
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800478e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	da12      	bge.n	80047ba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3317      	adds	r3, #23
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 faca 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	3301      	adds	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d3cd      	bcc.n	8004768 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f006 faa9 	bl	800ad38 <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d156      	bne.n	80048a0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f2:	2301      	movs	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	e045      	b.n	8004884 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d12e      	bne.n	800487e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	da2b      	bge.n	800487e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	0c1a      	lsrs	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004830:	4053      	eors	r3, r2
 8004832:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004836:	2b00      	cmp	r3, #0
 8004838:	d121      	bne.n	800487e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800487a:	6053      	str	r3, [r2, #4]
            break;
 800487c:	e008      	b.n	8004890 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	461a      	mov	r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	4293      	cmp	r3, r2
 800488e:	d3b3      	bcc.n	80047f8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800489e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f006 fa47 	bl	800ad38 <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d10a      	bne.n	80048cc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f008 ff30 	bl	800d71c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f006 fa31 	bl	800ad38 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d115      	bne.n	800490c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f008 ff20 	bl	800d738 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	e000      	b.n	800490c <HAL_PCD_IRQHandler+0x996>
      return;
 800490a:	bf00      	nop
    }
  }
}
 800490c:	3734      	adds	r7, #52	@ 0x34
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}

08004912 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_PCD_SetAddress+0x1a>
 8004928:	2302      	movs	r3, #2
 800492a:	e012      	b.n	8004952 <HAL_PCD_SetAddress+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f006 f990 	bl	800ac68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	4608      	mov	r0, r1
 8004964:	4611      	mov	r1, r2
 8004966:	461a      	mov	r2, r3
 8004968:	4603      	mov	r3, r0
 800496a:	70fb      	strb	r3, [r7, #3]
 800496c:	460b      	mov	r3, r1
 800496e:	803b      	strh	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497c:	2b00      	cmp	r3, #0
 800497e:	da0f      	bge.n	80049a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3310      	adds	r3, #16
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	705a      	strb	r2, [r3, #1]
 800499e:	e00f      	b.n	80049c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 020f 	and.w	r2, r3, #15
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	3304      	adds	r3, #4
 80049b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	78ba      	ldrb	r2, [r7, #2]
 80049da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049ee:	78bb      	ldrb	r3, [r7, #2]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d102      	bne.n	80049fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_EP_Open+0xae>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e00e      	b.n	8004a26 <HAL_PCD_EP_Open+0xcc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f005 fb0a 	bl	800a030 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0f      	bge.n	8004a62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	3310      	adds	r3, #16
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	3304      	adds	r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	705a      	strb	r2, [r3, #1]
 8004a60:	e00f      	b.n	8004a82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_PCD_EP_Close+0x6e>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e00e      	b.n	8004aba <HAL_PCD_EP_Close+0x8c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f005 fb48 	bl	800a140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2200      	movs	r2, #0
 8004afc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	799b      	ldrb	r3, [r3, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d102      	bne.n	8004b1e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	799b      	ldrb	r3, [r3, #6]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	f005 fbe5 	bl	800a2f8 <USB_EPStartXfer>

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	460b      	mov	r3, r1
 8004b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	7afb      	ldrb	r3, [r7, #11]
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3310      	adds	r3, #16
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	799b      	ldrb	r3, [r3, #6]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d102      	bne.n	8004bc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	799b      	ldrb	r3, [r3, #6]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	f005 fb93 	bl	800a2f8 <USB_EPStartXfer>

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	7912      	ldrb	r2, [r2, #4]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e04f      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0f      	bge.n	8004c22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3310      	adds	r3, #16
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	705a      	strb	r2, [r3, #1]
 8004c20:	e00d      	b.n	8004c3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	3304      	adds	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_PCD_EP_SetStall+0x82>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e01d      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbe>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f005 ff27 	bl	800aac0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7999      	ldrb	r1, [r3, #6]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f006 f91a 	bl	800aec4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	7912      	ldrb	r2, [r2, #4]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e042      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da0f      	bge.n	8004ce8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	705a      	strb	r2, [r3, #1]
 8004ce6:	e00f      	b.n	8004d08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_PCD_EP_ClrStall+0x86>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e00e      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f005 ff30 	bl	800ab9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da0c      	bge.n	8004d7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3310      	adds	r3, #16
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	3304      	adds	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e00c      	b.n	8004d96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f005 fd4f 	bl	800a840 <USB_EPStopXfer>
 8004da2:	4603      	mov	r3, r0
 8004da4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	@ 0x28
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3310      	adds	r3, #16
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d901      	bls.n	8004de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e06b      	b.n	8004ec0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d902      	bls.n	8004e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3303      	adds	r3, #3
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0c:	e02a      	b.n	8004e64 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f005 fda4 	bl	800a994 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d809      	bhi.n	8004e8e <PCD_WriteEmptyTxFifo+0xde>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d203      	bcs.n	8004e8e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1bf      	bne.n	8004e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d811      	bhi.n	8004ebe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eba:	4013      	ands	r3, r2
 8004ebc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	799b      	ldrb	r3, [r3, #6]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d17b      	bne.n	8004ff6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4a61      	ldr	r2, [pc, #388]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f240 80b9 	bls.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b3 	beq.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	e0a7      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	6093      	str	r3, [r2, #8]
 8004f50:	e098      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8093 	bne.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a4b      	ldr	r2, [pc, #300]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d90f      	bls.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	6093      	str	r3, [r2, #8]
 8004f84:	e07e      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d114      	bne.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f005 ff76 	bl	800aec4 <USB_EP0_OutStart>
 8004fd8:	e006      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f008 fad0 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 8004ff4:	e046      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d124      	bne.n	8005048 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800501a:	6093      	str	r3, [r2, #8]
 800501c:	e032      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	461a      	mov	r2, r3
 8005036:	2320      	movs	r3, #32
 8005038:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f008 faa7 	bl	800d594 <HAL_PCD_DataOutStageCallback>
 8005046:	e01d      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d114      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005070:	461a      	mov	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f005 ff26 	bl	800aec4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f008 fa88 	bl	800d594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	4f54300a 	.word	0x4f54300a
 8005094:	4f54310a 	.word	0x4f54310a

08005098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	333c      	adds	r3, #60	@ 0x3c
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d90e      	bls.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f008 fa3f 	bl	800d570 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d90c      	bls.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	799b      	ldrb	r3, [r3, #6]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d108      	bne.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800510c:	461a      	mov	r2, r3
 800510e:	2101      	movs	r1, #1
 8005110:	f005 fed8 	bl	800aec4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	4f54300a 	.word	0x4f54300a

08005124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
 8005130:	4613      	mov	r3, r2
 8005132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005142:	883b      	ldrh	r3, [r7, #0]
 8005144:	0419      	lsls	r1, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	430a      	orrs	r2, r1
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005150:	e028      	b.n	80051a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e00d      	b.n	8005182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3340      	adds	r3, #64	@ 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3301      	adds	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	3b01      	subs	r3, #1
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ec      	bcc.n	8005166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	0418      	lsls	r0, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	3b01      	subs	r3, #1
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4302      	orrs	r2, r0
 800519c:	3340      	adds	r3, #64	@ 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_PCDEx_ActivateLPM+0x44>)
 8005204:	4313      	orrs	r3, r2
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	10000003 	.word	0x10000003

0800521c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	460b      	mov	r3, r1
 8005226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800523c:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d00a      	beq.n	800525e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005248:	4b16      	ldr	r3, [pc, #88]	@ (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d001      	beq.n	800525a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01f      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e01d      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800525e:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	490f      	ldr	r1, [pc, #60]	@ (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4313      	orrs	r3, r2
 800526c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800526e:	f7fc fe81 	bl	8001f74 <HAL_GetTick>
 8005272:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005274:	e009      	b.n	800528a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005276:	f7fc fe7d 	bl	8001f74 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005284:	d901      	bls.n	800528a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e007      	b.n	800529a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800528a:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <HAL_PWREx_ConfigSupply+0x70>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005296:	d1ee      	bne.n	8005276 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024800 	.word	0x58024800

080052a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a04      	ldr	r2, [pc, #16]	@ (80052c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b6:	60d3      	str	r3, [r2, #12]
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	58024800 	.word	0x58024800

080052c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	@ 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	f000 bc1f 	b.w	8005b1a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80b3 	beq.w	8005450 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ea:	4b95      	ldr	r3, [pc, #596]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f4:	4b92      	ldr	r3, [pc, #584]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80052f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d007      	beq.n	8005310 <HAL_RCC_OscConfig+0x48>
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	2b18      	cmp	r3, #24
 8005304:	d112      	bne.n	800532c <HAL_RCC_OscConfig+0x64>
 8005306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d10d      	bne.n	800532c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4b8b      	ldr	r3, [pc, #556]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8098 	beq.w	800544e <HAL_RCC_OscConfig+0x186>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 8093 	bne.w	800544e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e3f6      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005334:	d106      	bne.n	8005344 <HAL_RCC_OscConfig+0x7c>
 8005336:	4b82      	ldr	r3, [pc, #520]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a81      	ldr	r2, [pc, #516]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800533c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e058      	b.n	80053f6 <HAL_RCC_OscConfig+0x12e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d112      	bne.n	8005372 <HAL_RCC_OscConfig+0xaa>
 800534c:	4b7c      	ldr	r3, [pc, #496]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7b      	ldr	r2, [pc, #492]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b79      	ldr	r3, [pc, #484]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a78      	ldr	r2, [pc, #480]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800535e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b76      	ldr	r3, [pc, #472]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a75      	ldr	r2, [pc, #468]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e041      	b.n	80053f6 <HAL_RCC_OscConfig+0x12e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800537a:	d112      	bne.n	80053a2 <HAL_RCC_OscConfig+0xda>
 800537c:	4b70      	ldr	r3, [pc, #448]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6f      	ldr	r2, [pc, #444]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005382:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4b6d      	ldr	r3, [pc, #436]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6c      	ldr	r2, [pc, #432]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800538e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a69      	ldr	r2, [pc, #420]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e029      	b.n	80053f6 <HAL_RCC_OscConfig+0x12e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80053aa:	d112      	bne.n	80053d2 <HAL_RCC_OscConfig+0x10a>
 80053ac:	4b64      	ldr	r3, [pc, #400]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a63      	ldr	r2, [pc, #396]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b61      	ldr	r3, [pc, #388]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a60      	ldr	r2, [pc, #384]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e011      	b.n	80053f6 <HAL_RCC_OscConfig+0x12e>
 80053d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a5a      	ldr	r2, [pc, #360]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b58      	ldr	r3, [pc, #352]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a54      	ldr	r2, [pc, #336]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80053f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d013      	beq.n	8005426 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fe:	f7fc fdb9 	bl	8001f74 <HAL_GetTick>
 8005402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005406:	f7fc fdb5 	bl	8001f74 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	@ 0x64
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e380      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005418:	4b49      	ldr	r3, [pc, #292]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <HAL_RCC_OscConfig+0x13e>
 8005424:	e014      	b.n	8005450 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fc fda5 	bl	8001f74 <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800542e:	f7fc fda1 	bl	8001f74 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b64      	cmp	r3, #100	@ 0x64
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e36c      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005440:	4b3f      	ldr	r3, [pc, #252]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCC_OscConfig+0x166>
 800544c:	e000      	b.n	8005450 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 808c 	beq.w	8005576 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545e:	4b38      	ldr	r3, [pc, #224]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005466:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_RCC_OscConfig+0x1bc>
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b18      	cmp	r3, #24
 8005478:	d137      	bne.n	80054ea <HAL_RCC_OscConfig+0x222>
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d132      	bne.n	80054ea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005484:	4b2e      	ldr	r3, [pc, #184]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_OscConfig+0x1d4>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e33e      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800549c:	4b28      	ldr	r3, [pc, #160]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f023 0219 	bic.w	r2, r3, #25
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4925      	ldr	r1, [pc, #148]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fc fd61 	bl	8001f74 <HAL_GetTick>
 80054b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b6:	f7fc fd5d 	bl	8001f74 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e328      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	4917      	ldr	r1, [pc, #92]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e8:	e045      	b.n	8005576 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d028      	beq.n	8005544 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054f2:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 0219 	bic.w	r2, r3, #25
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4910      	ldr	r1, [pc, #64]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fc fd36 	bl	8001f74 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550c:	f7fc fd32 	bl	8001f74 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e2fd      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800551e:	4b08      	ldr	r3, [pc, #32]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	4901      	ldr	r1, [pc, #4]	@ (8005540 <HAL_RCC_OscConfig+0x278>)
 800553a:	4313      	orrs	r3, r2
 800553c:	604b      	str	r3, [r1, #4]
 800553e:	e01a      	b.n	8005576 <HAL_RCC_OscConfig+0x2ae>
 8005540:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005544:	4b97      	ldr	r3, [pc, #604]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a96      	ldr	r2, [pc, #600]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc fd10 	bl	8001f74 <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005558:	f7fc fd0c 	bl	8001f74 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e2d7      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800556a:	4b8e      	ldr	r3, [pc, #568]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d06a      	beq.n	8005658 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005582:	4b88      	ldr	r3, [pc, #544]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800558a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800558c:	4b85      	ldr	r3, [pc, #532]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800558e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005590:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d007      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2e0>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b18      	cmp	r3, #24
 800559c:	d11b      	bne.n	80055d6 <HAL_RCC_OscConfig+0x30e>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d116      	bne.n	80055d6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055a8:	4b7e      	ldr	r3, [pc, #504]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d005      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2f8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b80      	cmp	r3, #128	@ 0x80
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e2ac      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055c0:	4b78      	ldr	r3, [pc, #480]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	061b      	lsls	r3, r3, #24
 80055ce:	4975      	ldr	r1, [pc, #468]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055d4:	e040      	b.n	8005658 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d023      	beq.n	8005626 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055de:	4b71      	ldr	r3, [pc, #452]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a70      	ldr	r2, [pc, #448]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80055e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fc fcc3 	bl	8001f74 <HAL_GetTick>
 80055ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80055f2:	f7fc fcbf 	bl	8001f74 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e28a      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005604:	4b67      	ldr	r3, [pc, #412]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005610:	4b64      	ldr	r3, [pc, #400]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	061b      	lsls	r3, r3, #24
 800561e:	4961      	ldr	r1, [pc, #388]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	60cb      	str	r3, [r1, #12]
 8005624:	e018      	b.n	8005658 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005626:	4b5f      	ldr	r3, [pc, #380]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a5e      	ldr	r2, [pc, #376]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800562c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fc9f 	bl	8001f74 <HAL_GetTick>
 8005636:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800563a:	f7fc fc9b 	bl	8001f74 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e266      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800564c:	4b55      	ldr	r3, [pc, #340]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d036      	beq.n	80056d2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d019      	beq.n	80056a0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800566c:	4b4d      	ldr	r3, [pc, #308]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800566e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005670:	4a4c      	ldr	r2, [pc, #304]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fc fc7c 	bl	8001f74 <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005680:	f7fc fc78 	bl	8001f74 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e243      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005692:	4b44      	ldr	r3, [pc, #272]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x3b8>
 800569e:	e018      	b.n	80056d2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056a0:	4b40      	ldr	r3, [pc, #256]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80056a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a4:	4a3f      	ldr	r2, [pc, #252]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fc fc62 	bl	8001f74 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fc fc5e 	bl	8001f74 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e229      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056c6:	4b37      	ldr	r3, [pc, #220]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d036      	beq.n	800574c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e6:	4b2f      	ldr	r3, [pc, #188]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2e      	ldr	r2, [pc, #184]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 80056ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80056f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056f2:	f7fc fc3f 	bl	8001f74 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056fa:	f7fc fc3b 	bl	8001f74 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e206      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x432>
 8005718:	e018      	b.n	800574c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571a:	4b22      	ldr	r3, [pc, #136]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005724:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005726:	f7fc fc25 	bl	8001f74 <HAL_GetTick>
 800572a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800572e:	f7fc fc21 	bl	8001f74 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e1ec      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005740:	4b18      	ldr	r3, [pc, #96]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80af 	beq.w	80058b8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800575a:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <HAL_RCC_OscConfig+0x4e0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a12      	ldr	r2, [pc, #72]	@ (80057a8 <HAL_RCC_OscConfig+0x4e0>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005766:	f7fc fc05 	bl	8001f74 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fc fc01 	bl	8001f74 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	@ 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1cc      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005780:	4b09      	ldr	r3, [pc, #36]	@ (80057a8 <HAL_RCC_OscConfig+0x4e0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10b      	bne.n	80057ac <HAL_RCC_OscConfig+0x4e4>
 8005794:	4b03      	ldr	r3, [pc, #12]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005798:	4a02      	ldr	r2, [pc, #8]	@ (80057a4 <HAL_RCC_OscConfig+0x4dc>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a0:	e05b      	b.n	800585a <HAL_RCC_OscConfig+0x592>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
 80057a8:	58024800 	.word	0x58024800
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d112      	bne.n	80057da <HAL_RCC_OscConfig+0x512>
 80057b4:	4b9d      	ldr	r3, [pc, #628]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b8:	4a9c      	ldr	r2, [pc, #624]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c0:	4b9a      	ldr	r3, [pc, #616]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	4a99      	ldr	r2, [pc, #612]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80057cc:	4b97      	ldr	r3, [pc, #604]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d0:	4a96      	ldr	r2, [pc, #600]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057d2:	f023 0304 	bic.w	r3, r3, #4
 80057d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d8:	e03f      	b.n	800585a <HAL_RCC_OscConfig+0x592>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d112      	bne.n	8005808 <HAL_RCC_OscConfig+0x540>
 80057e2:	4b92      	ldr	r3, [pc, #584]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e6:	4a91      	ldr	r2, [pc, #580]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ee:	4b8f      	ldr	r3, [pc, #572]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4a8e      	ldr	r2, [pc, #568]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fa:	4b8c      	ldr	r3, [pc, #560]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	4a8b      	ldr	r2, [pc, #556]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6713      	str	r3, [r2, #112]	@ 0x70
 8005806:	e028      	b.n	800585a <HAL_RCC_OscConfig+0x592>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b85      	cmp	r3, #133	@ 0x85
 800580e:	d112      	bne.n	8005836 <HAL_RCC_OscConfig+0x56e>
 8005810:	4b86      	ldr	r3, [pc, #536]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a85      	ldr	r2, [pc, #532]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005816:	f043 0304 	orr.w	r3, r3, #4
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
 800581c:	4b83      	ldr	r3, [pc, #524]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	4a82      	ldr	r2, [pc, #520]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005826:	6713      	str	r3, [r2, #112]	@ 0x70
 8005828:	4b80      	ldr	r3, [pc, #512]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6713      	str	r3, [r2, #112]	@ 0x70
 8005834:	e011      	b.n	800585a <HAL_RCC_OscConfig+0x592>
 8005836:	4b7d      	ldr	r3, [pc, #500]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6713      	str	r3, [r2, #112]	@ 0x70
 8005842:	4b7a      	ldr	r3, [pc, #488]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005846:	4a79      	ldr	r2, [pc, #484]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	6713      	str	r3, [r2, #112]	@ 0x70
 800584e:	4b77      	ldr	r3, [pc, #476]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	4a76      	ldr	r2, [pc, #472]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005858:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc fb87 	bl	8001f74 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7fc fb83 	bl	8001f74 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e14c      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005880:	4b6a      	ldr	r3, [pc, #424]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ee      	beq.n	800586a <HAL_RCC_OscConfig+0x5a2>
 800588c:	e014      	b.n	80058b8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588e:	f7fc fb71 	bl	8001f74 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fc fb6d 	bl	8001f74 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e136      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058ac:	4b5f      	ldr	r3, [pc, #380]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ee      	bne.n	8005896 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 812b 	beq.w	8005b18 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058c2:	4b5a      	ldr	r3, [pc, #360]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ca:	2b18      	cmp	r3, #24
 80058cc:	f000 80bb 	beq.w	8005a46 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	f040 8095 	bne.w	8005a04 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058da:	4b54      	ldr	r3, [pc, #336]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a53      	ldr	r2, [pc, #332]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80058e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e6:	f7fc fb45 	bl	8001f74 <HAL_GetTick>
 80058ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fc fb41 	bl	8001f74 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e10c      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005900:	4b4a      	ldr	r3, [pc, #296]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f0      	bne.n	80058ee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800590c:	4b47      	ldr	r3, [pc, #284]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800590e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005910:	4b47      	ldr	r3, [pc, #284]	@ (8005a30 <HAL_RCC_OscConfig+0x768>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	430a      	orrs	r2, r1
 8005920:	4942      	ldr	r1, [pc, #264]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005922:	4313      	orrs	r3, r2
 8005924:	628b      	str	r3, [r1, #40]	@ 0x28
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	3b01      	subs	r3, #1
 800592c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005934:	3b01      	subs	r3, #1
 8005936:	025b      	lsls	r3, r3, #9
 8005938:	b29b      	uxth	r3, r3
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005940:	3b01      	subs	r3, #1
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	3b01      	subs	r3, #1
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005956:	4935      	ldr	r1, [pc, #212]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005958:	4313      	orrs	r3, r2
 800595a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800595c:	4b33      	ldr	r3, [pc, #204]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	4a32      	ldr	r2, [pc, #200]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005968:	4b30      	ldr	r3, [pc, #192]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800596a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596c:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <HAL_RCC_OscConfig+0x76c>)
 800596e:	4013      	ands	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005974:	00d2      	lsls	r2, r2, #3
 8005976:	492d      	ldr	r1, [pc, #180]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005978:	4313      	orrs	r3, r2
 800597a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800597c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	f023 020c 	bic.w	r2, r3, #12
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	4928      	ldr	r1, [pc, #160]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800598a:	4313      	orrs	r3, r2
 800598c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800598e:	4b27      	ldr	r3, [pc, #156]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	f023 0202 	bic.w	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	4924      	ldr	r1, [pc, #144]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 800599c:	4313      	orrs	r3, r2
 800599e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059a0:	4b22      	ldr	r3, [pc, #136]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	4a21      	ldr	r2, [pc, #132]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ac:	4b1f      	ldr	r3, [pc, #124]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059b8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80059c4:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d0:	4b16      	ldr	r3, [pc, #88]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a15      	ldr	r2, [pc, #84]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fc faca 	bl	8001f74 <HAL_GetTick>
 80059e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e4:	f7fc fac6 	bl	8001f74 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e091      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0f0      	beq.n	80059e4 <HAL_RCC_OscConfig+0x71c>
 8005a02:	e089      	b.n	8005b18 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a04:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <HAL_RCC_OscConfig+0x764>)
 8005a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fc fab0 	bl	8001f74 <HAL_GetTick>
 8005a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a16:	e00f      	b.n	8005a38 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fc faac 	bl	8001f74 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d908      	bls.n	8005a38 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e077      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
 8005a2a:	bf00      	nop
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	fffffc0c 	.word	0xfffffc0c
 8005a34:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a38:	4b3a      	ldr	r3, [pc, #232]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e9      	bne.n	8005a18 <HAL_RCC_OscConfig+0x750>
 8005a44:	e068      	b.n	8005b18 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a46:	4b37      	ldr	r3, [pc, #220]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a4c:	4b35      	ldr	r3, [pc, #212]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d031      	beq.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0203 	and.w	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d12a      	bne.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	091b      	lsrs	r3, r3, #4
 8005a6c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d122      	bne.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d11a      	bne.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	0a5b      	lsrs	r3, r3, #9
 8005a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d111      	bne.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d108      	bne.n	8005abe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	0e1b      	lsrs	r3, r3, #24
 8005ab0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e02b      	b.n	8005b1a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ac2:	4b18      	ldr	r3, [pc, #96]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac6:	08db      	lsrs	r3, r3, #3
 8005ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005acc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d01f      	beq.n	8005b18 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005ad8:	4b12      	ldr	r3, [pc, #72]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ae4:	f7fc fa46 	bl	8001f74 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005aea:	bf00      	nop
 8005aec:	f7fc fa42 	bl	8001f74 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d0f9      	beq.n	8005aec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005af8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <HAL_RCC_OscConfig+0x860>)
 8005afe:	4013      	ands	r3, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b04:	00d2      	lsls	r2, r2, #3
 8005b06:	4907      	ldr	r1, [pc, #28]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	4a04      	ldr	r2, [pc, #16]	@ (8005b24 <HAL_RCC_OscConfig+0x85c>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3730      	adds	r7, #48	@ 0x30
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	ffff0007 	.word	0xffff0007

08005b2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e19c      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b8a      	ldr	r3, [pc, #552]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d910      	bls.n	8005b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b87      	ldr	r3, [pc, #540]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 020f 	bic.w	r2, r3, #15
 8005b56:	4985      	ldr	r1, [pc, #532]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	4b83      	ldr	r3, [pc, #524]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e184      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d010      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	4b7b      	ldr	r3, [pc, #492]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d908      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b8c:	4b78      	ldr	r3, [pc, #480]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4975      	ldr	r1, [pc, #468]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	4b70      	ldr	r3, [pc, #448]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d908      	bls.n	8005bcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bba:	4b6d      	ldr	r3, [pc, #436]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	496a      	ldr	r1, [pc, #424]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	4b64      	ldr	r3, [pc, #400]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d908      	bls.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005be8:	4b61      	ldr	r3, [pc, #388]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	495e      	ldr	r1, [pc, #376]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d010      	beq.n	8005c28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	4b59      	ldr	r3, [pc, #356]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d908      	bls.n	8005c28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c16:	4b56      	ldr	r3, [pc, #344]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4953      	ldr	r1, [pc, #332]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	4b4d      	ldr	r3, [pc, #308]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d908      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c44:	4b4a      	ldr	r3, [pc, #296]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f023 020f 	bic.w	r2, r3, #15
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4947      	ldr	r1, [pc, #284]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d055      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c62:	4b43      	ldr	r3, [pc, #268]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4940      	ldr	r1, [pc, #256]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c7c:	4b3c      	ldr	r3, [pc, #240]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d121      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0f6      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c94:	4b36      	ldr	r3, [pc, #216]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d115      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0ea      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cac:	4b30      	ldr	r3, [pc, #192]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0de      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0d6      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ccc:	4b28      	ldr	r3, [pc, #160]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f023 0207 	bic.w	r2, r3, #7
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4925      	ldr	r1, [pc, #148]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cde:	f7fc f949 	bl	8001f74 <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce6:	f7fc f945 	bl	8001f74 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e0be      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d1eb      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d208      	bcs.n	8005d3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d2a:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f023 020f 	bic.w	r2, r3, #15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	490e      	ldr	r1, [pc, #56]	@ (8005d70 <HAL_RCC_ClockConfig+0x244>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d214      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 020f 	bic.w	r2, r3, #15
 8005d52:	4906      	ldr	r1, [pc, #24]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b04      	ldr	r3, [pc, #16]	@ (8005d6c <HAL_RCC_ClockConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d005      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e086      	b.n	8005e7a <HAL_RCC_ClockConfig+0x34e>
 8005d6c:	52002000 	.word	0x52002000
 8005d70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	4b3f      	ldr	r3, [pc, #252]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d208      	bcs.n	8005da2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d90:	4b3c      	ldr	r3, [pc, #240]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	4939      	ldr	r1, [pc, #228]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d208      	bcs.n	8005dd0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dbe:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	492e      	ldr	r1, [pc, #184]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d010      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	4b28      	ldr	r3, [pc, #160]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d208      	bcs.n	8005dfe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005dec:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	4922      	ldr	r1, [pc, #136]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d010      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d208      	bcs.n	8005e2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	4917      	ldr	r1, [pc, #92]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005e2c:	f000 f834 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b14      	ldr	r3, [pc, #80]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	4912      	ldr	r1, [pc, #72]	@ (8005e88 <HAL_RCC_ClockConfig+0x35c>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
 8005e48:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e84 <HAL_RCC_ClockConfig+0x358>)
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	4a0d      	ldr	r2, [pc, #52]	@ (8005e88 <HAL_RCC_ClockConfig+0x35c>)
 8005e54:	5cd3      	ldrb	r3, [r2, r3]
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e60:	4a0a      	ldr	r2, [pc, #40]	@ (8005e8c <HAL_RCC_ClockConfig+0x360>)
 8005e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e64:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <HAL_RCC_ClockConfig+0x364>)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e94 <HAL_RCC_ClockConfig+0x368>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fc f836 	bl	8001ee0 <HAL_InitTick>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	58024400 	.word	0x58024400
 8005e88:	0800f168 	.word	0x0800f168
 8005e8c:	24000004 	.word	0x24000004
 8005e90:	24000000 	.word	0x24000000
 8005e94:	24000008 	.word	0x24000008

08005e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b089      	sub	sp, #36	@ 0x24
 8005e9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9e:	4bb3      	ldr	r3, [pc, #716]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea6:	2b18      	cmp	r3, #24
 8005ea8:	f200 8155 	bhi.w	8006156 <HAL_RCC_GetSysClockFreq+0x2be>
 8005eac:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005f19 	.word	0x08005f19
 8005eb8:	08006157 	.word	0x08006157
 8005ebc:	08006157 	.word	0x08006157
 8005ec0:	08006157 	.word	0x08006157
 8005ec4:	08006157 	.word	0x08006157
 8005ec8:	08006157 	.word	0x08006157
 8005ecc:	08006157 	.word	0x08006157
 8005ed0:	08006157 	.word	0x08006157
 8005ed4:	08005f3f 	.word	0x08005f3f
 8005ed8:	08006157 	.word	0x08006157
 8005edc:	08006157 	.word	0x08006157
 8005ee0:	08006157 	.word	0x08006157
 8005ee4:	08006157 	.word	0x08006157
 8005ee8:	08006157 	.word	0x08006157
 8005eec:	08006157 	.word	0x08006157
 8005ef0:	08006157 	.word	0x08006157
 8005ef4:	08005f45 	.word	0x08005f45
 8005ef8:	08006157 	.word	0x08006157
 8005efc:	08006157 	.word	0x08006157
 8005f00:	08006157 	.word	0x08006157
 8005f04:	08006157 	.word	0x08006157
 8005f08:	08006157 	.word	0x08006157
 8005f0c:	08006157 	.word	0x08006157
 8005f10:	08006157 	.word	0x08006157
 8005f14:	08005f4b 	.word	0x08005f4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b94      	ldr	r3, [pc, #592]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f24:	4b91      	ldr	r3, [pc, #580]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	4a90      	ldr	r2, [pc, #576]	@ (8006170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005f36:	e111      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f38:	4b8d      	ldr	r3, [pc, #564]	@ (8006170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f3a:	61bb      	str	r3, [r7, #24]
      break;
 8005f3c:	e10e      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f40:	61bb      	str	r3, [r7, #24]
      break;
 8005f42:	e10b      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f44:	4b8c      	ldr	r3, [pc, #560]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f46:	61bb      	str	r3, [r7, #24]
      break;
 8005f48:	e108      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f4a:	4b88      	ldr	r3, [pc, #544]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f54:	4b85      	ldr	r3, [pc, #532]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f60:	4b82      	ldr	r3, [pc, #520]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f6a:	4b80      	ldr	r3, [pc, #512]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80e1 	beq.w	8006150 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	f000 8083 	beq.w	800609c <HAL_RCC_GetSysClockFreq+0x204>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f200 80a1 	bhi.w	80060e0 <HAL_RCC_GetSysClockFreq+0x248>
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x114>
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d056      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005faa:	e099      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fac:	4b6f      	ldr	r3, [pc, #444]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02d      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8006170 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b62      	ldr	r3, [pc, #392]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800617c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006012:	e087      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006180 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b51      	ldr	r3, [pc, #324]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a02 	vldr	s12, [r7, #8]
 800603a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800617c <HAL_RCC_GetSysClockFreq+0x2e4>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006056:	e065      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006184 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b40      	ldr	r3, [pc, #256]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a02 	vldr	s12, [r7, #8]
 800607e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800617c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800609a:	e043      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006188 <HAL_RCC_GetSysClockFreq+0x2f0>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800617c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060de:	e021      	b.n	8006124 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006184 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b1e      	ldr	r3, [pc, #120]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a02 	vldr	s12, [r7, #8]
 8006106:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800617c <HAL_RCC_GetSysClockFreq+0x2e4>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006122:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006124:	4b11      	ldr	r3, [pc, #68]	@ (800616c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612e:	3301      	adds	r3, #1
 8006130:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800613c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006148:	ee17 3a90 	vmov	r3, s15
 800614c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800614e:	e005      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
      break;
 8006154:	e002      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006156:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006158:	61bb      	str	r3, [r7, #24]
      break;
 800615a:	bf00      	nop
  }

  return sysclockfreq;
 800615c:	69bb      	ldr	r3, [r7, #24]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3724      	adds	r7, #36	@ 0x24
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	03d09000 	.word	0x03d09000
 8006174:	003d0900 	.word	0x003d0900
 8006178:	016e3600 	.word	0x016e3600
 800617c:	46000000 	.word	0x46000000
 8006180:	4c742400 	.word	0x4c742400
 8006184:	4a742400 	.word	0x4a742400
 8006188:	4bb71b00 	.word	0x4bb71b00

0800618c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006192:	f7ff fe81 	bl	8005e98 <HAL_RCC_GetSysClockFreq>
 8006196:	4602      	mov	r2, r0
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <HAL_RCC_GetHCLKFreq+0x50>)
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	0a1b      	lsrs	r3, r3, #8
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	490f      	ldr	r1, [pc, #60]	@ (80061e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80061a4:	5ccb      	ldrb	r3, [r1, r3]
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	fa22 f303 	lsr.w	r3, r2, r3
 80061ae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <HAL_RCC_GetHCLKFreq+0x50>)
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80061ba:	5cd3      	ldrb	r3, [r2, r3]
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	4a07      	ldr	r2, [pc, #28]	@ (80061e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80061c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061ca:	4a07      	ldr	r2, [pc, #28]	@ (80061e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80061d0:	4b04      	ldr	r3, [pc, #16]	@ (80061e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80061d2:	681b      	ldr	r3, [r3, #0]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	58024400 	.word	0x58024400
 80061e0:	0800f168 	.word	0x0800f168
 80061e4:	24000004 	.word	0x24000004
 80061e8:	24000000 	.word	0x24000000

080061ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80061f0:	f7ff ffcc 	bl	800618c <HAL_RCC_GetHCLKFreq>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b06      	ldr	r3, [pc, #24]	@ (8006210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	4904      	ldr	r1, [pc, #16]	@ (8006214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006202:	5ccb      	ldrb	r3, [r1, r3]
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800620c:	4618      	mov	r0, r3
 800620e:	bd80      	pop	{r7, pc}
 8006210:	58024400 	.word	0x58024400
 8006214:	0800f168 	.word	0x0800f168

08006218 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800621c:	b0c8      	sub	sp, #288	@ 0x120
 800621e:	af00      	add	r7, sp, #0
 8006220:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006224:	2300      	movs	r3, #0
 8006226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800622a:	2300      	movs	r3, #0
 800622c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800623c:	2500      	movs	r5, #0
 800623e:	ea54 0305 	orrs.w	r3, r4, r5
 8006242:	d049      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800624e:	d02f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006250:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006254:	d828      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800625a:	d01a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800625c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006260:	d822      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800626a:	d007      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800626c:	e01c      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626e:	4ba7      	ldr	r3, [pc, #668]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	4aa6      	ldr	r2, [pc, #664]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800627a:	e01a      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006280:	3308      	adds	r3, #8
 8006282:	2102      	movs	r1, #2
 8006284:	4618      	mov	r0, r3
 8006286:	f002 fa6d 	bl	8008764 <RCCEx_PLL2_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006290:	e00f      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006296:	3328      	adds	r3, #40	@ 0x28
 8006298:	2102      	movs	r1, #2
 800629a:	4618      	mov	r0, r3
 800629c:	f002 fb14 	bl	80088c8 <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80062a6:	e004      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80062b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062ba:	4b94      	ldr	r3, [pc, #592]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c8:	4a90      	ldr	r2, [pc, #576]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ca:	430b      	orrs	r3, r1
 80062cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80062ce:	e003      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	ea58 0309 	orrs.w	r3, r8, r9
 80062ec:	d047      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d82a      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006315 	.word	0x08006315
 8006304:	08006323 	.word	0x08006323
 8006308:	08006339 	.word	0x08006339
 800630c:	08006357 	.word	0x08006357
 8006310:	08006357 	.word	0x08006357
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006314:	4b7d      	ldr	r3, [pc, #500]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	4a7c      	ldr	r2, [pc, #496]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800631a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800631e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006320:	e01a      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006326:	3308      	adds	r3, #8
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f002 fa1a 	bl	8008764 <RCCEx_PLL2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006336:	e00f      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800633c:	3328      	adds	r3, #40	@ 0x28
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f002 fac1 	bl	80088c8 <RCCEx_PLL3_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800634c:	e004      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006354:	e000      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006360:	4b6a      	ldr	r3, [pc, #424]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006364:	f023 0107 	bic.w	r1, r3, #7
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800636c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800636e:	4a67      	ldr	r2, [pc, #412]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006370:	430b      	orrs	r3, r1
 8006372:	6513      	str	r3, [r2, #80]	@ 0x50
 8006374:	e003      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800637a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800637e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800638a:	f04f 0b00 	mov.w	fp, #0
 800638e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006392:	d054      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800639e:	d036      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80063a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063a4:	d82f      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063aa:	d032      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b0:	d829      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b4:	d02f      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80063b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b8:	d825      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d018      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80063be:	2b80      	cmp	r3, #128	@ 0x80
 80063c0:	d821      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d007      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80063ca:	e01c      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063cc:	4b4f      	ldr	r3, [pc, #316]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	4a4e      	ldr	r2, [pc, #312]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063d8:	e01e      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063de:	3308      	adds	r3, #8
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f002 f9be 	bl	8008764 <RCCEx_PLL2_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80063ee:	e013      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	3328      	adds	r3, #40	@ 0x28
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f002 fa65 	bl	80088c8 <RCCEx_PLL3_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006404:	e008      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006420:	4b3a      	ldr	r3, [pc, #232]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006424:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800642c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642e:	4a37      	ldr	r2, [pc, #220]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006430:	430b      	orrs	r3, r1
 8006432:	6513      	str	r3, [r2, #80]	@ 0x50
 8006434:	e003      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800643a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800643e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800644a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800644e:	2300      	movs	r3, #0
 8006450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006454:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006458:	460b      	mov	r3, r1
 800645a:	4313      	orrs	r3, r2
 800645c:	d05c      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800645e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006464:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006468:	d03b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800646a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800646e:	d834      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006474:	d037      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647a:	d82e      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800647c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006480:	d033      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006482:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006486:	d828      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800648c:	d01a      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006492:	d822      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800649c:	d007      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800649e:	e01c      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064a0:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	4a19      	ldr	r2, [pc, #100]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064ac:	e01e      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064b2:	3308      	adds	r3, #8
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f002 f954 	bl	8008764 <RCCEx_PLL2_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064c2:	e013      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064c8:	3328      	adds	r3, #40	@ 0x28
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f002 f9fb 	bl	80088c8 <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80064d8:	e008      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80064ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10d      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006502:	4a02      	ldr	r2, [pc, #8]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6513      	str	r3, [r2, #80]	@ 0x50
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800650a:	bf00      	nop
 800650c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800652e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006532:	460b      	mov	r3, r1
 8006534:	4313      	orrs	r3, r2
 8006536:	d03a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800653c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653e:	2b30      	cmp	r3, #48	@ 0x30
 8006540:	d01f      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006542:	2b30      	cmp	r3, #48	@ 0x30
 8006544:	d819      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006546:	2b20      	cmp	r3, #32
 8006548:	d00c      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d815      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d019      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006552:	2b10      	cmp	r3, #16
 8006554:	d111      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4bae      	ldr	r3, [pc, #696]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4aad      	ldr	r2, [pc, #692]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006562:	e011      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006568:	3308      	adds	r3, #8
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f002 f8f9 	bl	8008764 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006578:	e006      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006582:	bf00      	nop
 8006584:	e000      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006590:	4b9f      	ldr	r3, [pc, #636]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006594:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800659c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659e:	4a9c      	ldr	r2, [pc, #624]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065a4:	e003      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80065ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80065c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d051      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d8:	d035      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80065da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065de:	d82e      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e4:	d031      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80065e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065ea:	d828      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f0:	d01a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f6:	d822      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	d007      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006602:	e01c      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006604:	4b82      	ldr	r3, [pc, #520]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	4a81      	ldr	r2, [pc, #516]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800660a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006610:	e01c      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006616:	3308      	adds	r3, #8
 8006618:	2100      	movs	r1, #0
 800661a:	4618      	mov	r0, r3
 800661c:	f002 f8a2 	bl	8008764 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006626:	e011      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800662c:	3328      	adds	r3, #40	@ 0x28
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f002 f949 	bl	80088c8 <RCCEx_PLL3_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800663c:	e006      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006644:	e002      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800664a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006654:	4b6e      	ldr	r3, [pc, #440]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006662:	4a6b      	ldr	r2, [pc, #428]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006664:	430b      	orrs	r3, r1
 8006666:	6513      	str	r3, [r2, #80]	@ 0x50
 8006668:	e003      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800666e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800667e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006682:	2300      	movs	r3, #0
 8006684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d053      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800669c:	d033      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800669e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a2:	d82c      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a8:	d02f      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80066aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066ae:	d826      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b4:	d02b      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ba:	d820      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c0:	d012      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80066c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c6:	d81a      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d022      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d0:	d115      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066d6:	3308      	adds	r3, #8
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 f842 	bl	8008764 <RCCEx_PLL2_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066e6:	e015      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ec:	3328      	adds	r3, #40	@ 0x28
 80066ee:	2101      	movs	r1, #1
 80066f0:	4618      	mov	r0, r3
 80066f2:	f002 f8e9 	bl	80088c8 <RCCEx_PLL3_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066fc:	e00a      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006704:	e006      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800671c:	4b3c      	ldr	r3, [pc, #240]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800671e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006720:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800672a:	4a39      	ldr	r2, [pc, #228]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800672c:	430b      	orrs	r3, r1
 800672e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006730:	e003      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006736:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800673a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006746:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800674a:	2300      	movs	r3, #0
 800674c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006750:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d060      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800675a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006762:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006766:	d039      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006768:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800676c:	d832      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800676e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006772:	d035      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006778:	d82c      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677e:	d031      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006784:	d826      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006786:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800678a:	d02d      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800678c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006790:	d820      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006796:	d012      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800679c:	d81a      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d024      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80067a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067a6:	d115      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067ac:	3308      	adds	r3, #8
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 ffd7 	bl	8008764 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067bc:	e017      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2101      	movs	r1, #1
 80067c6:	4618      	mov	r0, r3
 80067c8:	f002 f87e 	bl	80088c8 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067d2:	e00c      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067da:	e008      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067dc:	bf00      	nop
 80067de:	e006      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e0:	bf00      	nop
 80067e2:	e004      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e4:	bf00      	nop
 80067e6:	e002      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067e8:	bf00      	nop
 80067ea:	e000      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10e      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006806:	4a02      	ldr	r2, [pc, #8]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6593      	str	r3, [r2, #88]	@ 0x58
 800680c:	e006      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006818:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800681c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800682c:	2300      	movs	r3, #0
 800682e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006832:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d037      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006846:	d00e      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800684c:	d816      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006856:	d111      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006858:	4bc4      	ldr	r3, [pc, #784]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4ac3      	ldr	r2, [pc, #780]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800685e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006864:	e00f      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800686a:	3308      	adds	r3, #8
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f001 ff78 	bl	8008764 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800688e:	4bb7      	ldr	r3, [pc, #732]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006892:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800689c:	4ab3      	ldr	r2, [pc, #716]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80068a2:	e003      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80068ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80068c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d039      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d81c      	bhi.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80068d6:	a201      	add	r2, pc, #4	@ (adr r2, 80068dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006919 	.word	0x08006919
 80068e0:	080068ed 	.word	0x080068ed
 80068e4:	080068fb 	.word	0x080068fb
 80068e8:	08006919 	.word	0x08006919
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ec:	4b9f      	ldr	r3, [pc, #636]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	4a9e      	ldr	r2, [pc, #632]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068f8:	e00f      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068fe:	3308      	adds	r3, #8
 8006900:	2102      	movs	r1, #2
 8006902:	4618      	mov	r0, r3
 8006904:	f001 ff2e 	bl	8008764 <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800690e:	e004      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006916:	e000      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006922:	4b92      	ldr	r3, [pc, #584]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	f023 0103 	bic.w	r1, r3, #3
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006930:	4a8e      	ldr	r2, [pc, #568]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006932:	430b      	orrs	r3, r1
 8006934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006936:	e003      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800693c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800694c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006956:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800695a:	460b      	mov	r3, r1
 800695c:	4313      	orrs	r3, r2
 800695e:	f000 8099 	beq.w	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006962:	4b83      	ldr	r3, [pc, #524]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a82      	ldr	r2, [pc, #520]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800696c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800696e:	f7fb fb01 	bl	8001f74 <HAL_GetTick>
 8006972:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006976:	e00b      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fb fafc 	bl	8001f74 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	@ 0x64
 8006986:	d903      	bls.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800698e:	e005      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006990:	4b77      	ldr	r3, [pc, #476]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0ed      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800699c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d173      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069a4:	4b71      	ldr	r3, [pc, #452]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069b0:	4053      	eors	r3, r2
 80069b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d015      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069ba:	4b6c      	ldr	r3, [pc, #432]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069c6:	4b69      	ldr	r3, [pc, #420]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a68      	ldr	r2, [pc, #416]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069d2:	4b66      	ldr	r3, [pc, #408]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	4a65      	ldr	r2, [pc, #404]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069de:	4a63      	ldr	r2, [pc, #396]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f2:	d118      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f4:	f7fb fabe 	bl	8001f74 <HAL_GetTick>
 80069f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069fc:	e00d      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fe:	f7fb fab9 	bl	8001f74 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006a18:	e005      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a1a:	4b54      	ldr	r3, [pc, #336]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0eb      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006a26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d129      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a3e:	d10e      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a40:	4b4a      	ldr	r3, [pc, #296]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a50:	091a      	lsrs	r2, r3, #4
 8006a52:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	4a45      	ldr	r2, [pc, #276]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	6113      	str	r3, [r2, #16]
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a5e:	4b43      	ldr	r3, [pc, #268]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	4a42      	ldr	r2, [pc, #264]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a68:	6113      	str	r3, [r2, #16]
 8006a6a:	4b40      	ldr	r3, [pc, #256]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a80:	e008      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f002 0301 	and.w	r3, r2, #1
 8006aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f000 8090 	beq.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006abe:	2b28      	cmp	r3, #40	@ 0x28
 8006ac0:	d870      	bhi.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006bad 	.word	0x08006bad
 8006acc:	08006ba5 	.word	0x08006ba5
 8006ad0:	08006ba5 	.word	0x08006ba5
 8006ad4:	08006ba5 	.word	0x08006ba5
 8006ad8:	08006ba5 	.word	0x08006ba5
 8006adc:	08006ba5 	.word	0x08006ba5
 8006ae0:	08006ba5 	.word	0x08006ba5
 8006ae4:	08006ba5 	.word	0x08006ba5
 8006ae8:	08006b79 	.word	0x08006b79
 8006aec:	08006ba5 	.word	0x08006ba5
 8006af0:	08006ba5 	.word	0x08006ba5
 8006af4:	08006ba5 	.word	0x08006ba5
 8006af8:	08006ba5 	.word	0x08006ba5
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006ba5 	.word	0x08006ba5
 8006b08:	08006b8f 	.word	0x08006b8f
 8006b0c:	08006ba5 	.word	0x08006ba5
 8006b10:	08006ba5 	.word	0x08006ba5
 8006b14:	08006ba5 	.word	0x08006ba5
 8006b18:	08006ba5 	.word	0x08006ba5
 8006b1c:	08006ba5 	.word	0x08006ba5
 8006b20:	08006ba5 	.word	0x08006ba5
 8006b24:	08006ba5 	.word	0x08006ba5
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006ba5 	.word	0x08006ba5
 8006b30:	08006ba5 	.word	0x08006ba5
 8006b34:	08006ba5 	.word	0x08006ba5
 8006b38:	08006ba5 	.word	0x08006ba5
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006ba5 	.word	0x08006ba5
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006bad 	.word	0x08006bad
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	58024800 	.word	0x58024800
 8006b74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	2101      	movs	r1, #1
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fdef 	bl	8008764 <RCCEx_PLL2_Config>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b8c:	e00f      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b92:	3328      	adds	r3, #40	@ 0x28
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 fe96 	bl	80088c8 <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ba2:	e004      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bb6:	4bc0      	ldr	r3, [pc, #768]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bc6:	4abc      	ldr	r2, [pc, #752]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f002 0302 	and.w	r3, r2, #2
 8006be2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006be6:	2300      	movs	r3, #0
 8006be8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006bec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d043      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	d824      	bhi.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006c02:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c55 	.word	0x08006c55
 8006c0c:	08006c21 	.word	0x08006c21
 8006c10:	08006c37 	.word	0x08006c37
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c55 	.word	0x08006c55
 8006c1c:	08006c55 	.word	0x08006c55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c24:	3308      	adds	r3, #8
 8006c26:	2101      	movs	r1, #1
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 fd9b 	bl	8008764 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c34:	e00f      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c3a:	3328      	adds	r3, #40	@ 0x28
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 fe42 	bl	80088c8 <RCCEx_PLL3_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e004      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006c52:	e000      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10b      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c5e:	4b96      	ldr	r3, [pc, #600]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	f023 0107 	bic.w	r1, r3, #7
 8006c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6e:	4a92      	ldr	r2, [pc, #584]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f002 0304 	and.w	r3, r2, #4
 8006c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d043      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d824      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cfd 	.word	0x08006cfd
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cdf 	.word	0x08006cdf
 8006cbc:	08006cfd 	.word	0x08006cfd
 8006cc0:	08006cfd 	.word	0x08006cfd
 8006cc4:	08006cfd 	.word	0x08006cfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ccc:	3308      	adds	r3, #8
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 fd47 	bl	8008764 <RCCEx_PLL2_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cdc:	e00f      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ce2:	3328      	adds	r3, #40	@ 0x28
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fdee 	bl	80088c8 <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d06:	4b6c      	ldr	r3, [pc, #432]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0a:	f023 0107 	bic.w	r1, r3, #7
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d16:	4a68      	ldr	r2, [pc, #416]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006d22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0320 	and.w	r3, r2, #32
 8006d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d055      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5e:	d02f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d826      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d70:	d820      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d76:	d012      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7c:	d81a      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d86:	d115      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 fce7 	bl	8008764 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da2:	3328      	adds	r3, #40	@ 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fd8e 	bl	80088c8 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006dba:	e006      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10b      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de2:	4a35      	ldr	r2, [pc, #212]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006de8:	e003      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e02:	2300      	movs	r3, #0
 8006e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d058      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e1e:	d033      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e24:	d82c      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2a:	d02f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e30:	d826      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e36:	d02b      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e3c:	d820      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e42:	d012      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e48:	d81a      	bhi.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d022      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e52:	d115      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fc81 	bl	8008764 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e68:	e015      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e6e:	3328      	adds	r3, #40	@ 0x28
 8006e70:	2102      	movs	r1, #2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fd28 	bl	80088c8 <RCCEx_PLL3_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e7e:	e00a      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e86:	e006      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e88:	bf00      	nop
 8006e8a:	e004      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10e      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006eae:	4a02      	ldr	r2, [pc, #8]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eb4:	e006      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006eb6:	bf00      	nop
 8006eb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d055      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006eec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ef0:	d033      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ef2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ef6:	d82c      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006efc:	d02f      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f02:	d826      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f08:	d02b      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006f0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006f0e:	d820      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f14:	d012      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f1a:	d81a      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d022      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f24:	d115      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 fc18 	bl	8008764 <RCCEx_PLL2_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f3a:	e015      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f40:	3328      	adds	r3, #40	@ 0x28
 8006f42:	2102      	movs	r1, #2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 fcbf 	bl	80088c8 <RCCEx_PLL3_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f50:	e00a      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f70:	4ba1      	ldr	r3, [pc, #644]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f80:	4a9d      	ldr	r2, [pc, #628]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006f82:	430b      	orrs	r3, r1
 8006f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f86:	e003      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f002 0308 	and.w	r3, r2, #8
 8006f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006fa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d01e      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fc2:	3328      	adds	r3, #40	@ 0x28
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fc7e 	bl	80088c8 <RCCEx_PLL3_Config>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fd8:	4b87      	ldr	r3, [pc, #540]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe8:	4a83      	ldr	r2, [pc, #524]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f002 0310 	and.w	r3, r2, #16
 8006ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007004:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d01e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800700e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701a:	d10c      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800701c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007020:	3328      	adds	r3, #40	@ 0x28
 8007022:	2102      	movs	r1, #2
 8007024:	4618      	mov	r0, r3
 8007026:	f001 fc4f 	bl	80088c8 <RCCEx_PLL3_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007036:	4b70      	ldr	r3, [pc, #448]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800703e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007046:	4a6c      	ldr	r2, [pc, #432]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800704c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800705c:	2300      	movs	r3, #0
 800705e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007062:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007066:	460b      	mov	r3, r1
 8007068:	4313      	orrs	r3, r2
 800706a:	d03e      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007070:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007078:	d022      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800707a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800707e:	d81b      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007088:	d00b      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800708a:	e015      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007090:	3308      	adds	r3, #8
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fb65 	bl	8008764 <RCCEx_PLL2_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070a0:	e00f      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070a6:	3328      	adds	r3, #40	@ 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 fc0c 	bl	80088c8 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070ca:	4b4b      	ldr	r3, [pc, #300]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070da:	4a47      	ldr	r2, [pc, #284]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e0:	e003      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070f8:	2300      	movs	r3, #0
 80070fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d03b      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007112:	d01f      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007118:	d818      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800711a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800711e:	d003      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007124:	d007      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007126:	e011      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4b33      	ldr	r3, [pc, #204]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4a32      	ldr	r2, [pc, #200]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007134:	e00f      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800713a:	3328      	adds	r3, #40	@ 0x28
 800713c:	2101      	movs	r1, #1
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fbc2 	bl	80088c8 <RCCEx_PLL3_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800715e:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716e:	4a22      	ldr	r2, [pc, #136]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007170:	430b      	orrs	r3, r1
 8007172:	6553      	str	r3, [r2, #84]	@ 0x54
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800717a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800718a:	673b      	str	r3, [r7, #112]	@ 0x70
 800718c:	2300      	movs	r3, #0
 800718e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007190:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007194:	460b      	mov	r3, r1
 8007196:	4313      	orrs	r3, r2
 8007198:	d034      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a8:	d007      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80071aa:	e011      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b12      	ldr	r3, [pc, #72]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	4a11      	ldr	r2, [pc, #68]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071b8:	e00e      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071be:	3308      	adds	r3, #8
 80071c0:	2102      	movs	r1, #2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 face 	bl	8008764 <RCCEx_PLL2_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071ce:	e003      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10d      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071e0:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ee:	4a02      	ldr	r2, [pc, #8]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071f0:	430b      	orrs	r3, r1
 80071f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007200:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007212:	2300      	movs	r3, #0
 8007214:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007216:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d00c      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007224:	3328      	adds	r3, #40	@ 0x28
 8007226:	2102      	movs	r1, #2
 8007228:	4618      	mov	r0, r3
 800722a:	f001 fb4d 	bl	80088c8 <RCCEx_PLL3_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800723a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007246:	663b      	str	r3, [r7, #96]	@ 0x60
 8007248:	2300      	movs	r3, #0
 800724a:	667b      	str	r3, [r7, #100]	@ 0x64
 800724c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007250:	460b      	mov	r3, r1
 8007252:	4313      	orrs	r3, r2
 8007254:	d038      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007262:	d018      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8007264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007268:	d811      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800726a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726e:	d014      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d80b      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d011      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800727a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727e:	d106      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007280:	4bc3      	ldr	r3, [pc, #780]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007284:	4ac2      	ldr	r2, [pc, #776]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800728a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800728c:	e008      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007294:	e004      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800729e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072a8:	4bb9      	ldr	r3, [pc, #740]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	4ab5      	ldr	r2, [pc, #724]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072ba:	430b      	orrs	r3, r1
 80072bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80072be:	e003      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80072c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d6:	2300      	movs	r3, #0
 80072d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072e4:	4baa      	ldr	r3, [pc, #680]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072f2:	4aa7      	ldr	r2, [pc, #668]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007304:	653b      	str	r3, [r7, #80]	@ 0x50
 8007306:	2300      	movs	r3, #0
 8007308:	657b      	str	r3, [r7, #84]	@ 0x54
 800730a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d009      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007314:	4b9e      	ldr	r3, [pc, #632]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007318:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800731c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	4a9b      	ldr	r2, [pc, #620]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007324:	430b      	orrs	r3, r1
 8007326:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007336:	2300      	movs	r3, #0
 8007338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800733a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800733e:	460b      	mov	r3, r1
 8007340:	4313      	orrs	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007344:	4b92      	ldr	r3, [pc, #584]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800734c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007352:	4a8f      	ldr	r2, [pc, #572]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007364:	643b      	str	r3, [r7, #64]	@ 0x40
 8007366:	2300      	movs	r3, #0
 8007368:	647b      	str	r3, [r7, #68]	@ 0x44
 800736a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007374:	4b86      	ldr	r3, [pc, #536]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4a85      	ldr	r2, [pc, #532]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800737a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800737e:	6113      	str	r3, [r2, #16]
 8007380:	4b83      	ldr	r3, [pc, #524]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007382:	6919      	ldr	r1, [r3, #16]
 8007384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800738c:	4a80      	ldr	r2, [pc, #512]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800738e:	430b      	orrs	r3, r1
 8007390:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800739e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073a0:	2300      	movs	r3, #0
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80073ae:	4b78      	ldr	r3, [pc, #480]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073bc:	4a74      	ldr	r2, [pc, #464]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073be:	430b      	orrs	r3, r1
 80073c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80073ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073d8:	460b      	mov	r3, r1
 80073da:	4313      	orrs	r3, r2
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073de:	4b6c      	ldr	r3, [pc, #432]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80073e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ee:	4a68      	ldr	r2, [pc, #416]	@ (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80073f0:	430b      	orrs	r3, r1
 80073f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	2100      	movs	r1, #0
 80073fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007406:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	d011      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007414:	3308      	adds	r3, #8
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f9a3 	bl	8008764 <RCCEx_PLL2_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d003      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007430:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	2100      	movs	r1, #0
 800743e:	6239      	str	r1, [r7, #32]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
 8007446:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d011      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007454:	3308      	adds	r3, #8
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f001 f983 	bl	8008764 <RCCEx_PLL2_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007470:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	2100      	movs	r1, #0
 800747e:	61b9      	str	r1, [r7, #24]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	d011      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007494:	3308      	adds	r3, #8
 8007496:	2102      	movs	r1, #2
 8007498:	4618      	mov	r0, r3
 800749a:	f001 f963 	bl	8008764 <RCCEx_PLL2_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80074a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80074b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	2100      	movs	r1, #0
 80074be:	6139      	str	r1, [r7, #16]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d011      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d4:	3328      	adds	r3, #40	@ 0x28
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 f9f5 	bl	80088c8 <RCCEx_PLL3_Config>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80074e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	2100      	movs	r1, #0
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800750a:	460b      	mov	r3, r1
 800750c:	4313      	orrs	r3, r2
 800750e:	d011      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007514:	3328      	adds	r3, #40	@ 0x28
 8007516:	2101      	movs	r1, #1
 8007518:	4618      	mov	r0, r3
 800751a:	f001 f9d5 	bl	80088c8 <RCCEx_PLL3_Config>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	2100      	movs	r1, #0
 800753e:	6039      	str	r1, [r7, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	e9d7 1200 	ldrd	r1, r2, [r7]
 800754a:	460b      	mov	r3, r1
 800754c:	4313      	orrs	r3, r2
 800754e:	d011      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	3328      	adds	r3, #40	@ 0x28
 8007556:	2102      	movs	r1, #2
 8007558:	4618      	mov	r0, r3
 800755a:	f001 f9b5 	bl	80088c8 <RCCEx_PLL3_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8007564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8007574:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
}
 8007582:	4618      	mov	r0, r3
 8007584:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007588:	46bd      	mov	sp, r7
 800758a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800758e:	bf00      	nop
 8007590:	58024400 	.word	0x58024400

08007594 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b090      	sub	sp, #64	@ 0x40
 8007598:	af00      	add	r7, sp, #0
 800759a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80075a6:	430b      	orrs	r3, r1
 80075a8:	f040 8094 	bne.w	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80075ac:	4b97      	ldr	r3, [pc, #604]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	f200 8087 	bhi.w	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80075be:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	080075d9 	.word	0x080075d9
 80075c8:	08007601 	.word	0x08007601
 80075cc:	08007629 	.word	0x08007629
 80075d0:	080076c5 	.word	0x080076c5
 80075d4:	08007651 	.word	0x08007651
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075d8:	4b8c      	ldr	r3, [pc, #560]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e4:	d108      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 ff68 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f4:	f000 bc97 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075fc:	f000 bc93 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007600:	4b82      	ldr	r3, [pc, #520]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760c:	d108      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760e:	f107 0318 	add.w	r3, r7, #24
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fcac 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800761c:	f000 bc83 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007624:	f000 bc7f 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007628:	4b78      	ldr	r3, [pc, #480]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007634:	d108      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fdec 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007644:	f000 bc6f 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764c:	f000 bc6b 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007650:	4b6e      	ldr	r3, [pc, #440]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007654:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800765a:	4b6c      	ldr	r3, [pc, #432]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b04      	cmp	r3, #4
 8007664:	d10c      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007668:	2b00      	cmp	r3, #0
 800766a:	d109      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800766c:	4b67      	ldr	r3, [pc, #412]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	08db      	lsrs	r3, r3, #3
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	4a66      	ldr	r2, [pc, #408]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800767e:	e01f      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007680:	4b62      	ldr	r3, [pc, #392]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768c:	d106      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800768e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007694:	d102      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007696:	4b5f      	ldr	r3, [pc, #380]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800769a:	e011      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800769c:	4b5b      	ldr	r3, [pc, #364]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076a8:	d106      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80076aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b0:	d102      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076b2:	4b59      	ldr	r3, [pc, #356]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076b6:	e003      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076bc:	f000 bc33 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80076c0:	f000 bc31 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076c4:	4b55      	ldr	r3, [pc, #340]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c8:	f000 bc2d 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d0:	f000 bc29 	b.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80076d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80076dc:	430b      	orrs	r3, r1
 80076de:	f040 809f 	bne.w	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80076e2:	4b4a      	ldr	r3, [pc, #296]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80076e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80076ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f2:	d04d      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80076f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fa:	f200 8084 	bhi.w	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	2bc0      	cmp	r3, #192	@ 0xc0
 8007702:	d07d      	beq.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	2bc0      	cmp	r3, #192	@ 0xc0
 8007708:	d87d      	bhi.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	2b80      	cmp	r3, #128	@ 0x80
 800770e:	d02d      	beq.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	2b80      	cmp	r3, #128	@ 0x80
 8007714:	d877      	bhi.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	d012      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007722:	e070      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007724:	4b39      	ldr	r3, [pc, #228]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800772c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007730:	d107      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fec2 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007740:	e3f1      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007746:	e3ee      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007748:	4b30      	ldr	r3, [pc, #192]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007754:	d107      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007756:	f107 0318 	add.w	r3, r7, #24
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fc08 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007764:	e3df      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776a:	e3dc      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800776c:	4b27      	ldr	r3, [pc, #156]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007778:	d107      	bne.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fd4a 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007788:	e3cd      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800778e:	e3ca      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007790:	4b1e      	ldr	r3, [pc, #120]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007794:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800779a:	4b1c      	ldr	r3, [pc, #112]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d10c      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ac:	4b17      	ldr	r3, [pc, #92]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	08db      	lsrs	r3, r3, #3
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	4a16      	ldr	r2, [pc, #88]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80077b8:	fa22 f303 	lsr.w	r3, r2, r3
 80077bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077be:	e01e      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077c0:	4b12      	ldr	r3, [pc, #72]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077cc:	d106      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80077ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077d4:	d102      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80077d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077da:	e010      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077dc:	4b0b      	ldr	r3, [pc, #44]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077e8:	d106      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f0:	d102      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80077f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077f6:	e002      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80077fc:	e393      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80077fe:	e392      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007800:	4b06      	ldr	r3, [pc, #24]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007804:	e38f      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800780a:	e38c      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800780c:	58024400 	.word	0x58024400
 8007810:	03d09000 	.word	0x03d09000
 8007814:	003d0900 	.word	0x003d0900
 8007818:	016e3600 	.word	0x016e3600
 800781c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007824:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007828:	430b      	orrs	r3, r1
 800782a:	f040 809c 	bne.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800782e:	4b9e      	ldr	r3, [pc, #632]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007832:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007836:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783e:	d054      	beq.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007846:	f200 808b 	bhi.w	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007850:	f000 8083 	beq.w	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800785a:	f200 8081 	bhi.w	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007864:	d02f      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786c:	d878      	bhi.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800787a:	d012      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800787c:	e070      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800787e:	4b8a      	ldr	r3, [pc, #552]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007886:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800788a:	d107      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800788c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fe15 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800789a:	e344      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a0:	e341      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a2:	4b81      	ldr	r3, [pc, #516]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ae:	d107      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b0:	f107 0318 	add.w	r3, r7, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fb5b 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078be:	e332      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c4:	e32f      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078c6:	4b78      	ldr	r3, [pc, #480]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078d2:	d107      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fc9d 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e2:	e320      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e8:	e31d      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078ea:	4b6f      	ldr	r3, [pc, #444]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80078ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078f4:	4b6c      	ldr	r3, [pc, #432]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d10c      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007906:	4b68      	ldr	r3, [pc, #416]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	08db      	lsrs	r3, r3, #3
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	4a66      	ldr	r2, [pc, #408]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007912:	fa22 f303 	lsr.w	r3, r2, r3
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007918:	e01e      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800791a:	4b63      	ldr	r3, [pc, #396]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007926:	d106      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800792e:	d102      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007930:	4b5f      	ldr	r3, [pc, #380]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007934:	e010      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007936:	4b5c      	ldr	r3, [pc, #368]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007942:	d106      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800794c:	4b59      	ldr	r3, [pc, #356]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007950:	e002      	b.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8007956:	e2e6      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007958:	e2e5      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800795a:	4b57      	ldr	r3, [pc, #348]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800795c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795e:	e2e2      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007964:	e2df      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800796a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800796e:	430b      	orrs	r3, r1
 8007970:	f040 80a7 	bne.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007974:	4b4c      	ldr	r3, [pc, #304]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800797c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007984:	d055      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800798c:	f200 8096 	bhi.w	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007996:	f000 8084 	beq.w	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800799a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079a0:	f200 808c 	bhi.w	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079aa:	d030      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b2:	f200 8083 	bhi.w	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80079b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c2:	d012      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80079c4:	e07a      	b.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079c6:	4b38      	ldr	r3, [pc, #224]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079d2:	d107      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 fd71 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079e2:	e2a0      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079e8:	e29d      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079ea:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f6:	d107      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f8:	f107 0318 	add.w	r3, r7, #24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fab7 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a06:	e28e      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a0c:	e28b      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a0e:	4b26      	ldr	r3, [pc, #152]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a1a:	d107      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fbf9 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a2a:	e27c      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a30:	e279      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a32:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0304 	and.w	r3, r3, #4
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a4e:	4b16      	ldr	r3, [pc, #88]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	08db      	lsrs	r3, r3, #3
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	4a14      	ldr	r2, [pc, #80]	@ (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a60:	e01e      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a62:	4b11      	ldr	r3, [pc, #68]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6e:	d106      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a76:	d102      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7c:	e010      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a92:	d102      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a94:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a98:	e002      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a9e:	e242      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007aa0:	e241      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007aa2:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa6:	e23e      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	003d0900 	.word	0x003d0900
 8007ab4:	016e3600 	.word	0x016e3600
 8007ab8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac0:	e231      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007aca:	430b      	orrs	r3, r1
 8007acc:	f040 8085 	bne.w	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ae0:	d06b      	beq.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ae8:	d874      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af0:	d056      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007af8:	d86c      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b00:	d03b      	beq.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b08:	d864      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b10:	d021      	beq.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b18:	d85c      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b26:	d004      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007b28:	e054      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b2a:	f7fe fb5f 	bl	80061ec <HAL_RCC_GetPCLK1Freq>
 8007b2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b30:	e1f9      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b32:	4b84      	ldr	r3, [pc, #528]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fa13 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b4e:	e1ea      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b54:	e1e7      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b56:	4b7b      	ldr	r3, [pc, #492]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b62:	d107      	bne.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fb55 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b72:	e1d8      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b78:	e1d5      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b7a:	4b72      	ldr	r3, [pc, #456]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d109      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b86:	4b6f      	ldr	r3, [pc, #444]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	08db      	lsrs	r3, r3, #3
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	4a6d      	ldr	r2, [pc, #436]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b92:	fa22 f303 	lsr.w	r3, r2, r3
 8007b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b98:	e1c5      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9e:	e1c2      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007ba0:	4b68      	ldr	r3, [pc, #416]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bac:	d102      	bne.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8007bae:	4b67      	ldr	r3, [pc, #412]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bb2:	e1b8      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb8:	e1b5      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bba:	4b62      	ldr	r3, [pc, #392]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc6:	d102      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8007bc8:	4b61      	ldr	r3, [pc, #388]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bcc:	e1ab      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd2:	e1a8      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e1a5      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bde:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007be2:	430b      	orrs	r3, r1
 8007be4:	d173      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007be6:	4b57      	ldr	r3, [pc, #348]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf6:	d02f      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bfe:	d863      	bhi.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c0c:	d012      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007c0e:	e05b      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c10:	4b4c      	ldr	r3, [pc, #304]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1e:	f107 0318 	add.w	r3, r7, #24
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f9a4 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c2c:	e17b      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c32:	e178      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c34:	4b43      	ldr	r3, [pc, #268]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c40:	d107      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fae6 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c50:	e169      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c56:	e166      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c58:	4b3a      	ldr	r3, [pc, #232]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c62:	4b38      	ldr	r3, [pc, #224]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d10c      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c74:	4b33      	ldr	r3, [pc, #204]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	08db      	lsrs	r3, r3, #3
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	4a32      	ldr	r2, [pc, #200]	@ (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c86:	e01e      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c88:	4b2e      	ldr	r3, [pc, #184]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c9c:	d102      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca2:	e010      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ca4:	4b27      	ldr	r3, [pc, #156]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cb8:	d102      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cba:	4b25      	ldr	r3, [pc, #148]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cbe:	e002      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007cc4:	e12f      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007cc6:	e12e      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e12b      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	d13c      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cda:	4b1a      	ldr	r3, [pc, #104]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ce2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d004      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf0:	d012      	beq.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007cf2:	e023      	b.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cf4:	4b13      	ldr	r3, [pc, #76]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d00:	d107      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fbda 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d10:	e109      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d16:	e106      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d18:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d24:	d107      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d26:	f107 0318 	add.w	r3, r7, #24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 f920 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d34:	e0f7      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d3a:	e0f4      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d40:	e0f1      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007d42:	bf00      	nop
 8007d44:	58024400 	.word	0x58024400
 8007d48:	03d09000 	.word	0x03d09000
 8007d4c:	003d0900 	.word	0x003d0900
 8007d50:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d58:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	f040 8091 	bne.w	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d62:	4b73      	ldr	r3, [pc, #460]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d66:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007d72:	f000 8081 	beq.w	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d78:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007d7c:	d87f      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d84:	d06b      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d8c:	d877      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d94:	d056      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d9c:	d86f      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007da4:	d03b      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007dac:	d867      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db4:	d021      	beq.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dbc:	d85f      	bhi.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dca:	d004      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007dcc:	e057      	b.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007dce:	f000 f8b9 	bl	8007f44 <HAL_RCCEx_GetD3PCLK1Freq>
 8007dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e0a7      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd6:	4b56      	ldr	r3, [pc, #344]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de4:	f107 0318 	add.w	r3, r7, #24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f8c1 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007df2:	e098      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df8:	e095      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e06:	d107      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e08:	f107 030c 	add.w	r3, r7, #12
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fa03 	bl	8008218 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e16:	e086      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e1c:	e083      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e1e:	4b44      	ldr	r3, [pc, #272]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d109      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e2a:	4b41      	ldr	r3, [pc, #260]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	08db      	lsrs	r3, r3, #3
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	4a3f      	ldr	r2, [pc, #252]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3c:	e073      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e42:	e070      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e44:	4b3a      	ldr	r3, [pc, #232]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e50:	d102      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007e52:	4b39      	ldr	r3, [pc, #228]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e56:	e066      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5c:	e063      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e5e:	4b34      	ldr	r3, [pc, #208]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007e6c:	4b33      	ldr	r3, [pc, #204]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e70:	e059      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e76:	e056      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e78:	4b31      	ldr	r3, [pc, #196]	@ (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	e053      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e82:	e050      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e88:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	d148      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e90:	4b27      	ldr	r3, [pc, #156]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea0:	d02a      	beq.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea8:	d838      	bhi.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eb6:	d00d      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007eb8:	e030      	b.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007eba:	4b1d      	ldr	r3, [pc, #116]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec6:	d102      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ecc:	e02b      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed2:	e028      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ed4:	4b16      	ldr	r3, [pc, #88]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee0:	d107      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 faea 	bl	80084c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef0:	e019      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef6:	e016      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f04:	d107      	bne.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f06:	f107 0318 	add.w	r3, r7, #24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f830 	bl	8007f70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f14:	e007      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f20:	e001      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3740      	adds	r7, #64	@ 0x40
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	58024400 	.word	0x58024400
 8007f34:	03d09000 	.word	0x03d09000
 8007f38:	003d0900 	.word	0x003d0900
 8007f3c:	016e3600 	.word	0x016e3600
 8007f40:	00bb8000 	.word	0x00bb8000

08007f44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007f48:	f7fe f920 	bl	800618c <HAL_RCC_GetHCLKFreq>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	4904      	ldr	r1, [pc, #16]	@ (8007f6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f5a:	5ccb      	ldrb	r3, [r1, r3]
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	58024400 	.word	0x58024400
 8007f6c:	0800f168 	.word	0x0800f168

08007f70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b089      	sub	sp, #36	@ 0x24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f78:	4ba1      	ldr	r3, [pc, #644]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f82:	4b9f      	ldr	r3, [pc, #636]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f86:	0b1b      	lsrs	r3, r3, #12
 8007f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f92:	091b      	lsrs	r3, r3, #4
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f9a:	4b99      	ldr	r3, [pc, #612]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9e:	08db      	lsrs	r3, r3, #3
 8007fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8111 	beq.w	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	f000 8083 	beq.w	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	f200 80a1 	bhi.w	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d056      	beq.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007fda:	e099      	b.n	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fdc:	4b88      	ldr	r3, [pc, #544]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02d      	beq.n	8008044 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fe8:	4b85      	ldr	r3, [pc, #532]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	08db      	lsrs	r3, r3, #3
 8007fee:	f003 0303 	and.w	r3, r3, #3
 8007ff2:	4a84      	ldr	r2, [pc, #528]	@ (8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008012:	4b7b      	ldr	r3, [pc, #492]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008022:	ed97 6a03 	vldr	s12, [r7, #12]
 8008026:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008042:	e087      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	ee07 3a90 	vmov	s15, r3
 800804a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800820c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b6a      	ldr	r3, [pc, #424]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008086:	e065      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b59      	ldr	r3, [pc, #356]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ca:	e043      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008214 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b48      	ldr	r3, [pc, #288]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810e:	e021      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b37      	ldr	r3, [pc, #220]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008152:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008154:	4b2a      	ldr	r3, [pc, #168]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008158:	0a5b      	lsrs	r3, r3, #9
 800815a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800816a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800816e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800817a:	ee17 2a90 	vmov	r2, s15
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008182:	4b1f      	ldr	r3, [pc, #124]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800818c:	ee07 3a90 	vmov	s15, r3
 8008190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800819c:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a8:	ee17 2a90 	vmov	r2, s15
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80081b0:	4b13      	ldr	r3, [pc, #76]	@ (8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	0e1b      	lsrs	r3, r3, #24
 80081b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081d6:	ee17 2a90 	vmov	r2, s15
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081de:	e008      	b.n	80081f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	609a      	str	r2, [r3, #8]
}
 80081f2:	bf00      	nop
 80081f4:	3724      	adds	r7, #36	@ 0x24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	58024400 	.word	0x58024400
 8008204:	03d09000 	.word	0x03d09000
 8008208:	46000000 	.word	0x46000000
 800820c:	4c742400 	.word	0x4c742400
 8008210:	4a742400 	.word	0x4a742400
 8008214:	4bb71b00 	.word	0x4bb71b00

08008218 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008218:	b480      	push	{r7}
 800821a:	b089      	sub	sp, #36	@ 0x24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008220:	4ba1      	ldr	r3, [pc, #644]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	f003 0303 	and.w	r3, r3, #3
 8008228:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800822a:	4b9f      	ldr	r3, [pc, #636]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	0d1b      	lsrs	r3, r3, #20
 8008230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008234:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008236:	4b9c      	ldr	r3, [pc, #624]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	0a1b      	lsrs	r3, r3, #8
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008242:	4b99      	ldr	r3, [pc, #612]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008246:	08db      	lsrs	r3, r3, #3
 8008248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8111 	beq.w	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b02      	cmp	r3, #2
 800826a:	f000 8083 	beq.w	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	2b02      	cmp	r3, #2
 8008272:	f200 80a1 	bhi.w	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d056      	beq.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008282:	e099      	b.n	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008284:	4b88      	ldr	r3, [pc, #544]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d02d      	beq.n	80082ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008290:	4b85      	ldr	r3, [pc, #532]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	4a84      	ldr	r2, [pc, #528]	@ (80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
 80082a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b7b      	ldr	r3, [pc, #492]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082ea:	e087      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b6a      	ldr	r3, [pc, #424]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800832e:	e065      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b59      	ldr	r3, [pc, #356]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008372:	e043      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80084bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b48      	ldr	r3, [pc, #288]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b6:	e021      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b37      	ldr	r3, [pc, #220]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083fc:	4b2a      	ldr	r3, [pc, #168]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	0a5b      	lsrs	r3, r3, #9
 8008402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008416:	edd7 6a07 	vldr	s13, [r7, #28]
 800841a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008422:	ee17 2a90 	vmov	r2, s15
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800842a:	4b1f      	ldr	r3, [pc, #124]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	0c1b      	lsrs	r3, r3, #16
 8008430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008444:	edd7 6a07 	vldr	s13, [r7, #28]
 8008448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008450:	ee17 2a90 	vmov	r2, s15
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008458:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	0e1b      	lsrs	r3, r3, #24
 800845e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008462:	ee07 3a90 	vmov	s15, r3
 8008466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800846e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008472:	edd7 6a07 	vldr	s13, [r7, #28]
 8008476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847e:	ee17 2a90 	vmov	r2, s15
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008486:	e008      	b.n	800849a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	609a      	str	r2, [r3, #8]
}
 800849a:	bf00      	nop
 800849c:	3724      	adds	r7, #36	@ 0x24
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	58024400 	.word	0x58024400
 80084ac:	03d09000 	.word	0x03d09000
 80084b0:	46000000 	.word	0x46000000
 80084b4:	4c742400 	.word	0x4c742400
 80084b8:	4a742400 	.word	0x4a742400
 80084bc:	4bb71b00 	.word	0x4bb71b00

080084c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b089      	sub	sp, #36	@ 0x24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084c8:	4ba0      	ldr	r3, [pc, #640]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80084d2:	4b9e      	ldr	r3, [pc, #632]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d6:	091b      	lsrs	r3, r3, #4
 80084d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084de:	4b9b      	ldr	r3, [pc, #620]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084e8:	4b98      	ldr	r3, [pc, #608]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008500:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 8111 	beq.w	800872e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b02      	cmp	r3, #2
 8008510:	f000 8083 	beq.w	800861a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b02      	cmp	r3, #2
 8008518:	f200 80a1 	bhi.w	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d056      	beq.n	80085d6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008528:	e099      	b.n	800865e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800852a:	4b88      	ldr	r3, [pc, #544]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0320 	and.w	r3, r3, #32
 8008532:	2b00      	cmp	r3, #0
 8008534:	d02d      	beq.n	8008592 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008536:	4b85      	ldr	r3, [pc, #532]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	08db      	lsrs	r3, r3, #3
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	4a83      	ldr	r2, [pc, #524]	@ (8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008542:	fa22 f303 	lsr.w	r3, r2, r3
 8008546:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008560:	4b7a      	ldr	r3, [pc, #488]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008568:	ee07 3a90 	vmov	s15, r3
 800856c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008570:	ed97 6a03 	vldr	s12, [r7, #12]
 8008574:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008590:	e087      	b.n	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b69      	ldr	r3, [pc, #420]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d4:	e065      	b.n	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800875c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e8:	4b58      	ldr	r3, [pc, #352]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008618:	e043      	b.n	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008760 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862c:	4b47      	ldr	r3, [pc, #284]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008640:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800865c:	e021      	b.n	80086a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008758 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800866c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008670:	4b36      	ldr	r3, [pc, #216]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008680:	ed97 6a03 	vldr	s12, [r7, #12]
 8008684:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80086a2:	4b2a      	ldr	r3, [pc, #168]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a6:	0a5b      	lsrs	r3, r3, #9
 80086a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80086c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c8:	ee17 2a90 	vmov	r2, s15
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80086d0:	4b1e      	ldr	r3, [pc, #120]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f6:	ee17 2a90 	vmov	r2, s15
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086fe:	4b13      	ldr	r3, [pc, #76]	@ (800874c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008702:	0e1b      	lsrs	r3, r3, #24
 8008704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008710:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008718:	edd7 6a07 	vldr	s13, [r7, #28]
 800871c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008724:	ee17 2a90 	vmov	r2, s15
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800872c:	e008      	b.n	8008740 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	3724      	adds	r7, #36	@ 0x24
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	58024400 	.word	0x58024400
 8008750:	03d09000 	.word	0x03d09000
 8008754:	46000000 	.word	0x46000000
 8008758:	4c742400 	.word	0x4c742400
 800875c:	4a742400 	.word	0x4a742400
 8008760:	4bb71b00 	.word	0x4bb71b00

08008764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008772:	4b53      	ldr	r3, [pc, #332]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d101      	bne.n	8008782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e099      	b.n	80088b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008782:	4b4f      	ldr	r3, [pc, #316]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a4e      	ldr	r2, [pc, #312]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008788:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800878c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800878e:	f7f9 fbf1 	bl	8001f74 <HAL_GetTick>
 8008792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008794:	e008      	b.n	80087a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008796:	f7f9 fbed 	bl	8001f74 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e086      	b.n	80088b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087a8:	4b45      	ldr	r3, [pc, #276]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f0      	bne.n	8008796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087b4:	4b42      	ldr	r3, [pc, #264]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	031b      	lsls	r3, r3, #12
 80087c2:	493f      	ldr	r1, [pc, #252]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	025b      	lsls	r3, r3, #9
 80087da:	b29b      	uxth	r3, r3
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	041b      	lsls	r3, r3, #16
 80087e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	061b      	lsls	r3, r3, #24
 80087f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087f8:	4931      	ldr	r1, [pc, #196]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087fe:	4b30      	ldr	r3, [pc, #192]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	492d      	ldr	r1, [pc, #180]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800880c:	4313      	orrs	r3, r2
 800880e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008810:	4b2b      	ldr	r3, [pc, #172]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	f023 0220 	bic.w	r2, r3, #32
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	4928      	ldr	r1, [pc, #160]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800881e:	4313      	orrs	r3, r2
 8008820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008822:	4b27      	ldr	r3, [pc, #156]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	4a26      	ldr	r2, [pc, #152]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008828:	f023 0310 	bic.w	r3, r3, #16
 800882c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800882e:	4b24      	ldr	r3, [pc, #144]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008830:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008832:	4b24      	ldr	r3, [pc, #144]	@ (80088c4 <RCCEx_PLL2_Config+0x160>)
 8008834:	4013      	ands	r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	69d2      	ldr	r2, [r2, #28]
 800883a:	00d2      	lsls	r2, r2, #3
 800883c:	4920      	ldr	r1, [pc, #128]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008842:	4b1f      	ldr	r3, [pc, #124]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008846:	4a1e      	ldr	r2, [pc, #120]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008848:	f043 0310 	orr.w	r3, r3, #16
 800884c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d106      	bne.n	8008862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008854:	4b1a      	ldr	r3, [pc, #104]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	4a19      	ldr	r2, [pc, #100]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800885a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800885e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008860:	e00f      	b.n	8008882 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d106      	bne.n	8008876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008868:	4b15      	ldr	r3, [pc, #84]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	4a14      	ldr	r2, [pc, #80]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800886e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008874:	e005      	b.n	8008882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008876:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a11      	ldr	r2, [pc, #68]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 800887c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008882:	4b0f      	ldr	r3, [pc, #60]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a0e      	ldr	r2, [pc, #56]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 8008888:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800888c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800888e:	f7f9 fb71 	bl	8001f74 <HAL_GetTick>
 8008892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008894:	e008      	b.n	80088a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008896:	f7f9 fb6d 	bl	8001f74 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e006      	b.n	80088b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088a8:	4b05      	ldr	r3, [pc, #20]	@ (80088c0 <RCCEx_PLL2_Config+0x15c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0f0      	beq.n	8008896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	58024400 	.word	0x58024400
 80088c4:	ffff0007 	.word	0xffff0007

080088c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088d6:	4b53      	ldr	r3, [pc, #332]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d101      	bne.n	80088e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e099      	b.n	8008a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a4e      	ldr	r2, [pc, #312]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f2:	f7f9 fb3f 	bl	8001f74 <HAL_GetTick>
 80088f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088f8:	e008      	b.n	800890c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088fa:	f7f9 fb3b 	bl	8001f74 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d901      	bls.n	800890c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e086      	b.n	8008a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800890c:	4b45      	ldr	r3, [pc, #276]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1f0      	bne.n	80088fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008918:	4b42      	ldr	r3, [pc, #264]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 800891a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	051b      	lsls	r3, r3, #20
 8008926:	493f      	ldr	r1, [pc, #252]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008928:	4313      	orrs	r3, r2
 800892a:	628b      	str	r3, [r1, #40]	@ 0x28
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	3b01      	subs	r3, #1
 8008932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	3b01      	subs	r3, #1
 800893c:	025b      	lsls	r3, r3, #9
 800893e:	b29b      	uxth	r3, r3
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	3b01      	subs	r3, #1
 8008948:	041b      	lsls	r3, r3, #16
 800894a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	3b01      	subs	r3, #1
 8008956:	061b      	lsls	r3, r3, #24
 8008958:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800895c:	4931      	ldr	r1, [pc, #196]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 800895e:	4313      	orrs	r3, r2
 8008960:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008962:	4b30      	ldr	r3, [pc, #192]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	492d      	ldr	r1, [pc, #180]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008970:	4313      	orrs	r3, r2
 8008972:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008974:	4b2b      	ldr	r3, [pc, #172]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008978:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	4928      	ldr	r1, [pc, #160]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008982:	4313      	orrs	r3, r2
 8008984:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008986:	4b27      	ldr	r3, [pc, #156]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	4a26      	ldr	r2, [pc, #152]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 800898c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008990:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008992:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008994:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008996:	4b24      	ldr	r3, [pc, #144]	@ (8008a28 <RCCEx_PLL3_Config+0x160>)
 8008998:	4013      	ands	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	69d2      	ldr	r2, [r2, #28]
 800899e:	00d2      	lsls	r2, r2, #3
 80089a0:	4920      	ldr	r1, [pc, #128]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089bc:	4a19      	ldr	r2, [pc, #100]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80089c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089c4:	e00f      	b.n	80089e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d106      	bne.n	80089da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089cc:	4b15      	ldr	r3, [pc, #84]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d0:	4a14      	ldr	r2, [pc, #80]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089d8:	e005      	b.n	80089e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089da:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	4a11      	ldr	r2, [pc, #68]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 80089ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f2:	f7f9 fabf 	bl	8001f74 <HAL_GetTick>
 80089f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089f8:	e008      	b.n	8008a0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089fa:	f7f9 fabb 	bl	8001f74 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e006      	b.n	8008a1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a0c:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <RCCEx_PLL3_Config+0x15c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f0      	beq.n	80089fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	58024400 	.word	0x58024400
 8008a28:	ffff0007 	.word	0xffff0007

08008a2c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e02b      	b.n	8008a98 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7f7 fe39 	bl	80006cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f000 fe77 	bl	8009760 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	f000 fecb 	bl	8009818 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008a82:	4b07      	ldr	r3, [pc, #28]	@ (8008aa0 <HAL_SDRAM_Init+0x74>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a06      	ldr	r2, [pc, #24]	@ (8008aa0 <HAL_SDRAM_Init+0x74>)
 8008a88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	52004000 	.word	0x52004000

08008aa4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008ab6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d101      	bne.n	8008ac2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e021      	b.n	8008b06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d002      	beq.n	8008ace <HAL_SDRAM_SendCommand+0x2a>
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d118      	bne.n	8008b00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 ff04 	bl	80098ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d104      	bne.n	8008af6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2205      	movs	r2, #5
 8008af0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008af4:	e006      	b.n	8008b04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008afe:	e001      	b.n	8008b04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3718      	adds	r7, #24
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e05e      	b.n	8008be0 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d106      	bne.n	8008b3c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7f8 fc9a 	bl	8001470 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0203 	bic.w	r2, r2, #3
 8008b52:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4b22      	ldr	r3, [pc, #136]	@ (8008be8 <HAL_SPDIFRX_Init+0xd8>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008b6c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008b72:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008b78:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008b7e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008b84:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008b8a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008b90:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8008b96:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8008b9c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d103      	bne.n	8008bb6 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bb4:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d103      	bne.n	8008bc8 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008bc6:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	ffc88407 	.word	0xffc88407

08008bec <HAL_SPDIFRX_IRQHandler>:
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */
void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t itFlag   = hspdif->Instance->SR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itSource = hspdif->Instance->IMR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	60bb      	str	r3, [r7, #8]

  /* SPDIFRX in mode Data Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00b      	beq.n	8008c26 <HAL_SPDIFRX_IRQHandler+0x3a>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <HAL_SPDIFRX_IRQHandler+0x3a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f861 	bl	8008ce8 <SPDIFRX_ReceiveDataFlow_IT>
  }

  /* SPDIFRX in mode Control Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <HAL_SPDIFRX_IRQHandler+0x5c>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <HAL_SPDIFRX_IRQHandler+0x5c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f883 	bl	8008d4e <SPDIFRX_ReceiveControlFlow_IT>
  }

  /* SPDIFRX Overrun error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d011      	beq.n	8008c76 <HAL_SPDIFRX_IRQHandler+0x8a>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00c      	beq.n	8008c76 <HAL_SPDIFRX_IRQHandler+0x8a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2208      	movs	r2, #8
 8008c62:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c68:	f043 0202 	orr.w	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f82f 	bl	8008cd4 <HAL_SPDIFRX_ErrorCallback>
  }

  /* SPDIFRX Parity error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d011      	beq.n	8008ca4 <HAL_SPDIFRX_IRQHandler+0xb8>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00c      	beq.n	8008ca4 <HAL_SPDIFRX_IRQHandler+0xb8>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c96:	f043 0204 	orr.w	r2, r3, #4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f818 	bl	8008cd4 <HAL_SPDIFRX_ErrorCallback>
  }
}
 8008ca4:	bf00      	nop
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_SPDIFRX_RxCpltCallback>:
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_SPDIFRX_CxCpltCallback>:
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_SPDIFRX_ErrorCallback>:
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cf8:	6912      	ldr	r2, [r2, #16]
 8008cfa:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d00:	1d1a      	adds	r2, r3, #4
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspdif->RxXferCount--;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	875a      	strh	r2, [r3, #58]	@ 0x3a

  if (hspdif->RxXferCount == 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d113      	bne.n	8008d46 <SPDIFRX_ReceiveDataFlow_IT+0x5e>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6859      	ldr	r1, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8008d2c:	400b      	ands	r3, r1
 8008d2e:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ffb3 	bl	8008cac <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5e:	6952      	ldr	r2, [r2, #20]
 8008d60:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspdif->CsXferCount--;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspdif->CsXferCount == 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d113      	bne.n	8008dac <SPDIFRX_ReceiveControlFlow_IT+0x5e>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6859      	ldr	r1, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8008d92:	400b      	ands	r3, r1
 8008d94:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff ff8a 	bl	8008cc0 <HAL_SPDIFRX_CxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e049      	b.n	8008e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7f8 fff4 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f000 fa66 	bl	80092c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d020      	beq.n	8008ec6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01b      	beq.n	8008ec6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0202 	mvn.w	r2, #2
 8008e96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f003 0303 	and.w	r3, r3, #3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9eb 	bl	8009288 <HAL_TIM_IC_CaptureCallback>
 8008eb2:	e005      	b.n	8008ec0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f9dd 	bl	8009274 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9ee 	bl	800929c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d020      	beq.n	8008f12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01b      	beq.n	8008f12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f06f 0204 	mvn.w	r2, #4
 8008ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f9c5 	bl	8009288 <HAL_TIM_IC_CaptureCallback>
 8008efe:	e005      	b.n	8008f0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f9b7 	bl	8009274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9c8 	bl	800929c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d020      	beq.n	8008f5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01b      	beq.n	8008f5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f06f 0208 	mvn.w	r2, #8
 8008f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2204      	movs	r2, #4
 8008f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	f003 0303 	and.w	r3, r3, #3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f99f 	bl	8009288 <HAL_TIM_IC_CaptureCallback>
 8008f4a:	e005      	b.n	8008f58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f991 	bl	8009274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f9a2 	bl	800929c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d020      	beq.n	8008faa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01b      	beq.n	8008faa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f06f 0210 	mvn.w	r2, #16
 8008f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2208      	movs	r2, #8
 8008f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f979 	bl	8009288 <HAL_TIM_IC_CaptureCallback>
 8008f96:	e005      	b.n	8008fa4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f96b 	bl	8009274 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f97c 	bl	800929c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00c      	beq.n	8008fce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f06f 0201 	mvn.w	r2, #1
 8008fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f949 	bl	8009260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d104      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fb3a 	bl	8009670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00c      	beq.n	8009020 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fb32 	bl	8009684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800903c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f936 	bl	80092b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00c      	beq.n	8009068 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d007      	beq.n	8009068 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0220 	mvn.w	r2, #32
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fafa 	bl	800965c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIM_ConfigClockSource+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e0dc      	b.n	8009246 <HAL_TIM_ConfigClockSource+0x1d6>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009250 <HAL_TIM_ConfigClockSource+0x1e0>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a64      	ldr	r2, [pc, #400]	@ (8009254 <HAL_TIM_ConfigClockSource+0x1e4>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	f000 80a9 	beq.w	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 80090c8:	4a62      	ldr	r2, [pc, #392]	@ (8009254 <HAL_TIM_ConfigClockSource+0x1e4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	f200 80ae 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 80090d0:	4a61      	ldr	r2, [pc, #388]	@ (8009258 <HAL_TIM_ConfigClockSource+0x1e8>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	f000 80a1 	beq.w	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 80090d8:	4a5f      	ldr	r2, [pc, #380]	@ (8009258 <HAL_TIM_ConfigClockSource+0x1e8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	f200 80a6 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 80090e0:	4a5e      	ldr	r2, [pc, #376]	@ (800925c <HAL_TIM_ConfigClockSource+0x1ec>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	f000 8099 	beq.w	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 80090e8:	4a5c      	ldr	r2, [pc, #368]	@ (800925c <HAL_TIM_ConfigClockSource+0x1ec>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	f200 809e 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 80090f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80090f4:	f000 8091 	beq.w	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 80090f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80090fc:	f200 8096 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 8009100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009104:	f000 8089 	beq.w	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 8009108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800910c:	f200 808e 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 8009110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009114:	d03e      	beq.n	8009194 <HAL_TIM_ConfigClockSource+0x124>
 8009116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800911a:	f200 8087 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 800911e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009122:	f000 8086 	beq.w	8009232 <HAL_TIM_ConfigClockSource+0x1c2>
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912a:	d87f      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 800912c:	2b70      	cmp	r3, #112	@ 0x70
 800912e:	d01a      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0xf6>
 8009130:	2b70      	cmp	r3, #112	@ 0x70
 8009132:	d87b      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 8009134:	2b60      	cmp	r3, #96	@ 0x60
 8009136:	d050      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x16a>
 8009138:	2b60      	cmp	r3, #96	@ 0x60
 800913a:	d877      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 800913c:	2b50      	cmp	r3, #80	@ 0x50
 800913e:	d03c      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x14a>
 8009140:	2b50      	cmp	r3, #80	@ 0x50
 8009142:	d873      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 8009144:	2b40      	cmp	r3, #64	@ 0x40
 8009146:	d058      	beq.n	80091fa <HAL_TIM_ConfigClockSource+0x18a>
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	d86f      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 800914c:	2b30      	cmp	r3, #48	@ 0x30
 800914e:	d064      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 8009150:	2b30      	cmp	r3, #48	@ 0x30
 8009152:	d86b      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 8009154:	2b20      	cmp	r3, #32
 8009156:	d060      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 8009158:	2b20      	cmp	r3, #32
 800915a:	d867      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05c      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 8009160:	2b10      	cmp	r3, #16
 8009162:	d05a      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x1aa>
 8009164:	e062      	b.n	800922c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009176:	f000 f9c3 	bl	8009500 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	609a      	str	r2, [r3, #8]
      break;
 8009192:	e04f      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091a4:	f000 f9ac 	bl	8009500 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091b6:	609a      	str	r2, [r3, #8]
      break;
 80091b8:	e03c      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c6:	461a      	mov	r2, r3
 80091c8:	f000 f91c 	bl	8009404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2150      	movs	r1, #80	@ 0x50
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f976 	bl	80094c4 <TIM_ITRx_SetConfig>
      break;
 80091d8:	e02c      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091e6:	461a      	mov	r2, r3
 80091e8:	f000 f93b 	bl	8009462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2160      	movs	r1, #96	@ 0x60
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f966 	bl	80094c4 <TIM_ITRx_SetConfig>
      break;
 80091f8:	e01c      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009206:	461a      	mov	r2, r3
 8009208:	f000 f8fc 	bl	8009404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2140      	movs	r1, #64	@ 0x40
 8009212:	4618      	mov	r0, r3
 8009214:	f000 f956 	bl	80094c4 <TIM_ITRx_SetConfig>
      break;
 8009218:	e00c      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f000 f94d 	bl	80094c4 <TIM_ITRx_SetConfig>
      break;
 800922a:	e003      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	73fb      	strb	r3, [r7, #15]
      break;
 8009230:	e000      	b.n	8009234 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	ffceff88 	.word	0xffceff88
 8009254:	00100040 	.word	0x00100040
 8009258:	00100030 	.word	0x00100030
 800925c:	00100020 	.word	0x00100020

08009260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a43      	ldr	r2, [pc, #268]	@ (80093e4 <TIM_Base_SetConfig+0x120>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d013      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e2:	d00f      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a40      	ldr	r2, [pc, #256]	@ (80093e8 <TIM_Base_SetConfig+0x124>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00b      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a3f      	ldr	r2, [pc, #252]	@ (80093ec <TIM_Base_SetConfig+0x128>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d007      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a3e      	ldr	r2, [pc, #248]	@ (80093f0 <TIM_Base_SetConfig+0x12c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d003      	beq.n	8009304 <TIM_Base_SetConfig+0x40>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a3d      	ldr	r2, [pc, #244]	@ (80093f4 <TIM_Base_SetConfig+0x130>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d108      	bne.n	8009316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800930a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a32      	ldr	r2, [pc, #200]	@ (80093e4 <TIM_Base_SetConfig+0x120>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01f      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009324:	d01b      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a2f      	ldr	r2, [pc, #188]	@ (80093e8 <TIM_Base_SetConfig+0x124>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d017      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a2e      	ldr	r2, [pc, #184]	@ (80093ec <TIM_Base_SetConfig+0x128>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a2d      	ldr	r2, [pc, #180]	@ (80093f0 <TIM_Base_SetConfig+0x12c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00f      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a2c      	ldr	r2, [pc, #176]	@ (80093f4 <TIM_Base_SetConfig+0x130>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d00b      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a2b      	ldr	r2, [pc, #172]	@ (80093f8 <TIM_Base_SetConfig+0x134>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d007      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a2a      	ldr	r2, [pc, #168]	@ (80093fc <TIM_Base_SetConfig+0x138>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d003      	beq.n	800935e <TIM_Base_SetConfig+0x9a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a29      	ldr	r2, [pc, #164]	@ (8009400 <TIM_Base_SetConfig+0x13c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d108      	bne.n	8009370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a14      	ldr	r2, [pc, #80]	@ (80093e4 <TIM_Base_SetConfig+0x120>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00f      	beq.n	80093b6 <TIM_Base_SetConfig+0xf2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a16      	ldr	r2, [pc, #88]	@ (80093f4 <TIM_Base_SetConfig+0x130>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00b      	beq.n	80093b6 <TIM_Base_SetConfig+0xf2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a15      	ldr	r2, [pc, #84]	@ (80093f8 <TIM_Base_SetConfig+0x134>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d007      	beq.n	80093b6 <TIM_Base_SetConfig+0xf2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a14      	ldr	r2, [pc, #80]	@ (80093fc <TIM_Base_SetConfig+0x138>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d003      	beq.n	80093b6 <TIM_Base_SetConfig+0xf2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a13      	ldr	r2, [pc, #76]	@ (8009400 <TIM_Base_SetConfig+0x13c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d103      	bne.n	80093be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f043 0204 	orr.w	r2, r3, #4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	601a      	str	r2, [r3, #0]
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40010000 	.word	0x40010000
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800
 80093f0:	40000c00 	.word	0x40000c00
 80093f4:	40010400 	.word	0x40010400
 80093f8:	40014000 	.word	0x40014000
 80093fc:	40014400 	.word	0x40014400
 8009400:	40014800 	.word	0x40014800

08009404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f023 0201 	bic.w	r2, r3, #1
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800942e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	011b      	lsls	r3, r3, #4
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	4313      	orrs	r3, r2
 8009438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f023 030a 	bic.w	r3, r3, #10
 8009440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4313      	orrs	r3, r2
 8009448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	621a      	str	r2, [r3, #32]
}
 8009456:	bf00      	nop
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009462:	b480      	push	{r7}
 8009464:	b087      	sub	sp, #28
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	f023 0210 	bic.w	r2, r3, #16
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800948c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	031b      	lsls	r3, r3, #12
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800949e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	011b      	lsls	r3, r3, #4
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
	...

080094c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <TIM_ITRx_SetConfig+0x38>)
 80094d8:	4013      	ands	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f043 0307 	orr.w	r3, r3, #7
 80094e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	609a      	str	r2, [r3, #8]
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	ffcfff8f 	.word	0xffcfff8f

08009500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800951a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	021a      	lsls	r2, r3, #8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	431a      	orrs	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4313      	orrs	r3, r2
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009554:	2302      	movs	r3, #2
 8009556:	e06d      	b.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a30      	ldr	r2, [pc, #192]	@ (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a2f      	ldr	r2, [pc, #188]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d108      	bne.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a20      	ldr	r2, [pc, #128]	@ (8009640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d022      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ca:	d01d      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d018      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a1c      	ldr	r2, [pc, #112]	@ (800964c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009650 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00e      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a15      	ldr	r2, [pc, #84]	@ (8009644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d009      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a16      	ldr	r2, [pc, #88]	@ (8009654 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a15      	ldr	r2, [pc, #84]	@ (8009658 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10c      	bne.n	8009622 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800960e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	40010000 	.word	0x40010000
 8009644:	40010400 	.word	0x40010400
 8009648:	40000400 	.word	0x40000400
 800964c:	40000800 	.word	0x40000800
 8009650:	40000c00 	.word	0x40000c00
 8009654:	40001800 	.word	0x40001800
 8009658:	40014000 	.word	0x40014000

0800965c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <FMC_NAND_Init+0x50>)
 80096a8:	4013      	ands	r3, r2
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	6851      	ldr	r1, [r2, #4]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	6892      	ldr	r2, [r2, #8]
 80096b2:	4311      	orrs	r1, r2
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	68d2      	ldr	r2, [r2, #12]
 80096b8:	4311      	orrs	r1, r2
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	6912      	ldr	r2, [r2, #16]
 80096be:	4311      	orrs	r1, r2
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	6952      	ldr	r2, [r2, #20]
 80096c4:	0252      	lsls	r2, r2, #9
 80096c6:	4311      	orrs	r1, r2
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	6992      	ldr	r2, [r2, #24]
 80096cc:	0352      	lsls	r2, r2, #13
 80096ce:	430a      	orrs	r2, r1
 80096d0:	4313      	orrs	r3, r2
 80096d2:	f043 0208 	orr.w	r2, r3, #8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	fff00189 	.word	0xfff00189

080096ec <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8009702:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800970a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8009712:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 800973c:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8009744:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 800974c:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d121      	bne.n	80097b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	4b27      	ldr	r3, [pc, #156]	@ (8009814 <FMC_SDRAM_Init+0xb4>)
 8009778:	4013      	ands	r3, r2
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	6851      	ldr	r1, [r2, #4]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	6892      	ldr	r2, [r2, #8]
 8009782:	4311      	orrs	r1, r2
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	68d2      	ldr	r2, [r2, #12]
 8009788:	4311      	orrs	r1, r2
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	6912      	ldr	r2, [r2, #16]
 800978e:	4311      	orrs	r1, r2
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	6952      	ldr	r2, [r2, #20]
 8009794:	4311      	orrs	r1, r2
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	6992      	ldr	r2, [r2, #24]
 800979a:	4311      	orrs	r1, r2
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	69d2      	ldr	r2, [r2, #28]
 80097a0:	4311      	orrs	r1, r2
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	6a12      	ldr	r2, [r2, #32]
 80097a6:	4311      	orrs	r1, r2
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80097ac:	430a      	orrs	r2, r1
 80097ae:	431a      	orrs	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e026      	b.n	8009804 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	69d9      	ldr	r1, [r3, #28]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	4319      	orrs	r1, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097cc:	430b      	orrs	r3, r1
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <FMC_SDRAM_Init+0xb4>)
 80097da:	4013      	ands	r3, r2
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	6851      	ldr	r1, [r2, #4]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	6892      	ldr	r2, [r2, #8]
 80097e4:	4311      	orrs	r1, r2
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	68d2      	ldr	r2, [r2, #12]
 80097ea:	4311      	orrs	r1, r2
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	6912      	ldr	r2, [r2, #16]
 80097f0:	4311      	orrs	r1, r2
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	6952      	ldr	r2, [r2, #20]
 80097f6:	4311      	orrs	r1, r2
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	6992      	ldr	r2, [r2, #24]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	ffff8000 	.word	0xffff8000

08009818 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d128      	bne.n	800987c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	1e59      	subs	r1, r3, #1
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	4319      	orrs	r1, r3
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	3b01      	subs	r3, #1
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	4319      	orrs	r1, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	3b01      	subs	r3, #1
 8009852:	031b      	lsls	r3, r3, #12
 8009854:	4319      	orrs	r1, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	3b01      	subs	r3, #1
 800985c:	041b      	lsls	r3, r3, #16
 800985e:	4319      	orrs	r1, r3
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	3b01      	subs	r3, #1
 8009866:	051b      	lsls	r3, r3, #20
 8009868:	4319      	orrs	r1, r3
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	3b01      	subs	r3, #1
 8009870:	061b      	lsls	r3, r3, #24
 8009872:	430b      	orrs	r3, r1
 8009874:	431a      	orrs	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	609a      	str	r2, [r3, #8]
 800987a:	e02d      	b.n	80098d8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	4b19      	ldr	r3, [pc, #100]	@ (80098e8 <FMC_SDRAM_Timing_Init+0xd0>)
 8009882:	4013      	ands	r3, r2
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	68d2      	ldr	r2, [r2, #12]
 8009888:	3a01      	subs	r2, #1
 800988a:	0311      	lsls	r1, r2, #12
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	6952      	ldr	r2, [r2, #20]
 8009890:	3a01      	subs	r2, #1
 8009892:	0512      	lsls	r2, r2, #20
 8009894:	430a      	orrs	r2, r1
 8009896:	431a      	orrs	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	1e59      	subs	r1, r3, #1
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	4319      	orrs	r1, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	4319      	orrs	r1, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	4319      	orrs	r1, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	061b      	lsls	r3, r3, #24
 80098d0:	430b      	orrs	r3, r1
 80098d2:	431a      	orrs	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	ff0f0fff 	.word	0xff0f0fff

080098ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009930 <FMC_SDRAM_SendCommand+0x44>)
 80098fe:	4013      	ands	r3, r2
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	6811      	ldr	r1, [r2, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	6852      	ldr	r2, [r2, #4]
 8009908:	4311      	orrs	r1, r2
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	6892      	ldr	r2, [r2, #8]
 800990e:	3a01      	subs	r2, #1
 8009910:	0152      	lsls	r2, r2, #5
 8009912:	4311      	orrs	r1, r2
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	68d2      	ldr	r2, [r2, #12]
 8009918:	0252      	lsls	r2, r2, #9
 800991a:	430a      	orrs	r2, r1
 800991c:	431a      	orrs	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	ffc00000 	.word	0xffc00000

08009934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009934:	b084      	sub	sp, #16
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	f107 001c 	add.w	r0, r7, #28
 8009942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009946:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800994a:	2b01      	cmp	r3, #1
 800994c:	d121      	bne.n	8009992 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009952:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	4b2c      	ldr	r3, [pc, #176]	@ (8009a10 <USB_CoreInit+0xdc>)
 8009960:	4013      	ands	r3, r2
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009972:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009976:	2b01      	cmp	r3, #1
 8009978:	d105      	bne.n	8009986 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fafa 	bl	800af80 <USB_CoreReset>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
 8009990:	e01b      	b.n	80099ca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 faee 	bl	800af80 <USB_CoreReset>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80099bc:	e005      	b.n	80099ca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099ca:	7fbb      	ldrb	r3, [r7, #30]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d116      	bne.n	80099fe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099de:	4b0d      	ldr	r3, [pc, #52]	@ (8009a14 <USB_CoreInit+0xe0>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f043 0206 	orr.w	r2, r3, #6
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f043 0220 	orr.w	r2, r3, #32
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a0a:	b004      	add	sp, #16
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	ffbdffbf 	.word	0xffbdffbf
 8009a14:	03ee0000 	.word	0x03ee0000

08009a18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d165      	bne.n	8009af8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4a41      	ldr	r2, [pc, #260]	@ (8009b34 <USB_SetTurnaroundTime+0x11c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d906      	bls.n	8009a42 <USB_SetTurnaroundTime+0x2a>
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	4a40      	ldr	r2, [pc, #256]	@ (8009b38 <USB_SetTurnaroundTime+0x120>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d202      	bcs.n	8009a42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a3c:	230f      	movs	r3, #15
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	e062      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4a3c      	ldr	r2, [pc, #240]	@ (8009b38 <USB_SetTurnaroundTime+0x120>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d306      	bcc.n	8009a58 <USB_SetTurnaroundTime+0x40>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b3c <USB_SetTurnaroundTime+0x124>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d202      	bcs.n	8009a58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a52:	230e      	movs	r3, #14
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	e057      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4a38      	ldr	r2, [pc, #224]	@ (8009b3c <USB_SetTurnaroundTime+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d306      	bcc.n	8009a6e <USB_SetTurnaroundTime+0x56>
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4a37      	ldr	r2, [pc, #220]	@ (8009b40 <USB_SetTurnaroundTime+0x128>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d202      	bcs.n	8009a6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a68:	230d      	movs	r3, #13
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	e04c      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4a33      	ldr	r2, [pc, #204]	@ (8009b40 <USB_SetTurnaroundTime+0x128>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d306      	bcc.n	8009a84 <USB_SetTurnaroundTime+0x6c>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4a32      	ldr	r2, [pc, #200]	@ (8009b44 <USB_SetTurnaroundTime+0x12c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d802      	bhi.n	8009a84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a7e:	230c      	movs	r3, #12
 8009a80:	617b      	str	r3, [r7, #20]
 8009a82:	e041      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4a2f      	ldr	r2, [pc, #188]	@ (8009b44 <USB_SetTurnaroundTime+0x12c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d906      	bls.n	8009a9a <USB_SetTurnaroundTime+0x82>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8009b48 <USB_SetTurnaroundTime+0x130>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d802      	bhi.n	8009a9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009a94:	230b      	movs	r3, #11
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e036      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009b48 <USB_SetTurnaroundTime+0x130>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d906      	bls.n	8009ab0 <USB_SetTurnaroundTime+0x98>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4a29      	ldr	r2, [pc, #164]	@ (8009b4c <USB_SetTurnaroundTime+0x134>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d802      	bhi.n	8009ab0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009aaa:	230a      	movs	r3, #10
 8009aac:	617b      	str	r3, [r7, #20]
 8009aae:	e02b      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4a26      	ldr	r2, [pc, #152]	@ (8009b4c <USB_SetTurnaroundTime+0x134>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d906      	bls.n	8009ac6 <USB_SetTurnaroundTime+0xae>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4a25      	ldr	r2, [pc, #148]	@ (8009b50 <USB_SetTurnaroundTime+0x138>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d202      	bcs.n	8009ac6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ac0:	2309      	movs	r3, #9
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e020      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	4a21      	ldr	r2, [pc, #132]	@ (8009b50 <USB_SetTurnaroundTime+0x138>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d306      	bcc.n	8009adc <USB_SetTurnaroundTime+0xc4>
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a20      	ldr	r2, [pc, #128]	@ (8009b54 <USB_SetTurnaroundTime+0x13c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d802      	bhi.n	8009adc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	e015      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4a1d      	ldr	r2, [pc, #116]	@ (8009b54 <USB_SetTurnaroundTime+0x13c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d906      	bls.n	8009af2 <USB_SetTurnaroundTime+0xda>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b58 <USB_SetTurnaroundTime+0x140>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d202      	bcs.n	8009af2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009aec:	2307      	movs	r3, #7
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	e00a      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009af2:	2306      	movs	r3, #6
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e007      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009afe:	2309      	movs	r3, #9
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e001      	b.n	8009b08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b04:	2309      	movs	r3, #9
 8009b06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	029b      	lsls	r3, r3, #10
 8009b1c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b20:	431a      	orrs	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	371c      	adds	r7, #28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	00d8acbf 	.word	0x00d8acbf
 8009b38:	00e4e1c0 	.word	0x00e4e1c0
 8009b3c:	00f42400 	.word	0x00f42400
 8009b40:	01067380 	.word	0x01067380
 8009b44:	011a499f 	.word	0x011a499f
 8009b48:	01312cff 	.word	0x01312cff
 8009b4c:	014ca43f 	.word	0x014ca43f
 8009b50:	016e3600 	.word	0x016e3600
 8009b54:	01a6ab1f 	.word	0x01a6ab1f
 8009b58:	01e84800 	.word	0x01e84800

08009b5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f043 0201 	orr.w	r2, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f023 0201 	bic.w	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d115      	bne.n	8009bee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bce:	200a      	movs	r0, #10
 8009bd0:	f7f8 f9dc 	bl	8001f8c <HAL_Delay>
      ms += 10U;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	330a      	adds	r3, #10
 8009bd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f93f 	bl	800ae5e <USB_GetMode>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d01e      	beq.n	8009c24 <USB_SetCurrentMode+0x84>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2bc7      	cmp	r3, #199	@ 0xc7
 8009bea:	d9f0      	bls.n	8009bce <USB_SetCurrentMode+0x2e>
 8009bec:	e01a      	b.n	8009c24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d115      	bne.n	8009c20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c00:	200a      	movs	r0, #10
 8009c02:	f7f8 f9c3 	bl	8001f8c <HAL_Delay>
      ms += 10U;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	330a      	adds	r3, #10
 8009c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f001 f926 	bl	800ae5e <USB_GetMode>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <USB_SetCurrentMode+0x84>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c1c:	d9f0      	bls.n	8009c00 <USB_SetCurrentMode+0x60>
 8009c1e:	e001      	b.n	8009c24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e005      	b.n	8009c30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c28:	d101      	bne.n	8009c2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c38:	b084      	sub	sp, #16
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b086      	sub	sp, #24
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c52:	2300      	movs	r3, #0
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	e009      	b.n	8009c6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	3340      	adds	r3, #64	@ 0x40
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	2200      	movs	r2, #0
 8009c64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2b0e      	cmp	r3, #14
 8009c70:	d9f2      	bls.n	8009c58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d11c      	bne.n	8009cb4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c88:	f043 0302 	orr.w	r3, r3, #2
 8009c8c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	e005      	b.n	8009cc0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	2300      	movs	r3, #0
 8009cca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ccc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d10d      	bne.n	8009cf0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f968 	bl	8009fb4 <USB_SetDevSpeed>
 8009ce4:	e008      	b.n	8009cf8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f963 	bl	8009fb4 <USB_SetDevSpeed>
 8009cee:	e003      	b.n	8009cf8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009cf0:	2103      	movs	r1, #3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f95e 	bl	8009fb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009cf8:	2110      	movs	r1, #16
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8fa 	bl	8009ef4 <USB_FlushTxFifo>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f924 	bl	8009f58 <USB_FlushRxFifo>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d20:	461a      	mov	r2, r3
 8009d22:	2300      	movs	r3, #0
 8009d24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d38:	461a      	mov	r2, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d3e:	2300      	movs	r3, #0
 8009d40:	613b      	str	r3, [r7, #16]
 8009d42:	e043      	b.n	8009dcc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d5a:	d118      	bne.n	8009d8e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	e013      	b.n	8009da0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d84:	461a      	mov	r2, r3
 8009d86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	e008      	b.n	8009da0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dac:	461a      	mov	r2, r3
 8009dae:	2300      	movs	r3, #0
 8009db0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009dc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	613b      	str	r3, [r7, #16]
 8009dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d3b5      	bcc.n	8009d44 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	613b      	str	r3, [r7, #16]
 8009ddc:	e043      	b.n	8009e66 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df4:	d118      	bne.n	8009e28 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	e013      	b.n	8009e3a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	e008      	b.n	8009e3a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e34:	461a      	mov	r2, r3
 8009e36:	2300      	movs	r3, #0
 8009e38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e46:	461a      	mov	r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3301      	adds	r3, #1
 8009e64:	613b      	str	r3, [r7, #16]
 8009e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d3b5      	bcc.n	8009dde <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009e92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f043 0210 	orr.w	r2, r3, #16
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	699a      	ldr	r2, [r3, #24]
 8009eac:	4b0f      	ldr	r3, [pc, #60]	@ (8009eec <USB_DevInit+0x2b4>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009eb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	f043 0208 	orr.w	r2, r3, #8
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ec8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d105      	bne.n	8009edc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699a      	ldr	r2, [r3, #24]
 8009ed4:	4b06      	ldr	r3, [pc, #24]	@ (8009ef0 <USB_DevInit+0x2b8>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ee8:	b004      	add	sp, #16
 8009eea:	4770      	bx	lr
 8009eec:	803c3800 	.word	0x803c3800
 8009ef0:	40000004 	.word	0x40000004

08009ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f0e:	d901      	bls.n	8009f14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e01b      	b.n	8009f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	daf2      	bge.n	8009f02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	019b      	lsls	r3, r3, #6
 8009f24:	f043 0220 	orr.w	r2, r3, #32
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f38:	d901      	bls.n	8009f3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e006      	b.n	8009f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d0f0      	beq.n	8009f2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3301      	adds	r3, #1
 8009f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f70:	d901      	bls.n	8009f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e018      	b.n	8009fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	daf2      	bge.n	8009f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2210      	movs	r2, #16
 8009f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f94:	d901      	bls.n	8009f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e006      	b.n	8009fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0310 	and.w	r3, r3, #16
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d0f0      	beq.n	8009f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b087      	sub	sp, #28
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0306 	and.w	r3, r3, #6
 8009ffe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a006:	2300      	movs	r3, #0
 800a008:	75fb      	strb	r3, [r7, #23]
 800a00a:	e00a      	b.n	800a022 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d002      	beq.n	800a018 <USB_GetDevSpeed+0x32>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2b06      	cmp	r3, #6
 800a016:	d102      	bne.n	800a01e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a018:	2302      	movs	r3, #2
 800a01a:	75fb      	strb	r3, [r7, #23]
 800a01c:	e001      	b.n	800a022 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a01e:	230f      	movs	r3, #15
 800a020:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d139      	bne.n	800a0c0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	b29b      	uxth	r3, r3
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a06a:	4313      	orrs	r3, r2
 800a06c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d153      	bne.n	800a12c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	791b      	ldrb	r3, [r3, #4]
 800a09e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	059b      	lsls	r3, r3, #22
 800a0a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	0159      	lsls	r1, r3, #5
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	440b      	add	r3, r1
 800a0b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4b20      	ldr	r3, [pc, #128]	@ (800a13c <USB_ActivateEndpoint+0x10c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	600b      	str	r3, [r1, #0]
 800a0be:	e035      	b.n	800a12c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0c6:	69da      	ldr	r2, [r3, #28]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 030f 	and.w	r3, r3, #15
 800a0d0:	2101      	movs	r1, #1
 800a0d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d6:	041b      	lsls	r3, r3, #16
 800a0d8:	68f9      	ldr	r1, [r7, #12]
 800a0da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d119      	bne.n	800a12c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	791b      	ldrb	r3, [r3, #4]
 800a112:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a114:	430b      	orrs	r3, r1
 800a116:	431a      	orrs	r2, r3
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	0159      	lsls	r1, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	440b      	add	r3, r1
 800a120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a124:	4619      	mov	r1, r3
 800a126:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <USB_ActivateEndpoint+0x10c>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	10008000 	.word	0x10008000

0800a140 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d161      	bne.n	800a220 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	4413      	add	r3, r2
 800a164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a16e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a172:	d11f      	bne.n	800a1b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	0151      	lsls	r1, r2, #5
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	440a      	add	r2, r1
 800a18a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a18e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a192:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 030f 	and.w	r3, r3, #15
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f003 030f 	and.w	r3, r3, #15
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	43db      	mvns	r3, r3
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	0159      	lsls	r1, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	440b      	add	r3, r1
 800a212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a216:	4619      	mov	r1, r3
 800a218:	4b35      	ldr	r3, [pc, #212]	@ (800a2f0 <USB_DeactivateEndpoint+0x1b0>)
 800a21a:	4013      	ands	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
 800a21e:	e060      	b.n	800a2e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a236:	d11f      	bne.n	800a278 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	015a      	lsls	r2, r3, #5
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4413      	add	r3, r2
 800a240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	0151      	lsls	r1, r2, #5
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	440a      	add	r2, r1
 800a24e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a252:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a256:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	0151      	lsls	r1, r2, #5
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	440a      	add	r2, r1
 800a26e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	2101      	movs	r1, #1
 800a28a:	fa01 f303 	lsl.w	r3, r1, r3
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	43db      	mvns	r3, r3
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a298:	4013      	ands	r3, r2
 800a29a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a2:	69da      	ldr	r2, [r3, #28]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	43db      	mvns	r3, r3
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2bc:	4013      	ands	r3, r2
 800a2be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	0159      	lsls	r1, r3, #5
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	440b      	add	r3, r1
 800a2d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4b05      	ldr	r3, [pc, #20]	@ (800a2f4 <USB_DeactivateEndpoint+0x1b4>)
 800a2de:	4013      	ands	r3, r2
 800a2e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	ec337800 	.word	0xec337800
 800a2f4:	eff37800 	.word	0xeff37800

0800a2f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	@ 0x28
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	2b01      	cmp	r3, #1
 800a316:	f040 8185 	bne.w	800a624 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d132      	bne.n	800a388 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a32e:	691a      	ldr	r2, [r3, #16]
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	0159      	lsls	r1, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	440b      	add	r3, r1
 800a338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33c:	4619      	mov	r1, r3
 800a33e:	4ba7      	ldr	r3, [pc, #668]	@ (800a5dc <USB_EPStartXfer+0x2e4>)
 800a340:	4013      	ands	r3, r2
 800a342:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	69fa      	ldr	r2, [r7, #28]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a35e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a362:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a370:	691a      	ldr	r2, [r3, #16]
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	0159      	lsls	r1, r3, #5
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	440b      	add	r3, r1
 800a37a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a37e:	4619      	mov	r1, r3
 800a380:	4b97      	ldr	r3, [pc, #604]	@ (800a5e0 <USB_EPStartXfer+0x2e8>)
 800a382:	4013      	ands	r3, r2
 800a384:	610b      	str	r3, [r1, #16]
 800a386:	e097      	b.n	800a4b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	0159      	lsls	r1, r3, #5
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	440b      	add	r3, r1
 800a39e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4b8e      	ldr	r3, [pc, #568]	@ (800a5e0 <USB_EPStartXfer+0x2e8>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	0159      	lsls	r1, r3, #5
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	440b      	add	r3, r1
 800a3c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4b85      	ldr	r3, [pc, #532]	@ (800a5dc <USB_EPStartXfer+0x2e4>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d11a      	bne.n	800a408 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d903      	bls.n	800a3e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	69ba      	ldr	r2, [r7, #24]
 800a3f6:	0151      	lsls	r1, r2, #5
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a404:	6113      	str	r3, [r2, #16]
 800a406:	e044      	b.n	800a492 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	4413      	add	r3, r2
 800a412:	1e5a      	subs	r2, r3, #1
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	8afb      	ldrh	r3, [r7, #22]
 800a42e:	04d9      	lsls	r1, r3, #19
 800a430:	4b6c      	ldr	r3, [pc, #432]	@ (800a5e4 <USB_EPStartXfer+0x2ec>)
 800a432:	400b      	ands	r3, r1
 800a434:	69b9      	ldr	r1, [r7, #24]
 800a436:	0148      	lsls	r0, r1, #5
 800a438:	69f9      	ldr	r1, [r7, #28]
 800a43a:	4401      	add	r1, r0
 800a43c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a440:	4313      	orrs	r3, r2
 800a442:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d122      	bne.n	800a492 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	440a      	add	r2, r1
 800a462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a466:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a46a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a478:	691a      	ldr	r2, [r3, #16]
 800a47a:	8afb      	ldrh	r3, [r7, #22]
 800a47c:	075b      	lsls	r3, r3, #29
 800a47e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a482:	69b9      	ldr	r1, [r7, #24]
 800a484:	0148      	lsls	r0, r1, #5
 800a486:	69f9      	ldr	r1, [r7, #28]
 800a488:	4401      	add	r1, r0
 800a48a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a48e:	4313      	orrs	r3, r2
 800a490:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	0148      	lsls	r0, r1, #5
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	4401      	add	r1, r0
 800a4b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4b8:	79fb      	ldrb	r3, [r7, #7]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d14b      	bne.n	800a556 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	791b      	ldrb	r3, [r3, #4]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d128      	bne.n	800a534 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d110      	bne.n	800a514 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	69fa      	ldr	r2, [r7, #28]
 800a506:	440a      	add	r2, r1
 800a508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a50c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e00f      	b.n	800a534 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a52e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a532:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	e169      	b.n	800a82a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	69ba      	ldr	r2, [r7, #24]
 800a566:	0151      	lsls	r1, r2, #5
 800a568:	69fa      	ldr	r2, [r7, #28]
 800a56a:	440a      	add	r2, r1
 800a56c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a570:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a574:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	791b      	ldrb	r3, [r3, #4]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d015      	beq.n	800a5aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8151 	beq.w	800a82a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a58e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	2101      	movs	r1, #1
 800a59a:	fa01 f303 	lsl.w	r3, r1, r3
 800a59e:	69f9      	ldr	r1, [r7, #28]
 800a5a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5a8:	e13f      	b.n	800a82a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d116      	bne.n	800a5e8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	e015      	b.n	800a608 <USB_EPStartXfer+0x310>
 800a5dc:	e007ffff 	.word	0xe007ffff
 800a5e0:	fff80000 	.word	0xfff80000
 800a5e4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a606:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	68d9      	ldr	r1, [r3, #12]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	781a      	ldrb	r2, [r3, #0]
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	b298      	uxth	r0, r3
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4603      	mov	r3, r0
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f9b9 	bl	800a994 <USB_WritePacket>
 800a622:	e102      	b.n	800a82a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	0159      	lsls	r1, r3, #5
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	440b      	add	r3, r1
 800a63a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a63e:	4619      	mov	r1, r3
 800a640:	4b7c      	ldr	r3, [pc, #496]	@ (800a834 <USB_EPStartXfer+0x53c>)
 800a642:	4013      	ands	r3, r2
 800a644:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a652:	691a      	ldr	r2, [r3, #16]
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	0159      	lsls	r1, r3, #5
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	440b      	add	r3, r1
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	4619      	mov	r1, r3
 800a662:	4b75      	ldr	r3, [pc, #468]	@ (800a838 <USB_EPStartXfer+0x540>)
 800a664:	4013      	ands	r3, r2
 800a666:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d12f      	bne.n	800a6ce <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	689a      	ldr	r2, [r3, #8]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a692:	691a      	ldr	r2, [r3, #16]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a69c:	69b9      	ldr	r1, [r7, #24]
 800a69e:	0148      	lsls	r0, r1, #5
 800a6a0:	69f9      	ldr	r1, [r7, #28]
 800a6a2:	4401      	add	r1, r0
 800a6a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6ca:	6113      	str	r3, [r2, #16]
 800a6cc:	e05f      	b.n	800a78e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d123      	bne.n	800a71e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e2:	691a      	ldr	r2, [r3, #16]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ec:	69b9      	ldr	r1, [r7, #24]
 800a6ee:	0148      	lsls	r0, r1, #5
 800a6f0:	69f9      	ldr	r1, [r7, #28]
 800a6f2:	4401      	add	r1, r0
 800a6f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a71a:	6113      	str	r3, [r2, #16]
 800a71c:	e037      	b.n	800a78e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	691a      	ldr	r2, [r3, #16]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	4413      	add	r3, r2
 800a728:	1e5a      	subs	r2, r3, #1
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a732:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	8afa      	ldrh	r2, [r7, #22]
 800a73a:	fb03 f202 	mul.w	r2, r3, r2
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	8afb      	ldrh	r3, [r7, #22]
 800a752:	04d9      	lsls	r1, r3, #19
 800a754:	4b39      	ldr	r3, [pc, #228]	@ (800a83c <USB_EPStartXfer+0x544>)
 800a756:	400b      	ands	r3, r1
 800a758:	69b9      	ldr	r1, [r7, #24]
 800a75a:	0148      	lsls	r0, r1, #5
 800a75c:	69f9      	ldr	r1, [r7, #28]
 800a75e:	4401      	add	r1, r0
 800a760:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a764:	4313      	orrs	r3, r2
 800a766:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	0148      	lsls	r0, r1, #5
 800a782:	69f9      	ldr	r1, [r7, #28]
 800a784:	4401      	add	r1, r0
 800a786:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a78a:	4313      	orrs	r3, r2
 800a78c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a78e:	79fb      	ldrb	r3, [r7, #7]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d10d      	bne.n	800a7b0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d009      	beq.n	800a7b0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	68d9      	ldr	r1, [r3, #12]
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ac:	460a      	mov	r2, r1
 800a7ae:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	791b      	ldrb	r3, [r3, #4]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d128      	bne.n	800a80a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d110      	bne.n	800a7ea <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	e00f      	b.n	800a80a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	015a      	lsls	r2, r3, #5
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	0151      	lsls	r1, r2, #5
 800a7fc:	69fa      	ldr	r2, [r7, #28]
 800a7fe:	440a      	add	r2, r1
 800a800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a808:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	69ba      	ldr	r2, [r7, #24]
 800a81a:	0151      	lsls	r1, r2, #5
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	440a      	add	r2, r1
 800a820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a824:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	fff80000 	.word	0xfff80000
 800a838:	e007ffff 	.word	0xe007ffff
 800a83c:	1ff80000 	.word	0x1ff80000

0800a840 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	785b      	ldrb	r3, [r3, #1]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d14a      	bne.n	800a8f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a876:	f040 8086 	bne.w	800a986 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	7812      	ldrb	r2, [r2, #0]
 800a88e:	0151      	lsls	r1, r2, #5
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	440a      	add	r2, r1
 800a894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a898:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a89c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	7812      	ldrb	r2, [r2, #0]
 800a8b2:	0151      	lsls	r1, r2, #5
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	440a      	add	r2, r1
 800a8b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d902      	bls.n	800a8d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8d6:	e056      	b.n	800a986 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8f0:	d0e7      	beq.n	800a8c2 <USB_EPStopXfer+0x82>
 800a8f2:	e048      	b.n	800a986 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a90c:	d13b      	bne.n	800a986 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	015a      	lsls	r2, r3, #5
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	4413      	add	r3, r2
 800a918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	7812      	ldrb	r2, [r2, #0]
 800a922:	0151      	lsls	r1, r2, #5
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	440a      	add	r2, r1
 800a928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a92c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a930:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	7812      	ldrb	r2, [r2, #0]
 800a946:	0151      	lsls	r1, r2, #5
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	440a      	add	r2, r1
 800a94c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a954:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	3301      	adds	r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a962:	4293      	cmp	r3, r2
 800a964:	d902      	bls.n	800a96c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	75fb      	strb	r3, [r7, #23]
          break;
 800a96a:	e00c      	b.n	800a986 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a984:	d0e7      	beq.n	800a956 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a986:	7dfb      	ldrb	r3, [r7, #23]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a994:	b480      	push	{r7}
 800a996:	b089      	sub	sp, #36	@ 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	71fb      	strb	r3, [r7, #7]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d123      	bne.n	800aa02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9ba:	88bb      	ldrh	r3, [r7, #4]
 800a9bc:	3303      	adds	r3, #3
 800a9be:	089b      	lsrs	r3, r3, #2
 800a9c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	61bb      	str	r3, [r7, #24]
 800a9c6:	e018      	b.n	800a9fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	031a      	lsls	r2, r3, #12
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	61bb      	str	r3, [r7, #24]
 800a9fa:	69ba      	ldr	r2, [r7, #24]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d3e2      	bcc.n	800a9c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3724      	adds	r7, #36	@ 0x24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b08b      	sub	sp, #44	@ 0x2c
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa26:	88fb      	ldrh	r3, [r7, #6]
 800aa28:	089b      	lsrs	r3, r3, #2
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa36:	2300      	movs	r3, #0
 800aa38:	623b      	str	r3, [r7, #32]
 800aa3a:	e014      	b.n	800aa66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa46:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	3301      	adds	r3, #1
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	3301      	adds	r3, #1
 800aa58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	3301      	adds	r3, #1
 800aa64:	623b      	str	r3, [r7, #32]
 800aa66:	6a3a      	ldr	r2, [r7, #32]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d3e6      	bcc.n	800aa3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa6e:	8bfb      	ldrh	r3, [r7, #30]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01e      	beq.n	800aab2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	6812      	ldr	r2, [r2, #0]
 800aa86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	fa22 f303 	lsr.w	r3, r2, r3
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	701a      	strb	r2, [r3, #0]
      i++;
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	623b      	str	r3, [r7, #32]
      pDest++;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aaa6:	8bfb      	ldrh	r3, [r7, #30]
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aaac:	8bfb      	ldrh	r3, [r7, #30]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1ea      	bne.n	800aa88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	372c      	adds	r7, #44	@ 0x2c
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d12c      	bne.n	800ab36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	db12      	blt.n	800ab14 <USB_EPSetStall+0x54>
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00f      	beq.n	800ab14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	e02b      	b.n	800ab8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	db12      	blt.n	800ab6e <USB_EPSetStall+0xae>
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00f      	beq.n	800ab6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	0151      	lsls	r1, r2, #5
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	440a      	add	r2, r1
 800ab64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	0151      	lsls	r1, r2, #5
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	440a      	add	r2, r1
 800ab84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	785b      	ldrb	r3, [r3, #1]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d128      	bne.n	800ac0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	0151      	lsls	r1, r2, #5
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	440a      	add	r2, r1
 800abce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	791b      	ldrb	r3, [r3, #4]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d003      	beq.n	800abe8 <USB_EPClearStall+0x4c>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	791b      	ldrb	r3, [r3, #4]
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d138      	bne.n	800ac5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	0151      	lsls	r1, r2, #5
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	440a      	add	r2, r1
 800abfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	e027      	b.n	800ac5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac24:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	791b      	ldrb	r3, [r3, #4]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d003      	beq.n	800ac3a <USB_EPClearStall+0x9e>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	791b      	ldrb	r3, [r3, #4]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d10f      	bne.n	800ac5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	0151      	lsls	r1, r2, #5
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	440a      	add	r2, r1
 800ac50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac86:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	011b      	lsls	r3, r3, #4
 800ac98:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac9c:	68f9      	ldr	r1, [r7, #12]
 800ac9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aca2:	4313      	orrs	r3, r2
 800aca4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ace2:	f023 0302 	bic.w	r3, r3, #2
 800ace6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad24:	f043 0302 	orr.w	r3, r3, #2
 800ad28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b085      	sub	sp, #20
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7a:	69db      	ldr	r3, [r3, #28]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	0c1b      	lsrs	r3, r3, #16
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	4013      	ands	r3, r2
 800adb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	b29b      	uxth	r3, r3
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b085      	sub	sp, #20
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800add6:	78fb      	ldrb	r3, [r7, #3]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	4013      	ands	r3, r2
 800adf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adf4:	68bb      	ldr	r3, [r7, #8]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b087      	sub	sp, #28
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae32:	01db      	lsls	r3, r3, #7
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae50:	68bb      	ldr	r3, [r7, #8]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b083      	sub	sp, #12
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
	...

0800ae7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae96:	4619      	mov	r1, r3
 800ae98:	4b09      	ldr	r3, [pc, #36]	@ (800aec0 <USB_ActivateSetup+0x44>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aeac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	fffff800 	.word	0xfffff800

0800aec4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	460b      	mov	r3, r1
 800aece:	607a      	str	r2, [r7, #4]
 800aed0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	333c      	adds	r3, #60	@ 0x3c
 800aeda:	3304      	adds	r3, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	4a26      	ldr	r2, [pc, #152]	@ (800af7c <USB_EP0_OutStart+0xb8>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d90a      	bls.n	800aefe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aef8:	d101      	bne.n	800aefe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e037      	b.n	800af6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af04:	461a      	mov	r2, r3
 800af06:	2300      	movs	r3, #0
 800af08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af2c:	f043 0318 	orr.w	r3, r3, #24
 800af30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d10f      	bne.n	800af6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af52:	461a      	mov	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	4f54300a 	.word	0x4f54300a

0800af80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af98:	d901      	bls.n	800af9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e01b      	b.n	800afd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	daf2      	bge.n	800af8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	f043 0201 	orr.w	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afc2:	d901      	bls.n	800afc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e006      	b.n	800afd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d0f0      	beq.n	800afb6 <USB_CoreReset+0x36>

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
	...

0800afe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aff0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aff4:	f002 fd3e 	bl	800da74 <USBD_static_malloc>
 800aff8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d109      	bne.n	800b014 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	32b0      	adds	r2, #176	@ 0xb0
 800b00a:	2100      	movs	r1, #0
 800b00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b010:	2302      	movs	r3, #2
 800b012:	e0d4      	b.n	800b1be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b014:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b018:	2100      	movs	r1, #0
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f002 fe8d 	bl	800dd3a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	32b0      	adds	r2, #176	@ 0xb0
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32b0      	adds	r2, #176	@ 0xb0
 800b03a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7c1b      	ldrb	r3, [r3, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d138      	bne.n	800b0be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b04c:	4b5e      	ldr	r3, [pc, #376]	@ (800b1c8 <USBD_CDC_Init+0x1e4>)
 800b04e:	7819      	ldrb	r1, [r3, #0]
 800b050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b054:	2202      	movs	r2, #2
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f002 fbe9 	bl	800d82e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b05c:	4b5a      	ldr	r3, [pc, #360]	@ (800b1c8 <USBD_CDC_Init+0x1e4>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	3324      	adds	r3, #36	@ 0x24
 800b072:	2201      	movs	r2, #1
 800b074:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b076:	4b55      	ldr	r3, [pc, #340]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b078:	7819      	ldrb	r1, [r3, #0]
 800b07a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b07e:	2202      	movs	r2, #2
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f002 fbd4 	bl	800d82e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b086:	4b51      	ldr	r3, [pc, #324]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f003 020f 	and.w	r2, r3, #15
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4613      	mov	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	440b      	add	r3, r1
 800b09a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b09e:	2201      	movs	r2, #1
 800b0a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b1d0 <USBD_CDC_Init+0x1ec>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	f003 020f 	and.w	r2, r3, #15
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	440b      	add	r3, r1
 800b0b6:	3326      	adds	r3, #38	@ 0x26
 800b0b8:	2210      	movs	r2, #16
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e035      	b.n	800b12a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0be:	4b42      	ldr	r3, [pc, #264]	@ (800b1c8 <USBD_CDC_Init+0x1e4>)
 800b0c0:	7819      	ldrb	r1, [r3, #0]
 800b0c2:	2340      	movs	r3, #64	@ 0x40
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f002 fbb1 	bl	800d82e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b1c8 <USBD_CDC_Init+0x1e4>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f003 020f 	and.w	r2, r3, #15
 800b0d4:	6879      	ldr	r1, [r7, #4]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	440b      	add	r3, r1
 800b0e0:	3324      	adds	r3, #36	@ 0x24
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0e6:	4b39      	ldr	r3, [pc, #228]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b0e8:	7819      	ldrb	r1, [r3, #0]
 800b0ea:	2340      	movs	r3, #64	@ 0x40
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f002 fb9d 	bl	800d82e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0f4:	4b35      	ldr	r3, [pc, #212]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	6879      	ldr	r1, [r7, #4]
 800b0fe:	4613      	mov	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b10c:	2201      	movs	r2, #1
 800b10e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b110:	4b2f      	ldr	r3, [pc, #188]	@ (800b1d0 <USBD_CDC_Init+0x1ec>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	f003 020f 	and.w	r2, r3, #15
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	4613      	mov	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	3326      	adds	r3, #38	@ 0x26
 800b126:	2210      	movs	r2, #16
 800b128:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b12a:	4b29      	ldr	r3, [pc, #164]	@ (800b1d0 <USBD_CDC_Init+0x1ec>)
 800b12c:	7819      	ldrb	r1, [r3, #0]
 800b12e:	2308      	movs	r3, #8
 800b130:	2203      	movs	r2, #3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f002 fb7b 	bl	800d82e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b138:	4b25      	ldr	r3, [pc, #148]	@ (800b1d0 <USBD_CDC_Init+0x1ec>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f003 020f 	and.w	r2, r3, #15
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	440b      	add	r3, r1
 800b14c:	3324      	adds	r3, #36	@ 0x24
 800b14e:	2201      	movs	r2, #1
 800b150:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	33b0      	adds	r3, #176	@ 0xb0
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b188:	2302      	movs	r3, #2
 800b18a:	e018      	b.n	800b1be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7c1b      	ldrb	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b194:	4b0d      	ldr	r3, [pc, #52]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b196:	7819      	ldrb	r1, [r3, #0]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b19e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f002 fc32 	bl	800da0c <USBD_LL_PrepareReceive>
 800b1a8:	e008      	b.n	800b1bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1aa:	4b08      	ldr	r3, [pc, #32]	@ (800b1cc <USBD_CDC_Init+0x1e8>)
 800b1ac:	7819      	ldrb	r1, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1b4:	2340      	movs	r3, #64	@ 0x40
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f002 fc28 	bl	800da0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	24000097 	.word	0x24000097
 800b1cc:	24000098 	.word	0x24000098
 800b1d0:	24000099 	.word	0x24000099

0800b1d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b1e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b2cc <USBD_CDC_DeInit+0xf8>)
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f002 fb47 	bl	800d87a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b1ec:	4b37      	ldr	r3, [pc, #220]	@ (800b2cc <USBD_CDC_DeInit+0xf8>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 020f 	and.w	r2, r3, #15
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	440b      	add	r3, r1
 800b200:	3324      	adds	r3, #36	@ 0x24
 800b202:	2200      	movs	r2, #0
 800b204:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b206:	4b32      	ldr	r3, [pc, #200]	@ (800b2d0 <USBD_CDC_DeInit+0xfc>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f002 fb34 	bl	800d87a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b212:	4b2f      	ldr	r3, [pc, #188]	@ (800b2d0 <USBD_CDC_DeInit+0xfc>)
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	f003 020f 	and.w	r2, r3, #15
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	440b      	add	r3, r1
 800b226:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b22a:	2200      	movs	r2, #0
 800b22c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b22e:	4b29      	ldr	r3, [pc, #164]	@ (800b2d4 <USBD_CDC_DeInit+0x100>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f002 fb20 	bl	800d87a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b23a:	4b26      	ldr	r3, [pc, #152]	@ (800b2d4 <USBD_CDC_DeInit+0x100>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 020f 	and.w	r2, r3, #15
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	440b      	add	r3, r1
 800b24e:	3324      	adds	r3, #36	@ 0x24
 800b250:	2200      	movs	r2, #0
 800b252:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b254:	4b1f      	ldr	r3, [pc, #124]	@ (800b2d4 <USBD_CDC_DeInit+0x100>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	f003 020f 	and.w	r2, r3, #15
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	440b      	add	r3, r1
 800b268:	3326      	adds	r3, #38	@ 0x26
 800b26a:	2200      	movs	r2, #0
 800b26c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	32b0      	adds	r2, #176	@ 0xb0
 800b278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01f      	beq.n	800b2c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	33b0      	adds	r3, #176	@ 0xb0
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32b0      	adds	r2, #176	@ 0xb0
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f002 fbf4 	bl	800da90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	32b0      	adds	r2, #176	@ 0xb0
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	24000097 	.word	0x24000097
 800b2d0:	24000098 	.word	0x24000098
 800b2d4:	24000099 	.word	0x24000099

0800b2d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	32b0      	adds	r2, #176	@ 0xb0
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	e0bf      	b.n	800b488 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b310:	2b00      	cmp	r3, #0
 800b312:	d050      	beq.n	800b3b6 <USBD_CDC_Setup+0xde>
 800b314:	2b20      	cmp	r3, #32
 800b316:	f040 80af 	bne.w	800b478 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	88db      	ldrh	r3, [r3, #6]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d03a      	beq.n	800b398 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	b25b      	sxtb	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da1b      	bge.n	800b364 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	33b0      	adds	r3, #176	@ 0xb0
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b342:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	88d2      	ldrh	r2, [r2, #6]
 800b348:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	2b07      	cmp	r3, #7
 800b350:	bf28      	it	cs
 800b352:	2307      	movcs	r3, #7
 800b354:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	89fa      	ldrh	r2, [r7, #14]
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f001 fdd9 	bl	800cf14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b362:	e090      	b.n	800b486 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	785a      	ldrb	r2, [r3, #1]
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b3f      	cmp	r3, #63	@ 0x3f
 800b374:	d803      	bhi.n	800b37e <USBD_CDC_Setup+0xa6>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	88db      	ldrh	r3, [r3, #6]
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	e000      	b.n	800b380 <USBD_CDC_Setup+0xa8>
 800b37e:	2240      	movs	r2, #64	@ 0x40
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b386:	6939      	ldr	r1, [r7, #16]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b38e:	461a      	mov	r2, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f001 fdeb 	bl	800cf6c <USBD_CtlPrepareRx>
      break;
 800b396:	e076      	b.n	800b486 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	33b0      	adds	r3, #176	@ 0xb0
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	7850      	ldrb	r0, [r2, #1]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	4798      	blx	r3
      break;
 800b3b4:	e067      	b.n	800b486 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	785b      	ldrb	r3, [r3, #1]
 800b3ba:	2b0b      	cmp	r3, #11
 800b3bc:	d851      	bhi.n	800b462 <USBD_CDC_Setup+0x18a>
 800b3be:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <USBD_CDC_Setup+0xec>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b3f5 	.word	0x0800b3f5
 800b3c8:	0800b471 	.word	0x0800b471
 800b3cc:	0800b463 	.word	0x0800b463
 800b3d0:	0800b463 	.word	0x0800b463
 800b3d4:	0800b463 	.word	0x0800b463
 800b3d8:	0800b463 	.word	0x0800b463
 800b3dc:	0800b463 	.word	0x0800b463
 800b3e0:	0800b463 	.word	0x0800b463
 800b3e4:	0800b463 	.word	0x0800b463
 800b3e8:	0800b463 	.word	0x0800b463
 800b3ec:	0800b41f 	.word	0x0800b41f
 800b3f0:	0800b449 	.word	0x0800b449
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d107      	bne.n	800b410 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b400:	f107 030a 	add.w	r3, r7, #10
 800b404:	2202      	movs	r2, #2
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 fd83 	bl	800cf14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b40e:	e032      	b.n	800b476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fd01 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b418:	2303      	movs	r3, #3
 800b41a:	75fb      	strb	r3, [r7, #23]
          break;
 800b41c:	e02b      	b.n	800b476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b03      	cmp	r3, #3
 800b428:	d107      	bne.n	800b43a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b42a:	f107 030d 	add.w	r3, r7, #13
 800b42e:	2201      	movs	r2, #1
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f001 fd6e 	bl	800cf14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b438:	e01d      	b.n	800b476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 fcec 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b442:	2303      	movs	r3, #3
 800b444:	75fb      	strb	r3, [r7, #23]
          break;
 800b446:	e016      	b.n	800b476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b03      	cmp	r3, #3
 800b452:	d00f      	beq.n	800b474 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 fcdf 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b45c:	2303      	movs	r3, #3
 800b45e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b460:	e008      	b.n	800b474 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f001 fcd8 	bl	800ce1a <USBD_CtlError>
          ret = USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	75fb      	strb	r3, [r7, #23]
          break;
 800b46e:	e002      	b.n	800b476 <USBD_CDC_Setup+0x19e>
          break;
 800b470:	bf00      	nop
 800b472:	e008      	b.n	800b486 <USBD_CDC_Setup+0x1ae>
          break;
 800b474:	bf00      	nop
      }
      break;
 800b476:	e006      	b.n	800b486 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 fccd 	bl	800ce1a <USBD_CtlError>
      ret = USBD_FAIL;
 800b480:	2303      	movs	r3, #3
 800b482:	75fb      	strb	r3, [r7, #23]
      break;
 800b484:	bf00      	nop
  }

  return (uint8_t)ret;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	32b0      	adds	r2, #176	@ 0xb0
 800b4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	e065      	b.n	800b586 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	32b0      	adds	r2, #176	@ 0xb0
 800b4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4ca:	78fb      	ldrb	r3, [r7, #3]
 800b4cc:	f003 020f 	and.w	r2, r3, #15
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	3318      	adds	r3, #24
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d02f      	beq.n	800b544 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	f003 020f 	and.w	r2, r3, #15
 800b4ea:	6879      	ldr	r1, [r7, #4]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	3318      	adds	r3, #24
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	f003 010f 	and.w	r1, r3, #15
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	460b      	mov	r3, r1
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	440b      	add	r3, r1
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4403      	add	r3, r0
 800b50c:	331c      	adds	r3, #28
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	fbb2 f1f3 	udiv	r1, r2, r3
 800b514:	fb01 f303 	mul.w	r3, r1, r3
 800b518:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d112      	bne.n	800b544 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b51e:	78fb      	ldrb	r3, [r7, #3]
 800b520:	f003 020f 	and.w	r2, r3, #15
 800b524:	6879      	ldr	r1, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	440b      	add	r3, r1
 800b530:	3318      	adds	r3, #24
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b536:	78f9      	ldrb	r1, [r7, #3]
 800b538:	2300      	movs	r3, #0
 800b53a:	2200      	movs	r2, #0
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f002 fa44 	bl	800d9ca <USBD_LL_Transmit>
 800b542:	e01f      	b.n	800b584 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	2200      	movs	r2, #0
 800b548:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	33b0      	adds	r3, #176	@ 0xb0
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	4413      	add	r3, r2
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d010      	beq.n	800b584 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	33b0      	adds	r3, #176	@ 0xb0
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	32b0      	adds	r2, #176	@ 0xb0
 800b5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	32b0      	adds	r2, #176	@ 0xb0
 800b5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e01a      	b.n	800b5f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5c0:	78fb      	ldrb	r3, [r7, #3]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f002 fa42 	bl	800da4e <USBD_LL_GetRxDataSize>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	33b0      	adds	r3, #176	@ 0xb0
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	32b0      	adds	r2, #176	@ 0xb0
 800b610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b614:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e024      	b.n	800b66a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	33b0      	adds	r3, #176	@ 0xb0
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d019      	beq.n	800b668 <USBD_CDC_EP0_RxReady+0x6a>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b63a:	2bff      	cmp	r3, #255	@ 0xff
 800b63c:	d014      	beq.n	800b668 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	33b0      	adds	r3, #176	@ 0xb0
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b656:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b65e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	22ff      	movs	r2, #255	@ 0xff
 800b664:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b67c:	2182      	movs	r1, #130	@ 0x82
 800b67e:	4818      	ldr	r0, [pc, #96]	@ (800b6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b680:	f000 fd6b 	bl	800c15a <USBD_GetEpDesc>
 800b684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b686:	2101      	movs	r1, #1
 800b688:	4815      	ldr	r0, [pc, #84]	@ (800b6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b68a:	f000 fd66 	bl	800c15a <USBD_GetEpDesc>
 800b68e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b690:	2181      	movs	r1, #129	@ 0x81
 800b692:	4813      	ldr	r0, [pc, #76]	@ (800b6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b694:	f000 fd61 	bl	800c15a <USBD_GetEpDesc>
 800b698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2210      	movs	r2, #16
 800b6a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d006      	beq.n	800b6ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6b4:	711a      	strb	r2, [r3, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6c8:	711a      	strb	r2, [r3, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2243      	movs	r2, #67	@ 0x43
 800b6d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6d4:	4b02      	ldr	r3, [pc, #8]	@ (800b6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	24000054 	.word	0x24000054

0800b6e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6ec:	2182      	movs	r1, #130	@ 0x82
 800b6ee:	4818      	ldr	r0, [pc, #96]	@ (800b750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6f0:	f000 fd33 	bl	800c15a <USBD_GetEpDesc>
 800b6f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	4815      	ldr	r0, [pc, #84]	@ (800b750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b6fa:	f000 fd2e 	bl	800c15a <USBD_GetEpDesc>
 800b6fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b700:	2181      	movs	r1, #129	@ 0x81
 800b702:	4813      	ldr	r0, [pc, #76]	@ (800b750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b704:	f000 fd29 	bl	800c15a <USBD_GetEpDesc>
 800b708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2210      	movs	r2, #16
 800b714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d006      	beq.n	800b72a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	2200      	movs	r2, #0
 800b720:	711a      	strb	r2, [r3, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f042 0202 	orr.w	r2, r2, #2
 800b728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	711a      	strb	r2, [r3, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f042 0202 	orr.w	r2, r2, #2
 800b73c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2243      	movs	r2, #67	@ 0x43
 800b742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b744:	4b02      	ldr	r3, [pc, #8]	@ (800b750 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	24000054 	.word	0x24000054

0800b754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b086      	sub	sp, #24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b75c:	2182      	movs	r1, #130	@ 0x82
 800b75e:	4818      	ldr	r0, [pc, #96]	@ (800b7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b760:	f000 fcfb 	bl	800c15a <USBD_GetEpDesc>
 800b764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b766:	2101      	movs	r1, #1
 800b768:	4815      	ldr	r0, [pc, #84]	@ (800b7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b76a:	f000 fcf6 	bl	800c15a <USBD_GetEpDesc>
 800b76e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b770:	2181      	movs	r1, #129	@ 0x81
 800b772:	4813      	ldr	r0, [pc, #76]	@ (800b7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b774:	f000 fcf1 	bl	800c15a <USBD_GetEpDesc>
 800b778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2210      	movs	r2, #16
 800b784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2200      	movs	r2, #0
 800b790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b794:	711a      	strb	r2, [r3, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7a8:	711a      	strb	r2, [r3, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2243      	movs	r2, #67	@ 0x43
 800b7b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7b4:	4b02      	ldr	r3, [pc, #8]	@ (800b7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	24000054 	.word	0x24000054

0800b7c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7d2:	4b03      	ldr	r3, [pc, #12]	@ (800b7e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	24000010 	.word	0x24000010

0800b7e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e009      	b.n	800b80c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	33b0      	adds	r3, #176	@ 0xb0
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	32b0      	adds	r2, #176	@ 0xb0
 800b82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b832:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d101      	bne.n	800b83e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e008      	b.n	800b850 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	32b0      	adds	r2, #176	@ 0xb0
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e004      	b.n	800b88a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32b0      	adds	r2, #176	@ 0xb0
 800b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e025      	b.n	800b90a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d11f      	bne.n	800b908 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8d0:	4b10      	ldr	r3, [pc, #64]	@ (800b914 <USBD_CDC_TransmitPacket+0x7c>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f003 020f 	and.w	r2, r3, #15
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4403      	add	r3, r0
 800b8ea:	3318      	adds	r3, #24
 800b8ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b8ee:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <USBD_CDC_TransmitPacket+0x7c>)
 800b8f0:	7819      	ldrb	r1, [r3, #0]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f002 f863 	bl	800d9ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b908:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	24000097 	.word	0x24000097

0800b918 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	32b0      	adds	r2, #176	@ 0xb0
 800b92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	32b0      	adds	r2, #176	@ 0xb0
 800b93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b942:	2303      	movs	r3, #3
 800b944:	e018      	b.n	800b978 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7c1b      	ldrb	r3, [r3, #16]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10a      	bne.n	800b964 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b94e:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <USBD_CDC_ReceivePacket+0x68>)
 800b950:	7819      	ldrb	r1, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f002 f855 	bl	800da0c <USBD_LL_PrepareReceive>
 800b962:	e008      	b.n	800b976 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b964:	4b06      	ldr	r3, [pc, #24]	@ (800b980 <USBD_CDC_ReceivePacket+0x68>)
 800b966:	7819      	ldrb	r1, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b96e:	2340      	movs	r3, #64	@ 0x40
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f002 f84b 	bl	800da0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	24000098 	.word	0x24000098

0800b984 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800b998:	4817      	ldr	r0, [pc, #92]	@ (800b9f8 <USBD_Init+0x74>)
 800b99a:	f002 f971 	bl	800dc80 <iprintf>
 800b99e:	4817      	ldr	r0, [pc, #92]	@ (800b9fc <USBD_Init+0x78>)
 800b9a0:	f002 f96e 	bl	800dc80 <iprintf>
 800b9a4:	200a      	movs	r0, #10
 800b9a6:	f002 f97d 	bl	800dca4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	e01f      	b.n	800b9ee <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f001 feb6 	bl	800d754 <USBD_LL_Init>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3718      	adds	r7, #24
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800eaec 	.word	0x0800eaec
 800b9fc:	0800eaf4 	.word	0x0800eaf4

0800ba00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800ba14:	481a      	ldr	r0, [pc, #104]	@ (800ba80 <USBD_RegisterClass+0x80>)
 800ba16:	f002 f933 	bl	800dc80 <iprintf>
 800ba1a:	481a      	ldr	r0, [pc, #104]	@ (800ba84 <USBD_RegisterClass+0x84>)
 800ba1c:	f002 f930 	bl	800dc80 <iprintf>
 800ba20:	200a      	movs	r0, #10
 800ba22:	f002 f93f 	bl	800dca4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e025      	b.n	800ba76 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	32ae      	adds	r2, #174	@ 0xae
 800ba3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00f      	beq.n	800ba66 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	32ae      	adds	r2, #174	@ 0xae
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba56:	f107 020e 	add.w	r2, r7, #14
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	4798      	blx	r3
 800ba5e:	4602      	mov	r2, r0
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	0800eaec 	.word	0x0800eaec
 800ba84:	0800eb0c 	.word	0x0800eb0c

0800ba88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 feb1 	bl	800d7f8 <USBD_LL_Start>
 800ba96:	4603      	mov	r3, r0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	460b      	mov	r3, r1
 800bac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d009      	beq.n	800bae4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	4611      	mov	r1, r2
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f936 	bl	800cda6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb56:	f003 031f 	and.w	r3, r3, #31
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d01a      	beq.n	800bb94 <USBD_LL_SetupStage+0x72>
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d822      	bhi.n	800bba8 <USBD_LL_SetupStage+0x86>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <USBD_LL_SetupStage+0x4a>
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d00a      	beq.n	800bb80 <USBD_LL_SetupStage+0x5e>
 800bb6a:	e01d      	b.n	800bba8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fb63 	bl	800c240 <USBD_StdDevReq>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb7e:	e020      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fbcb 	bl	800c324 <USBD_StdItfReq>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
      break;
 800bb92:	e016      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fc2d 	bl	800c3fc <USBD_StdEPReq>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
      break;
 800bba6:	e00c      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 fe7e 	bl	800d8b8 <USBD_LL_StallEP>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc0:	bf00      	nop
  }

  return ret;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d16e      	bne.n	800bcc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f040 8098 	bne.w	800bd28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d913      	bls.n	800bc2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	1ad2      	subs	r2, r2, r3
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	bf28      	it	cs
 800bc1e:	4613      	movcs	r3, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f001 f9be 	bl	800cfa6 <USBD_CtlContinueRx>
 800bc2a:	e07d      	b.n	800bd28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc32:	f003 031f 	and.w	r3, r3, #31
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d014      	beq.n	800bc64 <USBD_LL_DataOutStage+0x98>
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d81d      	bhi.n	800bc7a <USBD_LL_DataOutStage+0xae>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <USBD_LL_DataOutStage+0x7c>
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d003      	beq.n	800bc4e <USBD_LL_DataOutStage+0x82>
 800bc46:	e018      	b.n	800bc7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc4c:	e018      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	4619      	mov	r1, r3
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f000 fa64 	bl	800c126 <USBD_CoreFindIF>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75bb      	strb	r3, [r7, #22]
            break;
 800bc62:	e00d      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fa66 	bl	800c140 <USBD_CoreFindEP>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75bb      	strb	r3, [r7, #22]
            break;
 800bc78:	e002      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc80:	7dbb      	ldrb	r3, [r7, #22]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d119      	bne.n	800bcba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d113      	bne.n	800bcba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc92:	7dba      	ldrb	r2, [r7, #22]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	32ae      	adds	r2, #174	@ 0xae
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bca2:	7dba      	ldrb	r2, [r7, #22]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcaa:	7dba      	ldrb	r2, [r7, #22]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	32ae      	adds	r2, #174	@ 0xae
 800bcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f001 f984 	bl	800cfc8 <USBD_CtlSendStatus>
 800bcc0:	e032      	b.n	800bd28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 fa37 	bl	800c140 <USBD_CoreFindEP>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
 800bcd8:	2bff      	cmp	r3, #255	@ 0xff
 800bcda:	d025      	beq.n	800bd28 <USBD_LL_DataOutStage+0x15c>
 800bcdc:	7dbb      	ldrb	r3, [r7, #22]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d122      	bne.n	800bd28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d117      	bne.n	800bd1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcee:	7dba      	ldrb	r2, [r7, #22]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	32ae      	adds	r2, #174	@ 0xae
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00f      	beq.n	800bd1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bcfe:	7dba      	ldrb	r2, [r7, #22]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd06:	7dba      	ldrb	r2, [r7, #22]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	32ae      	adds	r2, #174	@ 0xae
 800bd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	7afa      	ldrb	r2, [r7, #11]
 800bd14:	4611      	mov	r1, r2
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	4798      	blx	r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	e000      	b.n	800bd2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd40:	7afb      	ldrb	r3, [r7, #11]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d16f      	bne.n	800be26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3314      	adds	r3, #20
 800bd4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d15a      	bne.n	800be0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	689a      	ldr	r2, [r3, #8]
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d914      	bls.n	800bd8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f001 f8e6 	bl	800cf4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f001 fe41 	bl	800da0c <USBD_LL_PrepareReceive>
 800bd8a:	e03f      	b.n	800be0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d11c      	bne.n	800bdd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d316      	bcc.n	800bdd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d20f      	bcs.n	800bdd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f001 f8c7 	bl	800cf4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2100      	movs	r1, #0
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f001 fe1e 	bl	800da0c <USBD_LL_PrepareReceive>
 800bdd0:	e01c      	b.n	800be0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d10f      	bne.n	800bdfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d009      	beq.n	800bdfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdfe:	2180      	movs	r1, #128	@ 0x80
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f001 fd59 	bl	800d8b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f001 f8f1 	bl	800cfee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d03a      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fe42 	bl	800baa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be24:	e032      	b.n	800be8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be26:	7afb      	ldrb	r3, [r7, #11]
 800be28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	4619      	mov	r1, r3
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 f985 	bl	800c140 <USBD_CoreFindEP>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2bff      	cmp	r3, #255	@ 0xff
 800be3e:	d025      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d122      	bne.n	800be8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d11c      	bne.n	800be8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be52:	7dfa      	ldrb	r2, [r7, #23]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	32ae      	adds	r2, #174	@ 0xae
 800be58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d014      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be62:	7dfa      	ldrb	r2, [r7, #23]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be6a:	7dfa      	ldrb	r2, [r7, #23]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	32ae      	adds	r2, #174	@ 0xae
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	7afa      	ldrb	r2, [r7, #11]
 800be78:	4611      	mov	r1, r2
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	4798      	blx	r3
 800be7e:	4603      	mov	r3, r0
 800be80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be82:	7dbb      	ldrb	r3, [r7, #22]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be88:	7dbb      	ldrb	r3, [r7, #22]
 800be8a:	e000      	b.n	800be8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d014      	beq.n	800befc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00e      	beq.n	800befc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6852      	ldr	r2, [r2, #4]
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	4611      	mov	r1, r2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4798      	blx	r3
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800befc:	2340      	movs	r3, #64	@ 0x40
 800befe:	2200      	movs	r2, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 fc93 	bl	800d82e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2240      	movs	r2, #64	@ 0x40
 800bf14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf18:	2340      	movs	r3, #64	@ 0x40
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2180      	movs	r1, #128	@ 0x80
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 fc85 	bl	800d82e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2240      	movs	r2, #64	@ 0x40
 800bf2e:	621a      	str	r2, [r3, #32]

  return ret;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	78fa      	ldrb	r2, [r7, #3]
 800bf4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d006      	beq.n	800bf7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2204      	movs	r2, #4
 800bf80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d106      	bne.n	800bfb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d110      	bne.n	800bff8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	32ae      	adds	r2, #174	@ 0xae
 800c018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	e01c      	b.n	800c05e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d115      	bne.n	800c05c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32ae      	adds	r2, #174	@ 0xae
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	6a1b      	ldr	r3, [r3, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	32ae      	adds	r2, #174	@ 0xae
 800c04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	4611      	mov	r1, r2
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	32ae      	adds	r2, #174	@ 0xae
 800c07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	e01c      	b.n	800c0c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b03      	cmp	r3, #3
 800c092:	d115      	bne.n	800c0c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	32ae      	adds	r2, #174	@ 0xae
 800c09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	32ae      	adds	r2, #174	@ 0xae
 800c0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b8:	78fa      	ldrb	r2, [r7, #3]
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6852      	ldr	r2, [r2, #4]
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	4611      	mov	r1, r2
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	4798      	blx	r3
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c126:	b480      	push	{r7}
 800c128:	b083      	sub	sp, #12
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	460b      	mov	r3, r1
 800c130:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c132:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c14c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	460b      	mov	r3, r1
 800c164:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	885b      	ldrh	r3, [r3, #2]
 800c176:	b29b      	uxth	r3, r3
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d91f      	bls.n	800c1c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c186:	e013      	b.n	800c1b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c188:	f107 030a 	add.w	r3, r7, #10
 800c18c:	4619      	mov	r1, r3
 800c18e:	6978      	ldr	r0, [r7, #20]
 800c190:	f000 f81b 	bl	800c1ca <USBD_GetNextDesc>
 800c194:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	2b05      	cmp	r3, #5
 800c19c:	d108      	bne.n	800c1b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	789b      	ldrb	r3, [r3, #2]
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d008      	beq.n	800c1be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	885b      	ldrh	r3, [r3, #2]
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	897b      	ldrh	r3, [r7, #10]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d8e5      	bhi.n	800c188 <USBD_GetEpDesc+0x2e>
 800c1bc:	e000      	b.n	800c1c0 <USBD_GetEpDesc+0x66>
          break;
 800c1be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1c0:	693b      	ldr	r3, [r7, #16]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b085      	sub	sp, #20
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c202:	b480      	push	{r7}
 800c204:	b087      	sub	sp, #28
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	3301      	adds	r3, #1
 800c218:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c220:	8a3b      	ldrh	r3, [r7, #16]
 800c222:	021b      	lsls	r3, r3, #8
 800c224:	b21a      	sxth	r2, r3
 800c226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	b21b      	sxth	r3, r3
 800c22e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c230:	89fb      	ldrh	r3, [r7, #14]
}
 800c232:	4618      	mov	r0, r3
 800c234:	371c      	adds	r7, #28
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
	...

0800c240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c256:	2b40      	cmp	r3, #64	@ 0x40
 800c258:	d005      	beq.n	800c266 <USBD_StdDevReq+0x26>
 800c25a:	2b40      	cmp	r3, #64	@ 0x40
 800c25c:	d857      	bhi.n	800c30e <USBD_StdDevReq+0xce>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00f      	beq.n	800c282 <USBD_StdDevReq+0x42>
 800c262:	2b20      	cmp	r3, #32
 800c264:	d153      	bne.n	800c30e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	32ae      	adds	r2, #174	@ 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
      break;
 800c280:	e04a      	b.n	800c318 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	2b09      	cmp	r3, #9
 800c288:	d83b      	bhi.n	800c302 <USBD_StdDevReq+0xc2>
 800c28a:	a201      	add	r2, pc, #4	@ (adr r2, 800c290 <USBD_StdDevReq+0x50>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2e5 	.word	0x0800c2e5
 800c294:	0800c2f9 	.word	0x0800c2f9
 800c298:	0800c303 	.word	0x0800c303
 800c29c:	0800c2ef 	.word	0x0800c2ef
 800c2a0:	0800c303 	.word	0x0800c303
 800c2a4:	0800c2c3 	.word	0x0800c2c3
 800c2a8:	0800c2b9 	.word	0x0800c2b9
 800c2ac:	0800c303 	.word	0x0800c303
 800c2b0:	0800c2db 	.word	0x0800c2db
 800c2b4:	0800c2cd 	.word	0x0800c2cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa3c 	bl	800c738 <USBD_GetDescriptor>
          break;
 800c2c0:	e024      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fbcb 	bl	800ca60 <USBD_SetAddress>
          break;
 800c2ca:	e01f      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fc0a 	bl	800cae8 <USBD_SetConfig>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
          break;
 800c2d8:	e018      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fcad 	bl	800cc3c <USBD_GetConfig>
          break;
 800c2e2:	e013      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fcde 	bl	800cca8 <USBD_GetStatus>
          break;
 800c2ec:	e00e      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fd0d 	bl	800cd10 <USBD_SetFeature>
          break;
 800c2f6:	e009      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fd31 	bl	800cd62 <USBD_ClrFeature>
          break;
 800c300:	e004      	b.n	800c30c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fd88 	bl	800ce1a <USBD_CtlError>
          break;
 800c30a:	bf00      	nop
      }
      break;
 800c30c:	e004      	b.n	800c318 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fd82 	bl	800ce1a <USBD_CtlError>
      break;
 800c316:	bf00      	nop
  }

  return ret;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop

0800c324 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c33a:	2b40      	cmp	r3, #64	@ 0x40
 800c33c:	d005      	beq.n	800c34a <USBD_StdItfReq+0x26>
 800c33e:	2b40      	cmp	r3, #64	@ 0x40
 800c340:	d852      	bhi.n	800c3e8 <USBD_StdItfReq+0xc4>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <USBD_StdItfReq+0x26>
 800c346:	2b20      	cmp	r3, #32
 800c348:	d14e      	bne.n	800c3e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c350:	b2db      	uxtb	r3, r3
 800c352:	3b01      	subs	r3, #1
 800c354:	2b02      	cmp	r3, #2
 800c356:	d840      	bhi.n	800c3da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	889b      	ldrh	r3, [r3, #4]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d836      	bhi.n	800c3d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	889b      	ldrh	r3, [r3, #4]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff fedb 	bl	800c126 <USBD_CoreFindIF>
 800c370:	4603      	mov	r3, r0
 800c372:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	2bff      	cmp	r3, #255	@ 0xff
 800c378:	d01d      	beq.n	800c3b6 <USBD_StdItfReq+0x92>
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11a      	bne.n	800c3b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c380:	7bba      	ldrb	r2, [r7, #14]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	32ae      	adds	r2, #174	@ 0xae
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00f      	beq.n	800c3b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c390:	7bba      	ldrb	r2, [r7, #14]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c398:	7bba      	ldrb	r2, [r7, #14]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32ae      	adds	r2, #174	@ 0xae
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3ae:	e004      	b.n	800c3ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3b4:	e001      	b.n	800c3ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	88db      	ldrh	r3, [r3, #6]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d110      	bne.n	800c3e4 <USBD_StdItfReq+0xc0>
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10d      	bne.n	800c3e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fdfd 	bl	800cfc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3ce:	e009      	b.n	800c3e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fd21 	bl	800ce1a <USBD_CtlError>
          break;
 800c3d8:	e004      	b.n	800c3e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fd1c 	bl	800ce1a <USBD_CtlError>
          break;
 800c3e2:	e000      	b.n	800c3e6 <USBD_StdItfReq+0xc2>
          break;
 800c3e4:	bf00      	nop
      }
      break;
 800c3e6:	e004      	b.n	800c3f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fd15 	bl	800ce1a <USBD_CtlError>
      break;
 800c3f0:	bf00      	nop
  }

  return ret;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	889b      	ldrh	r3, [r3, #4]
 800c40e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c418:	2b40      	cmp	r3, #64	@ 0x40
 800c41a:	d007      	beq.n	800c42c <USBD_StdEPReq+0x30>
 800c41c:	2b40      	cmp	r3, #64	@ 0x40
 800c41e:	f200 817f 	bhi.w	800c720 <USBD_StdEPReq+0x324>
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02a      	beq.n	800c47c <USBD_StdEPReq+0x80>
 800c426:	2b20      	cmp	r3, #32
 800c428:	f040 817a 	bne.w	800c720 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fe85 	bl	800c140 <USBD_CoreFindEP>
 800c436:	4603      	mov	r3, r0
 800c438:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c43a:	7b7b      	ldrb	r3, [r7, #13]
 800c43c:	2bff      	cmp	r3, #255	@ 0xff
 800c43e:	f000 8174 	beq.w	800c72a <USBD_StdEPReq+0x32e>
 800c442:	7b7b      	ldrb	r3, [r7, #13]
 800c444:	2b00      	cmp	r3, #0
 800c446:	f040 8170 	bne.w	800c72a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c44a:	7b7a      	ldrb	r2, [r7, #13]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c452:	7b7a      	ldrb	r2, [r7, #13]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	32ae      	adds	r2, #174	@ 0xae
 800c458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8163 	beq.w	800c72a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c464:	7b7a      	ldrb	r2, [r7, #13]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	32ae      	adds	r2, #174	@ 0xae
 800c46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c47a:	e156      	b.n	800c72a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d008      	beq.n	800c496 <USBD_StdEPReq+0x9a>
 800c484:	2b03      	cmp	r3, #3
 800c486:	f300 8145 	bgt.w	800c714 <USBD_StdEPReq+0x318>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 809b 	beq.w	800c5c6 <USBD_StdEPReq+0x1ca>
 800c490:	2b01      	cmp	r3, #1
 800c492:	d03c      	beq.n	800c50e <USBD_StdEPReq+0x112>
 800c494:	e13e      	b.n	800c714 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d002      	beq.n	800c4a8 <USBD_StdEPReq+0xac>
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d016      	beq.n	800c4d4 <USBD_StdEPReq+0xd8>
 800c4a6:	e02c      	b.n	800c502 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00d      	beq.n	800c4ca <USBD_StdEPReq+0xce>
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	2b80      	cmp	r3, #128	@ 0x80
 800c4b2:	d00a      	beq.n	800c4ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 f9fd 	bl	800d8b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4be:	2180      	movs	r1, #128	@ 0x80
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f001 f9f9 	bl	800d8b8 <USBD_LL_StallEP>
 800c4c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4c8:	e020      	b.n	800c50c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fca4 	bl	800ce1a <USBD_CtlError>
              break;
 800c4d2:	e01b      	b.n	800c50c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10e      	bne.n	800c4fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <USBD_StdEPReq+0xfe>
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	2b80      	cmp	r3, #128	@ 0x80
 800c4e6:	d008      	beq.n	800c4fa <USBD_StdEPReq+0xfe>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	88db      	ldrh	r3, [r3, #6]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 f9df 	bl	800d8b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fd64 	bl	800cfc8 <USBD_CtlSendStatus>

              break;
 800c500:	e004      	b.n	800c50c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fc88 	bl	800ce1a <USBD_CtlError>
              break;
 800c50a:	bf00      	nop
          }
          break;
 800c50c:	e107      	b.n	800c71e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d002      	beq.n	800c520 <USBD_StdEPReq+0x124>
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d016      	beq.n	800c54c <USBD_StdEPReq+0x150>
 800c51e:	e04b      	b.n	800c5b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <USBD_StdEPReq+0x146>
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b80      	cmp	r3, #128	@ 0x80
 800c52a:	d00a      	beq.n	800c542 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 f9c1 	bl	800d8b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c536:	2180      	movs	r1, #128	@ 0x80
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f001 f9bd 	bl	800d8b8 <USBD_LL_StallEP>
 800c53e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c540:	e040      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fc68 	bl	800ce1a <USBD_CtlError>
              break;
 800c54a:	e03b      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	885b      	ldrh	r3, [r3, #2]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d136      	bne.n	800c5c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 f9c7 	bl	800d8f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fd2d 	bl	800cfc8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff fde4 	bl	800c140 <USBD_CoreFindEP>
 800c578:	4603      	mov	r3, r0
 800c57a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c57c:	7b7b      	ldrb	r3, [r7, #13]
 800c57e:	2bff      	cmp	r3, #255	@ 0xff
 800c580:	d01f      	beq.n	800c5c2 <USBD_StdEPReq+0x1c6>
 800c582:	7b7b      	ldrb	r3, [r7, #13]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d11c      	bne.n	800c5c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c588:	7b7a      	ldrb	r2, [r7, #13]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c590:	7b7a      	ldrb	r2, [r7, #13]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32ae      	adds	r2, #174	@ 0xae
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5a0:	7b7a      	ldrb	r2, [r7, #13]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	32ae      	adds	r2, #174	@ 0xae
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5b6:	e004      	b.n	800c5c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fc2d 	bl	800ce1a <USBD_CtlError>
              break;
 800c5c0:	e000      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>
              break;
 800c5c2:	bf00      	nop
          }
          break;
 800c5c4:	e0ab      	b.n	800c71e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d002      	beq.n	800c5d8 <USBD_StdEPReq+0x1dc>
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d032      	beq.n	800c63c <USBD_StdEPReq+0x240>
 800c5d6:	e097      	b.n	800c708 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <USBD_StdEPReq+0x1f2>
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b80      	cmp	r3, #128	@ 0x80
 800c5e2:	d004      	beq.n	800c5ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fc17 	bl	800ce1a <USBD_CtlError>
                break;
 800c5ec:	e091      	b.n	800c712 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da0b      	bge.n	800c60e <USBD_StdEPReq+0x212>
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	3310      	adds	r3, #16
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	e00b      	b.n	800c626 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	3304      	adds	r3, #4
 800c626:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2202      	movs	r2, #2
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fc6d 	bl	800cf14 <USBD_CtlSendData>
              break;
 800c63a:	e06a      	b.n	800c712 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c640:	2b00      	cmp	r3, #0
 800c642:	da11      	bge.n	800c668 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	f003 020f 	and.w	r2, r3, #15
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	3324      	adds	r3, #36	@ 0x24
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d117      	bne.n	800c68e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fbda 	bl	800ce1a <USBD_CtlError>
                  break;
 800c666:	e054      	b.n	800c712 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	f003 020f 	and.w	r2, r3, #15
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	4613      	mov	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fbc7 	bl	800ce1a <USBD_CtlError>
                  break;
 800c68c:	e041      	b.n	800c712 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c68e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c692:	2b00      	cmp	r3, #0
 800c694:	da0b      	bge.n	800c6ae <USBD_StdEPReq+0x2b2>
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	e00b      	b.n	800c6c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <USBD_StdEPReq+0x2d8>
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	2b80      	cmp	r3, #128	@ 0x80
 800c6d2:	d103      	bne.n	800c6dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	e00e      	b.n	800c6fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f001 f927 	bl	800d934 <USBD_LL_IsStallEP>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fc07 	bl	800cf14 <USBD_CtlSendData>
              break;
 800c706:	e004      	b.n	800c712 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fb85 	bl	800ce1a <USBD_CtlError>
              break;
 800c710:	bf00      	nop
          }
          break;
 800c712:	e004      	b.n	800c71e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fb7f 	bl	800ce1a <USBD_CtlError>
          break;
 800c71c:	bf00      	nop
      }
      break;
 800c71e:	e005      	b.n	800c72c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fb79 	bl	800ce1a <USBD_CtlError>
      break;
 800c728:	e000      	b.n	800c72c <USBD_StdEPReq+0x330>
      break;
 800c72a:	bf00      	nop
  }

  return ret;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	885b      	ldrh	r3, [r3, #2]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	b29b      	uxth	r3, r3
 800c756:	3b01      	subs	r3, #1
 800c758:	2b0e      	cmp	r3, #14
 800c75a:	f200 8152 	bhi.w	800ca02 <USBD_GetDescriptor+0x2ca>
 800c75e:	a201      	add	r2, pc, #4	@ (adr r2, 800c764 <USBD_GetDescriptor+0x2c>)
 800c760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7ed 	.word	0x0800c7ed
 800c76c:	0800c82d 	.word	0x0800c82d
 800c770:	0800ca03 	.word	0x0800ca03
 800c774:	0800ca03 	.word	0x0800ca03
 800c778:	0800c9a3 	.word	0x0800c9a3
 800c77c:	0800c9cf 	.word	0x0800c9cf
 800c780:	0800ca03 	.word	0x0800ca03
 800c784:	0800ca03 	.word	0x0800ca03
 800c788:	0800ca03 	.word	0x0800ca03
 800c78c:	0800ca03 	.word	0x0800ca03
 800c790:	0800ca03 	.word	0x0800ca03
 800c794:	0800ca03 	.word	0x0800ca03
 800c798:	0800ca03 	.word	0x0800ca03
 800c79c:	0800c7a1 	.word	0x0800c7a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	7c12      	ldrb	r2, [r2, #16]
 800c7b8:	f107 0108 	add.w	r1, r7, #8
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7c2:	e126      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fb27 	bl	800ce1a <USBD_CtlError>
        err++;
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c7d2:	e11e      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	7c12      	ldrb	r2, [r2, #16]
 800c7e0:	f107 0108 	add.w	r1, r7, #8
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4798      	blx	r3
 800c7e8:	60f8      	str	r0, [r7, #12]
      break;
 800c7ea:	e112      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7c1b      	ldrb	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10d      	bne.n	800c810 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7fc:	f107 0208 	add.w	r2, r7, #8
 800c800:	4610      	mov	r0, r2
 800c802:	4798      	blx	r3
 800c804:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	2202      	movs	r2, #2
 800c80c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c80e:	e100      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c818:	f107 0208 	add.w	r2, r7, #8
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
 800c820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	2202      	movs	r2, #2
 800c828:	701a      	strb	r2, [r3, #0]
      break;
 800c82a:	e0f2      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	885b      	ldrh	r3, [r3, #2]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b05      	cmp	r3, #5
 800c834:	f200 80ac 	bhi.w	800c990 <USBD_GetDescriptor+0x258>
 800c838:	a201      	add	r2, pc, #4	@ (adr r2, 800c840 <USBD_GetDescriptor+0x108>)
 800c83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83e:	bf00      	nop
 800c840:	0800c859 	.word	0x0800c859
 800c844:	0800c88d 	.word	0x0800c88d
 800c848:	0800c8c1 	.word	0x0800c8c1
 800c84c:	0800c8f5 	.word	0x0800c8f5
 800c850:	0800c929 	.word	0x0800c929
 800c854:	0800c95d 	.word	0x0800c95d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	7c12      	ldrb	r2, [r2, #16]
 800c870:	f107 0108 	add.w	r1, r7, #8
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c87a:	e091      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 facb 	bl	800ce1a <USBD_CtlError>
            err++;
 800c884:	7afb      	ldrb	r3, [r7, #11]
 800c886:	3301      	adds	r3, #1
 800c888:	72fb      	strb	r3, [r7, #11]
          break;
 800c88a:	e089      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00b      	beq.n	800c8b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	7c12      	ldrb	r2, [r2, #16]
 800c8a4:	f107 0108 	add.w	r1, r7, #8
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ae:	e077      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fab1 	bl	800ce1a <USBD_CtlError>
            err++;
 800c8b8:	7afb      	ldrb	r3, [r7, #11]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8be:	e06f      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00b      	beq.n	800c8e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	7c12      	ldrb	r2, [r2, #16]
 800c8d8:	f107 0108 	add.w	r1, r7, #8
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4798      	blx	r3
 800c8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8e2:	e05d      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fa97 	bl	800ce1a <USBD_CtlError>
            err++;
 800c8ec:	7afb      	ldrb	r3, [r7, #11]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8f2:	e055      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	7c12      	ldrb	r2, [r2, #16]
 800c90c:	f107 0108 	add.w	r1, r7, #8
 800c910:	4610      	mov	r0, r2
 800c912:	4798      	blx	r3
 800c914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c916:	e043      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa7d 	bl	800ce1a <USBD_CtlError>
            err++;
 800c920:	7afb      	ldrb	r3, [r7, #11]
 800c922:	3301      	adds	r3, #1
 800c924:	72fb      	strb	r3, [r7, #11]
          break;
 800c926:	e03b      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00b      	beq.n	800c94c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7c12      	ldrb	r2, [r2, #16]
 800c940:	f107 0108 	add.w	r1, r7, #8
 800c944:	4610      	mov	r0, r2
 800c946:	4798      	blx	r3
 800c948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c94a:	e029      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fa63 	bl	800ce1a <USBD_CtlError>
            err++;
 800c954:	7afb      	ldrb	r3, [r7, #11]
 800c956:	3301      	adds	r3, #1
 800c958:	72fb      	strb	r3, [r7, #11]
          break;
 800c95a:	e021      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00b      	beq.n	800c980 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	7c12      	ldrb	r2, [r2, #16]
 800c974:	f107 0108 	add.w	r1, r7, #8
 800c978:	4610      	mov	r0, r2
 800c97a:	4798      	blx	r3
 800c97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c97e:	e00f      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fa49 	bl	800ce1a <USBD_CtlError>
            err++;
 800c988:	7afb      	ldrb	r3, [r7, #11]
 800c98a:	3301      	adds	r3, #1
 800c98c:	72fb      	strb	r3, [r7, #11]
          break;
 800c98e:	e007      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fa41 	bl	800ce1a <USBD_CtlError>
          err++;
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	3301      	adds	r3, #1
 800c99c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c99e:	bf00      	nop
      }
      break;
 800c9a0:	e037      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7c1b      	ldrb	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d109      	bne.n	800c9be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b2:	f107 0208 	add.w	r2, r7, #8
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	4798      	blx	r3
 800c9ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9bc:	e029      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa2a 	bl	800ce1a <USBD_CtlError>
        err++;
 800c9c6:	7afb      	ldrb	r3, [r7, #11]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c9cc:	e021      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7c1b      	ldrb	r3, [r3, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10d      	bne.n	800c9f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9de:	f107 0208 	add.w	r2, r7, #8
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4798      	blx	r3
 800c9e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	2207      	movs	r2, #7
 800c9ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9f0:	e00f      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa10 	bl	800ce1a <USBD_CtlError>
        err++;
 800c9fa:	7afb      	ldrb	r3, [r7, #11]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	72fb      	strb	r3, [r7, #11]
      break;
 800ca00:	e007      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa08 	bl	800ce1a <USBD_CtlError>
      err++;
 800ca0a:	7afb      	ldrb	r3, [r7, #11]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca10:	bf00      	nop
  }

  if (err != 0U)
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d11e      	bne.n	800ca56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88db      	ldrh	r3, [r3, #6]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d016      	beq.n	800ca4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca20:	893b      	ldrh	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00e      	beq.n	800ca44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	88da      	ldrh	r2, [r3, #6]
 800ca2a:	893b      	ldrh	r3, [r7, #8]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bf28      	it	cs
 800ca30:	4613      	movcs	r3, r2
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca36:	893b      	ldrh	r3, [r7, #8]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68f9      	ldr	r1, [r7, #12]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fa69 	bl	800cf14 <USBD_CtlSendData>
 800ca42:	e009      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f9e7 	bl	800ce1a <USBD_CtlError>
 800ca4c:	e004      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 faba 	bl	800cfc8 <USBD_CtlSendStatus>
 800ca54:	e000      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    return;
 800ca56:	bf00      	nop
  }
}
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop

0800ca60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	889b      	ldrh	r3, [r3, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d131      	bne.n	800cad6 <USBD_SetAddress+0x76>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	88db      	ldrh	r3, [r3, #6]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d12d      	bne.n	800cad6 <USBD_SetAddress+0x76>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca80:	d829      	bhi.n	800cad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	885b      	ldrh	r3, [r3, #2]
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d104      	bne.n	800caa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f9bc 	bl	800ce1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa2:	e01d      	b.n	800cae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7bfa      	ldrb	r2, [r7, #15]
 800caa8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 ff6b 	bl	800d98c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fa86 	bl	800cfc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d004      	beq.n	800cacc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2202      	movs	r2, #2
 800cac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	e009      	b.n	800cae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad4:	e004      	b.n	800cae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f99e 	bl	800ce1a <USBD_CtlError>
  }
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	885b      	ldrh	r3, [r3, #2]
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	4b4e      	ldr	r3, [pc, #312]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cafe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb00:	4b4d      	ldr	r3, [pc, #308]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d905      	bls.n	800cb14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f985 	bl	800ce1a <USBD_CtlError>
    return USBD_FAIL;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e08c      	b.n	800cc2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d002      	beq.n	800cb26 <USBD_SetConfig+0x3e>
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d029      	beq.n	800cb78 <USBD_SetConfig+0x90>
 800cb24:	e075      	b.n	800cc12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb26:	4b44      	ldr	r3, [pc, #272]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d020      	beq.n	800cb70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb2e:	4b42      	ldr	r3, [pc, #264]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb38:	4b3f      	ldr	r3, [pc, #252]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7fe ffb9 	bl	800bab6 <USBD_SetClassConfig>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d008      	beq.n	800cb60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f962 	bl	800ce1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb5e:	e065      	b.n	800cc2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa31 	bl	800cfc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2203      	movs	r2, #3
 800cb6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb6e:	e05d      	b.n	800cc2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fa29 	bl	800cfc8 <USBD_CtlSendStatus>
      break;
 800cb76:	e059      	b.n	800cc2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb78:	4b2f      	ldr	r3, [pc, #188]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d112      	bne.n	800cba6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb88:	4b2b      	ldr	r3, [pc, #172]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb92:	4b29      	ldr	r3, [pc, #164]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7fe ffa8 	bl	800baee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fa12 	bl	800cfc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cba4:	e042      	b.n	800cc2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cba6:	4b24      	ldr	r3, [pc, #144]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d02a      	beq.n	800cc0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fe ff96 	bl	800baee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbc2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbcc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7fe ff6f 	bl	800bab6 <USBD_SetClassConfig>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00f      	beq.n	800cc02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f918 	bl	800ce1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7fe ff7b 	bl	800baee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc00:	e014      	b.n	800cc2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f9e0 	bl	800cfc8 <USBD_CtlSendStatus>
      break;
 800cc08:	e010      	b.n	800cc2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f9dc 	bl	800cfc8 <USBD_CtlSendStatus>
      break;
 800cc10:	e00c      	b.n	800cc2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f900 	bl	800ce1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc1a:	4b07      	ldr	r3, [pc, #28]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7fe ff64 	bl	800baee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
      break;
 800cc2a:	bf00      	nop
  }

  return ret;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	24000800 	.word	0x24000800

0800cc3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	88db      	ldrh	r3, [r3, #6]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d004      	beq.n	800cc58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f8e2 	bl	800ce1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc56:	e023      	b.n	800cca0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	dc02      	bgt.n	800cc6a <USBD_GetConfig+0x2e>
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dc03      	bgt.n	800cc70 <USBD_GetConfig+0x34>
 800cc68:	e015      	b.n	800cc96 <USBD_GetConfig+0x5a>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d00b      	beq.n	800cc86 <USBD_GetConfig+0x4a>
 800cc6e:	e012      	b.n	800cc96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f948 	bl	800cf14 <USBD_CtlSendData>
        break;
 800cc84:	e00c      	b.n	800cca0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f940 	bl	800cf14 <USBD_CtlSendData>
        break;
 800cc94:	e004      	b.n	800cca0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f8be 	bl	800ce1a <USBD_CtlError>
        break;
 800cc9e:	bf00      	nop
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d81e      	bhi.n	800ccfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	88db      	ldrh	r3, [r3, #6]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d004      	beq.n	800ccd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f8a5 	bl	800ce1a <USBD_CtlError>
        break;
 800ccd0:	e01a      	b.n	800cd08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f043 0202 	orr.w	r2, r3, #2
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f90c 	bl	800cf14 <USBD_CtlSendData>
      break;
 800ccfc:	e004      	b.n	800cd08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f88a 	bl	800ce1a <USBD_CtlError>
      break;
 800cd06:	bf00      	nop
  }
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d107      	bne.n	800cd32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f94c 	bl	800cfc8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd30:	e013      	b.n	800cd5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d10b      	bne.n	800cd52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	889b      	ldrh	r3, [r3, #4]
 800cd3e:	0a1b      	lsrs	r3, r3, #8
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f93c 	bl	800cfc8 <USBD_CtlSendStatus>
}
 800cd50:	e003      	b.n	800cd5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f860 	bl	800ce1a <USBD_CtlError>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d80b      	bhi.n	800cd92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	885b      	ldrh	r3, [r3, #2]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d10c      	bne.n	800cd9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f91c 	bl	800cfc8 <USBD_CtlSendStatus>
      }
      break;
 800cd90:	e004      	b.n	800cd9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f840 	bl	800ce1a <USBD_CtlError>
      break;
 800cd9a:	e000      	b.n	800cd9e <USBD_ClrFeature+0x3c>
      break;
 800cd9c:	bf00      	nop
  }
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	781a      	ldrb	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff fa16 	bl	800c202 <SWAPBYTE>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461a      	mov	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	3301      	adds	r3, #1
 800cde2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f7ff fa09 	bl	800c202 <SWAPBYTE>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3301      	adds	r3, #1
 800ce02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff f9fc 	bl	800c202 <SWAPBYTE>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	80da      	strh	r2, [r3, #6]
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce24:	2180      	movs	r1, #128	@ 0x80
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fd46 	bl	800d8b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fd42 	bl	800d8b8 <USBD_LL_StallEP>
}
 800ce34:	bf00      	nop
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d042      	beq.n	800ced8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ce56:	6938      	ldr	r0, [r7, #16]
 800ce58:	f000 f842 	bl	800cee0 <USBD_GetLen>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	3301      	adds	r3, #1
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce66:	d808      	bhi.n	800ce7a <USBD_GetString+0x3e>
 800ce68:	6938      	ldr	r0, [r7, #16]
 800ce6a:	f000 f839 	bl	800cee0 <USBD_GetLen>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	3301      	adds	r3, #1
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	e001      	b.n	800ce7e <USBD_GetString+0x42>
 800ce7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	4413      	add	r3, r2
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	7812      	ldrb	r2, [r2, #0]
 800ce8c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	3301      	adds	r3, #1
 800ce92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce94:	7dfb      	ldrb	r3, [r7, #23]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	4413      	add	r3, r2
 800ce9a:	2203      	movs	r2, #3
 800ce9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	3301      	adds	r3, #1
 800cea2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cea4:	e013      	b.n	800cece <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	4413      	add	r3, r2
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	7812      	ldrb	r2, [r2, #0]
 800ceb0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	613b      	str	r3, [r7, #16]
    idx++;
 800ceb8:	7dfb      	ldrb	r3, [r7, #23]
 800ceba:	3301      	adds	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	4413      	add	r3, r2
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cec8:	7dfb      	ldrb	r3, [r7, #23]
 800ceca:	3301      	adds	r3, #1
 800cecc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1e7      	bne.n	800cea6 <USBD_GetString+0x6a>
 800ced6:	e000      	b.n	800ceda <USBD_GetString+0x9e>
    return;
 800ced8:	bf00      	nop
  }
}
 800ceda:	3718      	adds	r7, #24
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cef0:	e005      	b.n	800cefe <USBD_GetLen+0x1e>
  {
    len++;
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	3301      	adds	r3, #1
 800cef6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	3301      	adds	r3, #1
 800cefc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1f5      	bne.n	800cef2 <USBD_GetLen+0x12>
  }

  return len;
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2202      	movs	r2, #2
 800cf24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	2100      	movs	r1, #0
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 fd45 	bl	800d9ca <USBD_LL_Transmit>

  return USBD_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b084      	sub	sp, #16
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 fd34 	bl	800d9ca <USBD_LL_Transmit>

  return USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2203      	movs	r2, #3
 800cf7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	2100      	movs	r1, #0
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fd38 	bl	800da0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 fd27 	bl	800da0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2204      	movs	r2, #4
 800cfd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fcf3 	bl	800d9ca <USBD_LL_Transmit>

  return USBD_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2205      	movs	r2, #5
 800cffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cffe:	2300      	movs	r3, #0
 800d000:	2200      	movs	r2, #0
 800d002:	2100      	movs	r1, #0
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fd01 	bl	800da0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d018:	2201      	movs	r2, #1
 800d01a:	4913      	ldr	r1, [pc, #76]	@ (800d068 <MX_USB_DEVICE_Init+0x54>)
 800d01c:	4813      	ldr	r0, [pc, #76]	@ (800d06c <MX_USB_DEVICE_Init+0x58>)
 800d01e:	f7fe fcb1 	bl	800b984 <USBD_Init>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d028:	f7f4 f978 	bl	800131c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d02c:	4910      	ldr	r1, [pc, #64]	@ (800d070 <MX_USB_DEVICE_Init+0x5c>)
 800d02e:	480f      	ldr	r0, [pc, #60]	@ (800d06c <MX_USB_DEVICE_Init+0x58>)
 800d030:	f7fe fce6 	bl	800ba00 <USBD_RegisterClass>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d03a:	f7f4 f96f 	bl	800131c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d03e:	490d      	ldr	r1, [pc, #52]	@ (800d074 <MX_USB_DEVICE_Init+0x60>)
 800d040:	480a      	ldr	r0, [pc, #40]	@ (800d06c <MX_USB_DEVICE_Init+0x58>)
 800d042:	f7fe fbcf 	bl	800b7e4 <USBD_CDC_RegisterInterface>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d04c:	f7f4 f966 	bl	800131c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d050:	4806      	ldr	r0, [pc, #24]	@ (800d06c <MX_USB_DEVICE_Init+0x58>)
 800d052:	f7fe fd19 	bl	800ba88 <USBD_Start>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d05c:	f7f4 f95e 	bl	800131c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d060:	f7f8 f922 	bl	80052a8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d064:	bf00      	nop
 800d066:	bd80      	pop	{r7, pc}
 800d068:	240000b0 	.word	0x240000b0
 800d06c:	24000804 	.word	0x24000804
 800d070:	2400001c 	.word	0x2400001c
 800d074:	2400009c 	.word	0x2400009c

0800d078 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d07c:	2200      	movs	r2, #0
 800d07e:	4905      	ldr	r1, [pc, #20]	@ (800d094 <CDC_Init_HS+0x1c>)
 800d080:	4805      	ldr	r0, [pc, #20]	@ (800d098 <CDC_Init_HS+0x20>)
 800d082:	f7fe fbc9 	bl	800b818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d086:	4905      	ldr	r1, [pc, #20]	@ (800d09c <CDC_Init_HS+0x24>)
 800d088:	4803      	ldr	r0, [pc, #12]	@ (800d098 <CDC_Init_HS+0x20>)
 800d08a:	f7fe fbe7 	bl	800b85c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d08e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d090:	4618      	mov	r0, r3
 800d092:	bd80      	pop	{r7, pc}
 800d094:	240012e0 	.word	0x240012e0
 800d098:	24000804 	.word	0x24000804
 800d09c:	24000ae0 	.word	0x24000ae0

0800d0a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d0a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	6039      	str	r1, [r7, #0]
 800d0ba:	71fb      	strb	r3, [r7, #7]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d0c0:	79fb      	ldrb	r3, [r7, #7]
 800d0c2:	2b23      	cmp	r3, #35	@ 0x23
 800d0c4:	d84a      	bhi.n	800d15c <CDC_Control_HS+0xac>
 800d0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0cc <CDC_Control_HS+0x1c>)
 800d0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0cc:	0800d15d 	.word	0x0800d15d
 800d0d0:	0800d15d 	.word	0x0800d15d
 800d0d4:	0800d15d 	.word	0x0800d15d
 800d0d8:	0800d15d 	.word	0x0800d15d
 800d0dc:	0800d15d 	.word	0x0800d15d
 800d0e0:	0800d15d 	.word	0x0800d15d
 800d0e4:	0800d15d 	.word	0x0800d15d
 800d0e8:	0800d15d 	.word	0x0800d15d
 800d0ec:	0800d15d 	.word	0x0800d15d
 800d0f0:	0800d15d 	.word	0x0800d15d
 800d0f4:	0800d15d 	.word	0x0800d15d
 800d0f8:	0800d15d 	.word	0x0800d15d
 800d0fc:	0800d15d 	.word	0x0800d15d
 800d100:	0800d15d 	.word	0x0800d15d
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d15d 	.word	0x0800d15d
 800d10c:	0800d15d 	.word	0x0800d15d
 800d110:	0800d15d 	.word	0x0800d15d
 800d114:	0800d15d 	.word	0x0800d15d
 800d118:	0800d15d 	.word	0x0800d15d
 800d11c:	0800d15d 	.word	0x0800d15d
 800d120:	0800d15d 	.word	0x0800d15d
 800d124:	0800d15d 	.word	0x0800d15d
 800d128:	0800d15d 	.word	0x0800d15d
 800d12c:	0800d15d 	.word	0x0800d15d
 800d130:	0800d15d 	.word	0x0800d15d
 800d134:	0800d15d 	.word	0x0800d15d
 800d138:	0800d15d 	.word	0x0800d15d
 800d13c:	0800d15d 	.word	0x0800d15d
 800d140:	0800d15d 	.word	0x0800d15d
 800d144:	0800d15d 	.word	0x0800d15d
 800d148:	0800d15d 	.word	0x0800d15d
 800d14c:	0800d15d 	.word	0x0800d15d
 800d150:	0800d15d 	.word	0x0800d15d
 800d154:	0800d15d 	.word	0x0800d15d
 800d158:	0800d15d 	.word	0x0800d15d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d15c:	bf00      	nop
  }

  return (USBD_OK);
 800d15e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	4805      	ldr	r0, [pc, #20]	@ (800d190 <CDC_Receive_HS+0x24>)
 800d17a:	f7fe fb6f 	bl	800b85c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d17e:	4804      	ldr	r0, [pc, #16]	@ (800d190 <CDC_Receive_HS+0x24>)
 800d180:	f7fe fbca 	bl	800b918 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d184:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	24000804 	.word	0x24000804

0800d194 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d1dc <CDC_Transmit_HS+0x48>)
 800d1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e00b      	b.n	800d1d2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d1ba:	887b      	ldrh	r3, [r7, #2]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	4806      	ldr	r0, [pc, #24]	@ (800d1dc <CDC_Transmit_HS+0x48>)
 800d1c2:	f7fe fb29 	bl	800b818 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d1c6:	4805      	ldr	r0, [pc, #20]	@ (800d1dc <CDC_Transmit_HS+0x48>)
 800d1c8:	f7fe fb66 	bl	800b898 <USBD_CDC_TransmitPacket>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	24000804 	.word	0x24000804

0800d1e0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	371c      	adds	r7, #28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
	...

0800d204 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	6039      	str	r1, [r7, #0]
 800d20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	2212      	movs	r2, #18
 800d214:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d216:	4b03      	ldr	r3, [pc, #12]	@ (800d224 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	240000d0 	.word	0x240000d0

0800d228 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	4603      	mov	r3, r0
 800d230:	6039      	str	r1, [r7, #0]
 800d232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2204      	movs	r2, #4
 800d238:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d23a:	4b03      	ldr	r3, [pc, #12]	@ (800d248 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	240000e4 	.word	0x240000e4

0800d24c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	6039      	str	r1, [r7, #0]
 800d256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d105      	bne.n	800d26a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	4907      	ldr	r1, [pc, #28]	@ (800d280 <USBD_HS_ProductStrDescriptor+0x34>)
 800d262:	4808      	ldr	r0, [pc, #32]	@ (800d284 <USBD_HS_ProductStrDescriptor+0x38>)
 800d264:	f7ff fdea 	bl	800ce3c <USBD_GetString>
 800d268:	e004      	b.n	800d274 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	4904      	ldr	r1, [pc, #16]	@ (800d280 <USBD_HS_ProductStrDescriptor+0x34>)
 800d26e:	4805      	ldr	r0, [pc, #20]	@ (800d284 <USBD_HS_ProductStrDescriptor+0x38>)
 800d270:	f7ff fde4 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d274:	4b02      	ldr	r3, [pc, #8]	@ (800d280 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	24001ae0 	.word	0x24001ae0
 800d284:	0800eb24 	.word	0x0800eb24

0800d288 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	6039      	str	r1, [r7, #0]
 800d292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	4904      	ldr	r1, [pc, #16]	@ (800d2a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d298:	4804      	ldr	r0, [pc, #16]	@ (800d2ac <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d29a:	f7ff fdcf 	bl	800ce3c <USBD_GetString>
  return USBD_StrDesc;
 800d29e:	4b02      	ldr	r3, [pc, #8]	@ (800d2a8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	24001ae0 	.word	0x24001ae0
 800d2ac:	0800eb3c 	.word	0x0800eb3c

0800d2b0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	6039      	str	r1, [r7, #0]
 800d2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	221a      	movs	r2, #26
 800d2c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2c2:	f000 f843 	bl	800d34c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d2c6:	4b02      	ldr	r3, [pc, #8]	@ (800d2d0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	240000e8 	.word	0x240000e8

0800d2d4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d105      	bne.n	800d2f2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	4907      	ldr	r1, [pc, #28]	@ (800d308 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d2ea:	4808      	ldr	r0, [pc, #32]	@ (800d30c <USBD_HS_ConfigStrDescriptor+0x38>)
 800d2ec:	f7ff fda6 	bl	800ce3c <USBD_GetString>
 800d2f0:	e004      	b.n	800d2fc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	4904      	ldr	r1, [pc, #16]	@ (800d308 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d2f6:	4805      	ldr	r0, [pc, #20]	@ (800d30c <USBD_HS_ConfigStrDescriptor+0x38>)
 800d2f8:	f7ff fda0 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2fc:	4b02      	ldr	r3, [pc, #8]	@ (800d308 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	24001ae0 	.word	0x24001ae0
 800d30c:	0800eb50 	.word	0x0800eb50

0800d310 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d31c:	79fb      	ldrb	r3, [r7, #7]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d105      	bne.n	800d32e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	4907      	ldr	r1, [pc, #28]	@ (800d344 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d326:	4808      	ldr	r0, [pc, #32]	@ (800d348 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d328:	f7ff fd88 	bl	800ce3c <USBD_GetString>
 800d32c:	e004      	b.n	800d338 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	4904      	ldr	r1, [pc, #16]	@ (800d344 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d332:	4805      	ldr	r0, [pc, #20]	@ (800d348 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d334:	f7ff fd82 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d338:	4b02      	ldr	r3, [pc, #8]	@ (800d344 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	24001ae0 	.word	0x24001ae0
 800d348:	0800eb5c 	.word	0x0800eb5c

0800d34c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d352:	4b0f      	ldr	r3, [pc, #60]	@ (800d390 <Get_SerialNum+0x44>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d358:	4b0e      	ldr	r3, [pc, #56]	@ (800d394 <Get_SerialNum+0x48>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d35e:	4b0e      	ldr	r3, [pc, #56]	@ (800d398 <Get_SerialNum+0x4c>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4413      	add	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d009      	beq.n	800d386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d372:	2208      	movs	r2, #8
 800d374:	4909      	ldr	r1, [pc, #36]	@ (800d39c <Get_SerialNum+0x50>)
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 f814 	bl	800d3a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d37c:	2204      	movs	r2, #4
 800d37e:	4908      	ldr	r1, [pc, #32]	@ (800d3a0 <Get_SerialNum+0x54>)
 800d380:	68b8      	ldr	r0, [r7, #8]
 800d382:	f000 f80f 	bl	800d3a4 <IntToUnicode>
  }
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	08fff800 	.word	0x08fff800
 800d394:	08fff804 	.word	0x08fff804
 800d398:	08fff808 	.word	0x08fff808
 800d39c:	240000ea 	.word	0x240000ea
 800d3a0:	240000fa 	.word	0x240000fa

0800d3a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	75fb      	strb	r3, [r7, #23]
 800d3ba:	e027      	b.n	800d40c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	0f1b      	lsrs	r3, r3, #28
 800d3c0:	2b09      	cmp	r3, #9
 800d3c2:	d80b      	bhi.n	800d3dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0f1b      	lsrs	r3, r3, #28
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	3230      	adds	r2, #48	@ 0x30
 800d3d6:	b2d2      	uxtb	r2, r2
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	e00a      	b.n	800d3f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	0f1b      	lsrs	r3, r3, #28
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	440b      	add	r3, r1
 800d3ec:	3237      	adds	r2, #55	@ 0x37
 800d3ee:	b2d2      	uxtb	r2, r2
 800d3f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	011b      	lsls	r3, r3, #4
 800d3f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3f8:	7dfb      	ldrb	r3, [r7, #23]
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	4413      	add	r3, r2
 800d402:	2200      	movs	r2, #0
 800d404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d406:	7dfb      	ldrb	r3, [r7, #23]
 800d408:	3301      	adds	r3, #1
 800d40a:	75fb      	strb	r3, [r7, #23]
 800d40c:	7dfa      	ldrb	r2, [r7, #23]
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	429a      	cmp	r2, r3
 800d412:	d3d3      	bcc.n	800d3bc <IntToUnicode+0x18>
  }
}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	371c      	adds	r7, #28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
	...

0800d424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b0ba      	sub	sp, #232	@ 0xe8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d42c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	605a      	str	r2, [r3, #4]
 800d436:	609a      	str	r2, [r3, #8]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d43c:	f107 0310 	add.w	r3, r7, #16
 800d440:	22c0      	movs	r2, #192	@ 0xc0
 800d442:	2100      	movs	r1, #0
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fc78 	bl	800dd3a <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a45      	ldr	r2, [pc, #276]	@ (800d564 <HAL_PCD_MspInit+0x140>)
 800d450:	4293      	cmp	r3, r2
 800d452:	f040 8082 	bne.w	800d55a <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d456:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d462:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800d466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d46a:	f107 0310 	add.w	r3, r7, #16
 800d46e:	4618      	mov	r0, r3
 800d470:	f7f8 fed2 	bl	8006218 <HAL_RCCEx_PeriphCLKConfig>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d001      	beq.n	800d47e <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800d47a:	f7f3 ff4f 	bl	800131c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d47e:	f7f7 ff13 	bl	80052a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d482:	4b39      	ldr	r3, [pc, #228]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d484:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d488:	4a37      	ldr	r2, [pc, #220]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d48a:	f043 0301 	orr.w	r3, r3, #1
 800d48e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800d492:	4b35      	ldr	r3, [pc, #212]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d494:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	60fb      	str	r3, [r7, #12]
 800d49e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d4a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	482c      	ldr	r0, [pc, #176]	@ (800d56c <HAL_PCD_MspInit+0x148>)
 800d4bc:	f7f4 ff12 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800d4c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d4de:	4619      	mov	r1, r3
 800d4e0:	4822      	ldr	r0, [pc, #136]	@ (800d56c <HAL_PCD_MspInit+0x148>)
 800d4e2:	f7f4 feff 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800d4e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d500:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d504:	4619      	mov	r1, r3
 800d506:	4819      	ldr	r0, [pc, #100]	@ (800d56c <HAL_PCD_MspInit+0x148>)
 800d508:	f7f4 feec 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d50c:	4b16      	ldr	r3, [pc, #88]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d50e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d512:	4a15      	ldr	r2, [pc, #84]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d518:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800d51c:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <HAL_PCD_MspInit+0x144>)
 800d51e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800d522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d526:	60bb      	str	r3, [r7, #8]
 800d528:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800d52a:	2200      	movs	r2, #0
 800d52c:	2100      	movs	r1, #0
 800d52e:	204a      	movs	r0, #74	@ 0x4a
 800d530:	f7f4 fe2b 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800d534:	204a      	movs	r0, #74	@ 0x4a
 800d536:	f7f4 fe42 	bl	80021be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800d53a:	2200      	movs	r2, #0
 800d53c:	2100      	movs	r1, #0
 800d53e:	204b      	movs	r0, #75	@ 0x4b
 800d540:	f7f4 fe23 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800d544:	204b      	movs	r0, #75	@ 0x4b
 800d546:	f7f4 fe3a 	bl	80021be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800d54a:	2200      	movs	r2, #0
 800d54c:	2100      	movs	r1, #0
 800d54e:	204d      	movs	r0, #77	@ 0x4d
 800d550:	f7f4 fe1b 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d554:	204d      	movs	r0, #77	@ 0x4d
 800d556:	f7f4 fe32 	bl	80021be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d55a:	bf00      	nop
 800d55c:	37e8      	adds	r7, #232	@ 0xe8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	40040000 	.word	0x40040000
 800d568:	58024400 	.word	0x58024400
 800d56c:	58020000 	.word	0x58020000

0800d570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f7fe facb 	bl	800bb22 <USBD_LL_SetupStage>
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	6879      	ldr	r1, [r7, #4]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	00db      	lsls	r3, r3, #3
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	440b      	add	r3, r1
 800d5b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	78fb      	ldrb	r3, [r7, #3]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	f7fe fb05 	bl	800bbcc <USBD_LL_DataOutStage>
}
 800d5c2:	bf00      	nop
 800d5c4:	3708      	adds	r7, #8
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5dc:	78fa      	ldrb	r2, [r7, #3]
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3320      	adds	r3, #32
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	78fb      	ldrb	r3, [r7, #3]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7fe fb9e 	bl	800bd32 <USBD_LL_DataInStage>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fcd8 	bl	800bfc2 <USBD_LL_SOF>
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d622:	2301      	movs	r3, #1
 800d624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	79db      	ldrb	r3, [r3, #7]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d102      	bne.n	800d634 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d62e:	2300      	movs	r3, #0
 800d630:	73fb      	strb	r3, [r7, #15]
 800d632:	e008      	b.n	800d646 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	79db      	ldrb	r3, [r3, #7]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d102      	bne.n	800d642 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d63c:	2301      	movs	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
 800d640:	e001      	b.n	800d646 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d642:	f7f3 fe6b 	bl	800131c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d64c:	7bfa      	ldrb	r2, [r7, #15]
 800d64e:	4611      	mov	r1, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7fe fc72 	bl	800bf3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe fc1a 	bl	800be96 <USBD_LL_Reset>
}
 800d662:	bf00      	nop
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe fc6d 	bl	800bf5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	6812      	ldr	r2, [r2, #0]
 800d68e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d692:	f043 0301 	orr.w	r3, r3, #1
 800d696:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7adb      	ldrb	r3, [r3, #11]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a0:	4b04      	ldr	r3, [pc, #16]	@ (800d6b4 <HAL_PCD_SuspendCallback+0x48>)
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	4a03      	ldr	r2, [pc, #12]	@ (800d6b4 <HAL_PCD_SuspendCallback+0x48>)
 800d6a6:	f043 0306 	orr.w	r3, r3, #6
 800d6aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	e000ed00 	.word	0xe000ed00

0800d6b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fc63 	bl	800bf92 <USBD_LL_Resume>
}
 800d6cc:	bf00      	nop
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6e6:	78fa      	ldrb	r2, [r7, #3]
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fcbb 	bl	800c066 <USBD_LL_IsoOUTIncomplete>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	460b      	mov	r3, r1
 800d702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	4611      	mov	r1, r2
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fc77 	bl	800c002 <USBD_LL_IsoINIncomplete>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fccd 	bl	800c0ca <USBD_LL_DevConnected>
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fcca 	bl	800c0e0 <USBD_LL_DevDisconnected>
}
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d140      	bne.n	800d7e6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d764:	4a22      	ldr	r2, [pc, #136]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a20      	ldr	r2, [pc, #128]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d770:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d774:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d776:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f4 <USBD_LL_Init+0xa0>)
 800d778:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800d77a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d77c:	2209      	movs	r2, #9
 800d77e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d780:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d782:	2202      	movs	r2, #2
 800d784:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d786:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d788:	2200      	movs	r2, #0
 800d78a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d78c:	4b18      	ldr	r3, [pc, #96]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d78e:	2202      	movs	r2, #2
 800d790:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d792:	4b17      	ldr	r3, [pc, #92]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d794:	2200      	movs	r2, #0
 800d796:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d798:	4b15      	ldr	r3, [pc, #84]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d79a:	2200      	movs	r2, #0
 800d79c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d79e:	4b14      	ldr	r3, [pc, #80]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800d7a4:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d7aa:	4b11      	ldr	r3, [pc, #68]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d7b6:	480e      	ldr	r0, [pc, #56]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7b8:	f7f6 fa9c 	bl	8003cf4 <HAL_PCD_Init>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d7c2:	f7f3 fdab 	bl	800131c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d7c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d7ca:	4809      	ldr	r0, [pc, #36]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7cc:	f7f7 fcf1 	bl	80051b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d7d0:	2280      	movs	r2, #128	@ 0x80
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	4806      	ldr	r0, [pc, #24]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7d6:	f7f7 fca5 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d7da:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d7de:	2101      	movs	r1, #1
 800d7e0:	4803      	ldr	r0, [pc, #12]	@ (800d7f0 <USBD_LL_Init+0x9c>)
 800d7e2:	f7f7 fc9f 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	24001ce0 	.word	0x24001ce0
 800d7f4:	40040000 	.word	0x40040000

0800d7f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d800:	2300      	movs	r3, #0
 800d802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d80e:	4618      	mov	r0, r3
 800d810:	f7f6 fb7c 	bl	8003f0c <HAL_PCD_Start>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 f942 	bl	800daa4 <USBD_Get_USB_Status>
 800d820:	4603      	mov	r3, r0
 800d822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d824:	7bbb      	ldrb	r3, [r7, #14]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	4608      	mov	r0, r1
 800d838:	4611      	mov	r1, r2
 800d83a:	461a      	mov	r2, r3
 800d83c:	4603      	mov	r3, r0
 800d83e:	70fb      	strb	r3, [r7, #3]
 800d840:	460b      	mov	r3, r1
 800d842:	70bb      	strb	r3, [r7, #2]
 800d844:	4613      	mov	r3, r2
 800d846:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d856:	78bb      	ldrb	r3, [r7, #2]
 800d858:	883a      	ldrh	r2, [r7, #0]
 800d85a:	78f9      	ldrb	r1, [r7, #3]
 800d85c:	f7f7 f87d 	bl	800495a <HAL_PCD_EP_Open>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 f91c 	bl	800daa4 <USBD_Get_USB_Status>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d870:	7bbb      	ldrb	r3, [r7, #14]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	460b      	mov	r3, r1
 800d884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d894:	78fa      	ldrb	r2, [r7, #3]
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f7f7 f8c8 	bl	8004a2e <HAL_PCD_EP_Close>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 f8fd 	bl	800daa4 <USBD_Get_USB_Status>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d2:	78fa      	ldrb	r2, [r7, #3]
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7f7 f980 	bl	8004bdc <HAL_PCD_EP_SetStall>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f000 f8de 	bl	800daa4 <USBD_Get_USB_Status>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	460b      	mov	r3, r1
 800d900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d910:	78fa      	ldrb	r2, [r7, #3]
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f7f7 f9c4 	bl	8004ca2 <HAL_PCD_EP_ClrStall>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 f8bf 	bl	800daa4 <USBD_Get_USB_Status>
 800d926:	4603      	mov	r3, r0
 800d928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3710      	adds	r7, #16
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da0b      	bge.n	800d968 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d950:	78fb      	ldrb	r3, [r7, #3]
 800d952:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d956:	68f9      	ldr	r1, [r7, #12]
 800d958:	4613      	mov	r3, r2
 800d95a:	00db      	lsls	r3, r3, #3
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	440b      	add	r3, r1
 800d962:	3316      	adds	r3, #22
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	e00b      	b.n	800d980 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d968:	78fb      	ldrb	r3, [r7, #3]
 800d96a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d96e:	68f9      	ldr	r1, [r7, #12]
 800d970:	4613      	mov	r3, r2
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	4413      	add	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	440b      	add	r3, r1
 800d97a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d97e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9a6:	78fa      	ldrb	r2, [r7, #3]
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7f6 ffb1 	bl	8004912 <HAL_PCD_SetAddress>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 f874 	bl	800daa4 <USBD_Get_USB_Status>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b086      	sub	sp, #24
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	60f8      	str	r0, [r7, #12]
 800d9d2:	607a      	str	r2, [r7, #4]
 800d9d4:	603b      	str	r3, [r7, #0]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9e8:	7af9      	ldrb	r1, [r7, #11]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	f7f7 f8bb 	bl	8004b68 <HAL_PCD_EP_Transmit>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 f853 	bl	800daa4 <USBD_Get_USB_Status>
 800d9fe:	4603      	mov	r3, r0
 800da00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da02:	7dbb      	ldrb	r3, [r7, #22]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	607a      	str	r2, [r7, #4]
 800da16:	603b      	str	r3, [r7, #0]
 800da18:	460b      	mov	r3, r1
 800da1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da2a:	7af9      	ldrb	r1, [r7, #11]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	f7f7 f847 	bl	8004ac2 <HAL_PCD_EP_Receive>
 800da34:	4603      	mov	r3, r0
 800da36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da38:	7dfb      	ldrb	r3, [r7, #23]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 f832 	bl	800daa4 <USBD_Get_USB_Status>
 800da40:	4603      	mov	r3, r0
 800da42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da44:	7dbb      	ldrb	r3, [r7, #22]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	460b      	mov	r3, r1
 800da58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da60:	78fa      	ldrb	r2, [r7, #3]
 800da62:	4611      	mov	r1, r2
 800da64:	4618      	mov	r0, r3
 800da66:	f7f7 f867 	bl	8004b38 <HAL_PCD_EP_GetRxCount>
 800da6a:	4603      	mov	r3, r0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da7c:	4b03      	ldr	r3, [pc, #12]	@ (800da8c <USBD_static_malloc+0x18>)
}
 800da7e:	4618      	mov	r0, r3
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	240021c4 	.word	0x240021c4

0800da90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	4603      	mov	r3, r0
 800daac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	d817      	bhi.n	800dae8 <USBD_Get_USB_Status+0x44>
 800dab8:	a201      	add	r2, pc, #4	@ (adr r2, 800dac0 <USBD_Get_USB_Status+0x1c>)
 800daba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabe:	bf00      	nop
 800dac0:	0800dad1 	.word	0x0800dad1
 800dac4:	0800dad7 	.word	0x0800dad7
 800dac8:	0800dadd 	.word	0x0800dadd
 800dacc:	0800dae3 	.word	0x0800dae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73fb      	strb	r3, [r7, #15]
    break;
 800dad4:	e00b      	b.n	800daee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dad6:	2303      	movs	r3, #3
 800dad8:	73fb      	strb	r3, [r7, #15]
    break;
 800dada:	e008      	b.n	800daee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dadc:	2301      	movs	r3, #1
 800dade:	73fb      	strb	r3, [r7, #15]
    break;
 800dae0:	e005      	b.n	800daee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dae2:	2303      	movs	r3, #3
 800dae4:	73fb      	strb	r3, [r7, #15]
    break;
 800dae6:	e002      	b.n	800daee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dae8:	2303      	movs	r3, #3
 800daea:	73fb      	strb	r3, [r7, #15]
    break;
 800daec:	bf00      	nop
  }
  return usb_status;
 800daee:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <std>:
 800dafc:	2300      	movs	r3, #0
 800dafe:	b510      	push	{r4, lr}
 800db00:	4604      	mov	r4, r0
 800db02:	e9c0 3300 	strd	r3, r3, [r0]
 800db06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db0a:	6083      	str	r3, [r0, #8]
 800db0c:	8181      	strh	r1, [r0, #12]
 800db0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800db10:	81c2      	strh	r2, [r0, #14]
 800db12:	6183      	str	r3, [r0, #24]
 800db14:	4619      	mov	r1, r3
 800db16:	2208      	movs	r2, #8
 800db18:	305c      	adds	r0, #92	@ 0x5c
 800db1a:	f000 f90e 	bl	800dd3a <memset>
 800db1e:	4b0d      	ldr	r3, [pc, #52]	@ (800db54 <std+0x58>)
 800db20:	6263      	str	r3, [r4, #36]	@ 0x24
 800db22:	4b0d      	ldr	r3, [pc, #52]	@ (800db58 <std+0x5c>)
 800db24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db26:	4b0d      	ldr	r3, [pc, #52]	@ (800db5c <std+0x60>)
 800db28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db2a:	4b0d      	ldr	r3, [pc, #52]	@ (800db60 <std+0x64>)
 800db2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800db2e:	4b0d      	ldr	r3, [pc, #52]	@ (800db64 <std+0x68>)
 800db30:	6224      	str	r4, [r4, #32]
 800db32:	429c      	cmp	r4, r3
 800db34:	d006      	beq.n	800db44 <std+0x48>
 800db36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db3a:	4294      	cmp	r4, r2
 800db3c:	d002      	beq.n	800db44 <std+0x48>
 800db3e:	33d0      	adds	r3, #208	@ 0xd0
 800db40:	429c      	cmp	r4, r3
 800db42:	d105      	bne.n	800db50 <std+0x54>
 800db44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db4c:	f000 b96e 	b.w	800de2c <__retarget_lock_init_recursive>
 800db50:	bd10      	pop	{r4, pc}
 800db52:	bf00      	nop
 800db54:	0800dcb5 	.word	0x0800dcb5
 800db58:	0800dcd7 	.word	0x0800dcd7
 800db5c:	0800dd0f 	.word	0x0800dd0f
 800db60:	0800dd33 	.word	0x0800dd33
 800db64:	240023e4 	.word	0x240023e4

0800db68 <stdio_exit_handler>:
 800db68:	4a02      	ldr	r2, [pc, #8]	@ (800db74 <stdio_exit_handler+0xc>)
 800db6a:	4903      	ldr	r1, [pc, #12]	@ (800db78 <stdio_exit_handler+0x10>)
 800db6c:	4803      	ldr	r0, [pc, #12]	@ (800db7c <stdio_exit_handler+0x14>)
 800db6e:	f000 b869 	b.w	800dc44 <_fwalk_sglue>
 800db72:	bf00      	nop
 800db74:	24000104 	.word	0x24000104
 800db78:	0800e6cd 	.word	0x0800e6cd
 800db7c:	24000114 	.word	0x24000114

0800db80 <cleanup_stdio>:
 800db80:	6841      	ldr	r1, [r0, #4]
 800db82:	4b0c      	ldr	r3, [pc, #48]	@ (800dbb4 <cleanup_stdio+0x34>)
 800db84:	4299      	cmp	r1, r3
 800db86:	b510      	push	{r4, lr}
 800db88:	4604      	mov	r4, r0
 800db8a:	d001      	beq.n	800db90 <cleanup_stdio+0x10>
 800db8c:	f000 fd9e 	bl	800e6cc <_fflush_r>
 800db90:	68a1      	ldr	r1, [r4, #8]
 800db92:	4b09      	ldr	r3, [pc, #36]	@ (800dbb8 <cleanup_stdio+0x38>)
 800db94:	4299      	cmp	r1, r3
 800db96:	d002      	beq.n	800db9e <cleanup_stdio+0x1e>
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 fd97 	bl	800e6cc <_fflush_r>
 800db9e:	68e1      	ldr	r1, [r4, #12]
 800dba0:	4b06      	ldr	r3, [pc, #24]	@ (800dbbc <cleanup_stdio+0x3c>)
 800dba2:	4299      	cmp	r1, r3
 800dba4:	d004      	beq.n	800dbb0 <cleanup_stdio+0x30>
 800dba6:	4620      	mov	r0, r4
 800dba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbac:	f000 bd8e 	b.w	800e6cc <_fflush_r>
 800dbb0:	bd10      	pop	{r4, pc}
 800dbb2:	bf00      	nop
 800dbb4:	240023e4 	.word	0x240023e4
 800dbb8:	2400244c 	.word	0x2400244c
 800dbbc:	240024b4 	.word	0x240024b4

0800dbc0 <global_stdio_init.part.0>:
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800dbf0 <global_stdio_init.part.0+0x30>)
 800dbc4:	4c0b      	ldr	r4, [pc, #44]	@ (800dbf4 <global_stdio_init.part.0+0x34>)
 800dbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf8 <global_stdio_init.part.0+0x38>)
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2104      	movs	r1, #4
 800dbd0:	f7ff ff94 	bl	800dafc <std>
 800dbd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbd8:	2201      	movs	r2, #1
 800dbda:	2109      	movs	r1, #9
 800dbdc:	f7ff ff8e 	bl	800dafc <std>
 800dbe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbea:	2112      	movs	r1, #18
 800dbec:	f7ff bf86 	b.w	800dafc <std>
 800dbf0:	2400251c 	.word	0x2400251c
 800dbf4:	240023e4 	.word	0x240023e4
 800dbf8:	0800db69 	.word	0x0800db69

0800dbfc <__sfp_lock_acquire>:
 800dbfc:	4801      	ldr	r0, [pc, #4]	@ (800dc04 <__sfp_lock_acquire+0x8>)
 800dbfe:	f000 b916 	b.w	800de2e <__retarget_lock_acquire_recursive>
 800dc02:	bf00      	nop
 800dc04:	24002525 	.word	0x24002525

0800dc08 <__sfp_lock_release>:
 800dc08:	4801      	ldr	r0, [pc, #4]	@ (800dc10 <__sfp_lock_release+0x8>)
 800dc0a:	f000 b911 	b.w	800de30 <__retarget_lock_release_recursive>
 800dc0e:	bf00      	nop
 800dc10:	24002525 	.word	0x24002525

0800dc14 <__sinit>:
 800dc14:	b510      	push	{r4, lr}
 800dc16:	4604      	mov	r4, r0
 800dc18:	f7ff fff0 	bl	800dbfc <__sfp_lock_acquire>
 800dc1c:	6a23      	ldr	r3, [r4, #32]
 800dc1e:	b11b      	cbz	r3, 800dc28 <__sinit+0x14>
 800dc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc24:	f7ff bff0 	b.w	800dc08 <__sfp_lock_release>
 800dc28:	4b04      	ldr	r3, [pc, #16]	@ (800dc3c <__sinit+0x28>)
 800dc2a:	6223      	str	r3, [r4, #32]
 800dc2c:	4b04      	ldr	r3, [pc, #16]	@ (800dc40 <__sinit+0x2c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1f5      	bne.n	800dc20 <__sinit+0xc>
 800dc34:	f7ff ffc4 	bl	800dbc0 <global_stdio_init.part.0>
 800dc38:	e7f2      	b.n	800dc20 <__sinit+0xc>
 800dc3a:	bf00      	nop
 800dc3c:	0800db81 	.word	0x0800db81
 800dc40:	2400251c 	.word	0x2400251c

0800dc44 <_fwalk_sglue>:
 800dc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc48:	4607      	mov	r7, r0
 800dc4a:	4688      	mov	r8, r1
 800dc4c:	4614      	mov	r4, r2
 800dc4e:	2600      	movs	r6, #0
 800dc50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc54:	f1b9 0901 	subs.w	r9, r9, #1
 800dc58:	d505      	bpl.n	800dc66 <_fwalk_sglue+0x22>
 800dc5a:	6824      	ldr	r4, [r4, #0]
 800dc5c:	2c00      	cmp	r4, #0
 800dc5e:	d1f7      	bne.n	800dc50 <_fwalk_sglue+0xc>
 800dc60:	4630      	mov	r0, r6
 800dc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d907      	bls.n	800dc7c <_fwalk_sglue+0x38>
 800dc6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc70:	3301      	adds	r3, #1
 800dc72:	d003      	beq.n	800dc7c <_fwalk_sglue+0x38>
 800dc74:	4629      	mov	r1, r5
 800dc76:	4638      	mov	r0, r7
 800dc78:	47c0      	blx	r8
 800dc7a:	4306      	orrs	r6, r0
 800dc7c:	3568      	adds	r5, #104	@ 0x68
 800dc7e:	e7e9      	b.n	800dc54 <_fwalk_sglue+0x10>

0800dc80 <iprintf>:
 800dc80:	b40f      	push	{r0, r1, r2, r3}
 800dc82:	b507      	push	{r0, r1, r2, lr}
 800dc84:	4906      	ldr	r1, [pc, #24]	@ (800dca0 <iprintf+0x20>)
 800dc86:	ab04      	add	r3, sp, #16
 800dc88:	6808      	ldr	r0, [r1, #0]
 800dc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc8e:	6881      	ldr	r1, [r0, #8]
 800dc90:	9301      	str	r3, [sp, #4]
 800dc92:	f000 f9f1 	bl	800e078 <_vfiprintf_r>
 800dc96:	b003      	add	sp, #12
 800dc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc9c:	b004      	add	sp, #16
 800dc9e:	4770      	bx	lr
 800dca0:	24000110 	.word	0x24000110

0800dca4 <putchar>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	@ (800dcb0 <putchar+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	6882      	ldr	r2, [r0, #8]
 800dcac:	f000 bd36 	b.w	800e71c <_putc_r>
 800dcb0:	24000110 	.word	0x24000110

0800dcb4 <__sread>:
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcbc:	f000 f868 	bl	800dd90 <_read_r>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	bfab      	itete	ge
 800dcc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcc8:	181b      	addge	r3, r3, r0
 800dcca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dcce:	bfac      	ite	ge
 800dcd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dcd2:	81a3      	strhlt	r3, [r4, #12]
 800dcd4:	bd10      	pop	{r4, pc}

0800dcd6 <__swrite>:
 800dcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcda:	461f      	mov	r7, r3
 800dcdc:	898b      	ldrh	r3, [r1, #12]
 800dcde:	05db      	lsls	r3, r3, #23
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	4616      	mov	r6, r2
 800dce6:	d505      	bpl.n	800dcf4 <__swrite+0x1e>
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	2302      	movs	r3, #2
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f000 f83c 	bl	800dd6c <_lseek_r>
 800dcf4:	89a3      	ldrh	r3, [r4, #12]
 800dcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dcfe:	81a3      	strh	r3, [r4, #12]
 800dd00:	4632      	mov	r2, r6
 800dd02:	463b      	mov	r3, r7
 800dd04:	4628      	mov	r0, r5
 800dd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	f000 b853 	b.w	800ddb4 <_write_r>

0800dd0e <__sseek>:
 800dd0e:	b510      	push	{r4, lr}
 800dd10:	460c      	mov	r4, r1
 800dd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd16:	f000 f829 	bl	800dd6c <_lseek_r>
 800dd1a:	1c43      	adds	r3, r0, #1
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	bf15      	itete	ne
 800dd20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd2a:	81a3      	strheq	r3, [r4, #12]
 800dd2c:	bf18      	it	ne
 800dd2e:	81a3      	strhne	r3, [r4, #12]
 800dd30:	bd10      	pop	{r4, pc}

0800dd32 <__sclose>:
 800dd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd36:	f000 b809 	b.w	800dd4c <_close_r>

0800dd3a <memset>:
 800dd3a:	4402      	add	r2, r0
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d100      	bne.n	800dd44 <memset+0xa>
 800dd42:	4770      	bx	lr
 800dd44:	f803 1b01 	strb.w	r1, [r3], #1
 800dd48:	e7f9      	b.n	800dd3e <memset+0x4>
	...

0800dd4c <_close_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d06      	ldr	r5, [pc, #24]	@ (800dd68 <_close_r+0x1c>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	f7f3 ff05 	bl	8001b66 <_close>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_close_r+0x1a>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_close_r+0x1a>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	24002520 	.word	0x24002520

0800dd6c <_lseek_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	@ (800dd8c <_lseek_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f3 ff1a 	bl	8001bb4 <_lseek>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_lseek_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_lseek_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	24002520 	.word	0x24002520

0800dd90 <_read_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_read_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f3 fea8 	bl	8001af4 <_read>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_read_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_read_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	24002520 	.word	0x24002520

0800ddb4 <_write_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d07      	ldr	r5, [pc, #28]	@ (800ddd4 <_write_r+0x20>)
 800ddb8:	4604      	mov	r4, r0
 800ddba:	4608      	mov	r0, r1
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	602a      	str	r2, [r5, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f7f3 feb3 	bl	8001b2e <_write>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d102      	bne.n	800ddd2 <_write_r+0x1e>
 800ddcc:	682b      	ldr	r3, [r5, #0]
 800ddce:	b103      	cbz	r3, 800ddd2 <_write_r+0x1e>
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	bd38      	pop	{r3, r4, r5, pc}
 800ddd4:	24002520 	.word	0x24002520

0800ddd8 <__errno>:
 800ddd8:	4b01      	ldr	r3, [pc, #4]	@ (800dde0 <__errno+0x8>)
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	24000110 	.word	0x24000110

0800dde4 <__libc_init_array>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	4d0d      	ldr	r5, [pc, #52]	@ (800de1c <__libc_init_array+0x38>)
 800dde8:	4c0d      	ldr	r4, [pc, #52]	@ (800de20 <__libc_init_array+0x3c>)
 800ddea:	1b64      	subs	r4, r4, r5
 800ddec:	10a4      	asrs	r4, r4, #2
 800ddee:	2600      	movs	r6, #0
 800ddf0:	42a6      	cmp	r6, r4
 800ddf2:	d109      	bne.n	800de08 <__libc_init_array+0x24>
 800ddf4:	4d0b      	ldr	r5, [pc, #44]	@ (800de24 <__libc_init_array+0x40>)
 800ddf6:	4c0c      	ldr	r4, [pc, #48]	@ (800de28 <__libc_init_array+0x44>)
 800ddf8:	f000 fdec 	bl	800e9d4 <_init>
 800ddfc:	1b64      	subs	r4, r4, r5
 800ddfe:	10a4      	asrs	r4, r4, #2
 800de00:	2600      	movs	r6, #0
 800de02:	42a6      	cmp	r6, r4
 800de04:	d105      	bne.n	800de12 <__libc_init_array+0x2e>
 800de06:	bd70      	pop	{r4, r5, r6, pc}
 800de08:	f855 3b04 	ldr.w	r3, [r5], #4
 800de0c:	4798      	blx	r3
 800de0e:	3601      	adds	r6, #1
 800de10:	e7ee      	b.n	800ddf0 <__libc_init_array+0xc>
 800de12:	f855 3b04 	ldr.w	r3, [r5], #4
 800de16:	4798      	blx	r3
 800de18:	3601      	adds	r6, #1
 800de1a:	e7f2      	b.n	800de02 <__libc_init_array+0x1e>
 800de1c:	0800f1b4 	.word	0x0800f1b4
 800de20:	0800f1b4 	.word	0x0800f1b4
 800de24:	0800f1b4 	.word	0x0800f1b4
 800de28:	0800f1b8 	.word	0x0800f1b8

0800de2c <__retarget_lock_init_recursive>:
 800de2c:	4770      	bx	lr

0800de2e <__retarget_lock_acquire_recursive>:
 800de2e:	4770      	bx	lr

0800de30 <__retarget_lock_release_recursive>:
 800de30:	4770      	bx	lr
	...

0800de34 <_free_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4605      	mov	r5, r0
 800de38:	2900      	cmp	r1, #0
 800de3a:	d041      	beq.n	800dec0 <_free_r+0x8c>
 800de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de40:	1f0c      	subs	r4, r1, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	bfb8      	it	lt
 800de46:	18e4      	addlt	r4, r4, r3
 800de48:	f000 f8e0 	bl	800e00c <__malloc_lock>
 800de4c:	4a1d      	ldr	r2, [pc, #116]	@ (800dec4 <_free_r+0x90>)
 800de4e:	6813      	ldr	r3, [r2, #0]
 800de50:	b933      	cbnz	r3, 800de60 <_free_r+0x2c>
 800de52:	6063      	str	r3, [r4, #4]
 800de54:	6014      	str	r4, [r2, #0]
 800de56:	4628      	mov	r0, r5
 800de58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de5c:	f000 b8dc 	b.w	800e018 <__malloc_unlock>
 800de60:	42a3      	cmp	r3, r4
 800de62:	d908      	bls.n	800de76 <_free_r+0x42>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	1821      	adds	r1, r4, r0
 800de68:	428b      	cmp	r3, r1
 800de6a:	bf01      	itttt	eq
 800de6c:	6819      	ldreq	r1, [r3, #0]
 800de6e:	685b      	ldreq	r3, [r3, #4]
 800de70:	1809      	addeq	r1, r1, r0
 800de72:	6021      	streq	r1, [r4, #0]
 800de74:	e7ed      	b.n	800de52 <_free_r+0x1e>
 800de76:	461a      	mov	r2, r3
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	b10b      	cbz	r3, 800de80 <_free_r+0x4c>
 800de7c:	42a3      	cmp	r3, r4
 800de7e:	d9fa      	bls.n	800de76 <_free_r+0x42>
 800de80:	6811      	ldr	r1, [r2, #0]
 800de82:	1850      	adds	r0, r2, r1
 800de84:	42a0      	cmp	r0, r4
 800de86:	d10b      	bne.n	800dea0 <_free_r+0x6c>
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	4401      	add	r1, r0
 800de8c:	1850      	adds	r0, r2, r1
 800de8e:	4283      	cmp	r3, r0
 800de90:	6011      	str	r1, [r2, #0]
 800de92:	d1e0      	bne.n	800de56 <_free_r+0x22>
 800de94:	6818      	ldr	r0, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	6053      	str	r3, [r2, #4]
 800de9a:	4408      	add	r0, r1
 800de9c:	6010      	str	r0, [r2, #0]
 800de9e:	e7da      	b.n	800de56 <_free_r+0x22>
 800dea0:	d902      	bls.n	800dea8 <_free_r+0x74>
 800dea2:	230c      	movs	r3, #12
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	e7d6      	b.n	800de56 <_free_r+0x22>
 800dea8:	6820      	ldr	r0, [r4, #0]
 800deaa:	1821      	adds	r1, r4, r0
 800deac:	428b      	cmp	r3, r1
 800deae:	bf04      	itt	eq
 800deb0:	6819      	ldreq	r1, [r3, #0]
 800deb2:	685b      	ldreq	r3, [r3, #4]
 800deb4:	6063      	str	r3, [r4, #4]
 800deb6:	bf04      	itt	eq
 800deb8:	1809      	addeq	r1, r1, r0
 800deba:	6021      	streq	r1, [r4, #0]
 800debc:	6054      	str	r4, [r2, #4]
 800debe:	e7ca      	b.n	800de56 <_free_r+0x22>
 800dec0:	bd38      	pop	{r3, r4, r5, pc}
 800dec2:	bf00      	nop
 800dec4:	2400252c 	.word	0x2400252c

0800dec8 <sbrk_aligned>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	4e0f      	ldr	r6, [pc, #60]	@ (800df08 <sbrk_aligned+0x40>)
 800decc:	460c      	mov	r4, r1
 800dece:	6831      	ldr	r1, [r6, #0]
 800ded0:	4605      	mov	r5, r0
 800ded2:	b911      	cbnz	r1, 800deda <sbrk_aligned+0x12>
 800ded4:	f000 fcea 	bl	800e8ac <_sbrk_r>
 800ded8:	6030      	str	r0, [r6, #0]
 800deda:	4621      	mov	r1, r4
 800dedc:	4628      	mov	r0, r5
 800dede:	f000 fce5 	bl	800e8ac <_sbrk_r>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	d103      	bne.n	800deee <sbrk_aligned+0x26>
 800dee6:	f04f 34ff 	mov.w	r4, #4294967295
 800deea:	4620      	mov	r0, r4
 800deec:	bd70      	pop	{r4, r5, r6, pc}
 800deee:	1cc4      	adds	r4, r0, #3
 800def0:	f024 0403 	bic.w	r4, r4, #3
 800def4:	42a0      	cmp	r0, r4
 800def6:	d0f8      	beq.n	800deea <sbrk_aligned+0x22>
 800def8:	1a21      	subs	r1, r4, r0
 800defa:	4628      	mov	r0, r5
 800defc:	f000 fcd6 	bl	800e8ac <_sbrk_r>
 800df00:	3001      	adds	r0, #1
 800df02:	d1f2      	bne.n	800deea <sbrk_aligned+0x22>
 800df04:	e7ef      	b.n	800dee6 <sbrk_aligned+0x1e>
 800df06:	bf00      	nop
 800df08:	24002528 	.word	0x24002528

0800df0c <_malloc_r>:
 800df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df10:	1ccd      	adds	r5, r1, #3
 800df12:	f025 0503 	bic.w	r5, r5, #3
 800df16:	3508      	adds	r5, #8
 800df18:	2d0c      	cmp	r5, #12
 800df1a:	bf38      	it	cc
 800df1c:	250c      	movcc	r5, #12
 800df1e:	2d00      	cmp	r5, #0
 800df20:	4606      	mov	r6, r0
 800df22:	db01      	blt.n	800df28 <_malloc_r+0x1c>
 800df24:	42a9      	cmp	r1, r5
 800df26:	d904      	bls.n	800df32 <_malloc_r+0x26>
 800df28:	230c      	movs	r3, #12
 800df2a:	6033      	str	r3, [r6, #0]
 800df2c:	2000      	movs	r0, #0
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e008 <_malloc_r+0xfc>
 800df36:	f000 f869 	bl	800e00c <__malloc_lock>
 800df3a:	f8d8 3000 	ldr.w	r3, [r8]
 800df3e:	461c      	mov	r4, r3
 800df40:	bb44      	cbnz	r4, 800df94 <_malloc_r+0x88>
 800df42:	4629      	mov	r1, r5
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff ffbf 	bl	800dec8 <sbrk_aligned>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	4604      	mov	r4, r0
 800df4e:	d158      	bne.n	800e002 <_malloc_r+0xf6>
 800df50:	f8d8 4000 	ldr.w	r4, [r8]
 800df54:	4627      	mov	r7, r4
 800df56:	2f00      	cmp	r7, #0
 800df58:	d143      	bne.n	800dfe2 <_malloc_r+0xd6>
 800df5a:	2c00      	cmp	r4, #0
 800df5c:	d04b      	beq.n	800dff6 <_malloc_r+0xea>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	4639      	mov	r1, r7
 800df62:	4630      	mov	r0, r6
 800df64:	eb04 0903 	add.w	r9, r4, r3
 800df68:	f000 fca0 	bl	800e8ac <_sbrk_r>
 800df6c:	4581      	cmp	r9, r0
 800df6e:	d142      	bne.n	800dff6 <_malloc_r+0xea>
 800df70:	6821      	ldr	r1, [r4, #0]
 800df72:	1a6d      	subs	r5, r5, r1
 800df74:	4629      	mov	r1, r5
 800df76:	4630      	mov	r0, r6
 800df78:	f7ff ffa6 	bl	800dec8 <sbrk_aligned>
 800df7c:	3001      	adds	r0, #1
 800df7e:	d03a      	beq.n	800dff6 <_malloc_r+0xea>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	442b      	add	r3, r5
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	f8d8 3000 	ldr.w	r3, [r8]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	bb62      	cbnz	r2, 800dfe8 <_malloc_r+0xdc>
 800df8e:	f8c8 7000 	str.w	r7, [r8]
 800df92:	e00f      	b.n	800dfb4 <_malloc_r+0xa8>
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	1b52      	subs	r2, r2, r5
 800df98:	d420      	bmi.n	800dfdc <_malloc_r+0xd0>
 800df9a:	2a0b      	cmp	r2, #11
 800df9c:	d917      	bls.n	800dfce <_malloc_r+0xc2>
 800df9e:	1961      	adds	r1, r4, r5
 800dfa0:	42a3      	cmp	r3, r4
 800dfa2:	6025      	str	r5, [r4, #0]
 800dfa4:	bf18      	it	ne
 800dfa6:	6059      	strne	r1, [r3, #4]
 800dfa8:	6863      	ldr	r3, [r4, #4]
 800dfaa:	bf08      	it	eq
 800dfac:	f8c8 1000 	streq.w	r1, [r8]
 800dfb0:	5162      	str	r2, [r4, r5]
 800dfb2:	604b      	str	r3, [r1, #4]
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 f82f 	bl	800e018 <__malloc_unlock>
 800dfba:	f104 000b 	add.w	r0, r4, #11
 800dfbe:	1d23      	adds	r3, r4, #4
 800dfc0:	f020 0007 	bic.w	r0, r0, #7
 800dfc4:	1ac2      	subs	r2, r0, r3
 800dfc6:	bf1c      	itt	ne
 800dfc8:	1a1b      	subne	r3, r3, r0
 800dfca:	50a3      	strne	r3, [r4, r2]
 800dfcc:	e7af      	b.n	800df2e <_malloc_r+0x22>
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	bf0c      	ite	eq
 800dfd4:	f8c8 2000 	streq.w	r2, [r8]
 800dfd8:	605a      	strne	r2, [r3, #4]
 800dfda:	e7eb      	b.n	800dfb4 <_malloc_r+0xa8>
 800dfdc:	4623      	mov	r3, r4
 800dfde:	6864      	ldr	r4, [r4, #4]
 800dfe0:	e7ae      	b.n	800df40 <_malloc_r+0x34>
 800dfe2:	463c      	mov	r4, r7
 800dfe4:	687f      	ldr	r7, [r7, #4]
 800dfe6:	e7b6      	b.n	800df56 <_malloc_r+0x4a>
 800dfe8:	461a      	mov	r2, r3
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	d1fb      	bne.n	800dfe8 <_malloc_r+0xdc>
 800dff0:	2300      	movs	r3, #0
 800dff2:	6053      	str	r3, [r2, #4]
 800dff4:	e7de      	b.n	800dfb4 <_malloc_r+0xa8>
 800dff6:	230c      	movs	r3, #12
 800dff8:	6033      	str	r3, [r6, #0]
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 f80c 	bl	800e018 <__malloc_unlock>
 800e000:	e794      	b.n	800df2c <_malloc_r+0x20>
 800e002:	6005      	str	r5, [r0, #0]
 800e004:	e7d6      	b.n	800dfb4 <_malloc_r+0xa8>
 800e006:	bf00      	nop
 800e008:	2400252c 	.word	0x2400252c

0800e00c <__malloc_lock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	@ (800e014 <__malloc_lock+0x8>)
 800e00e:	f7ff bf0e 	b.w	800de2e <__retarget_lock_acquire_recursive>
 800e012:	bf00      	nop
 800e014:	24002524 	.word	0x24002524

0800e018 <__malloc_unlock>:
 800e018:	4801      	ldr	r0, [pc, #4]	@ (800e020 <__malloc_unlock+0x8>)
 800e01a:	f7ff bf09 	b.w	800de30 <__retarget_lock_release_recursive>
 800e01e:	bf00      	nop
 800e020:	24002524 	.word	0x24002524

0800e024 <__sfputc_r>:
 800e024:	6893      	ldr	r3, [r2, #8]
 800e026:	3b01      	subs	r3, #1
 800e028:	2b00      	cmp	r3, #0
 800e02a:	b410      	push	{r4}
 800e02c:	6093      	str	r3, [r2, #8]
 800e02e:	da08      	bge.n	800e042 <__sfputc_r+0x1e>
 800e030:	6994      	ldr	r4, [r2, #24]
 800e032:	42a3      	cmp	r3, r4
 800e034:	db01      	blt.n	800e03a <__sfputc_r+0x16>
 800e036:	290a      	cmp	r1, #10
 800e038:	d103      	bne.n	800e042 <__sfputc_r+0x1e>
 800e03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e03e:	f000 bba1 	b.w	800e784 <__swbuf_r>
 800e042:	6813      	ldr	r3, [r2, #0]
 800e044:	1c58      	adds	r0, r3, #1
 800e046:	6010      	str	r0, [r2, #0]
 800e048:	7019      	strb	r1, [r3, #0]
 800e04a:	4608      	mov	r0, r1
 800e04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <__sfputs_r>:
 800e052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e054:	4606      	mov	r6, r0
 800e056:	460f      	mov	r7, r1
 800e058:	4614      	mov	r4, r2
 800e05a:	18d5      	adds	r5, r2, r3
 800e05c:	42ac      	cmp	r4, r5
 800e05e:	d101      	bne.n	800e064 <__sfputs_r+0x12>
 800e060:	2000      	movs	r0, #0
 800e062:	e007      	b.n	800e074 <__sfputs_r+0x22>
 800e064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e068:	463a      	mov	r2, r7
 800e06a:	4630      	mov	r0, r6
 800e06c:	f7ff ffda 	bl	800e024 <__sfputc_r>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d1f3      	bne.n	800e05c <__sfputs_r+0xa>
 800e074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e078 <_vfiprintf_r>:
 800e078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	460d      	mov	r5, r1
 800e07e:	b09d      	sub	sp, #116	@ 0x74
 800e080:	4614      	mov	r4, r2
 800e082:	4698      	mov	r8, r3
 800e084:	4606      	mov	r6, r0
 800e086:	b118      	cbz	r0, 800e090 <_vfiprintf_r+0x18>
 800e088:	6a03      	ldr	r3, [r0, #32]
 800e08a:	b90b      	cbnz	r3, 800e090 <_vfiprintf_r+0x18>
 800e08c:	f7ff fdc2 	bl	800dc14 <__sinit>
 800e090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e092:	07d9      	lsls	r1, r3, #31
 800e094:	d405      	bmi.n	800e0a2 <_vfiprintf_r+0x2a>
 800e096:	89ab      	ldrh	r3, [r5, #12]
 800e098:	059a      	lsls	r2, r3, #22
 800e09a:	d402      	bmi.n	800e0a2 <_vfiprintf_r+0x2a>
 800e09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e09e:	f7ff fec6 	bl	800de2e <__retarget_lock_acquire_recursive>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	071b      	lsls	r3, r3, #28
 800e0a6:	d501      	bpl.n	800e0ac <_vfiprintf_r+0x34>
 800e0a8:	692b      	ldr	r3, [r5, #16]
 800e0aa:	b99b      	cbnz	r3, 800e0d4 <_vfiprintf_r+0x5c>
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f000 fba6 	bl	800e800 <__swsetup_r>
 800e0b4:	b170      	cbz	r0, 800e0d4 <_vfiprintf_r+0x5c>
 800e0b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0b8:	07dc      	lsls	r4, r3, #31
 800e0ba:	d504      	bpl.n	800e0c6 <_vfiprintf_r+0x4e>
 800e0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c0:	b01d      	add	sp, #116	@ 0x74
 800e0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c6:	89ab      	ldrh	r3, [r5, #12]
 800e0c8:	0598      	lsls	r0, r3, #22
 800e0ca:	d4f7      	bmi.n	800e0bc <_vfiprintf_r+0x44>
 800e0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ce:	f7ff feaf 	bl	800de30 <__retarget_lock_release_recursive>
 800e0d2:	e7f3      	b.n	800e0bc <_vfiprintf_r+0x44>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0d8:	2320      	movs	r3, #32
 800e0da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e2:	2330      	movs	r3, #48	@ 0x30
 800e0e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e294 <_vfiprintf_r+0x21c>
 800e0e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0ec:	f04f 0901 	mov.w	r9, #1
 800e0f0:	4623      	mov	r3, r4
 800e0f2:	469a      	mov	sl, r3
 800e0f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f8:	b10a      	cbz	r2, 800e0fe <_vfiprintf_r+0x86>
 800e0fa:	2a25      	cmp	r2, #37	@ 0x25
 800e0fc:	d1f9      	bne.n	800e0f2 <_vfiprintf_r+0x7a>
 800e0fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e102:	d00b      	beq.n	800e11c <_vfiprintf_r+0xa4>
 800e104:	465b      	mov	r3, fp
 800e106:	4622      	mov	r2, r4
 800e108:	4629      	mov	r1, r5
 800e10a:	4630      	mov	r0, r6
 800e10c:	f7ff ffa1 	bl	800e052 <__sfputs_r>
 800e110:	3001      	adds	r0, #1
 800e112:	f000 80a7 	beq.w	800e264 <_vfiprintf_r+0x1ec>
 800e116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e118:	445a      	add	r2, fp
 800e11a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e11c:	f89a 3000 	ldrb.w	r3, [sl]
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 809f 	beq.w	800e264 <_vfiprintf_r+0x1ec>
 800e126:	2300      	movs	r3, #0
 800e128:	f04f 32ff 	mov.w	r2, #4294967295
 800e12c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e130:	f10a 0a01 	add.w	sl, sl, #1
 800e134:	9304      	str	r3, [sp, #16]
 800e136:	9307      	str	r3, [sp, #28]
 800e138:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e13e:	4654      	mov	r4, sl
 800e140:	2205      	movs	r2, #5
 800e142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e146:	4853      	ldr	r0, [pc, #332]	@ (800e294 <_vfiprintf_r+0x21c>)
 800e148:	f7f2 f8d2 	bl	80002f0 <memchr>
 800e14c:	9a04      	ldr	r2, [sp, #16]
 800e14e:	b9d8      	cbnz	r0, 800e188 <_vfiprintf_r+0x110>
 800e150:	06d1      	lsls	r1, r2, #27
 800e152:	bf44      	itt	mi
 800e154:	2320      	movmi	r3, #32
 800e156:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e15a:	0713      	lsls	r3, r2, #28
 800e15c:	bf44      	itt	mi
 800e15e:	232b      	movmi	r3, #43	@ 0x2b
 800e160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e164:	f89a 3000 	ldrb.w	r3, [sl]
 800e168:	2b2a      	cmp	r3, #42	@ 0x2a
 800e16a:	d015      	beq.n	800e198 <_vfiprintf_r+0x120>
 800e16c:	9a07      	ldr	r2, [sp, #28]
 800e16e:	4654      	mov	r4, sl
 800e170:	2000      	movs	r0, #0
 800e172:	f04f 0c0a 	mov.w	ip, #10
 800e176:	4621      	mov	r1, r4
 800e178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e17c:	3b30      	subs	r3, #48	@ 0x30
 800e17e:	2b09      	cmp	r3, #9
 800e180:	d94b      	bls.n	800e21a <_vfiprintf_r+0x1a2>
 800e182:	b1b0      	cbz	r0, 800e1b2 <_vfiprintf_r+0x13a>
 800e184:	9207      	str	r2, [sp, #28]
 800e186:	e014      	b.n	800e1b2 <_vfiprintf_r+0x13a>
 800e188:	eba0 0308 	sub.w	r3, r0, r8
 800e18c:	fa09 f303 	lsl.w	r3, r9, r3
 800e190:	4313      	orrs	r3, r2
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	46a2      	mov	sl, r4
 800e196:	e7d2      	b.n	800e13e <_vfiprintf_r+0xc6>
 800e198:	9b03      	ldr	r3, [sp, #12]
 800e19a:	1d19      	adds	r1, r3, #4
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	9103      	str	r1, [sp, #12]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	bfbb      	ittet	lt
 800e1a4:	425b      	neglt	r3, r3
 800e1a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1aa:	9307      	strge	r3, [sp, #28]
 800e1ac:	9307      	strlt	r3, [sp, #28]
 800e1ae:	bfb8      	it	lt
 800e1b0:	9204      	strlt	r2, [sp, #16]
 800e1b2:	7823      	ldrb	r3, [r4, #0]
 800e1b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1b6:	d10a      	bne.n	800e1ce <_vfiprintf_r+0x156>
 800e1b8:	7863      	ldrb	r3, [r4, #1]
 800e1ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1bc:	d132      	bne.n	800e224 <_vfiprintf_r+0x1ac>
 800e1be:	9b03      	ldr	r3, [sp, #12]
 800e1c0:	1d1a      	adds	r2, r3, #4
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	9203      	str	r2, [sp, #12]
 800e1c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1ca:	3402      	adds	r4, #2
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2a4 <_vfiprintf_r+0x22c>
 800e1d2:	7821      	ldrb	r1, [r4, #0]
 800e1d4:	2203      	movs	r2, #3
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	f7f2 f88a 	bl	80002f0 <memchr>
 800e1dc:	b138      	cbz	r0, 800e1ee <_vfiprintf_r+0x176>
 800e1de:	9b04      	ldr	r3, [sp, #16]
 800e1e0:	eba0 000a 	sub.w	r0, r0, sl
 800e1e4:	2240      	movs	r2, #64	@ 0x40
 800e1e6:	4082      	lsls	r2, r0
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	3401      	adds	r4, #1
 800e1ec:	9304      	str	r3, [sp, #16]
 800e1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f2:	4829      	ldr	r0, [pc, #164]	@ (800e298 <_vfiprintf_r+0x220>)
 800e1f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1f8:	2206      	movs	r2, #6
 800e1fa:	f7f2 f879 	bl	80002f0 <memchr>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d03f      	beq.n	800e282 <_vfiprintf_r+0x20a>
 800e202:	4b26      	ldr	r3, [pc, #152]	@ (800e29c <_vfiprintf_r+0x224>)
 800e204:	bb1b      	cbnz	r3, 800e24e <_vfiprintf_r+0x1d6>
 800e206:	9b03      	ldr	r3, [sp, #12]
 800e208:	3307      	adds	r3, #7
 800e20a:	f023 0307 	bic.w	r3, r3, #7
 800e20e:	3308      	adds	r3, #8
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e214:	443b      	add	r3, r7
 800e216:	9309      	str	r3, [sp, #36]	@ 0x24
 800e218:	e76a      	b.n	800e0f0 <_vfiprintf_r+0x78>
 800e21a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e21e:	460c      	mov	r4, r1
 800e220:	2001      	movs	r0, #1
 800e222:	e7a8      	b.n	800e176 <_vfiprintf_r+0xfe>
 800e224:	2300      	movs	r3, #0
 800e226:	3401      	adds	r4, #1
 800e228:	9305      	str	r3, [sp, #20]
 800e22a:	4619      	mov	r1, r3
 800e22c:	f04f 0c0a 	mov.w	ip, #10
 800e230:	4620      	mov	r0, r4
 800e232:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e236:	3a30      	subs	r2, #48	@ 0x30
 800e238:	2a09      	cmp	r2, #9
 800e23a:	d903      	bls.n	800e244 <_vfiprintf_r+0x1cc>
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0c6      	beq.n	800e1ce <_vfiprintf_r+0x156>
 800e240:	9105      	str	r1, [sp, #20]
 800e242:	e7c4      	b.n	800e1ce <_vfiprintf_r+0x156>
 800e244:	fb0c 2101 	mla	r1, ip, r1, r2
 800e248:	4604      	mov	r4, r0
 800e24a:	2301      	movs	r3, #1
 800e24c:	e7f0      	b.n	800e230 <_vfiprintf_r+0x1b8>
 800e24e:	ab03      	add	r3, sp, #12
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	462a      	mov	r2, r5
 800e254:	4b12      	ldr	r3, [pc, #72]	@ (800e2a0 <_vfiprintf_r+0x228>)
 800e256:	a904      	add	r1, sp, #16
 800e258:	4630      	mov	r0, r6
 800e25a:	f3af 8000 	nop.w
 800e25e:	4607      	mov	r7, r0
 800e260:	1c78      	adds	r0, r7, #1
 800e262:	d1d6      	bne.n	800e212 <_vfiprintf_r+0x19a>
 800e264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e266:	07d9      	lsls	r1, r3, #31
 800e268:	d405      	bmi.n	800e276 <_vfiprintf_r+0x1fe>
 800e26a:	89ab      	ldrh	r3, [r5, #12]
 800e26c:	059a      	lsls	r2, r3, #22
 800e26e:	d402      	bmi.n	800e276 <_vfiprintf_r+0x1fe>
 800e270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e272:	f7ff fddd 	bl	800de30 <__retarget_lock_release_recursive>
 800e276:	89ab      	ldrh	r3, [r5, #12]
 800e278:	065b      	lsls	r3, r3, #25
 800e27a:	f53f af1f 	bmi.w	800e0bc <_vfiprintf_r+0x44>
 800e27e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e280:	e71e      	b.n	800e0c0 <_vfiprintf_r+0x48>
 800e282:	ab03      	add	r3, sp, #12
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	462a      	mov	r2, r5
 800e288:	4b05      	ldr	r3, [pc, #20]	@ (800e2a0 <_vfiprintf_r+0x228>)
 800e28a:	a904      	add	r1, sp, #16
 800e28c:	4630      	mov	r0, r6
 800e28e:	f000 f879 	bl	800e384 <_printf_i>
 800e292:	e7e4      	b.n	800e25e <_vfiprintf_r+0x1e6>
 800e294:	0800f178 	.word	0x0800f178
 800e298:	0800f182 	.word	0x0800f182
 800e29c:	00000000 	.word	0x00000000
 800e2a0:	0800e053 	.word	0x0800e053
 800e2a4:	0800f17e 	.word	0x0800f17e

0800e2a8 <_printf_common>:
 800e2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ac:	4616      	mov	r6, r2
 800e2ae:	4698      	mov	r8, r3
 800e2b0:	688a      	ldr	r2, [r1, #8]
 800e2b2:	690b      	ldr	r3, [r1, #16]
 800e2b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	bfb8      	it	lt
 800e2bc:	4613      	movlt	r3, r2
 800e2be:	6033      	str	r3, [r6, #0]
 800e2c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	b10a      	cbz	r2, 800e2ce <_printf_common+0x26>
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	6033      	str	r3, [r6, #0]
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	0699      	lsls	r1, r3, #26
 800e2d2:	bf42      	ittt	mi
 800e2d4:	6833      	ldrmi	r3, [r6, #0]
 800e2d6:	3302      	addmi	r3, #2
 800e2d8:	6033      	strmi	r3, [r6, #0]
 800e2da:	6825      	ldr	r5, [r4, #0]
 800e2dc:	f015 0506 	ands.w	r5, r5, #6
 800e2e0:	d106      	bne.n	800e2f0 <_printf_common+0x48>
 800e2e2:	f104 0a19 	add.w	sl, r4, #25
 800e2e6:	68e3      	ldr	r3, [r4, #12]
 800e2e8:	6832      	ldr	r2, [r6, #0]
 800e2ea:	1a9b      	subs	r3, r3, r2
 800e2ec:	42ab      	cmp	r3, r5
 800e2ee:	dc26      	bgt.n	800e33e <_printf_common+0x96>
 800e2f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2f4:	6822      	ldr	r2, [r4, #0]
 800e2f6:	3b00      	subs	r3, #0
 800e2f8:	bf18      	it	ne
 800e2fa:	2301      	movne	r3, #1
 800e2fc:	0692      	lsls	r2, r2, #26
 800e2fe:	d42b      	bmi.n	800e358 <_printf_common+0xb0>
 800e300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e304:	4641      	mov	r1, r8
 800e306:	4638      	mov	r0, r7
 800e308:	47c8      	blx	r9
 800e30a:	3001      	adds	r0, #1
 800e30c:	d01e      	beq.n	800e34c <_printf_common+0xa4>
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	6922      	ldr	r2, [r4, #16]
 800e312:	f003 0306 	and.w	r3, r3, #6
 800e316:	2b04      	cmp	r3, #4
 800e318:	bf02      	ittt	eq
 800e31a:	68e5      	ldreq	r5, [r4, #12]
 800e31c:	6833      	ldreq	r3, [r6, #0]
 800e31e:	1aed      	subeq	r5, r5, r3
 800e320:	68a3      	ldr	r3, [r4, #8]
 800e322:	bf0c      	ite	eq
 800e324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e328:	2500      	movne	r5, #0
 800e32a:	4293      	cmp	r3, r2
 800e32c:	bfc4      	itt	gt
 800e32e:	1a9b      	subgt	r3, r3, r2
 800e330:	18ed      	addgt	r5, r5, r3
 800e332:	2600      	movs	r6, #0
 800e334:	341a      	adds	r4, #26
 800e336:	42b5      	cmp	r5, r6
 800e338:	d11a      	bne.n	800e370 <_printf_common+0xc8>
 800e33a:	2000      	movs	r0, #0
 800e33c:	e008      	b.n	800e350 <_printf_common+0xa8>
 800e33e:	2301      	movs	r3, #1
 800e340:	4652      	mov	r2, sl
 800e342:	4641      	mov	r1, r8
 800e344:	4638      	mov	r0, r7
 800e346:	47c8      	blx	r9
 800e348:	3001      	adds	r0, #1
 800e34a:	d103      	bne.n	800e354 <_printf_common+0xac>
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e354:	3501      	adds	r5, #1
 800e356:	e7c6      	b.n	800e2e6 <_printf_common+0x3e>
 800e358:	18e1      	adds	r1, r4, r3
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	2030      	movs	r0, #48	@ 0x30
 800e35e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e362:	4422      	add	r2, r4
 800e364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e36c:	3302      	adds	r3, #2
 800e36e:	e7c7      	b.n	800e300 <_printf_common+0x58>
 800e370:	2301      	movs	r3, #1
 800e372:	4622      	mov	r2, r4
 800e374:	4641      	mov	r1, r8
 800e376:	4638      	mov	r0, r7
 800e378:	47c8      	blx	r9
 800e37a:	3001      	adds	r0, #1
 800e37c:	d0e6      	beq.n	800e34c <_printf_common+0xa4>
 800e37e:	3601      	adds	r6, #1
 800e380:	e7d9      	b.n	800e336 <_printf_common+0x8e>
	...

0800e384 <_printf_i>:
 800e384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	7e0f      	ldrb	r7, [r1, #24]
 800e38a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e38c:	2f78      	cmp	r7, #120	@ 0x78
 800e38e:	4691      	mov	r9, r2
 800e390:	4680      	mov	r8, r0
 800e392:	460c      	mov	r4, r1
 800e394:	469a      	mov	sl, r3
 800e396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e39a:	d807      	bhi.n	800e3ac <_printf_i+0x28>
 800e39c:	2f62      	cmp	r7, #98	@ 0x62
 800e39e:	d80a      	bhi.n	800e3b6 <_printf_i+0x32>
 800e3a0:	2f00      	cmp	r7, #0
 800e3a2:	f000 80d2 	beq.w	800e54a <_printf_i+0x1c6>
 800e3a6:	2f58      	cmp	r7, #88	@ 0x58
 800e3a8:	f000 80b9 	beq.w	800e51e <_printf_i+0x19a>
 800e3ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3b4:	e03a      	b.n	800e42c <_printf_i+0xa8>
 800e3b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3ba:	2b15      	cmp	r3, #21
 800e3bc:	d8f6      	bhi.n	800e3ac <_printf_i+0x28>
 800e3be:	a101      	add	r1, pc, #4	@ (adr r1, 800e3c4 <_printf_i+0x40>)
 800e3c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3c4:	0800e41d 	.word	0x0800e41d
 800e3c8:	0800e431 	.word	0x0800e431
 800e3cc:	0800e3ad 	.word	0x0800e3ad
 800e3d0:	0800e3ad 	.word	0x0800e3ad
 800e3d4:	0800e3ad 	.word	0x0800e3ad
 800e3d8:	0800e3ad 	.word	0x0800e3ad
 800e3dc:	0800e431 	.word	0x0800e431
 800e3e0:	0800e3ad 	.word	0x0800e3ad
 800e3e4:	0800e3ad 	.word	0x0800e3ad
 800e3e8:	0800e3ad 	.word	0x0800e3ad
 800e3ec:	0800e3ad 	.word	0x0800e3ad
 800e3f0:	0800e531 	.word	0x0800e531
 800e3f4:	0800e45b 	.word	0x0800e45b
 800e3f8:	0800e4eb 	.word	0x0800e4eb
 800e3fc:	0800e3ad 	.word	0x0800e3ad
 800e400:	0800e3ad 	.word	0x0800e3ad
 800e404:	0800e553 	.word	0x0800e553
 800e408:	0800e3ad 	.word	0x0800e3ad
 800e40c:	0800e45b 	.word	0x0800e45b
 800e410:	0800e3ad 	.word	0x0800e3ad
 800e414:	0800e3ad 	.word	0x0800e3ad
 800e418:	0800e4f3 	.word	0x0800e4f3
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	1d1a      	adds	r2, r3, #4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6032      	str	r2, [r6, #0]
 800e424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e42c:	2301      	movs	r3, #1
 800e42e:	e09d      	b.n	800e56c <_printf_i+0x1e8>
 800e430:	6833      	ldr	r3, [r6, #0]
 800e432:	6820      	ldr	r0, [r4, #0]
 800e434:	1d19      	adds	r1, r3, #4
 800e436:	6031      	str	r1, [r6, #0]
 800e438:	0606      	lsls	r6, r0, #24
 800e43a:	d501      	bpl.n	800e440 <_printf_i+0xbc>
 800e43c:	681d      	ldr	r5, [r3, #0]
 800e43e:	e003      	b.n	800e448 <_printf_i+0xc4>
 800e440:	0645      	lsls	r5, r0, #25
 800e442:	d5fb      	bpl.n	800e43c <_printf_i+0xb8>
 800e444:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e448:	2d00      	cmp	r5, #0
 800e44a:	da03      	bge.n	800e454 <_printf_i+0xd0>
 800e44c:	232d      	movs	r3, #45	@ 0x2d
 800e44e:	426d      	negs	r5, r5
 800e450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e454:	4859      	ldr	r0, [pc, #356]	@ (800e5bc <_printf_i+0x238>)
 800e456:	230a      	movs	r3, #10
 800e458:	e011      	b.n	800e47e <_printf_i+0xfa>
 800e45a:	6821      	ldr	r1, [r4, #0]
 800e45c:	6833      	ldr	r3, [r6, #0]
 800e45e:	0608      	lsls	r0, r1, #24
 800e460:	f853 5b04 	ldr.w	r5, [r3], #4
 800e464:	d402      	bmi.n	800e46c <_printf_i+0xe8>
 800e466:	0649      	lsls	r1, r1, #25
 800e468:	bf48      	it	mi
 800e46a:	b2ad      	uxthmi	r5, r5
 800e46c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e46e:	4853      	ldr	r0, [pc, #332]	@ (800e5bc <_printf_i+0x238>)
 800e470:	6033      	str	r3, [r6, #0]
 800e472:	bf14      	ite	ne
 800e474:	230a      	movne	r3, #10
 800e476:	2308      	moveq	r3, #8
 800e478:	2100      	movs	r1, #0
 800e47a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e47e:	6866      	ldr	r6, [r4, #4]
 800e480:	60a6      	str	r6, [r4, #8]
 800e482:	2e00      	cmp	r6, #0
 800e484:	bfa2      	ittt	ge
 800e486:	6821      	ldrge	r1, [r4, #0]
 800e488:	f021 0104 	bicge.w	r1, r1, #4
 800e48c:	6021      	strge	r1, [r4, #0]
 800e48e:	b90d      	cbnz	r5, 800e494 <_printf_i+0x110>
 800e490:	2e00      	cmp	r6, #0
 800e492:	d04b      	beq.n	800e52c <_printf_i+0x1a8>
 800e494:	4616      	mov	r6, r2
 800e496:	fbb5 f1f3 	udiv	r1, r5, r3
 800e49a:	fb03 5711 	mls	r7, r3, r1, r5
 800e49e:	5dc7      	ldrb	r7, [r0, r7]
 800e4a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4a4:	462f      	mov	r7, r5
 800e4a6:	42bb      	cmp	r3, r7
 800e4a8:	460d      	mov	r5, r1
 800e4aa:	d9f4      	bls.n	800e496 <_printf_i+0x112>
 800e4ac:	2b08      	cmp	r3, #8
 800e4ae:	d10b      	bne.n	800e4c8 <_printf_i+0x144>
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	07df      	lsls	r7, r3, #31
 800e4b4:	d508      	bpl.n	800e4c8 <_printf_i+0x144>
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	6861      	ldr	r1, [r4, #4]
 800e4ba:	4299      	cmp	r1, r3
 800e4bc:	bfde      	ittt	le
 800e4be:	2330      	movle	r3, #48	@ 0x30
 800e4c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4c8:	1b92      	subs	r2, r2, r6
 800e4ca:	6122      	str	r2, [r4, #16]
 800e4cc:	f8cd a000 	str.w	sl, [sp]
 800e4d0:	464b      	mov	r3, r9
 800e4d2:	aa03      	add	r2, sp, #12
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	f7ff fee6 	bl	800e2a8 <_printf_common>
 800e4dc:	3001      	adds	r0, #1
 800e4de:	d14a      	bne.n	800e576 <_printf_i+0x1f2>
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e4:	b004      	add	sp, #16
 800e4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	f043 0320 	orr.w	r3, r3, #32
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	4833      	ldr	r0, [pc, #204]	@ (800e5c0 <_printf_i+0x23c>)
 800e4f4:	2778      	movs	r7, #120	@ 0x78
 800e4f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	6831      	ldr	r1, [r6, #0]
 800e4fe:	061f      	lsls	r7, r3, #24
 800e500:	f851 5b04 	ldr.w	r5, [r1], #4
 800e504:	d402      	bmi.n	800e50c <_printf_i+0x188>
 800e506:	065f      	lsls	r7, r3, #25
 800e508:	bf48      	it	mi
 800e50a:	b2ad      	uxthmi	r5, r5
 800e50c:	6031      	str	r1, [r6, #0]
 800e50e:	07d9      	lsls	r1, r3, #31
 800e510:	bf44      	itt	mi
 800e512:	f043 0320 	orrmi.w	r3, r3, #32
 800e516:	6023      	strmi	r3, [r4, #0]
 800e518:	b11d      	cbz	r5, 800e522 <_printf_i+0x19e>
 800e51a:	2310      	movs	r3, #16
 800e51c:	e7ac      	b.n	800e478 <_printf_i+0xf4>
 800e51e:	4827      	ldr	r0, [pc, #156]	@ (800e5bc <_printf_i+0x238>)
 800e520:	e7e9      	b.n	800e4f6 <_printf_i+0x172>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	f023 0320 	bic.w	r3, r3, #32
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	e7f6      	b.n	800e51a <_printf_i+0x196>
 800e52c:	4616      	mov	r6, r2
 800e52e:	e7bd      	b.n	800e4ac <_printf_i+0x128>
 800e530:	6833      	ldr	r3, [r6, #0]
 800e532:	6825      	ldr	r5, [r4, #0]
 800e534:	6961      	ldr	r1, [r4, #20]
 800e536:	1d18      	adds	r0, r3, #4
 800e538:	6030      	str	r0, [r6, #0]
 800e53a:	062e      	lsls	r6, r5, #24
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	d501      	bpl.n	800e544 <_printf_i+0x1c0>
 800e540:	6019      	str	r1, [r3, #0]
 800e542:	e002      	b.n	800e54a <_printf_i+0x1c6>
 800e544:	0668      	lsls	r0, r5, #25
 800e546:	d5fb      	bpl.n	800e540 <_printf_i+0x1bc>
 800e548:	8019      	strh	r1, [r3, #0]
 800e54a:	2300      	movs	r3, #0
 800e54c:	6123      	str	r3, [r4, #16]
 800e54e:	4616      	mov	r6, r2
 800e550:	e7bc      	b.n	800e4cc <_printf_i+0x148>
 800e552:	6833      	ldr	r3, [r6, #0]
 800e554:	1d1a      	adds	r2, r3, #4
 800e556:	6032      	str	r2, [r6, #0]
 800e558:	681e      	ldr	r6, [r3, #0]
 800e55a:	6862      	ldr	r2, [r4, #4]
 800e55c:	2100      	movs	r1, #0
 800e55e:	4630      	mov	r0, r6
 800e560:	f7f1 fec6 	bl	80002f0 <memchr>
 800e564:	b108      	cbz	r0, 800e56a <_printf_i+0x1e6>
 800e566:	1b80      	subs	r0, r0, r6
 800e568:	6060      	str	r0, [r4, #4]
 800e56a:	6863      	ldr	r3, [r4, #4]
 800e56c:	6123      	str	r3, [r4, #16]
 800e56e:	2300      	movs	r3, #0
 800e570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e574:	e7aa      	b.n	800e4cc <_printf_i+0x148>
 800e576:	6923      	ldr	r3, [r4, #16]
 800e578:	4632      	mov	r2, r6
 800e57a:	4649      	mov	r1, r9
 800e57c:	4640      	mov	r0, r8
 800e57e:	47d0      	blx	sl
 800e580:	3001      	adds	r0, #1
 800e582:	d0ad      	beq.n	800e4e0 <_printf_i+0x15c>
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	079b      	lsls	r3, r3, #30
 800e588:	d413      	bmi.n	800e5b2 <_printf_i+0x22e>
 800e58a:	68e0      	ldr	r0, [r4, #12]
 800e58c:	9b03      	ldr	r3, [sp, #12]
 800e58e:	4298      	cmp	r0, r3
 800e590:	bfb8      	it	lt
 800e592:	4618      	movlt	r0, r3
 800e594:	e7a6      	b.n	800e4e4 <_printf_i+0x160>
 800e596:	2301      	movs	r3, #1
 800e598:	4632      	mov	r2, r6
 800e59a:	4649      	mov	r1, r9
 800e59c:	4640      	mov	r0, r8
 800e59e:	47d0      	blx	sl
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	d09d      	beq.n	800e4e0 <_printf_i+0x15c>
 800e5a4:	3501      	adds	r5, #1
 800e5a6:	68e3      	ldr	r3, [r4, #12]
 800e5a8:	9903      	ldr	r1, [sp, #12]
 800e5aa:	1a5b      	subs	r3, r3, r1
 800e5ac:	42ab      	cmp	r3, r5
 800e5ae:	dcf2      	bgt.n	800e596 <_printf_i+0x212>
 800e5b0:	e7eb      	b.n	800e58a <_printf_i+0x206>
 800e5b2:	2500      	movs	r5, #0
 800e5b4:	f104 0619 	add.w	r6, r4, #25
 800e5b8:	e7f5      	b.n	800e5a6 <_printf_i+0x222>
 800e5ba:	bf00      	nop
 800e5bc:	0800f189 	.word	0x0800f189
 800e5c0:	0800f19a 	.word	0x0800f19a

0800e5c4 <__sflush_r>:
 800e5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5cc:	0716      	lsls	r6, r2, #28
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	d454      	bmi.n	800e67e <__sflush_r+0xba>
 800e5d4:	684b      	ldr	r3, [r1, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	dc02      	bgt.n	800e5e0 <__sflush_r+0x1c>
 800e5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	dd48      	ble.n	800e672 <__sflush_r+0xae>
 800e5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5e2:	2e00      	cmp	r6, #0
 800e5e4:	d045      	beq.n	800e672 <__sflush_r+0xae>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5ec:	682f      	ldr	r7, [r5, #0]
 800e5ee:	6a21      	ldr	r1, [r4, #32]
 800e5f0:	602b      	str	r3, [r5, #0]
 800e5f2:	d030      	beq.n	800e656 <__sflush_r+0x92>
 800e5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	0759      	lsls	r1, r3, #29
 800e5fa:	d505      	bpl.n	800e608 <__sflush_r+0x44>
 800e5fc:	6863      	ldr	r3, [r4, #4]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e602:	b10b      	cbz	r3, 800e608 <__sflush_r+0x44>
 800e604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e606:	1ad2      	subs	r2, r2, r3
 800e608:	2300      	movs	r3, #0
 800e60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e60c:	6a21      	ldr	r1, [r4, #32]
 800e60e:	4628      	mov	r0, r5
 800e610:	47b0      	blx	r6
 800e612:	1c43      	adds	r3, r0, #1
 800e614:	89a3      	ldrh	r3, [r4, #12]
 800e616:	d106      	bne.n	800e626 <__sflush_r+0x62>
 800e618:	6829      	ldr	r1, [r5, #0]
 800e61a:	291d      	cmp	r1, #29
 800e61c:	d82b      	bhi.n	800e676 <__sflush_r+0xb2>
 800e61e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6c8 <__sflush_r+0x104>)
 800e620:	410a      	asrs	r2, r1
 800e622:	07d6      	lsls	r6, r2, #31
 800e624:	d427      	bmi.n	800e676 <__sflush_r+0xb2>
 800e626:	2200      	movs	r2, #0
 800e628:	6062      	str	r2, [r4, #4]
 800e62a:	04d9      	lsls	r1, r3, #19
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	6022      	str	r2, [r4, #0]
 800e630:	d504      	bpl.n	800e63c <__sflush_r+0x78>
 800e632:	1c42      	adds	r2, r0, #1
 800e634:	d101      	bne.n	800e63a <__sflush_r+0x76>
 800e636:	682b      	ldr	r3, [r5, #0]
 800e638:	b903      	cbnz	r3, 800e63c <__sflush_r+0x78>
 800e63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	b1b9      	cbz	r1, 800e672 <__sflush_r+0xae>
 800e642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e646:	4299      	cmp	r1, r3
 800e648:	d002      	beq.n	800e650 <__sflush_r+0x8c>
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7ff fbf2 	bl	800de34 <_free_r>
 800e650:	2300      	movs	r3, #0
 800e652:	6363      	str	r3, [r4, #52]	@ 0x34
 800e654:	e00d      	b.n	800e672 <__sflush_r+0xae>
 800e656:	2301      	movs	r3, #1
 800e658:	4628      	mov	r0, r5
 800e65a:	47b0      	blx	r6
 800e65c:	4602      	mov	r2, r0
 800e65e:	1c50      	adds	r0, r2, #1
 800e660:	d1c9      	bne.n	800e5f6 <__sflush_r+0x32>
 800e662:	682b      	ldr	r3, [r5, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d0c6      	beq.n	800e5f6 <__sflush_r+0x32>
 800e668:	2b1d      	cmp	r3, #29
 800e66a:	d001      	beq.n	800e670 <__sflush_r+0xac>
 800e66c:	2b16      	cmp	r3, #22
 800e66e:	d11e      	bne.n	800e6ae <__sflush_r+0xea>
 800e670:	602f      	str	r7, [r5, #0]
 800e672:	2000      	movs	r0, #0
 800e674:	e022      	b.n	800e6bc <__sflush_r+0xf8>
 800e676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e67a:	b21b      	sxth	r3, r3
 800e67c:	e01b      	b.n	800e6b6 <__sflush_r+0xf2>
 800e67e:	690f      	ldr	r7, [r1, #16]
 800e680:	2f00      	cmp	r7, #0
 800e682:	d0f6      	beq.n	800e672 <__sflush_r+0xae>
 800e684:	0793      	lsls	r3, r2, #30
 800e686:	680e      	ldr	r6, [r1, #0]
 800e688:	bf08      	it	eq
 800e68a:	694b      	ldreq	r3, [r1, #20]
 800e68c:	600f      	str	r7, [r1, #0]
 800e68e:	bf18      	it	ne
 800e690:	2300      	movne	r3, #0
 800e692:	eba6 0807 	sub.w	r8, r6, r7
 800e696:	608b      	str	r3, [r1, #8]
 800e698:	f1b8 0f00 	cmp.w	r8, #0
 800e69c:	dde9      	ble.n	800e672 <__sflush_r+0xae>
 800e69e:	6a21      	ldr	r1, [r4, #32]
 800e6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6a2:	4643      	mov	r3, r8
 800e6a4:	463a      	mov	r2, r7
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b0      	blx	r6
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	dc08      	bgt.n	800e6c0 <__sflush_r+0xfc>
 800e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6b6:	81a3      	strh	r3, [r4, #12]
 800e6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c0:	4407      	add	r7, r0
 800e6c2:	eba8 0800 	sub.w	r8, r8, r0
 800e6c6:	e7e7      	b.n	800e698 <__sflush_r+0xd4>
 800e6c8:	dfbffffe 	.word	0xdfbffffe

0800e6cc <_fflush_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	690b      	ldr	r3, [r1, #16]
 800e6d0:	4605      	mov	r5, r0
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	b913      	cbnz	r3, 800e6dc <_fflush_r+0x10>
 800e6d6:	2500      	movs	r5, #0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	b118      	cbz	r0, 800e6e6 <_fflush_r+0x1a>
 800e6de:	6a03      	ldr	r3, [r0, #32]
 800e6e0:	b90b      	cbnz	r3, 800e6e6 <_fflush_r+0x1a>
 800e6e2:	f7ff fa97 	bl	800dc14 <__sinit>
 800e6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0f3      	beq.n	800e6d6 <_fflush_r+0xa>
 800e6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6f0:	07d0      	lsls	r0, r2, #31
 800e6f2:	d404      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f4:	0599      	lsls	r1, r3, #22
 800e6f6:	d402      	bmi.n	800e6fe <_fflush_r+0x32>
 800e6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6fa:	f7ff fb98 	bl	800de2e <__retarget_lock_acquire_recursive>
 800e6fe:	4628      	mov	r0, r5
 800e700:	4621      	mov	r1, r4
 800e702:	f7ff ff5f 	bl	800e5c4 <__sflush_r>
 800e706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e708:	07da      	lsls	r2, r3, #31
 800e70a:	4605      	mov	r5, r0
 800e70c:	d4e4      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e70e:	89a3      	ldrh	r3, [r4, #12]
 800e710:	059b      	lsls	r3, r3, #22
 800e712:	d4e1      	bmi.n	800e6d8 <_fflush_r+0xc>
 800e714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e716:	f7ff fb8b 	bl	800de30 <__retarget_lock_release_recursive>
 800e71a:	e7dd      	b.n	800e6d8 <_fflush_r+0xc>

0800e71c <_putc_r>:
 800e71c:	b570      	push	{r4, r5, r6, lr}
 800e71e:	460d      	mov	r5, r1
 800e720:	4614      	mov	r4, r2
 800e722:	4606      	mov	r6, r0
 800e724:	b118      	cbz	r0, 800e72e <_putc_r+0x12>
 800e726:	6a03      	ldr	r3, [r0, #32]
 800e728:	b90b      	cbnz	r3, 800e72e <_putc_r+0x12>
 800e72a:	f7ff fa73 	bl	800dc14 <__sinit>
 800e72e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e730:	07d8      	lsls	r0, r3, #31
 800e732:	d405      	bmi.n	800e740 <_putc_r+0x24>
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	0599      	lsls	r1, r3, #22
 800e738:	d402      	bmi.n	800e740 <_putc_r+0x24>
 800e73a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e73c:	f7ff fb77 	bl	800de2e <__retarget_lock_acquire_recursive>
 800e740:	68a3      	ldr	r3, [r4, #8]
 800e742:	3b01      	subs	r3, #1
 800e744:	2b00      	cmp	r3, #0
 800e746:	60a3      	str	r3, [r4, #8]
 800e748:	da05      	bge.n	800e756 <_putc_r+0x3a>
 800e74a:	69a2      	ldr	r2, [r4, #24]
 800e74c:	4293      	cmp	r3, r2
 800e74e:	db12      	blt.n	800e776 <_putc_r+0x5a>
 800e750:	b2eb      	uxtb	r3, r5
 800e752:	2b0a      	cmp	r3, #10
 800e754:	d00f      	beq.n	800e776 <_putc_r+0x5a>
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	1c5a      	adds	r2, r3, #1
 800e75a:	6022      	str	r2, [r4, #0]
 800e75c:	701d      	strb	r5, [r3, #0]
 800e75e:	b2ed      	uxtb	r5, r5
 800e760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e762:	07da      	lsls	r2, r3, #31
 800e764:	d405      	bmi.n	800e772 <_putc_r+0x56>
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	059b      	lsls	r3, r3, #22
 800e76a:	d402      	bmi.n	800e772 <_putc_r+0x56>
 800e76c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e76e:	f7ff fb5f 	bl	800de30 <__retarget_lock_release_recursive>
 800e772:	4628      	mov	r0, r5
 800e774:	bd70      	pop	{r4, r5, r6, pc}
 800e776:	4629      	mov	r1, r5
 800e778:	4622      	mov	r2, r4
 800e77a:	4630      	mov	r0, r6
 800e77c:	f000 f802 	bl	800e784 <__swbuf_r>
 800e780:	4605      	mov	r5, r0
 800e782:	e7ed      	b.n	800e760 <_putc_r+0x44>

0800e784 <__swbuf_r>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	460e      	mov	r6, r1
 800e788:	4614      	mov	r4, r2
 800e78a:	4605      	mov	r5, r0
 800e78c:	b118      	cbz	r0, 800e796 <__swbuf_r+0x12>
 800e78e:	6a03      	ldr	r3, [r0, #32]
 800e790:	b90b      	cbnz	r3, 800e796 <__swbuf_r+0x12>
 800e792:	f7ff fa3f 	bl	800dc14 <__sinit>
 800e796:	69a3      	ldr	r3, [r4, #24]
 800e798:	60a3      	str	r3, [r4, #8]
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	071a      	lsls	r2, r3, #28
 800e79e:	d501      	bpl.n	800e7a4 <__swbuf_r+0x20>
 800e7a0:	6923      	ldr	r3, [r4, #16]
 800e7a2:	b943      	cbnz	r3, 800e7b6 <__swbuf_r+0x32>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f000 f82a 	bl	800e800 <__swsetup_r>
 800e7ac:	b118      	cbz	r0, 800e7b6 <__swbuf_r+0x32>
 800e7ae:	f04f 37ff 	mov.w	r7, #4294967295
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	6922      	ldr	r2, [r4, #16]
 800e7ba:	1a98      	subs	r0, r3, r2
 800e7bc:	6963      	ldr	r3, [r4, #20]
 800e7be:	b2f6      	uxtb	r6, r6
 800e7c0:	4283      	cmp	r3, r0
 800e7c2:	4637      	mov	r7, r6
 800e7c4:	dc05      	bgt.n	800e7d2 <__swbuf_r+0x4e>
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	f7ff ff7f 	bl	800e6cc <_fflush_r>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d1ed      	bne.n	800e7ae <__swbuf_r+0x2a>
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	60a3      	str	r3, [r4, #8]
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	6022      	str	r2, [r4, #0]
 800e7de:	701e      	strb	r6, [r3, #0]
 800e7e0:	6962      	ldr	r2, [r4, #20]
 800e7e2:	1c43      	adds	r3, r0, #1
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d004      	beq.n	800e7f2 <__swbuf_r+0x6e>
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	07db      	lsls	r3, r3, #31
 800e7ec:	d5e1      	bpl.n	800e7b2 <__swbuf_r+0x2e>
 800e7ee:	2e0a      	cmp	r6, #10
 800e7f0:	d1df      	bne.n	800e7b2 <__swbuf_r+0x2e>
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f7ff ff69 	bl	800e6cc <_fflush_r>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d0d9      	beq.n	800e7b2 <__swbuf_r+0x2e>
 800e7fe:	e7d6      	b.n	800e7ae <__swbuf_r+0x2a>

0800e800 <__swsetup_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	4b29      	ldr	r3, [pc, #164]	@ (800e8a8 <__swsetup_r+0xa8>)
 800e804:	4605      	mov	r5, r0
 800e806:	6818      	ldr	r0, [r3, #0]
 800e808:	460c      	mov	r4, r1
 800e80a:	b118      	cbz	r0, 800e814 <__swsetup_r+0x14>
 800e80c:	6a03      	ldr	r3, [r0, #32]
 800e80e:	b90b      	cbnz	r3, 800e814 <__swsetup_r+0x14>
 800e810:	f7ff fa00 	bl	800dc14 <__sinit>
 800e814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e818:	0719      	lsls	r1, r3, #28
 800e81a:	d422      	bmi.n	800e862 <__swsetup_r+0x62>
 800e81c:	06da      	lsls	r2, r3, #27
 800e81e:	d407      	bmi.n	800e830 <__swsetup_r+0x30>
 800e820:	2209      	movs	r2, #9
 800e822:	602a      	str	r2, [r5, #0]
 800e824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e828:	81a3      	strh	r3, [r4, #12]
 800e82a:	f04f 30ff 	mov.w	r0, #4294967295
 800e82e:	e033      	b.n	800e898 <__swsetup_r+0x98>
 800e830:	0758      	lsls	r0, r3, #29
 800e832:	d512      	bpl.n	800e85a <__swsetup_r+0x5a>
 800e834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e836:	b141      	cbz	r1, 800e84a <__swsetup_r+0x4a>
 800e838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e83c:	4299      	cmp	r1, r3
 800e83e:	d002      	beq.n	800e846 <__swsetup_r+0x46>
 800e840:	4628      	mov	r0, r5
 800e842:	f7ff faf7 	bl	800de34 <_free_r>
 800e846:	2300      	movs	r3, #0
 800e848:	6363      	str	r3, [r4, #52]	@ 0x34
 800e84a:	89a3      	ldrh	r3, [r4, #12]
 800e84c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	2300      	movs	r3, #0
 800e854:	6063      	str	r3, [r4, #4]
 800e856:	6923      	ldr	r3, [r4, #16]
 800e858:	6023      	str	r3, [r4, #0]
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f043 0308 	orr.w	r3, r3, #8
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	6923      	ldr	r3, [r4, #16]
 800e864:	b94b      	cbnz	r3, 800e87a <__swsetup_r+0x7a>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e870:	d003      	beq.n	800e87a <__swsetup_r+0x7a>
 800e872:	4621      	mov	r1, r4
 800e874:	4628      	mov	r0, r5
 800e876:	f000 f84f 	bl	800e918 <__smakebuf_r>
 800e87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e87e:	f013 0201 	ands.w	r2, r3, #1
 800e882:	d00a      	beq.n	800e89a <__swsetup_r+0x9a>
 800e884:	2200      	movs	r2, #0
 800e886:	60a2      	str	r2, [r4, #8]
 800e888:	6962      	ldr	r2, [r4, #20]
 800e88a:	4252      	negs	r2, r2
 800e88c:	61a2      	str	r2, [r4, #24]
 800e88e:	6922      	ldr	r2, [r4, #16]
 800e890:	b942      	cbnz	r2, 800e8a4 <__swsetup_r+0xa4>
 800e892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e896:	d1c5      	bne.n	800e824 <__swsetup_r+0x24>
 800e898:	bd38      	pop	{r3, r4, r5, pc}
 800e89a:	0799      	lsls	r1, r3, #30
 800e89c:	bf58      	it	pl
 800e89e:	6962      	ldrpl	r2, [r4, #20]
 800e8a0:	60a2      	str	r2, [r4, #8]
 800e8a2:	e7f4      	b.n	800e88e <__swsetup_r+0x8e>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e7f7      	b.n	800e898 <__swsetup_r+0x98>
 800e8a8:	24000110 	.word	0x24000110

0800e8ac <_sbrk_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d06      	ldr	r5, [pc, #24]	@ (800e8c8 <_sbrk_r+0x1c>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	602b      	str	r3, [r5, #0]
 800e8b8:	f7f3 f98a 	bl	8001bd0 <_sbrk>
 800e8bc:	1c43      	adds	r3, r0, #1
 800e8be:	d102      	bne.n	800e8c6 <_sbrk_r+0x1a>
 800e8c0:	682b      	ldr	r3, [r5, #0]
 800e8c2:	b103      	cbz	r3, 800e8c6 <_sbrk_r+0x1a>
 800e8c4:	6023      	str	r3, [r4, #0]
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	24002520 	.word	0x24002520

0800e8cc <__swhatbuf_r>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	b096      	sub	sp, #88	@ 0x58
 800e8d8:	4615      	mov	r5, r2
 800e8da:	461e      	mov	r6, r3
 800e8dc:	da0d      	bge.n	800e8fa <__swhatbuf_r+0x2e>
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8e4:	f04f 0100 	mov.w	r1, #0
 800e8e8:	bf14      	ite	ne
 800e8ea:	2340      	movne	r3, #64	@ 0x40
 800e8ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	6031      	str	r1, [r6, #0]
 800e8f4:	602b      	str	r3, [r5, #0]
 800e8f6:	b016      	add	sp, #88	@ 0x58
 800e8f8:	bd70      	pop	{r4, r5, r6, pc}
 800e8fa:	466a      	mov	r2, sp
 800e8fc:	f000 f848 	bl	800e990 <_fstat_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	dbec      	blt.n	800e8de <__swhatbuf_r+0x12>
 800e904:	9901      	ldr	r1, [sp, #4]
 800e906:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e90a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e90e:	4259      	negs	r1, r3
 800e910:	4159      	adcs	r1, r3
 800e912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e916:	e7eb      	b.n	800e8f0 <__swhatbuf_r+0x24>

0800e918 <__smakebuf_r>:
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e91c:	079d      	lsls	r5, r3, #30
 800e91e:	4606      	mov	r6, r0
 800e920:	460c      	mov	r4, r1
 800e922:	d507      	bpl.n	800e934 <__smakebuf_r+0x1c>
 800e924:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	2301      	movs	r3, #1
 800e92e:	6163      	str	r3, [r4, #20]
 800e930:	b003      	add	sp, #12
 800e932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e934:	ab01      	add	r3, sp, #4
 800e936:	466a      	mov	r2, sp
 800e938:	f7ff ffc8 	bl	800e8cc <__swhatbuf_r>
 800e93c:	9f00      	ldr	r7, [sp, #0]
 800e93e:	4605      	mov	r5, r0
 800e940:	4639      	mov	r1, r7
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff fae2 	bl	800df0c <_malloc_r>
 800e948:	b948      	cbnz	r0, 800e95e <__smakebuf_r+0x46>
 800e94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94e:	059a      	lsls	r2, r3, #22
 800e950:	d4ee      	bmi.n	800e930 <__smakebuf_r+0x18>
 800e952:	f023 0303 	bic.w	r3, r3, #3
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	81a3      	strh	r3, [r4, #12]
 800e95c:	e7e2      	b.n	800e924 <__smakebuf_r+0xc>
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	6020      	str	r0, [r4, #0]
 800e962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	9b01      	ldr	r3, [sp, #4]
 800e96a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e96e:	b15b      	cbz	r3, 800e988 <__smakebuf_r+0x70>
 800e970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e974:	4630      	mov	r0, r6
 800e976:	f000 f81d 	bl	800e9b4 <_isatty_r>
 800e97a:	b128      	cbz	r0, 800e988 <__smakebuf_r+0x70>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	f023 0303 	bic.w	r3, r3, #3
 800e982:	f043 0301 	orr.w	r3, r3, #1
 800e986:	81a3      	strh	r3, [r4, #12]
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	431d      	orrs	r5, r3
 800e98c:	81a5      	strh	r5, [r4, #12]
 800e98e:	e7cf      	b.n	800e930 <__smakebuf_r+0x18>

0800e990 <_fstat_r>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	4d07      	ldr	r5, [pc, #28]	@ (800e9b0 <_fstat_r+0x20>)
 800e994:	2300      	movs	r3, #0
 800e996:	4604      	mov	r4, r0
 800e998:	4608      	mov	r0, r1
 800e99a:	4611      	mov	r1, r2
 800e99c:	602b      	str	r3, [r5, #0]
 800e99e:	f7f3 f8ee 	bl	8001b7e <_fstat>
 800e9a2:	1c43      	adds	r3, r0, #1
 800e9a4:	d102      	bne.n	800e9ac <_fstat_r+0x1c>
 800e9a6:	682b      	ldr	r3, [r5, #0]
 800e9a8:	b103      	cbz	r3, 800e9ac <_fstat_r+0x1c>
 800e9aa:	6023      	str	r3, [r4, #0]
 800e9ac:	bd38      	pop	{r3, r4, r5, pc}
 800e9ae:	bf00      	nop
 800e9b0:	24002520 	.word	0x24002520

0800e9b4 <_isatty_r>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4d06      	ldr	r5, [pc, #24]	@ (800e9d0 <_isatty_r+0x1c>)
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	602b      	str	r3, [r5, #0]
 800e9c0:	f7f3 f8ed 	bl	8001b9e <_isatty>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d102      	bne.n	800e9ce <_isatty_r+0x1a>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	b103      	cbz	r3, 800e9ce <_isatty_r+0x1a>
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	24002520 	.word	0x24002520

0800e9d4 <_init>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr

0800e9e0 <_fini>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	bf00      	nop
 800e9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e6:	bc08      	pop	{r3}
 800e9e8:	469e      	mov	lr, r3
 800e9ea:	4770      	bx	lr
