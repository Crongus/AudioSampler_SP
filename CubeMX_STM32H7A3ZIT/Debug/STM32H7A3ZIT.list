
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daa0  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800dd50  0800dd50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de70  0800de70  0000ee70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de78  0800de78  0000ee78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800de7c  0800de7c  0000ee7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800de80  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fc8  24000160  0800dfe0  0000f160  2**2
                  ALLOC
  8 ._user_heap_stack 00001200  24002128  0800dfe0  00010128  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027956  00000000  00000000  0000f18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005734  00000000  00000000  00036ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e50  00000000  00000000  0003c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001729  00000000  00000000  0003e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000374c6  00000000  00000000  0003f791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c46f  00000000  00000000  00076c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001479c1  00000000  00000000  000a30c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eaa87  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008670  00000000  00000000  001eaacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001f313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800dd38 	.word	0x0800dd38

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800dd38 	.word	0x0800dd38

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <flashBoot>:
#include "sdram_init.h"

FMC_SDRAM_CommandTypeDef command;


void flashBoot(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	*(uint8_t *) (FLASH_COMMON_BANK_ADDR + FLASH_COMMAND_OFFSET) = 0xFF;
 8000394:	f04f 4301 	mov.w	r3, #2164260864	@ 0x81000000
 8000398:	22ff      	movs	r2, #255	@ 0xff
 800039a:	701a      	strb	r2, [r3, #0]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
	...

080003a8 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	@ 0x40
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80003ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003bc:	f107 0320 	add.w	r3, r7, #32
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
 80003d8:	615a      	str	r2, [r3, #20]
 80003da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <MX_FMC_Init+0x158>)
 80003de:	4a49      	ldr	r2, [pc, #292]	@ (8000504 <MX_FMC_Init+0x15c>)
 80003e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003e2:	4b47      	ldr	r3, [pc, #284]	@ (8000500 <MX_FMC_Init+0x158>)
 80003e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003ea:	4b45      	ldr	r3, [pc, #276]	@ (8000500 <MX_FMC_Init+0x158>)
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003f0:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_ENABLE;
 80003f6:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <MX_FMC_Init+0x158>)
 80003f8:	2240      	movs	r2, #64	@ 0x40
 80003fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003fc:	4b40      	ldr	r3, [pc, #256]	@ (8000500 <MX_FMC_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000402:	4b3f      	ldr	r3, [pc, #252]	@ (8000500 <MX_FMC_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <MX_FMC_Init+0x158>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 800040e:	4b3c      	ldr	r3, [pc, #240]	@ (8000500 <MX_FMC_Init+0x158>)
 8000410:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 8000416:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <MX_FMC_Init+0x158>)
 8000418:	2240      	movs	r2, #64	@ 0x40
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 800041c:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <MX_FMC_Init+0x158>)
 800041e:	2240      	movs	r2, #64	@ 0x40
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 8000422:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <MX_FMC_Init+0x158>)
 8000424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 1;
 800042a:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <MX_FMC_Init+0x158>)
 800042c:	2201      	movs	r2, #1
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000430:	4b33      	ldr	r3, [pc, #204]	@ (8000500 <MX_FMC_Init+0x158>)
 8000432:	2200      	movs	r2, #0
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8000436:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <MX_FMC_Init+0x158>)
 8000438:	2201      	movs	r2, #1
 800043a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 8000446:	23fc      	movs	r3, #252	@ 0xfc
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 800044a:	23fc      	movs	r3, #252	@ 0xfc
 800044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800044e:	23fc      	movs	r3, #252	@ 0xfc
 8000450:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 8000452:	23fc      	movs	r3, #252	@ 0xfc
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 8000456:	23fc      	movs	r3, #252	@ 0xfc
 8000458:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 800045a:	23fc      	movs	r3, #252	@ 0xfc
 800045c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800045e:	f107 0220 	add.w	r2, r7, #32
 8000462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000466:	4619      	mov	r1, r3
 8000468:	4825      	ldr	r0, [pc, #148]	@ (8000500 <MX_FMC_Init+0x158>)
 800046a:	f002 f9b9 	bl	80027e0 <HAL_NAND_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 8000474:	f000 febe 	bl	80011f4 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <MX_FMC_Init+0x160>)
 800047a:	4a24      	ldr	r2, [pc, #144]	@ (800050c <MX_FMC_Init+0x164>)
 800047c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <MX_FMC_Init+0x160>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <MX_FMC_Init+0x160>)
 8000486:	2201      	movs	r2, #1
 8000488:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800048a:	4b1f      	ldr	r3, [pc, #124]	@ (8000508 <MX_FMC_Init+0x160>)
 800048c:	2204      	movs	r2, #4
 800048e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000490:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <MX_FMC_Init+0x160>)
 8000492:	2210      	movs	r2, #16
 8000494:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000496:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <MX_FMC_Init+0x160>)
 8000498:	2240      	movs	r2, #64	@ 0x40
 800049a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800049c:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_FMC_Init+0x160>)
 800049e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004a2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004a4:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_FMC_Init+0x160>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <MX_FMC_Init+0x160>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_FMC_Init+0x160>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004c2:	2309      	movs	r3, #9
 80004c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004c6:	2306      	movs	r3, #6
 80004c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004ca:	2309      	movs	r3, #9
 80004cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004ce:	2303      	movs	r3, #3
 80004d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <MX_FMC_Init+0x160>)
 80004e0:	f007 fc56 	bl	8007d90 <HAL_SDRAM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_FMC_Init+0x146>
  {
    Error_Handler( );
 80004ea:	f000 fe83 	bl	80011f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 80004ee:	4908      	ldr	r1, [pc, #32]	@ (8000510 <MX_FMC_Init+0x168>)
 80004f0:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_FMC_Init+0x160>)
 80004f2:	f000 fe85 	bl	8001200 <SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 80004f6:	bf00      	nop
 80004f8:	3740      	adds	r7, #64	@ 0x40
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2400018c 	.word	0x2400018c
 8000504:	52004080 	.word	0x52004080
 8000508:	240001cc 	.word	0x240001cc
 800050c:	52004140 	.word	0x52004140
 8000510:	2400017c 	.word	0x2400017c

08000514 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	@ 0xe0
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <HAL_FMC_MspInit+0x188>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 80af 	bne.w	8000692 <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <HAL_FMC_MspInit+0x188>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	22c0      	movs	r2, #192	@ 0xc0
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f00c fdab 	bl	800d09e <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800054c:	f04f 0300 	mov.w	r3, #0
 8000550:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_CLKP;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4618      	mov	r0, r3
 800055e:	f005 f80d 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000568:	f000 fe44 	bl	80011f4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800056e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000572:	4a4b      	ldr	r2, [pc, #300]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 8000574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000578:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800057c:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <HAL_FMC_MspInit+0x18c>)
 800057e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800058a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800058e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a4:	230c      	movs	r3, #12
 80005a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005aa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005ae:	4619      	mov	r1, r3
 80005b0:	483c      	ldr	r0, [pc, #240]	@ (80006a4 <HAL_FMC_MspInit+0x190>)
 80005b2:	f001 fbcb 	bl	8001d4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80005b6:	230d      	movs	r3, #13
 80005b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005ce:	230c      	movs	r3, #12
 80005d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005d8:	4619      	mov	r1, r3
 80005da:	4833      	ldr	r0, [pc, #204]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 80005dc:	f001 fbb6 	bl	8001d4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000600:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000604:	4619      	mov	r1, r3
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <HAL_FMC_MspInit+0x198>)
 8000608:	f001 fba0 	bl	8001d4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800060c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000626:	230c      	movs	r3, #12
 8000628:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000630:	4619      	mov	r1, r3
 8000632:	481f      	ldr	r0, [pc, #124]	@ (80006b0 <HAL_FMC_MspInit+0x19c>)
 8000634:	f001 fb8a 	bl	8001d4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000638:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000652:	230c      	movs	r3, #12
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000658:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800065c:	4619      	mov	r1, r3
 800065e:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <HAL_FMC_MspInit+0x1a0>)
 8000660:	f001 fb74 	bl	8001d4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800067e:	2309      	movs	r3, #9
 8000680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000684:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000688:	4619      	mov	r1, r3
 800068a:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <HAL_FMC_MspInit+0x194>)
 800068c:	f001 fb5e 	bl	8001d4c <HAL_GPIO_Init>
 8000690:	e000      	b.n	8000694 <HAL_FMC_MspInit+0x180>
    return;
 8000692:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000694:	37e0      	adds	r7, #224	@ 0xe0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000200 	.word	0x24000200
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021400 	.word	0x58021400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58021800 	.word	0x58021800
 80006b0:	58021000 	.word	0x58021000
 80006b4:	58020c00 	.word	0x58020c00

080006b8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 80006c0:	f7ff ff28 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006d4:	f7ff ff1e 	bl	8000514 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b60      	ldr	r3, [pc, #384]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000878 <MX_GPIO_Init+0x198>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000706:	4b5c      	ldr	r3, [pc, #368]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800070c:	f003 0310 	and.w	r3, r3, #16
 8000710:	61bb      	str	r3, [r7, #24]
 8000712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000716:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800071a:	4a57      	ldr	r2, [pc, #348]	@ (8000878 <MX_GPIO_Init+0x198>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000724:	4b54      	ldr	r3, [pc, #336]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b51      	ldr	r3, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000738:	4a4f      	ldr	r2, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x198>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000742:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000756:	4a48      	ldr	r2, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000760:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000770:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000774:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000780:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x198>)
 800078e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000792:	4a39      	ldr	r2, [pc, #228]	@ (8000878 <MX_GPIO_Init+0x198>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800079c:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x198>)
 800079e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007b0:	4a31      	ldr	r2, [pc, #196]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007b2:	f043 0308 	orr.w	r3, r3, #8
 80007b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80007ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x198>)
 80007bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2150      	movs	r1, #80	@ 0x50
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007ce:	f001 fc6d 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d8:	4829      	ldr	r0, [pc, #164]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 80007da:	f001 fc67 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	21c0      	movs	r1, #192	@ 0xc0
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 80007e4:	f001 fc62 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007e8:	232c      	movs	r3, #44	@ 0x2c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4820      	ldr	r0, [pc, #128]	@ (800087c <MX_GPIO_Init+0x19c>)
 80007fc:	f001 faa6 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000800:	2350      	movs	r3, #80	@ 0x50
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <MX_GPIO_Init+0x19c>)
 8000818:	f001 fa98 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000836:	f001 fa89 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800083a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_GPIO_Init+0x1a0>)
 8000850:	f001 fa7c 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000854:	23c0      	movs	r3, #192	@ 0xc0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x1a4>)
 800086c:	f001 fa6e 	bl	8001d4c <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	@ 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58024400 	.word	0x58024400
 800087c:	58021000 	.word	0x58021000
 8000880:	58020800 	.word	0x58020800
 8000884:	58021400 	.word	0x58021400

08000888 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000892:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f001 fc26 	bl	8002114 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fc91 	bl	80011f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f001 fcb9 	bl	800224c <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fc88 	bl	80011f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f001 fcfb 	bl	80022e2 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fc7f 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000204 	.word	0x24000204
 8000900:	40005400 	.word	0x40005400
 8000904:	20b0ccff 	.word	0x20b0ccff

08000908 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_I2C2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <MX_I2C2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_I2C2_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <MX_I2C2_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_I2C2_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_I2C2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_I2C2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_I2C2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_I2C2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_I2C2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	@ (800097c <MX_I2C2_Init+0x74>)
 8000944:	f001 fbe6 	bl	8002114 <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 fc51 	bl	80011f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	@ (800097c <MX_I2C2_Init+0x74>)
 8000956:	f001 fc79 	bl	800224c <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 fc48 	bl	80011f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_I2C2_Init+0x74>)
 8000968:	f001 fcbb 	bl	80022e2 <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fc3f 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	24000258 	.word	0x24000258
 8000980:	40005800 	.word	0x40005800
 8000984:	20b0ccff 	.word	0x20b0ccff

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0bc      	sub	sp, #240	@ 0xf0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0318 	add.w	r3, r7, #24
 80009a4:	22c0      	movs	r2, #192	@ 0xc0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00c fb78 	bl	800d09e <memset>
  if(i2cHandle->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ae8 <HAL_I2C_MspInit+0x160>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d146      	bne.n	8000a46 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b8:	f04f 0208 	mov.w	r2, #8
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 fdd4 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009da:	f000 fc0b 	bl	80011f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b43      	ldr	r3, [pc, #268]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009e4:	4a41      	ldr	r2, [pc, #260]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ee:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 80009f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	@ 0xc0
 80009fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a02:	2312      	movs	r3, #18
 8000a04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a14:	2304      	movs	r3, #4
 8000a16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4833      	ldr	r0, [pc, #204]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000a22:	f001 f993 	bl	8001d4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a28:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a32:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a44:	e04b      	b.n	8000ade <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <HAL_I2C_MspInit+0x16c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d146      	bne.n	8000ade <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a50:	f04f 0208 	mov.w	r2, #8
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fd88 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a72:	f000 fbbf 	bl	80011f4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <HAL_I2C_MspInit+0x168>)
 8000abc:	f001 f946 	bl	8001d4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ac6:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ac8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000acc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_I2C_MspInit+0x164>)
 8000ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
}
 8000ade:	bf00      	nop
 8000ae0:	37f0      	adds	r7, #240	@ 0xf0
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020400 	.word	0x58020400
 8000af4:	40005800 	.word	0x40005800

08000af8 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000afe:	4a17      	ldr	r2, [pc, #92]	@ (8000b5c <MX_I2S1_Init+0x64>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b04:	2206      	movs	r2, #6
 8000b06:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b14:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b20:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b24:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_I2S1_Init+0x60>)
 8000b46:	f001 fc19 	bl	800237c <HAL_I2S_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 fb50 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240002ac 	.word	0x240002ac
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_I2S2_Init+0x64>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_I2S2_Init+0x60>)
 8000bac:	f001 fbe6 	bl	800237c <HAL_I2S_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000bb6:	f000 fb1d 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000300 	.word	0x24000300
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0be      	sub	sp, #248	@ 0xf8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	22c0      	movs	r2, #192	@ 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00c fa58 	bl	800d09e <memset>
  if(i2sHandle->Instance==SPI1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a75      	ldr	r2, [pc, #468]	@ (8000dc8 <HAL_I2S_MspInit+0x200>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d173      	bne.n	8000ce0 <HAL_I2S_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f004 fcb4 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000c1a:	f000 faeb 	bl	80011f4 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c20:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c24:	4a69      	ldr	r2, [pc, #420]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c26:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c2e:	4b67      	ldr	r3, [pc, #412]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c30:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b63      	ldr	r3, [pc, #396]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c42:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
 8000c58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	4a5a      	ldr	r2, [pc, #360]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c6a:	4b58      	ldr	r3, [pc, #352]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c78:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c92:	2305      	movs	r3, #5
 8000c94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	484c      	ldr	r0, [pc, #304]	@ (8000dd0 <HAL_I2S_MspInit+0x208>)
 8000ca0:	f001 f854 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4842      	ldr	r0, [pc, #264]	@ (8000dd4 <HAL_I2S_MspInit+0x20c>)
 8000cca:	f001 f83f 	bl	8001d4c <HAL_GPIO_Init>

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2023      	movs	r0, #35	@ 0x23
 8000cd4:	f000 ff8d 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cd8:	2023      	movs	r0, #35	@ 0x23
 8000cda:	f000 ffa4 	bl	8001c26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cde:	e06f      	b.n	8000dc0 <HAL_I2S_MspInit+0x1f8>
  else if(i2sHandle->Instance==SPI2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	@ (8000dd8 <HAL_I2S_MspInit+0x210>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d16a      	bne.n	8000dc0 <HAL_I2S_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fc3b 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_I2S_MspInit+0x148>
      Error_Handler();
 8000d0c:	f000 fa72 	bl	80011f4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d10:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d12:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d16:	4a2d      	ldr	r2, [pc, #180]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000d20:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d34:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d52:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <HAL_I2S_MspInit+0x204>)
 8000d5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d6a:	2342      	movs	r3, #66	@ 0x42
 8000d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d82:	2305      	movs	r3, #5
 8000d84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <HAL_I2S_MspInit+0x20c>)
 8000d90:	f000 ffdc 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dae:	2305      	movs	r3, #5
 8000db0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <HAL_I2S_MspInit+0x214>)
 8000dbc:	f000 ffc6 	bl	8001d4c <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	37f8      	adds	r7, #248	@ 0xf8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020800 	.word	0x58020800
 8000dd8:	40003800 	.word	0x40003800
 8000ddc:	58020400 	.word	0x58020400

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	f5ad 5d86 	sub.w	sp, sp, #4288	@ 0x10c0
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000dea:	f000 f9b9 	bl	8001160 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dee:	f000 fd6f 	bl	80018d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f91f 	bl	8001034 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000df6:	f000 f995 	bl	8001124 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f7ff fc71 	bl	80006e0 <MX_GPIO_Init>
  MX_FMC_Init();
 8000dfe:	f7ff fad3 	bl	80003a8 <MX_FMC_Init>
  MX_I2S1_Init();
 8000e02:	f7ff fe79 	bl	8000af8 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000e06:	f7ff feab 	bl	8000b60 <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000e0a:	f000 fa65 	bl	80012d8 <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000e0e:	f7ff fd3b 	bl	8000888 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e12:	f7ff fd79 	bl	8000908 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000e16:	f00b faaf 	bl	800c378 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000e1a:	f000 fcbb 	bl	8001794 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  flashBoot();
 8000e1e:	f7ff fab7 	bl	8000390 <flashBoot>

  NAND_AddressTypedef Address;
  uint8_t txBuf[BUFFER_SIZE];
  uint8_t rxBuf[BUFFER_SIZE];
  int memtest = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8000e28:	443a      	add	r2, r7
 8000e2a:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 8000e2c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e30:	2200      	movs	r2, #0
 8000e32:	f803 2c98 	strb.w	r2, [r3, #-152]
	  NAND_ID.Device_Id = (uint16_t)0x00;
 8000e36:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f803 2c97 	strb.w	r2, [r3, #-151]
	  NAND_ID.Third_Id = (uint16_t)0x00;
 8000e40:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e44:	2200      	movs	r2, #0
 8000e46:	f803 2c96 	strb.w	r2, [r3, #-150]
	  NAND_ID.Fourth_Id = (uint16_t)0x00;
 8000e4a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f803 2c95 	strb.w	r2, [r3, #-149]
	  /* Read the NAND memory ID */
	  if(HAL_NAND_Read_ID(&hnand1, &NAND_ID) != HAL_OK)
 8000e54:	4b70      	ldr	r3, [pc, #448]	@ (8001018 <main+0x238>)
 8000e56:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000e5a:	f103 0308 	add.w	r3, r3, #8
 8000e5e:	443b      	add	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	486e      	ldr	r0, [pc, #440]	@ (800101c <main+0x23c>)
 8000e64:	f001 fd06 	bl	8002874 <HAL_NAND_Read_ID>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <main+0x92>
	  {
	  return NAND_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e0cb      	b.n	800100a <main+0x22a>
	  }
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 // HAL_Delay(1000);

	  Address.Page = 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f241 02b4 	movw	r2, #4276	@ 0x10b4
 8000e78:	443a      	add	r2, r7
 8000e7a:	8013      	strh	r3, [r2, #0]
	  Address.Plane = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f241 02b6 	movw	r2, #4278	@ 0x10b6
 8000e82:	443a      	add	r2, r7
 8000e84:	8013      	strh	r3, [r2, #0]
	  Address.Block = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f241 02b8 	movw	r2, #4280	@ 0x10b8
 8000e8c:	443a      	add	r2, r7
 8000e8e:	8013      	strh	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e01f      	b.n	8000eda <main+0xfa>
		txBuf[i] = i;
 8000e9a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	b2d9      	uxtb	r1, r3
 8000ea2:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f6a3 0254 	subw	r2, r3, #2132	@ 0x854
 8000eac:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	701a      	strb	r2, [r3, #0]
		rxBuf[i] = 0;
 8000eb8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b94      	subs	r3, #148	@ 0x94
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ecc:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f507 5286 	add.w	r2, r7, #4288	@ 0x10c0
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 8000ee4:	dbd9      	blt.n	8000e9a <main+0xba>
	  }
	  // Erase block
	  if (HAL_NAND_Erase_Block(&hnand1, &Address) != HAL_OK)
 8000ee6:	f241 03b4 	movw	r3, #4276	@ 0x10b4
 8000eea:	443b      	add	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	484b      	ldr	r0, [pc, #300]	@ (800101c <main+0x23c>)
 8000ef0:	f001 fff0 	bl	8002ed4 <HAL_NAND_Erase_Block>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <main+0x11e>
	  {
	  return NAND_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e085      	b.n	800100a <main+0x22a>
	  }
	  // Write Block
	  if (HAL_NAND_Write_Page(&hnand1,
 8000efe:	f607 0274 	addw	r2, r7, #2164	@ 0x874
 8000f02:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8000f06:	4439      	add	r1, r7
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4844      	ldr	r0, [pc, #272]	@ (800101c <main+0x23c>)
 8000f0c:	f001 fe8a 	bl	8002c24 <HAL_NAND_Write_Page_8b>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <main+0x13a>
			  	  	  	  	  &Address,
							  txBuf,
							  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e077      	b.n	800100a <main+0x22a>
	  }
	  /* Read back data from the NAND memory */
	  if (HAL_NAND_Read_Page(&hnand1,
 8000f1a:	4a41      	ldr	r2, [pc, #260]	@ (8001020 <main+0x240>)
 8000f1c:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000f20:	4413      	add	r3, r2
 8000f22:	19da      	adds	r2, r3, r7
 8000f24:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8000f28:	4439      	add	r1, r7
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	483b      	ldr	r0, [pc, #236]	@ (800101c <main+0x23c>)
 8000f2e:	f001 fd1f 	bl	8002970 <HAL_NAND_Read_Page_8b>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <main+0x15c>
	  &Address,
	  rxBuf,
	  1) != HAL_OK)
	  {
	  return NAND_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e066      	b.n	800100a <main+0x22a>
	  }
	  // Checking
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 8000f42:	443a      	add	r2, r7
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e024      	b.n	8000f92 <main+0x1b2>
		  if(rxBuf[i] != txBuf[i]) memtest = 0; // Check if all sent values were received
 8000f48:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f52:	443b      	add	r3, r7
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	3b94      	subs	r3, #148	@ 0x94
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	f241 03c8 	movw	r3, #4296	@ 0x10c8
 8000f60:	443b      	add	r3, r7
 8000f62:	f6a3 0154 	subw	r1, r3, #2132	@ 0x854
 8000f66:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f6a:	443b      	add	r3, r7
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	440b      	add	r3, r1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d004      	beq.n	8000f80 <main+0x1a0>
 8000f76:	2300      	movs	r3, #0
 8000f78:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8000f7c:	443a      	add	r2, r7
 8000f7e:	6013      	str	r3, [r2, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f80:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f84:	443b      	add	r3, r7
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f241 02bc 	movw	r2, #4284	@ 0x10bc
 8000f8e:	443a      	add	r2, r7
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	f241 03bc 	movw	r3, #4284	@ 0x10bc
 8000f96:	443b      	add	r3, r7
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f5b3 6f04 	cmp.w	r3, #2112	@ 0x840
 8000f9e:	dbd3      	blt.n	8000f48 <main+0x168>
	  }
	  if(memtest) { //printfs
 8000fa0:	f241 03c4 	movw	r3, #4292	@ 0x10c4
 8000fa4:	443b      	add	r3, r7
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d017      	beq.n	8000fdc <main+0x1fc>
	  			  uint8_t str[] = "Total Flash Success\r\n";
 8000fac:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001024 <main+0x244>)
 8000fb2:	f1a3 04b0 	sub.w	r4, r3, #176	@ 0xb0
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fc0:	6020      	str	r0, [r4, #0]
 8000fc2:	3404      	adds	r4, #4
 8000fc4:	8021      	strh	r1, [r4, #0]
	  			  CDC_Transmit_HS(str, sizeof(str));
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <main+0x248>)
 8000fc8:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000fcc:	f103 0308 	add.w	r3, r3, #8
 8000fd0:	443b      	add	r3, r7
 8000fd2:	2116      	movs	r1, #22
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00b fa8f 	bl	800c4f8 <CDC_Transmit_HS>
 8000fda:	e727      	b.n	8000e2c <main+0x4c>
	  		  } else {
	  			  uint8_t str[] = "Partial Flash Failure\r\n";
 8000fdc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000fe0:	4a12      	ldr	r2, [pc, #72]	@ (800102c <main+0x24c>)
 8000fe2:	f1a3 04c8 	sub.w	r4, r3, #200	@ 0xc8
 8000fe6:	4615      	mov	r5, r2
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ff0:	e884 0003 	stmia.w	r4, {r0, r1}
	  			  CDC_Transmit_HS(str, sizeof(str));
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <main+0x250>)
 8000ff6:	f503 5386 	add.w	r3, r3, #4288	@ 0x10c0
 8000ffa:	f103 0308 	add.w	r3, r3, #8
 8000ffe:	443b      	add	r3, r7
 8001000:	2118      	movs	r1, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f00b fa78 	bl	800c4f8 <CDC_Transmit_HS>
	  NAND_ID.Maker_Id = (uint16_t)0x00;
 8001008:	e710      	b.n	8000e2c <main+0x4c>

	   //uint8_t str[] = "Hello World\r\n";
	   //CDC_Transmit_HS(str, sizeof(str));
  }
  /* USER CODE END 3 */
}
 800100a:	4618      	mov	r0, r3
 800100c:	f507 5786 	add.w	r7, r7, #4288	@ 0x10c0
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bdb0      	pop	{r4, r5, r7, pc}
 8001016:	bf00      	nop
 8001018:	ffffef68 	.word	0xffffef68
 800101c:	2400018c 	.word	0x2400018c
 8001020:	ffffef6c 	.word	0xffffef6c
 8001024:	0800dd50 	.word	0x0800dd50
 8001028:	ffffef50 	.word	0xffffef50
 800102c:	0800dd68 	.word	0x0800dd68
 8001030:	ffffef38 	.word	0xffffef38

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09c      	sub	sp, #112	@ 0x70
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	224c      	movs	r2, #76	@ 0x4c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00c f82b 	bl	800d09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00c f825 	bl	800d09e <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001054:	4b31      	ldr	r3, [pc, #196]	@ (800111c <SystemClock_Config+0xe8>)
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800105e:	2002      	movs	r0, #2
 8001060:	f003 fa9a 	bl	8004598 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <SystemClock_Config+0xec>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a2c      	ldr	r2, [pc, #176]	@ (8001120 <SystemClock_Config+0xec>)
 800106e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <SystemClock_Config+0xec>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001080:	bf00      	nop
 8001082:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <SystemClock_Config+0xec>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800108a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800108e:	d1f8      	bne.n	8001082 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001090:	2322      	movs	r3, #34	@ 0x22
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001094:	2301      	movs	r3, #1
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001098:	2340      	movs	r3, #64	@ 0x40
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80010ac:	2323      	movs	r3, #35	@ 0x23
 80010ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010bc:	230c      	movs	r3, #12
 80010be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 faad 	bl	800462c <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80010d8:	f000 f88c 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	233f      	movs	r3, #63	@ 0x3f
 80010de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	2303      	movs	r3, #3
 80010e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010ec:	2340      	movs	r3, #64	@ 0x40
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010fa:	2340      	movs	r3, #64	@ 0x40
 80010fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2106      	movs	r1, #6
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fec4 	bl	8004e90 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800110e:	f000 f871 	bl	80011f4 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3770      	adds	r7, #112	@ 0x70
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	58024400 	.word	0x58024400
 8001120:	58024800 	.word	0x58024800

08001124 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0b0      	sub	sp, #192	@ 0xc0
 8001128:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	22c0      	movs	r2, #192	@ 0xc0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00b ffb4 	bl	800d09e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001136:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001142:	2300      	movs	r3, #0
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f004 fa17 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001154:	f000 f84e 	bl	80011f4 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	37c0      	adds	r7, #192	@ 0xc0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001172:	f000 fd73 	bl	8001c5c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001176:	2301      	movs	r3, #1
 8001178:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800117a:	2300      	movs	r3, #0
 800117c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001182:	231f      	movs	r3, #31
 8001184:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001186:	2387      	movs	r3, #135	@ 0x87
 8001188:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800118a:	2300      	movs	r3, #0
 800118c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800118e:	2300      	movs	r3, #0
 8001190:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001192:	2301      	movs	r3, #1
 8001194:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001196:	2301      	movs	r3, #1
 8001198:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd91 	bl	8001ccc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80011ae:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80011b2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80011b4:	2317      	movs	r3, #23
 80011b6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011bc:	2301      	movs	r3, #1
 80011be:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011c0:	2303      	movs	r3, #3
 80011c2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c8:	463b      	mov	r3, r7
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fd7e 	bl	8001ccc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x8000000;
 80011d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80011d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80011da:	231f      	movs	r3, #31
 80011dc:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fd73 	bl	8001ccc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011e6:	2004      	movs	r0, #4
 80011e8:	f000 fd50 	bl	8001c8c <HAL_MPU_Enable>

}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <Error_Handler+0x8>

08001200 <SDRAM_Initialization_Sequence>:
 * 6 Min of 2 auto-refresh cycles
 *
 */
#include "sdram_init.h"

void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	 __IO uint32_t tmpmrd =0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
	/* Step 2:  Configure a clock configuration enable command */
	  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2210      	movs	r2, #16
 8001218:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001226:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f006 fdeb 	bl	8007e08 <HAL_SDRAM_SendCommand>

	  /* Step 3: Insert 200 us minimum delay */
	  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	  HAL_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 fbde 	bl	80019f4 <HAL_Delay>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2202      	movs	r2, #2
 800123c:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2210      	movs	r2, #16
 8001242:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001250:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 fdd6 	bl	8007e08 <HAL_SDRAM_SendCommand>

	  /* Step 4: Configure a PALL (precharge all) command */
	  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2202      	movs	r2, #2
 8001260:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2210      	movs	r2, #16
 8001266:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f006 fdc4 	bl	8007e08 <HAL_SDRAM_SendCommand>

	  /* Step 5: Program the external memory mode register */
	  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001280:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001284:	60fb      	str	r3, [r7, #12]
	                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
	                     SDRAM_MODEREG_CAS_LATENCY_3           |
	                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2204      	movs	r2, #4
 800128a:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 1;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = tmpmrd;
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	60da      	str	r2, [r3, #12]

	  /* Send the command */
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800129e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f006 fdaf 	bl	8007e08 <HAL_SDRAM_SendCommand>

	  /* Step 6 : Configure a Auto-Refresh command */
	  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2203      	movs	r2, #3
 80012ae:	601a      	str	r2, [r3, #0]
	  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2210      	movs	r2, #16
 80012b4:	605a      	str	r2, [r3, #4]
	  Command->AutoRefreshNumber = 2;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2202      	movs	r2, #2
 80012ba:	609a      	str	r2, [r3, #8]
	  Command->ModeRegisterDefinition = 0;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]

	  /* Send the command twice*/
	  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80012c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f006 fd9d 	bl	8007e08 <HAL_SDRAM_SendCommand>
	  //HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012de:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80012e2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_SPDIFRX_Init+0x6c>)
 8001332:	f006 fd9f 	bl	8007e74 <HAL_SPDIFRX_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff ff5a 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	24000354 	.word	0x24000354

08001348 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ba      	sub	sp, #232	@ 0xe8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	22c0      	movs	r2, #192	@ 0xc0
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f00b fe98 	bl	800d09e <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8001376:	d149      	bne.n	800140c <HAL_SPDIFRX_MspInit+0xc4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001378:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8001384:	2300      	movs	r3, #0
 8001386:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f8f5 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8001398:	f7ff ff2c 	bl	80011f4 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 800139e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 80013ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 80013bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013c0:	4a14      	ldr	r2, [pc, #80]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <HAL_SPDIFRX_MspInit+0xcc>)
 80013cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4808      	ldr	r0, [pc, #32]	@ (8001418 <HAL_SPDIFRX_MspInit+0xd0>)
 80013f8:	f000 fca8 	bl	8001d4c <HAL_GPIO_Init>

    /* SPDIFRX interrupt Init */
    HAL_NVIC_SetPriority(SPDIF_RX_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2061      	movs	r0, #97	@ 0x61
 8001402:	f000 fbf6 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPDIF_RX_IRQn);
 8001406:	2061      	movs	r0, #97	@ 0x61
 8001408:	f000 fc0d 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800140c:	bf00      	nop
 800140e:	37e8      	adds	r7, #232	@ 0xe8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	58024400 	.word	0x58024400
 8001418:	58020c00 	.word	0x58020c00

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_MspInit+0x30>)
 8001424:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001428:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_MspInit+0x30>)
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_MspInit+0x30>)
 8001434:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	58024400 	.word	0x58024400

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <NMI_Handler+0x4>

08001458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800145e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <HardFault_Handler+0x28>)
 8001464:	f000 fe3b 	bl	80020de <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 1000000; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	e002      	b.n	8001474 <HardFault_Handler+0x1c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3301      	adds	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a03      	ldr	r2, [pc, #12]	@ (8001484 <HardFault_Handler+0x2c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	ddf8      	ble.n	800146e <HardFault_Handler+0x16>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800147c:	e7ef      	b.n	800145e <HardFault_Handler+0x6>
 800147e:	bf00      	nop
 8001480:	58020800 	.word	0x58020800
 8001484:	000f423f 	.word	0x000f423f

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 fa71 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <TIM2_IRQHandler+0x18>)
 80014de:	f006 fe72 	bl	80081c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <TIM2_IRQHandler+0x1c>)
 80014e8:	f000 fdf9 	bl	80020de <HAL_GPIO_TogglePin>
 //HAL_Delay(1000);
  /* USER CODE END TIM2_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	240003a8 	.word	0x240003a8
 80014f4:	58020800 	.word	0x58020800

080014f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <SPI1_IRQHandler+0x10>)
 80014fe:	f001 f86d 	bl	80025dc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240002ac 	.word	0x240002ac

0800150c <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001512:	f001 fee2 	bl	80032da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	240018d8 	.word	0x240018d8

08001520 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001526:	f001 fed8 	bl	80032da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	240018d8 	.word	0x240018d8

08001534 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <OTG_HS_IRQHandler+0x10>)
 800153a:	f001 fece 	bl	80032da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	240018d8 	.word	0x240018d8

08001548 <SPDIF_RX_IRQHandler>:

/**
  * @brief This function handles SPDIF-RX global interrupt.
  */
void SPDIF_RX_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPDIF_RX_IRQn 0 */

  /* USER CODE END SPDIF_RX_IRQn 0 */
  HAL_SPDIFRX_IRQHandler(&hspdif);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <SPDIF_RX_IRQHandler+0x10>)
 800154e:	f006 fcff 	bl	8007f50 <HAL_SPDIFRX_IRQHandler>
  /* USER CODE BEGIN SPDIF_RX_IRQn 1 */

  /* USER CODE END SPDIF_RX_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	24000354 	.word	0x24000354

0800155c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e00a      	b.n	8001584 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156e:	f3af 8000 	nop.w
 8001572:	4601      	mov	r1, r0
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	b2ca      	uxtb	r2, r1
 800157c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf0      	blt.n	800156e <_read+0x12>
  }

  return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e009      	b.n	80015bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbf1      	blt.n	80015a8 <_write+0x12>
  }
  return len;
 80015c4:	687b      	ldr	r3, [r7, #4]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_close>:

int _close(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f6:	605a      	str	r2, [r3, #4]
  return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_isatty>:

int _isatty(int file)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f00b fd68 	bl	800d13c <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	24100000 	.word	0x24100000
 8001698:	00001000 	.word	0x00001000
 800169c:	240003a4 	.word	0x240003a4
 80016a0:	24002128 	.word	0x24002128

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a8:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <SystemInit+0xd0>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	4a31      	ldr	r2, [pc, #196]	@ (8001774 <SystemInit+0xd0>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <SystemInit+0xd4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d807      	bhi.n	80016d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001778 <SystemInit+0xd4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 030f 	bic.w	r3, r3, #15
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <SystemInit+0xd4>)
 80016ce:	f043 0303 	orr.w	r3, r3, #3
 80016d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <SystemInit+0xd8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a28      	ldr	r2, [pc, #160]	@ (800177c <SystemInit+0xd8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <SystemInit+0xd8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <SystemInit+0xd8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4924      	ldr	r1, [pc, #144]	@ (800177c <SystemInit+0xd8>)
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <SystemInit+0xdc>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <SystemInit+0xd4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <SystemInit+0xd4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 030f 	bic.w	r3, r3, #15
 8001706:	4a1c      	ldr	r2, [pc, #112]	@ (8001778 <SystemInit+0xd4>)
 8001708:	f043 0303 	orr.w	r3, r3, #3
 800170c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <SystemInit+0xd8>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <SystemInit+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <SystemInit+0xd8>)
 8001722:	4a18      	ldr	r2, [pc, #96]	@ (8001784 <SystemInit+0xe0>)
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <SystemInit+0xd8>)
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <SystemInit+0xe4>)
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800172c:	4b13      	ldr	r3, [pc, #76]	@ (800177c <SystemInit+0xd8>)
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <SystemInit+0xe8>)
 8001730:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <SystemInit+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <SystemInit+0xd8>)
 800173a:	4a14      	ldr	r2, [pc, #80]	@ (800178c <SystemInit+0xe8>)
 800173c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <SystemInit+0xd8>)
 8001740:	2200      	movs	r2, #0
 8001742:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <SystemInit+0xd8>)
 8001746:	4a11      	ldr	r2, [pc, #68]	@ (800178c <SystemInit+0xe8>)
 8001748:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <SystemInit+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a09      	ldr	r2, [pc, #36]	@ (800177c <SystemInit+0xd8>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800175c:	4b07      	ldr	r3, [pc, #28]	@ (800177c <SystemInit+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <SystemInit+0xec>)
 8001764:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001768:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	52002000 	.word	0x52002000
 800177c:	58024400 	.word	0x58024400
 8001780:	eaf6ed7f 	.word	0xeaf6ed7f
 8001784:	02020200 	.word	0x02020200
 8001788:	01ff0000 	.word	0x01ff0000
 800178c:	01010280 	.word	0x01010280
 8001790:	52004000 	.word	0x52004000

08001794 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6349205;
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <MX_TIM2_Init+0x98>)
 80017ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d8:	4813      	ldr	r0, [pc, #76]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017da:	f006 fc9d 	bl	8008118 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017e4:	f7ff fd06 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4619      	mov	r1, r3
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <MX_TIM2_Init+0x94>)
 80017f6:	f006 fded 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001800:	f7ff fcf8 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001804:	2320      	movs	r3, #32
 8001806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_TIM2_Init+0x94>)
 8001812:	f007 f847 	bl	80088a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800181c:	f7ff fcea 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	240003a8 	.word	0x240003a8
 800182c:	0060e195 	.word	0x0060e195

08001830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d116      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_TIM_Base_MspInit+0x48>)
 8001844:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_TIM_Base_MspInit+0x48>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_TIM_Base_MspInit+0x48>)
 8001854:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	201c      	movs	r0, #28
 8001866:	f000 f9c4 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186a:	201c      	movs	r0, #28
 800186c:	f000 f9db 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58024400 	.word	0x58024400

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001880:	f7ff ff10 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	@ (80018bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	@ (80018c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f00b fc4d 	bl	800d148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fa97 	bl	8000de0 <main>
  bx  lr
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018bc:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80018c0:	0800de80 	.word	0x0800de80
  ldr r2, =_sbss
 80018c4:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80018c8:	24002128 	.word	0x24002128

080018cc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>
	...

080018d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d6:	2003      	movs	r0, #3
 80018d8:	f000 f980 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018dc:	f003 fc8e 	bl	80051fc <HAL_RCC_GetSysClockFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <HAL_Init+0x68>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	4913      	ldr	r1, [pc, #76]	@ (800193c <HAL_Init+0x6c>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_Init+0x68>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	4a0e      	ldr	r2, [pc, #56]	@ (800193c <HAL_Init+0x6c>)
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
 8001910:	4a0b      	ldr	r2, [pc, #44]	@ (8001940 <HAL_Init+0x70>)
 8001912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <HAL_Init+0x74>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191a:	200f      	movs	r0, #15
 800191c:	f000 f814 	bl	8001948 <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e002      	b.n	8001930 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800192a:	f7ff fd77 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	58024400 	.word	0x58024400
 800193c:	0800de2c 	.word	0x0800de2c
 8001940:	24000004 	.word	0x24000004
 8001944:	24000000 	.word	0x24000000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_InitTick+0x60>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e021      	b.n	80019a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <HAL_InitTick+0x64>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_InitTick+0x60>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f965 	bl	8001c42 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f92f 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x68>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2400000c 	.word	0x2400000c
 80019ac:	24000000 	.word	0x24000000
 80019b0:	24000008 	.word	0x24000008

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2400000c 	.word	0x2400000c
 80019d8:	240003f4 	.word	0x240003f4

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	240003f4 	.word	0x240003f4

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2400000c 	.word	0x2400000c

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x40>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0000 	.word	0x05fa0000

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff40 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff90 	bl	8001b30 <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5f 	bl	8001adc <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff33 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa4 	bl	8001b98 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c60:	f3bf 8f5f 	dmb	sy
}
 8001c64:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_MPU_Disable+0x28>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_MPU_Disable+0x28>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_MPU_Disable+0x2c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00
 8001c88:	e000ed90 	.word	0xe000ed90

08001c8c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_MPU_Enable+0x38>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_MPU_Enable+0x3c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_MPU_Enable+0x3c>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed90 	.word	0xe000ed90
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	785a      	ldrb	r2, [r3, #1]
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_MPU_ConfigRegion+0x7c>)
 8001cda:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <HAL_MPU_ConfigRegion+0x7c>)
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_MPU_ConfigRegion+0x7c>)
 8001ce2:	f023 0301 	bic.w	r3, r3, #1
 8001ce6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ce8:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_MPU_ConfigRegion+0x7c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7b1b      	ldrb	r3, [r3, #12]
 8001cf4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7adb      	ldrb	r3, [r3, #11]
 8001cfa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7a9b      	ldrb	r3, [r3, #10]
 8001d02:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7b5b      	ldrb	r3, [r3, #13]
 8001d0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7b9b      	ldrb	r3, [r3, #14]
 8001d12:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7bdb      	ldrb	r3, [r3, #15]
 8001d1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7a5b      	ldrb	r3, [r3, #9]
 8001d22:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7a1b      	ldrb	r3, [r3, #8]
 8001d2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d2c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d34:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d38:	6113      	str	r3, [r2, #16]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed90 	.word	0xe000ed90

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d5a:	4b89      	ldr	r3, [pc, #548]	@ (8001f80 <HAL_GPIO_Init+0x234>)
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5e:	e194      	b.n	800208a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8186 	beq.w	8002084 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x44>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 0201 	and.w	r2, r3, #1
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	69b9      	ldr	r1, [r7, #24]
 8001e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0203 	and.w	r2, r3, #3
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80e0 	beq.w	8002084 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f84 <HAL_GPIO_Init+0x238>)
 8001ec6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001eca:	4a2e      	ldr	r2, [pc, #184]	@ (8001f84 <HAL_GPIO_Init+0x238>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <HAL_GPIO_Init+0x238>)
 8001ed6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee2:	4a29      	ldr	r2, [pc, #164]	@ (8001f88 <HAL_GPIO_Init+0x23c>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_GPIO_Init+0x240>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d052      	beq.n	8001fb4 <HAL_GPIO_Init+0x268>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <HAL_GPIO_Init+0x244>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d031      	beq.n	8001f7a <HAL_GPIO_Init+0x22e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <HAL_GPIO_Init+0x248>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d02b      	beq.n	8001f76 <HAL_GPIO_Init+0x22a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <HAL_GPIO_Init+0x24c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d025      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_GPIO_Init+0x250>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01f      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <HAL_GPIO_Init+0x254>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa4 <HAL_GPIO_Init+0x258>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a19      	ldr	r2, [pc, #100]	@ (8001fa8 <HAL_GPIO_Init+0x25c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_GPIO_Init+0x260>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_GPIO_Init+0x264>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f56:	2309      	movs	r3, #9
 8001f58:	e02d      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	e02b      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e029      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e027      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e025      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e023      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e021      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e01f      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e01d      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01b      	b.n	8001fb6 <HAL_GPIO_Init+0x26a>
 8001f7e:	bf00      	nop
 8001f80:	58000080 	.word	0x58000080
 8001f84:	58024400 	.word	0x58024400
 8001f88:	58000400 	.word	0x58000400
 8001f8c:	58020000 	.word	0x58020000
 8001f90:	58020400 	.word	0x58020400
 8001f94:	58020800 	.word	0x58020800
 8001f98:	58020c00 	.word	0x58020c00
 8001f9c:	58021000 	.word	0x58021000
 8001fa0:	58021400 	.word	0x58021400
 8001fa4:	58021800 	.word	0x58021800
 8001fa8:	58021c00 	.word	0x58021c00
 8001fac:	58022000 	.word	0x58022000
 8001fb0:	58022400 	.word	0x58022400
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc6:	4938      	ldr	r1, [pc, #224]	@ (80020a8 <HAL_GPIO_Init+0x35c>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3301      	adds	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f ae63 	bne.w	8001d60 <HAL_GPIO_Init+0x14>
  }
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3724      	adds	r7, #36	@ 0x24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	58000400 	.word	0x58000400

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	041a      	lsls	r2, r3, #16
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	400b      	ands	r3, r1
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e08b      	b.n	800223e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fc24 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	@ 0x24
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002164:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	e006      	b.n	800219c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800219a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d108      	bne.n	80021b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	e007      	b.n	80021c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <HAL_I2C_Init+0x134>)
 80021d2:	430b      	orrs	r3, r1
 80021d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69d9      	ldr	r1, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	02008000 	.word	0x02008000

0800224c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	d138      	bne.n	80022d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800226c:	2302      	movs	r3, #2
 800226e:	e032      	b.n	80022d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	@ 0x24
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800229e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d139      	bne.n	800236c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002302:	2302      	movs	r3, #2
 8002304:	e033      	b.n	800236e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2224      	movs	r2, #36	@ 0x24
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e11a      	b.n	80025c4 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fc10 	bl	8000bc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d008      	beq.n	80023f0 <HAL_I2S_Init+0x74>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d004      	beq.n	80023f0 <HAL_I2S_Init+0x74>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	f040 8094 	bne.w	8002518 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d067      	beq.n	80024c8 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002400:	2302      	movs	r3, #2
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e001      	b.n	800240a <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002406:	2301      	movs	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b30      	cmp	r3, #48	@ 0x30
 8002410:	d003      	beq.n	800241a <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002416:	2bb0      	cmp	r3, #176	@ 0xb0
 8002418:	d102      	bne.n	8002420 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 800241a:	2301      	movs	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	e001      	b.n	8002424 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	@ (80025cc <HAL_I2S_Init+0x250>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d107      	bne.n	800243e <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 800242e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	f004 fa5f 	bl	80068f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	e006      	b.n	800244c <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 800243e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	f004 fa57 	bl	80068f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800244a:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002454:	d113      	bne.n	800247e <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	fbb2 f2f3 	udiv	r2, r2, r3
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	3305      	adds	r3, #5
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e014      	b.n	80024a8 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800247e:	2220      	movs	r2, #32
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	3305      	adds	r3, #5
 80024a6:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4a49      	ldr	r2, [pc, #292]	@ (80025d0 <HAL_I2S_Init+0x254>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e003      	b.n	80024d0 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 80024c8:	2302      	movs	r3, #2
 80024ca:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <HAL_I2S_Init+0x160>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d002      	beq.n	80024e2 <HAL_I2S_Init+0x166>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2bff      	cmp	r3, #255	@ 0xff
 80024e0:	d907      	bls.n	80024f2 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e068      	b.n	80025c4 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002502:	4b34      	ldr	r3, [pc, #208]	@ (80025d4 <HAL_I2S_Init+0x258>)
 8002504:	4013      	ands	r3, r2
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	0411      	lsls	r1, r2, #16
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	0612      	lsls	r2, r2, #24
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800251e:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_I2S_Init+0x25c>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6851      	ldr	r1, [r2, #4]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6892      	ldr	r2, [r2, #8]
 800252a:	4311      	orrs	r1, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68d2      	ldr	r2, [r2, #12]
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6992      	ldr	r2, [r2, #24]
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6a12      	ldr	r2, [r2, #32]
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6912      	ldr	r2, [r2, #16]
 8002548:	430a      	orrs	r2, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800255e:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800256e:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d007      	beq.n	800259e <HAL_I2S_Init+0x222>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b06      	cmp	r3, #6
 8002594:	d003      	beq.n	800259e <HAL_I2S_Init+0x222>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b0a      	cmp	r3, #10
 800259c:	d10a      	bne.n	80025b4 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	58001400 	.word	0x58001400
 80025d0:	cccccccd 	.word	0xcccccccd
 80025d4:	fe00ffff 	.word	0xfe00ffff
 80025d8:	fdff9040 	.word	0xfdff9040

080025dc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t i2sier   = hi2s->Instance->IER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	617b      	str	r3, [r7, #20]
  uint32_t i2ssr    = hi2s->Instance->SR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint32_t trigger  = i2sier & i2ssr;
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b04      	cmp	r3, #4
 8002606:	d12f      	bne.n	8002668 <HAL_I2S_IRQHandler+0x8c>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_OVR))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_I2S_IRQHandler+0x48>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <HAL_I2S_IRQHandler+0x48>
    {
      hi2s->RxISR(hi2s);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_I2S_IRQHandler+0x8c>
    {
      /* Disable RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXP | I2S_IT_ERR));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6919      	ldr	r1, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <HAL_I2S_IRQHandler+0x1e8>)
 800263a:	400b      	ands	r3, r1
 800263c:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699a      	ldr	r2, [r3, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800264c:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265a:	f043 0202 	orr.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8b2 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b03      	cmp	r3, #3
 8002672:	d12f      	bne.n	80026d4 <HAL_I2S_IRQHandler+0xf8>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_UDR))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_I2S_IRQHandler+0xb4>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_I2S_IRQHandler+0xb4>
    {
      hi2s->TxISR(hi2s);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01c      	beq.n	80026d4 <HAL_I2S_IRQHandler+0xf8>
    {
      /* Disable TXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_ERR));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 72b1 	bic.w	r2, r2, #354	@ 0x162
 80026a8:	611a      	str	r2, [r3, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699a      	ldr	r2, [r3, #24]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0220 	orr.w	r2, r2, #32
 80026b8:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c6:	f043 0204 	orr.w	r2, r3, #4
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f87c 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d16c      	bne.n	80027ba <HAL_I2S_IRQHandler+0x1de>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_DXP))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_I2S_IRQHandler+0x11e>
    {
      hi2s->TxISR(hi2s);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
      hi2s->RxISR(hi2s);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
    }
    /* I2S in mode Receiver ------------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_I2S_IRQHandler+0x13a>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_I2S_IRQHandler+0x13a>
    {
      hi2s->RxISR(hi2s);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    }
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, I2S_FLAG_DXP))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_I2S_IRQHandler+0x156>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_I2S_IRQHandler+0x156>
    {
      hi2s->TxISR(hi2s);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	4798      	blx	r3
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_UDR))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_I2S_IRQHandler+0x19a>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_I2S_IRQHandler+0x1ec>)
 8002748:	400b      	ands	r3, r1
 800274a:	6113      	str	r3, [r2, #16]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f82b 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (HAL_IS_BIT_SET(trigger, I2S_FLAG_OVR))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01c      	beq.n	80027ba <HAL_I2S_IRQHandler+0x1de>
    {
      /* Disable TXP, RXP and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXP | I2S_IT_RXP | I2S_IT_ERR));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6919      	ldr	r1, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_I2S_IRQHandler+0x1ec>)
 800278c:	400b      	ands	r3, r1
 800278e:	6113      	str	r3, [r2, #16]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800279e:	619a      	str	r2, [r3, #24]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ac:	f043 0202 	orr.w	r2, r3, #2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f809 	bl	80027cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	fffffe9e 	.word	0xfffffe9e
 80027c8:	fffffe9c 	.word	0xfffffe9c

080027cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e037      	b.n	8002866 <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7fd ff54 	bl	80006b8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f006 f8ee 	bl	80089fc <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	461a      	mov	r2, r3
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	f006 f910 	bl	8008a50 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	461a      	mov	r2, r3
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	f006 f925 	bl	8008a8a <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0204 	orr.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_NAND_Init+0x90>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a06      	ldr	r2, [pc, #24]	@ (8002870 <HAL_NAND_Init+0x90>)
 8002856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800285a:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	52004000 	.word	0x52004000

08002874 <HAL_NAND_Read_ID>:
  *                the configuration information for NAND module.
  * @param  pNAND_ID NAND ID structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  __IO uint32_t data = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  __IO uint32_t data1 = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d101      	bne.n	8002896 <HAL_NAND_Read_ID+0x22>
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e066      	b.n	8002964 <HAL_NAND_Read_ID+0xf0>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d15f      	bne.n	8002962 <HAL_NAND_Read_ID+0xee>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_NAND_Read_ID+0x3c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e059      	b.n	8002964 <HAL_NAND_Read_ID+0xf0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80028c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80028c4:	617b      	str	r3, [r7, #20]

    /* Send Read ID command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	2290      	movs	r2, #144	@ 0x90
 80028ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028d0:	f3bf 8f4f 	dsb	sy
}
 80028d4:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028e0:	f3bf 8f4f 	dsb	sy
}
 80028e4:	bf00      	nop
    __DSB();

    /* Read the electronic signature from NAND flash */
    if (hnand->Init.MemoryDataWidth == FMC_NAND_MEM_BUS_WIDTH_8)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_NAND_Read_ID+0xa8>
    {
      data = *(__IO uint32_t *)deviceaddress;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	613b      	str	r3, [r7, #16]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b2da      	uxtb	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	b2da      	uxtb	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	0e1b      	lsrs	r3, r3, #24
 8002914:	b2da      	uxtb	r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	70da      	strb	r2, [r3, #3]
 800291a:	e018      	b.n	800294e <HAL_NAND_Read_ID+0xda>
    }
    else
    {
      data = *(__IO uint32_t *)deviceaddress;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
      data1 = *((__IO uint32_t *)deviceaddress + 4);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3310      	adds	r3, #16
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

      /* Return the data read */
      pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	701a      	strb	r2, [r3, #0]
      pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	705a      	strb	r2, [r3, #1]
      pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	709a      	strb	r2, [r3, #2]
      pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2da      	uxtb	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	70da      	strb	r2, [r3, #3]
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_NAND_Read_ID+0xf0>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                        uint8_t *pBuffer, uint32_t NumPageToRead)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	@ 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d101      	bne.n	800299a <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	e140      	b.n	8002c1c <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	f040 8139 	bne.w	8002c1a <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_NAND_Read_Page_8b+0x46>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e132      	b.n	8002c1c <HAL_NAND_Read_Page_8b+0x2ac>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 80029c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029ca:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	889b      	ldrh	r3, [r3, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	885b      	ldrh	r3, [r3, #2]
 80029dc:	4618      	mov	r0, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e2:	fb00 f303 	mul.w	r3, r0, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	440b      	add	r3, r1
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 80029f4:	e0fa      	b.n	8002bec <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a00:	f3bf 8f4f 	dsb	sy
}
 8002a04:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0e:	d848      	bhi.n	8002aa2 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a20:	d21a      	bcs.n	8002a58 <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a2c:	f3bf 8f4f 	dsb	sy
}
 8002a30:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3e:	f3bf 8f4f 	dsb	sy
}
 8002a42:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	0a1a      	lsrs	r2, r3, #8
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a52:	f3bf 8f4f 	dsb	sy
}
 8002a56:	e07d      	b.n	8002b54 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a62:	f3bf 8f4f 	dsb	sy
}
 8002a66:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a74:	f3bf 8f4f 	dsb	sy
}
 8002a78:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	0a1a      	lsrs	r2, r3, #8
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a88:	f3bf 8f4f 	dsb	sy
}
 8002a8c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	0c1a      	lsrs	r2, r3, #16
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a9c:	f3bf 8f4f 	dsb	sy
}
 8002aa0:	e058      	b.n	8002b54 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab2:	d222      	bcs.n	8002afa <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002abe:	f3bf 8f4f 	dsb	sy
}
 8002ac2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ace:	f3bf 8f4f 	dsb	sy
}
 8002ad2:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae0:	f3bf 8f4f 	dsb	sy
}
 8002ae4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	0a1a      	lsrs	r2, r3, #8
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002af4:	f3bf 8f4f 	dsb	sy
}
 8002af8:	e02c      	b.n	8002b54 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b04:	f3bf 8f4f 	dsb	sy
}
 8002b08:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b14:	f3bf 8f4f 	dsb	sy
}
 8002b18:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b26:	f3bf 8f4f 	dsb	sy
}
 8002b2a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	0a1a      	lsrs	r2, r3, #8
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b3a:	f3bf 8f4f 	dsb	sy
}
 8002b3e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	0c1a      	lsrs	r2, r3, #16
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4e:	f3bf 8f4f 	dsb	sy
}
 8002b52:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5a:	2230      	movs	r2, #48	@ 0x30
 8002b5c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b5e:	f3bf 8f4f 	dsb	sy
}
 8002b62:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d123      	bne.n	8002bb6 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe ff35 	bl	80019dc <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002b74:	e011      	b.n	8002b9a <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8002b76:	f7fe ff31 	bl	80019dc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b84:	d909      	bls.n	8002b9a <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e040      	b.n	8002c1c <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa37 	bl	800300e <HAL_NAND_Read_Status>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b40      	cmp	r3, #64	@ 0x40
 8002ba4:	d1e7      	bne.n	8002b76 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bb0:	f3bf 8f4f 	dsb	sy
}
 8002bb4:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bba:	e009      	b.n	8002bd0 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	701a      	strb	r2, [r3, #0]
        buff++;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bcc:	3301      	adds	r3, #1
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3f0      	bcc.n	8002bbc <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	3301      	adds	r3, #1
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to read */
      nbpages--;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	3301      	adds	r3, #1
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_NAND_Read_Page_8b+0x296>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f4ff aef8 	bcc.w	80029f6 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3730      	adds	r7, #48	@ 0x30
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress,
                                         const uint8_t *pBuffer, uint32_t NumPageToWrite)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	@ 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	623b      	str	r3, [r7, #32]
  const uint8_t *buff = pBuffer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d101      	bne.n	8002c4e <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e13e      	b.n	8002ecc <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	f040 8137 	bne.w	8002eca <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_NAND_Write_Page_8b+0x46>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e130      	b.n	8002ecc <HAL_NAND_Write_Page_8b+0x2a8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8002c7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002c7e:	61bb      	str	r3, [r7, #24]

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	4619      	mov	r1, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	889b      	ldrh	r3, [r3, #4]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	885b      	ldrh	r3, [r3, #2]
 8002c90:	4618      	mov	r0, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002ca8:	e0f8      	b.n	8002e9c <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cb4:	f3bf 8f4f 	dsb	sy
}
 8002cb8:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cc4:	f3bf 8f4f 	dsb	sy
}
 8002cc8:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cd2:	d848      	bhi.n	8002d66 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce4:	d21a      	bcs.n	8002d1c <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cf0:	f3bf 8f4f 	dsb	sy
}
 8002cf4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d02:	f3bf 8f4f 	dsb	sy
}
 8002d06:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	0a1a      	lsrs	r2, r3, #8
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d16:	f3bf 8f4f 	dsb	sy
}
 8002d1a:	e07d      	b.n	8002e18 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d26:	f3bf 8f4f 	dsb	sy
}
 8002d2a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d38:	f3bf 8f4f 	dsb	sy
}
 8002d3c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	0a1a      	lsrs	r2, r3, #8
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d4c:	f3bf 8f4f 	dsb	sy
}
 8002d50:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	0c1a      	lsrs	r2, r3, #16
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d60:	f3bf 8f4f 	dsb	sy
}
 8002d64:	e058      	b.n	8002e18 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d76:	d222      	bcs.n	8002dbe <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d82:	f3bf 8f4f 	dsb	sy
}
 8002d86:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d92:	f3bf 8f4f 	dsb	sy
}
 8002d96:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002da4:	f3bf 8f4f 	dsb	sy
}
 8002da8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	0a1a      	lsrs	r2, r3, #8
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002db8:	f3bf 8f4f 	dsb	sy
}
 8002dbc:	e02c      	b.n	8002e18 <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc8:	f3bf 8f4f 	dsb	sy
}
 8002dcc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dd8:	f3bf 8f4f 	dsb	sy
}
 8002ddc:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dea:	f3bf 8f4f 	dsb	sy
}
 8002dee:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	0a1a      	lsrs	r2, r3, #8
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dfe:	f3bf 8f4f 	dsb	sy
}
 8002e02:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	0c1a      	lsrs	r2, r3, #16
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e12:	f3bf 8f4f 	dsb	sy
}
 8002e16:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e1c:	e00c      	b.n	8002e38 <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	7812      	ldrb	r2, [r2, #0]
 8002e24:	701a      	strb	r2, [r3, #0]
        buff++;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e2c:	f3bf 8f4f 	dsb	sy
}
 8002e30:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	3301      	adds	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3ed      	bcc.n	8002e1e <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e48:	2210      	movs	r2, #16
 8002e4a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e4c:	f3bf 8f4f 	dsb	sy
}
 8002e50:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fdc3 	bl	80019dc <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002e58:	e011      	b.n	8002e7e <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8002e5a:	f7fe fdbf 	bl	80019dc <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d909      	bls.n	8002e7e <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e026      	b.n	8002ecc <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8c5 	bl	800300e <HAL_NAND_Read_Status>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d1e7      	bne.n	8002e5a <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Decrement pages to write */
      nbpages--;
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	3301      	adds	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_NAND_Write_Page_8b+0x292>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f4ff aefa 	bcc.w	8002caa <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e000      	b.n	8002ecc <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	@ 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, const NAND_AddressTypeDef *pAddress)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d101      	bne.n	8002eee <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	e089      	b.n	8003002 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	f040 8082 	bne.w	8003000 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_NAND_Erase_Block+0x36>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e07b      	b.n	8003002 <HAL_NAND_Erase_Block+0x12e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Identify the device address */
    deviceaddress = NAND_DEVICE;
 8002f1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002f1e:	60fb      	str	r3, [r7, #12]

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f26:	2260      	movs	r2, #96	@ 0x60
 8002f28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f2a:	f3bf 8f4f 	dsb	sy
}
 8002f2e:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	889b      	ldrh	r3, [r3, #4]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	885b      	ldrh	r3, [r3, #2]
 8002f40:	4618      	mov	r0, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	b2d9      	uxtb	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	fb11 f303 	smulbb	r3, r1, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8002f60:	4413      	add	r3, r2
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f66:	f3bf 8f4f 	dsb	sy
}
 8002f6a:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	889b      	ldrh	r3, [r3, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	885b      	ldrh	r3, [r3, #2]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f8c:	fb02 f303 	mul.w	r3, r2, r3
 8002f90:	440b      	add	r3, r1
 8002f92:	0a1a      	lsrs	r2, r3, #8
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f9e:	f3bf 8f4f 	dsb	sy
}
 8002fa2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	889b      	ldrh	r3, [r3, #4]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	885b      	ldrh	r3, [r3, #2]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	440b      	add	r3, r1
 8002fca:	0c1a      	lsrs	r2, r3, #16
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fd6:	f3bf 8f4f 	dsb	sy
}
 8002fda:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe2:	22d0      	movs	r2, #208	@ 0xd0
 8002fe4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe6:	f3bf 8f4f 	dsb	sy
}
 8002fea:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(const NAND_HandleTypeDef *hnand)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t data;
  uint32_t deviceaddress;
  UNUSED(hnand);

  /* Identify the device address */
  deviceaddress = NAND_DEVICE;
 8003016:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800301a:	60fb      	str	r3, [r7, #12]

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	2270      	movs	r2, #112	@ 0x70
 8003024:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8003046:	2340      	movs	r3, #64	@ 0x40
 8003048:	e000      	b.n	800304c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800304a:	2300      	movs	r3, #0
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0fe      	b.n	8003268 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f009 fb82 	bl	800c788 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2203      	movs	r2, #3
 8003088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f005 ff26 	bl	8008ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7c1a      	ldrb	r2, [r3, #16]
 800309e:	f88d 2000 	strb.w	r2, [sp]
 80030a2:	3304      	adds	r3, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	f005 fdf7 	bl	8008c98 <USB_CoreInit>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0d5      	b.n	8003268 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f005 ff1e 	bl	8008f04 <USB_SetCurrentMode>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0c6      	b.n	8003268 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
 80030de:	e04a      	b.n	8003176 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3315      	adds	r3, #21
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3314      	adds	r3, #20
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	b298      	uxth	r0, r3
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	332e      	adds	r3, #46	@ 0x2e
 800311c:	4602      	mov	r2, r0
 800311e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3318      	adds	r3, #24
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	331c      	adds	r3, #28
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3320      	adds	r3, #32
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	3324      	adds	r3, #36	@ 0x24
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	3301      	adds	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	791b      	ldrb	r3, [r3, #4]
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	429a      	cmp	r2, r3
 800317e:	d3af      	bcc.n	80030e0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e044      	b.n	8003210 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	3301      	adds	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	429a      	cmp	r2, r3
 8003218:	d3b5      	bcc.n	8003186 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7c1a      	ldrb	r2, [r3, #16]
 8003222:	f88d 2000 	strb.w	r2, [sp]
 8003226:	3304      	adds	r3, #4
 8003228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322a:	f005 feb7 	bl	8008f9c <USB_DevInit>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e013      	b.n	8003268 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7b1b      	ldrb	r3, [r3, #12]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f96e 	bl	8004538 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f006 fefa 	bl	800a05a <USB_DevDisconnect>

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_PCD_Start+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e022      	b.n	80032d2 <HAL_PCD_Start+0x62>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f005 fe01 	bl	8008ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f006 fea8 	bl	800a018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b08d      	sub	sp, #52	@ 0x34
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f006 ff66 	bl	800a1c2 <USB_GetMode>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 84b9 	bne.w	8003c70 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f006 feca 	bl	800a09c <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 84af 	beq.w	8003c6e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f006 feb7 	bl	800a09c <USB_ReadInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d107      	bne.n	8003348 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f002 0202 	and.w	r2, r2, #2
 8003346:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f006 fea5 	bl	800a09c <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d161      	bne.n	8003420 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0210 	bic.w	r2, r2, #16
 800336a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	3304      	adds	r3, #4
 800338a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	0c5b      	lsrs	r3, r3, #17
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	2b02      	cmp	r3, #2
 8003396:	d124      	bne.n	80033e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d035      	beq.n	8003410 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6a38      	ldr	r0, [r7, #32]
 80033b8:	f006 fcdc 	bl	8009d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c8:	441a      	add	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033da:	441a      	add	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	e016      	b.n	8003410 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	0c5b      	lsrs	r3, r3, #17
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d110      	bne.n	8003410 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033f4:	2208      	movs	r2, #8
 80033f6:	4619      	mov	r1, r3
 80033f8:	6a38      	ldr	r0, [r7, #32]
 80033fa:	f006 fcbb 	bl	8009d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340a:	441a      	add	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0210 	orr.w	r2, r2, #16
 800341e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f006 fe39 	bl	800a09c <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003430:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003434:	f040 80a7 	bne.w	8003586 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f006 fe3e 	bl	800a0c2 <USB_ReadDevAllOutEpInterrupt>
 8003446:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003448:	e099      	b.n	800357e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 808e 	beq.w	8003572 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f006 fe62 	bl	800a12a <USB_ReadDevOutEPInterrupt>
 8003466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00c      	beq.n	800348c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	2301      	movs	r3, #1
 8003482:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fed0 	bl	800422c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	2308      	movs	r3, #8
 80034a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 ffa6 	bl	80043fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2310      	movs	r3, #16
 80034ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d030      	beq.n	8003538 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d109      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	3304      	adds	r3, #4
 800350a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d108      	bne.n	8003526 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2200      	movs	r2, #0
 8003518:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f009 fa89 	bl	800ca38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	4413      	add	r3, r2
 800352e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003532:	461a      	mov	r2, r3
 8003534:	2302      	movs	r3, #2
 8003536:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800354e:	461a      	mov	r2, r3
 8003550:	2320      	movs	r3, #32
 8003552:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003570:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	3301      	adds	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	f47f af62 	bne.w	800344a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f006 fd86 	bl	800a09c <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003596:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800359a:	f040 80db 	bne.w	8003754 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f006 fda7 	bl	800a0f6 <USB_ReadDevAllInEpInterrupt>
 80035a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035ae:	e0cd      	b.n	800374c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80c2 	beq.w	8003740 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f006 fdcd 	bl	800a166 <USB_ReadDevInEPInterrupt>
 80035cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d057      	beq.n	8003688 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	2201      	movs	r2, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	799b      	ldrb	r3, [r3, #6]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d132      	bne.n	800367c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3320      	adds	r3, #32
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	331c      	adds	r3, #28
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4419      	add	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4403      	add	r3, r0
 800364a:	3320      	adds	r3, #32
 800364c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d113      	bne.n	800367c <HAL_PCD_IRQHandler+0x3a2>
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3324      	adds	r3, #36	@ 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d108      	bne.n	800367c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003674:	461a      	mov	r2, r3
 8003676:	2101      	movs	r1, #1
 8003678:	f006 fdd6 	bl	800a228 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f009 f953 	bl	800c92e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369e:	461a      	mov	r2, r3
 80036a0:	2308      	movs	r3, #8
 80036a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ba:	461a      	mov	r2, r3
 80036bc:	2310      	movs	r3, #16
 80036be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d6:	461a      	mov	r2, r3
 80036d8:	2340      	movs	r3, #64	@ 0x40
 80036da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d023      	beq.n	800372e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036e8:	6a38      	ldr	r0, [r7, #32]
 80036ea:	f005 fdb5 	bl	8009258 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	3310      	adds	r3, #16
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	78db      	ldrb	r3, [r3, #3]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f009 f9a0 	bl	800ca5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	2302      	movs	r3, #2
 800372c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fcea 	bl	8004114 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	3301      	adds	r3, #1
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	f47f af2e 	bne.w	80035b0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f006 fc9f 	bl	800a09c <USB_ReadInterrupts>
 800375e:	4603      	mov	r3, r0
 8003760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003768:	d122      	bne.n	80037b0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003790:	2100      	movs	r1, #0
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fef4 	bl	8004580 <HAL_PCDEx_LPM_Callback>
 8003798:	e002      	b.n	80037a0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f009 f93e 	bl	800ca1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80037ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f006 fc71 	bl	800a09c <USB_ReadInterrupts>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037c4:	d112      	bne.n	80037ec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f009 f8fa 	bl	800c9d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80037ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f006 fc53 	bl	800a09c <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003800:	d121      	bne.n	8003846 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003810:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003818:	2b00      	cmp	r3, #0
 800381a:	d111      	bne.n	8003840 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003836:	2101      	movs	r1, #1
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fea1 	bl	8004580 <HAL_PCDEx_LPM_Callback>
 800383e:	e002      	b.n	8003846 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f009 f8c5 	bl	800c9d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f006 fc26 	bl	800a09c <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385a:	f040 80b7 	bne.w	80039cc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2110      	movs	r1, #16
 8003878:	4618      	mov	r0, r3
 800387a:	f005 fced 	bl	8009258 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003882:	e046      	b.n	8003912 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003890:	461a      	mov	r2, r3
 8003892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003896:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c4:	461a      	mov	r2, r3
 80038c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003906:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800390a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390e:	3301      	adds	r3, #1
 8003910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	461a      	mov	r2, r3
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	4293      	cmp	r3, r2
 800391c:	d3b2      	bcc.n	8003884 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800392c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003930:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7bdb      	ldrb	r3, [r3, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800394a:	f043 030b 	orr.w	r3, r3, #11
 800394e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003960:	f043 030b 	orr.w	r3, r3, #11
 8003964:	6453      	str	r3, [r2, #68]	@ 0x44
 8003966:	e015      	b.n	8003994 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003976:	4619      	mov	r1, r3
 8003978:	f242 032b 	movw	r3, #8235	@ 0x202b
 800397c:	4313      	orrs	r3, r2
 800397e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800398e:	f043 030b 	orr.w	r3, r3, #11
 8003992:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f006 fc36 	bl	800a228 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f006 fb63 	bl	800a09c <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e0:	d123      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f006 fbfa 	bl	800a1e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f005 fcaa 	bl	800934a <USB_GetDevSpeed>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681c      	ldr	r4, [r3, #0]
 8003a02:	f001 fd75 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8003a06:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f005 f9b4 	bl	8008d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f008 ffb2 	bl	800c97e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f006 fb34 	bl	800a09c <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d10a      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f008 ff8f 	bl	800c962 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f002 0208 	and.w	r2, r2, #8
 8003a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f006 fb1f 	bl	800a09c <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a64:	2b80      	cmp	r3, #128	@ 0x80
 8003a66:	d123      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a74:	2301      	movs	r3, #1
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a78:	e014      	b.n	8003aa4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d105      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fb0a 	bl	80040b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d3e4      	bcc.n	8003a7a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f006 faf1 	bl	800a09c <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac4:	d13c      	bne.n	8003b40 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aca:	e02b      	b.n	8003b24 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3318      	adds	r3, #24
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d115      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003af2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da12      	bge.n	8003b1e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3317      	adds	r3, #23
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 faca 	bl	80040b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	3301      	adds	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	791b      	ldrb	r3, [r3, #4]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d3cd      	bcc.n	8003acc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f006 faa9 	bl	800a09c <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b54:	d156      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b56:	2301      	movs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5a:	e045      	b.n	8003be8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d12e      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da2b      	bge.n	8003be2 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	0c1a      	lsrs	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003b94:	4053      	eors	r3, r2
 8003b96:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bde:	6053      	str	r3, [r2, #4]
            break;
 8003be0:	e008      	b.n	8003bf4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	3301      	adds	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d3b3      	bcc.n	8003b5c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f006 fa47 	bl	800a09c <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c18:	d10a      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f008 ff30 	bl	800ca80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f006 fa31 	bl	800a09c <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d115      	bne.n	8003c70 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f008 ff20 	bl	800ca9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	e000      	b.n	8003c70 <HAL_PCD_IRQHandler+0x996>
      return;
 8003c6e:	bf00      	nop
    }
  }
}
 8003c70:	3734      	adds	r7, #52	@ 0x34
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}

08003c76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_PCD_SetAddress+0x1a>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e012      	b.n	8003cb6 <HAL_PCD_SetAddress+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f006 f990 	bl	8009fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4603      	mov	r3, r0
 8003cce:	70fb      	strb	r3, [r7, #3]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	803b      	strh	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	da0f      	bge.n	8003d04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	3310      	adds	r3, #16
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	705a      	strb	r2, [r3, #1]
 8003d02:	e00f      	b.n	8003d24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	f003 020f 	and.w	r2, r3, #15
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003d30:	883b      	ldrh	r3, [r7, #0]
 8003d32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	78ba      	ldrb	r2, [r7, #2]
 8003d3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d52:	78bb      	ldrb	r3, [r7, #2]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d102      	bne.n	8003d5e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_EP_Open+0xae>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e00e      	b.n	8003d8a <HAL_PCD_EP_Open+0xcc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 fb0a 	bl	8009394 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003d88:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da0f      	bge.n	8003dc6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3310      	adds	r3, #16
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	705a      	strb	r2, [r3, #1]
 8003dc4:	e00f      	b.n	8003de6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	3304      	adds	r3, #4
 8003dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_PCD_EP_Close+0x6e>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e00e      	b.n	8003e1e <HAL_PCD_EP_Close+0x8c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 fb48 	bl	80094a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	460b      	mov	r3, r1
 8003e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	7afb      	ldrb	r3, [r7, #11]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	799b      	ldrb	r3, [r3, #6]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	799b      	ldrb	r3, [r3, #6]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	f005 fbe5 	bl	800965c <USB_EPStartXfer>

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	7afb      	ldrb	r3, [r7, #11]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	3310      	adds	r3, #16
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	799b      	ldrb	r3, [r3, #6]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d102      	bne.n	8003f26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	799b      	ldrb	r3, [r3, #6]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	f005 fb93 	bl	800965c <USB_EPStartXfer>

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	7912      	ldrb	r2, [r2, #4]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e04f      	b.n	8003ffe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	da0f      	bge.n	8003f86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	3310      	adds	r3, #16
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	705a      	strb	r2, [r3, #1]
 8003f84:	e00d      	b.n	8003fa2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_PCD_EP_SetStall+0x82>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e01d      	b.n	8003ffe <HAL_PCD_EP_SetStall+0xbe>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f005 ff27 	bl	8009e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7999      	ldrb	r1, [r3, #6]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f006 f91a 	bl	800a228 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	7912      	ldrb	r2, [r2, #4]
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e042      	b.n	80040aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da0f      	bge.n	800404c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	f003 020f 	and.w	r2, r3, #15
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	3310      	adds	r3, #16
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	3304      	adds	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	705a      	strb	r2, [r3, #1]
 800404a:	e00f      	b.n	800406c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_PCD_EP_ClrStall+0x86>
 8004088:	2302      	movs	r3, #2
 800408a:	e00e      	b.n	80040aa <HAL_PCD_EP_ClrStall+0xa4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f005 ff30 	bl	8009f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da0c      	bge.n	80040e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3310      	adds	r3, #16
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	3304      	adds	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e00c      	b.n	80040fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 020f 	and.w	r2, r3, #15
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f005 fd4f 	bl	8009ba4 <USB_EPStopXfer>
 8004106:	4603      	mov	r3, r0
 8004108:	72fb      	strb	r3, [r7, #11]

  return ret;
 800410a:	7afb      	ldrb	r3, [r7, #11]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	@ 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3310      	adds	r3, #16
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d901      	bls.n	800414c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e06b      	b.n	8004224 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	429a      	cmp	r2, r3
 8004160:	d902      	bls.n	8004168 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3303      	adds	r3, #3
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004170:	e02a      	b.n	80041c8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	429a      	cmp	r2, r3
 8004186:	d902      	bls.n	800418e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3303      	adds	r3, #3
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f005 fda4 	bl	8009cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	441a      	add	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d809      	bhi.n	80041f2 <PCD_WriteEmptyTxFifo+0xde>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d203      	bcs.n	80041f2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1bf      	bne.n	8004172 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d811      	bhi.n	8004222 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2201      	movs	r2, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	43db      	mvns	r3, r3
 8004218:	6939      	ldr	r1, [r7, #16]
 800421a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800421e:	4013      	ands	r3, r2
 8004220:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	333c      	adds	r3, #60	@ 0x3c
 8004244:	3304      	adds	r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	799b      	ldrb	r3, [r3, #6]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d17b      	bne.n	800435a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d015      	beq.n	8004298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4a61      	ldr	r2, [pc, #388]	@ (80043f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	f240 80b9 	bls.w	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80b3 	beq.w	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428e:	461a      	mov	r2, r3
 8004290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004294:	6093      	str	r3, [r2, #8]
 8004296:	e0a7      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	2320      	movs	r3, #32
 80042b2:	6093      	str	r3, [r2, #8]
 80042b4:	e098      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 8093 	bne.w	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4a4b      	ldr	r2, [pc, #300]	@ (80043f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d90f      	bls.n	80042ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e6:	6093      	str	r3, [r2, #8]
 80042e8:	e07e      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	0159      	lsls	r1, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	440b      	add	r3, r1
 800430c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	1ad2      	subs	r2, r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d114      	bne.n	800434c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004334:	461a      	mov	r2, r3
 8004336:	2101      	movs	r1, #1
 8004338:	f005 ff76 	bl	800a228 <USB_EP0_OutStart>
 800433c:	e006      	b.n	800434c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	441a      	add	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f008 fad0 	bl	800c8f8 <HAL_PCD_DataOutStageCallback>
 8004358:	e046      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d124      	bne.n	80043ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	e032      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	2320      	movs	r3, #32
 800439c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f008 faa7 	bl	800c8f8 <HAL_PCD_DataOutStageCallback>
 80043aa:	e01d      	b.n	80043e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d114      	bne.n	80043dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043d4:	461a      	mov	r2, r3
 80043d6:	2100      	movs	r1, #0
 80043d8:	f005 ff26 	bl	800a228 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f008 fa88 	bl	800c8f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	4f54300a 	.word	0x4f54300a
 80043f8:	4f54310a 	.word	0x4f54310a

080043fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	333c      	adds	r3, #60	@ 0x3c
 8004414:	3304      	adds	r3, #4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <PCD_EP_OutSetupPacket_int+0x88>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d90e      	bls.n	8004450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f008 fa3f 	bl	800c8d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a0a      	ldr	r2, [pc, #40]	@ (8004484 <PCD_EP_OutSetupPacket_int+0x88>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d90c      	bls.n	8004478 <PCD_EP_OutSetupPacket_int+0x7c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	799b      	ldrb	r3, [r3, #6]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d108      	bne.n	8004478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004470:	461a      	mov	r2, r3
 8004472:	2101      	movs	r1, #1
 8004474:	f005 fed8 	bl	800a228 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	4f54300a 	.word	0x4f54300a

08004488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
 8004494:	4613      	mov	r3, r2
 8004496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044a6:	883b      	ldrh	r3, [r7, #0]
 80044a8:	0419      	lsls	r1, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044b4:	e028      	b.n	8004508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e00d      	b.n	80044e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	3340      	adds	r3, #64	@ 0x40
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	3301      	adds	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3ec      	bcc.n	80044ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044f0:	883b      	ldrh	r3, [r7, #0]
 80044f2:	0418      	lsls	r0, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4302      	orrs	r2, r0
 8004500:	3340      	adds	r3, #64	@ 0x40
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004566:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_PCDEx_ActivateLPM+0x44>)
 8004568:	4313      	orrs	r3, r2
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	10000003 	.word	0x10000003

08004580 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045a0:	4b19      	ldr	r3, [pc, #100]	@ (8004608 <HAL_PWREx_ConfigSupply+0x70>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d00a      	beq.n	80045c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045ac:	4b16      	ldr	r3, [pc, #88]	@ (8004608 <HAL_PWREx_ConfigSupply+0x70>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e01f      	b.n	80045fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e01d      	b.n	80045fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045c2:	4b11      	ldr	r3, [pc, #68]	@ (8004608 <HAL_PWREx_ConfigSupply+0x70>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	490f      	ldr	r1, [pc, #60]	@ (8004608 <HAL_PWREx_ConfigSupply+0x70>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045d2:	f7fd fa03 	bl	80019dc <HAL_GetTick>
 80045d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045d8:	e009      	b.n	80045ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045da:	f7fd f9ff 	bl	80019dc <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045e8:	d901      	bls.n	80045ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_PWREx_ConfigSupply+0x70>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fa:	d1ee      	bne.n	80045da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	58024800 	.word	0x58024800

0800460c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a04      	ldr	r2, [pc, #16]	@ (8004628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800461a:	60d3      	str	r3, [r2, #12]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58024800 	.word	0x58024800

0800462c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	@ 0x30
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d102      	bne.n	8004640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f000 bc1f 	b.w	8004e7e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80b3 	beq.w	80047b4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464e:	4b95      	ldr	r3, [pc, #596]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004656:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004658:	4b92      	ldr	r3, [pc, #584]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	2b10      	cmp	r3, #16
 8004662:	d007      	beq.n	8004674 <HAL_RCC_OscConfig+0x48>
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	2b18      	cmp	r3, #24
 8004668:	d112      	bne.n	8004690 <HAL_RCC_OscConfig+0x64>
 800466a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d10d      	bne.n	8004690 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004674:	4b8b      	ldr	r3, [pc, #556]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8098 	beq.w	80047b2 <HAL_RCC_OscConfig+0x186>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 8093 	bne.w	80047b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e3f6      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_OscConfig+0x7c>
 800469a:	4b82      	ldr	r3, [pc, #520]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a81      	ldr	r2, [pc, #516]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e058      	b.n	800475a <HAL_RCC_OscConfig+0x12e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d112      	bne.n	80046d6 <HAL_RCC_OscConfig+0xaa>
 80046b0:	4b7c      	ldr	r3, [pc, #496]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a7b      	ldr	r2, [pc, #492]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b79      	ldr	r3, [pc, #484]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a78      	ldr	r2, [pc, #480]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	4b76      	ldr	r3, [pc, #472]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a75      	ldr	r2, [pc, #468]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	e041      	b.n	800475a <HAL_RCC_OscConfig+0x12e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0xda>
 80046e0:	4b70      	ldr	r3, [pc, #448]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6f      	ldr	r2, [pc, #444]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b6d      	ldr	r3, [pc, #436]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6c      	ldr	r2, [pc, #432]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046f2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a69      	ldr	r2, [pc, #420]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e029      	b.n	800475a <HAL_RCC_OscConfig+0x12e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800470e:	d112      	bne.n	8004736 <HAL_RCC_OscConfig+0x10a>
 8004710:	4b64      	ldr	r3, [pc, #400]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a63      	ldr	r2, [pc, #396]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004716:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b61      	ldr	r3, [pc, #388]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a60      	ldr	r2, [pc, #384]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b5e      	ldr	r3, [pc, #376]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a5d      	ldr	r2, [pc, #372]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e011      	b.n	800475a <HAL_RCC_OscConfig+0x12e>
 8004736:	4b5b      	ldr	r3, [pc, #364]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5a      	ldr	r2, [pc, #360]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800473c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b58      	ldr	r3, [pc, #352]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a57      	ldr	r2, [pc, #348]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b55      	ldr	r3, [pc, #340]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a54      	ldr	r2, [pc, #336]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004754:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d013      	beq.n	800478a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd f93b 	bl	80019dc <HAL_GetTick>
 8004766:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476a:	f7fd f937 	bl	80019dc <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	@ 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e380      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800477c:	4b49      	ldr	r3, [pc, #292]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x13e>
 8004788:	e014      	b.n	80047b4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd f927 	bl	80019dc <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004792:	f7fd f923 	bl	80019dc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b64      	cmp	r3, #100	@ 0x64
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e36c      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047a4:	4b3f      	ldr	r3, [pc, #252]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x166>
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 808c 	beq.w	80048da <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c2:	4b38      	ldr	r3, [pc, #224]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047cc:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_RCC_OscConfig+0x1bc>
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2b18      	cmp	r3, #24
 80047dc:	d137      	bne.n	800484e <HAL_RCC_OscConfig+0x222>
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d132      	bne.n	800484e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e8:	4b2e      	ldr	r3, [pc, #184]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x1d4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e33e      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004800:	4b28      	ldr	r3, [pc, #160]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 0219 	bic.w	r2, r3, #25
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4925      	ldr	r1, [pc, #148]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd f8e3 	bl	80019dc <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7fd f8df 	bl	80019dc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e328      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800482c:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	4917      	ldr	r1, [pc, #92]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800484c:	e045      	b.n	80048da <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d028      	beq.n	80048a8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004856:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 0219 	bic.w	r2, r3, #25
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4910      	ldr	r1, [pc, #64]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd f8b8 	bl	80019dc <HAL_GetTick>
 800486c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd f8b4 	bl	80019dc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e2fd      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004882:	4b08      	ldr	r3, [pc, #32]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	061b      	lsls	r3, r3, #24
 800489c:	4901      	ldr	r1, [pc, #4]	@ (80048a4 <HAL_RCC_OscConfig+0x278>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
 80048a2:	e01a      	b.n	80048da <HAL_RCC_OscConfig+0x2ae>
 80048a4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a8:	4b97      	ldr	r3, [pc, #604]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a96      	ldr	r2, [pc, #600]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd f892 	bl	80019dc <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048bc:	f7fd f88e 	bl	80019dc <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e2d7      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d06a      	beq.n	80049bc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	4b88      	ldr	r3, [pc, #544]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f0:	4b85      	ldr	r3, [pc, #532]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80048f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d007      	beq.n	800490c <HAL_RCC_OscConfig+0x2e0>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b18      	cmp	r3, #24
 8004900:	d11b      	bne.n	800493a <HAL_RCC_OscConfig+0x30e>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d116      	bne.n	800493a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800490c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_OscConfig+0x2f8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e2ac      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004924:	4b78      	ldr	r3, [pc, #480]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	4975      	ldr	r1, [pc, #468]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004938:	e040      	b.n	80049bc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d023      	beq.n	800498a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004942:	4b71      	ldr	r3, [pc, #452]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a70      	ldr	r2, [pc, #448]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd f845 	bl	80019dc <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004956:	f7fd f841 	bl	80019dc <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e28a      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004968:	4b67      	ldr	r3, [pc, #412]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004974:	4b64      	ldr	r3, [pc, #400]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	4961      	ldr	r1, [pc, #388]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	60cb      	str	r3, [r1, #12]
 8004988:	e018      	b.n	80049bc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800498a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd f821 	bl	80019dc <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800499e:	f7fd f81d 	bl	80019dc <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e266      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b0:	4b55      	ldr	r3, [pc, #340]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d036      	beq.n	8004a36 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d019      	beq.n	8004a04 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fc fffe 	bl	80019dc <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fc fffa 	bl	80019dc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e243      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049f6:	4b44      	ldr	r3, [pc, #272]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 80049f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x3b8>
 8004a02:	e018      	b.n	8004a36 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a04:	4b40      	ldr	r3, [pc, #256]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a08:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a10:	f7fc ffe4 	bl	80019dc <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fc ffe0 	bl	80019dc <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e229      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2a:	4b37      	ldr	r3, [pc, #220]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d036      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d019      	beq.n	8004a7e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a56:	f7fc ffc1 	bl	80019dc <HAL_GetTick>
 8004a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a5e:	f7fc ffbd 	bl	80019dc <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e206      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a70:	4b25      	ldr	r3, [pc, #148]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x432>
 8004a7c:	e018      	b.n	8004ab0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a7e:	4b22      	ldr	r3, [pc, #136]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a21      	ldr	r2, [pc, #132]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a8a:	f7fc ffa7 	bl	80019dc <HAL_GetTick>
 8004a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a92:	f7fc ffa3 	bl	80019dc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1ec      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aa4:	4b18      	ldr	r3, [pc, #96]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80af 	beq.w	8004c1c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004abe:	4b13      	ldr	r3, [pc, #76]	@ (8004b0c <HAL_RCC_OscConfig+0x4e0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <HAL_RCC_OscConfig+0x4e0>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aca:	f7fc ff87 	bl	80019dc <HAL_GetTick>
 8004ace:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fc ff83 	bl	80019dc <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	@ 0x64
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e1cc      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCC_OscConfig+0x4e0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4e4>
 8004af8:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afc:	4a02      	ldr	r2, [pc, #8]	@ (8004b08 <HAL_RCC_OscConfig+0x4dc>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b04:	e05b      	b.n	8004bbe <HAL_RCC_OscConfig+0x592>
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58024800 	.word	0x58024800
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <HAL_RCC_OscConfig+0x512>
 8004b18:	4b9d      	ldr	r3, [pc, #628]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	4a9c      	ldr	r2, [pc, #624]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b24:	4b9a      	ldr	r3, [pc, #616]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	4a99      	ldr	r2, [pc, #612]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b30:	4b97      	ldr	r3, [pc, #604]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b34:	4a96      	ldr	r2, [pc, #600]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b36:	f023 0304 	bic.w	r3, r3, #4
 8004b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3c:	e03f      	b.n	8004bbe <HAL_RCC_OscConfig+0x592>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d112      	bne.n	8004b6c <HAL_RCC_OscConfig+0x540>
 8004b46:	4b92      	ldr	r3, [pc, #584]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4a:	4a91      	ldr	r2, [pc, #580]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b52:	4b8f      	ldr	r3, [pc, #572]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	4a8e      	ldr	r2, [pc, #568]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5e:	4b8c      	ldr	r3, [pc, #560]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	4a8b      	ldr	r2, [pc, #556]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b6a:	e028      	b.n	8004bbe <HAL_RCC_OscConfig+0x592>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b85      	cmp	r3, #133	@ 0x85
 8004b72:	d112      	bne.n	8004b9a <HAL_RCC_OscConfig+0x56e>
 8004b74:	4b86      	ldr	r3, [pc, #536]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b78:	4a85      	ldr	r2, [pc, #532]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b7a:	f043 0304 	orr.w	r3, r3, #4
 8004b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b80:	4b83      	ldr	r3, [pc, #524]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b84:	4a82      	ldr	r2, [pc, #520]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8c:	4b80      	ldr	r3, [pc, #512]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a7f      	ldr	r2, [pc, #508]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	e011      	b.n	8004bbe <HAL_RCC_OscConfig+0x592>
 8004b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004ba0:	f023 0301 	bic.w	r3, r3, #1
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a79      	ldr	r2, [pc, #484]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	4b77      	ldr	r3, [pc, #476]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a76      	ldr	r2, [pc, #472]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fc ff09 	bl	80019dc <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fc ff05 	bl	80019dc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e14c      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x5a2>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fc fef3 	bl	80019dc <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fc feef 	bl	80019dc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e136      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c10:	4b5f      	ldr	r3, [pc, #380]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 812b 	beq.w	8004e7c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c26:	4b5a      	ldr	r3, [pc, #360]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c2e:	2b18      	cmp	r3, #24
 8004c30:	f000 80bb 	beq.w	8004daa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f040 8095 	bne.w	8004d68 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b54      	ldr	r3, [pc, #336]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a53      	ldr	r2, [pc, #332]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fec7 	bl	80019dc <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fec3 	bl	80019dc <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e10c      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c64:	4b4a      	ldr	r3, [pc, #296]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c70:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c74:	4b47      	ldr	r3, [pc, #284]	@ (8004d94 <HAL_RCC_OscConfig+0x768>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	430a      	orrs	r2, r1
 8004c84:	4942      	ldr	r1, [pc, #264]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cba:	4935      	ldr	r1, [pc, #212]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cc0:	4b33      	ldr	r3, [pc, #204]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	4a32      	ldr	r2, [pc, #200]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ccc:	4b30      	ldr	r3, [pc, #192]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd0:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <HAL_RCC_OscConfig+0x76c>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cd8:	00d2      	lsls	r2, r2, #3
 8004cda:	492d      	ldr	r1, [pc, #180]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	f023 020c 	bic.w	r2, r3, #12
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	4928      	ldr	r1, [pc, #160]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cf2:	4b27      	ldr	r3, [pc, #156]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f023 0202 	bic.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	4924      	ldr	r1, [pc, #144]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d04:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a21      	ldr	r2, [pc, #132]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4b1f      	ldr	r3, [pc, #124]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a1b      	ldr	r2, [pc, #108]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d28:	4b19      	ldr	r3, [pc, #100]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a18      	ldr	r2, [pc, #96]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b16      	ldr	r3, [pc, #88]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a15      	ldr	r2, [pc, #84]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fc fe4c 	bl	80019dc <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fc fe48 	bl	80019dc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e091      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x71c>
 8004d66:	e089      	b.n	8004e7c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <HAL_RCC_OscConfig+0x764>)
 8004d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fe32 	bl	80019dc <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7a:	e00f      	b.n	8004d9c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fc fe2e 	bl	80019dc <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d908      	bls.n	8004d9c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e077      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400
 8004d94:	fffffc0c 	.word	0xfffffc0c
 8004d98:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e9      	bne.n	8004d7c <HAL_RCC_OscConfig+0x750>
 8004da8:	e068      	b.n	8004e7c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004daa:	4b37      	ldr	r3, [pc, #220]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004db0:	4b35      	ldr	r3, [pc, #212]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d031      	beq.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f003 0203 	and.w	r2, r3, #3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d12a      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d122      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d11a      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	0a5b      	lsrs	r3, r3, #9
 8004df0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d111      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d108      	bne.n	8004e22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0e1b      	lsrs	r3, r3, #24
 8004e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d001      	beq.n	8004e26 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02b      	b.n	8004e7e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e26:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e30:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d01f      	beq.n	8004e7c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e3c:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e48:	f7fc fdc8 	bl	80019dc <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e4e:	bf00      	nop
 8004e50:	f7fc fdc4 	bl	80019dc <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d0f9      	beq.n	8004e50 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e60:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <HAL_RCC_OscConfig+0x860>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e68:	00d2      	lsls	r2, r2, #3
 8004e6a:	4907      	ldr	r1, [pc, #28]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <HAL_RCC_OscConfig+0x85c>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3730      	adds	r7, #48	@ 0x30
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	ffff0007 	.word	0xffff0007

08004e90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e19c      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d910      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b87      	ldr	r3, [pc, #540]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 020f 	bic.w	r2, r3, #15
 8004eba:	4985      	ldr	r1, [pc, #532]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b83      	ldr	r3, [pc, #524]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e184      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d908      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ef0:	4b78      	ldr	r3, [pc, #480]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4975      	ldr	r1, [pc, #468]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	4b70      	ldr	r3, [pc, #448]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f1e:	4b6d      	ldr	r3, [pc, #436]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	496a      	ldr	r1, [pc, #424]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	4b64      	ldr	r3, [pc, #400]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d908      	bls.n	8004f5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f4c:	4b61      	ldr	r3, [pc, #388]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	495e      	ldr	r1, [pc, #376]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	4b59      	ldr	r3, [pc, #356]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d908      	bls.n	8004f8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f7a:	4b56      	ldr	r3, [pc, #344]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	4953      	ldr	r1, [pc, #332]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d908      	bls.n	8004fba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f023 020f 	bic.w	r2, r3, #15
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4947      	ldr	r1, [pc, #284]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d055      	beq.n	8005072 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fc6:	4b43      	ldr	r3, [pc, #268]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4940      	ldr	r1, [pc, #256]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d121      	bne.n	8005030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0f6      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d107      	bne.n	8005008 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff8:	4b36      	ldr	r3, [pc, #216]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d115      	bne.n	8005030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0ea      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005010:	4b30      	ldr	r3, [pc, #192]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d109      	bne.n	8005030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0de      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005020:	4b2c      	ldr	r3, [pc, #176]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0d6      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005030:	4b28      	ldr	r3, [pc, #160]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f023 0207 	bic.w	r2, r3, #7
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4925      	ldr	r1, [pc, #148]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 800503e:	4313      	orrs	r3, r2
 8005040:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005042:	f7fc fccb 	bl	80019dc <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005048:	e00a      	b.n	8005060 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504a:	f7fc fcc7 	bl	80019dc <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e0be      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005060:	4b1c      	ldr	r3, [pc, #112]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	429a      	cmp	r2, r3
 8005070:	d1eb      	bne.n	800504a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d010      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	4b14      	ldr	r3, [pc, #80]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	429a      	cmp	r2, r3
 800508c:	d208      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508e:	4b11      	ldr	r3, [pc, #68]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f023 020f 	bic.w	r2, r3, #15
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	490e      	ldr	r1, [pc, #56]	@ (80050d4 <HAL_RCC_ClockConfig+0x244>)
 800509c:	4313      	orrs	r3, r2
 800509e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d214      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 020f 	bic.w	r2, r3, #15
 80050b6:	4906      	ldr	r1, [pc, #24]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <HAL_RCC_ClockConfig+0x240>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e086      	b.n	80051de <HAL_RCC_ClockConfig+0x34e>
 80050d0:	52002000 	.word	0x52002000
 80050d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d010      	beq.n	8005106 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	4b3f      	ldr	r3, [pc, #252]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d208      	bcs.n	8005106 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050f4:	4b3c      	ldr	r3, [pc, #240]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	4939      	ldr	r1, [pc, #228]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005102:	4313      	orrs	r3, r2
 8005104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	4b34      	ldr	r3, [pc, #208]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511e:	429a      	cmp	r2, r3
 8005120:	d208      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005122:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	492e      	ldr	r1, [pc, #184]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005130:	4313      	orrs	r3, r2
 8005132:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	4b28      	ldr	r3, [pc, #160]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800514c:	429a      	cmp	r2, r3
 800514e:	d208      	bcs.n	8005162 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005150:	4b25      	ldr	r3, [pc, #148]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4922      	ldr	r1, [pc, #136]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 800515e:	4313      	orrs	r3, r2
 8005160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d010      	beq.n	8005190 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69da      	ldr	r2, [r3, #28]
 8005172:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800517a:	429a      	cmp	r2, r3
 800517c:	d208      	bcs.n	8005190 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800517e:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	4917      	ldr	r1, [pc, #92]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 800518c:	4313      	orrs	r3, r2
 800518e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005190:	f000 f834 	bl	80051fc <HAL_RCC_GetSysClockFreq>
 8005194:	4602      	mov	r2, r0
 8005196:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	4912      	ldr	r1, [pc, #72]	@ (80051ec <HAL_RCC_ClockConfig+0x35c>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80051ae:	4b0e      	ldr	r3, [pc, #56]	@ (80051e8 <HAL_RCC_ClockConfig+0x358>)
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	4a0d      	ldr	r2, [pc, #52]	@ (80051ec <HAL_RCC_ClockConfig+0x35c>)
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	4a0a      	ldr	r2, [pc, #40]	@ (80051f0 <HAL_RCC_ClockConfig+0x360>)
 80051c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c8:	4a0a      	ldr	r2, [pc, #40]	@ (80051f4 <HAL_RCC_ClockConfig+0x364>)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051ce:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <HAL_RCC_ClockConfig+0x368>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fc fbb8 	bl	8001948 <HAL_InitTick>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	58024400 	.word	0x58024400
 80051ec:	0800de2c 	.word	0x0800de2c
 80051f0:	24000004 	.word	0x24000004
 80051f4:	24000000 	.word	0x24000000
 80051f8:	24000008 	.word	0x24000008

080051fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	@ 0x24
 8005200:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005202:	4bb3      	ldr	r3, [pc, #716]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800520a:	2b18      	cmp	r3, #24
 800520c:	f200 8155 	bhi.w	80054ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	0800527d 	.word	0x0800527d
 800521c:	080054bb 	.word	0x080054bb
 8005220:	080054bb 	.word	0x080054bb
 8005224:	080054bb 	.word	0x080054bb
 8005228:	080054bb 	.word	0x080054bb
 800522c:	080054bb 	.word	0x080054bb
 8005230:	080054bb 	.word	0x080054bb
 8005234:	080054bb 	.word	0x080054bb
 8005238:	080052a3 	.word	0x080052a3
 800523c:	080054bb 	.word	0x080054bb
 8005240:	080054bb 	.word	0x080054bb
 8005244:	080054bb 	.word	0x080054bb
 8005248:	080054bb 	.word	0x080054bb
 800524c:	080054bb 	.word	0x080054bb
 8005250:	080054bb 	.word	0x080054bb
 8005254:	080054bb 	.word	0x080054bb
 8005258:	080052a9 	.word	0x080052a9
 800525c:	080054bb 	.word	0x080054bb
 8005260:	080054bb 	.word	0x080054bb
 8005264:	080054bb 	.word	0x080054bb
 8005268:	080054bb 	.word	0x080054bb
 800526c:	080054bb 	.word	0x080054bb
 8005270:	080054bb 	.word	0x080054bb
 8005274:	080054bb 	.word	0x080054bb
 8005278:	080052af 	.word	0x080052af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800527c:	4b94      	ldr	r3, [pc, #592]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005288:	4b91      	ldr	r3, [pc, #580]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	08db      	lsrs	r3, r3, #3
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	4a90      	ldr	r2, [pc, #576]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
 8005298:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800529a:	e111      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800529c:	4b8d      	ldr	r3, [pc, #564]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800529e:	61bb      	str	r3, [r7, #24]
      break;
 80052a0:	e10e      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052a2:	4b8d      	ldr	r3, [pc, #564]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052a4:	61bb      	str	r3, [r7, #24]
      break;
 80052a6:	e10b      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052a8:	4b8c      	ldr	r3, [pc, #560]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052aa:	61bb      	str	r3, [r7, #24]
      break;
 80052ac:	e108      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052ae:	4b88      	ldr	r3, [pc, #544]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052b8:	4b85      	ldr	r3, [pc, #532]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052c4:	4b82      	ldr	r3, [pc, #520]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052ce:	4b80      	ldr	r3, [pc, #512]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80e1 	beq.w	80054b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f000 8083 	beq.w	8005400 <HAL_RCC_GetSysClockFreq+0x204>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	f200 80a1 	bhi.w	8005444 <HAL_RCC_GetSysClockFreq+0x248>
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x114>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d056      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800530e:	e099      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005310:	4b6f      	ldr	r3, [pc, #444]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02d      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800531c:	4b6c      	ldr	r3, [pc, #432]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	4a6b      	ldr	r2, [pc, #428]	@ (80054d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b62      	ldr	r3, [pc, #392]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a02 	vldr	s12, [r7, #8]
 800535a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005376:	e087      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80054e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b51      	ldr	r3, [pc, #324]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a02 	vldr	s12, [r7, #8]
 800539e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ba:	e065      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80054e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b40      	ldr	r3, [pc, #256]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053fe:	e043      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80054ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a02 	vldr	s12, [r7, #8]
 8005426:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005442:	e021      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80054e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a02 	vldr	s12, [r7, #8]
 800546a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80054e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005486:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005488:	4b11      	ldr	r3, [pc, #68]	@ (80054d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	0a5b      	lsrs	r3, r3, #9
 800548e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005492:	3301      	adds	r3, #1
 8005494:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ac:	ee17 3a90 	vmov	r3, s15
 80054b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054b2:	e005      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
      break;
 80054b8:	e002      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054ba:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054bc:	61bb      	str	r3, [r7, #24]
      break;
 80054be:	bf00      	nop
  }

  return sysclockfreq;
 80054c0:	69bb      	ldr	r3, [r7, #24]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3724      	adds	r7, #36	@ 0x24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
 80054d4:	03d09000 	.word	0x03d09000
 80054d8:	003d0900 	.word	0x003d0900
 80054dc:	016e3600 	.word	0x016e3600
 80054e0:	46000000 	.word	0x46000000
 80054e4:	4c742400 	.word	0x4c742400
 80054e8:	4a742400 	.word	0x4a742400
 80054ec:	4bb71b00 	.word	0x4bb71b00

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80054f6:	f7ff fe81 	bl	80051fc <HAL_RCC_GetSysClockFreq>
 80054fa:	4602      	mov	r2, r0
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x50>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	490f      	ldr	r1, [pc, #60]	@ (8005544 <HAL_RCC_GetHCLKFreq+0x54>)
 8005508:	5ccb      	ldrb	r3, [r1, r3]
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x50>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f003 030f 	and.w	r3, r3, #15
 800551c:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_GetHCLKFreq+0x54>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	4a07      	ldr	r2, [pc, #28]	@ (8005548 <HAL_RCC_GetHCLKFreq+0x58>)
 800552c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800552e:	4a07      	ldr	r2, [pc, #28]	@ (800554c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005534:	4b04      	ldr	r3, [pc, #16]	@ (8005548 <HAL_RCC_GetHCLKFreq+0x58>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	58024400 	.word	0x58024400
 8005544:	0800de2c 	.word	0x0800de2c
 8005548:	24000004 	.word	0x24000004
 800554c:	24000000 	.word	0x24000000

08005550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005554:	f7ff ffcc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005558:	4602      	mov	r2, r0
 800555a:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	4904      	ldr	r1, [pc, #16]	@ (8005578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005566:	5ccb      	ldrb	r3, [r1, r3]
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005570:	4618      	mov	r0, r3
 8005572:	bd80      	pop	{r7, pc}
 8005574:	58024400 	.word	0x58024400
 8005578:	0800de2c 	.word	0x0800de2c

0800557c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800557c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005580:	b0c8      	sub	sp, #288	@ 0x120
 8005582:	af00      	add	r7, sp, #0
 8005584:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005588:	2300      	movs	r3, #0
 800558a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800558e:	2300      	movs	r3, #0
 8005590:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055a0:	2500      	movs	r5, #0
 80055a2:	ea54 0305 	orrs.w	r3, r4, r5
 80055a6:	d049      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055b2:	d02f      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055b8:	d828      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055be:	d01a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055c4:	d822      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ce:	d007      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055d0:	e01c      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d2:	4ba7      	ldr	r3, [pc, #668]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	4aa6      	ldr	r2, [pc, #664]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055de:	e01a      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e4:	3308      	adds	r3, #8
 80055e6:	2102      	movs	r1, #2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f002 fa6d 	bl	8007ac8 <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055f4:	e00f      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fa:	3328      	adds	r3, #40	@ 0x28
 80055fc:	2102      	movs	r1, #2
 80055fe:	4618      	mov	r0, r3
 8005600:	f002 fb14 	bl	8007c2c <RCCEx_PLL3_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005612:	e000      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005616:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800561e:	4b94      	ldr	r3, [pc, #592]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005622:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800562c:	4a90      	ldr	r2, [pc, #576]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800562e:	430b      	orrs	r3, r1
 8005630:	6513      	str	r3, [r2, #80]	@ 0x50
 8005632:	e003      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005638:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800563c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005648:	f04f 0900 	mov.w	r9, #0
 800564c:	ea58 0309 	orrs.w	r3, r8, r9
 8005650:	d047      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005658:	2b04      	cmp	r3, #4
 800565a:	d82a      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800565c:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005679 	.word	0x08005679
 8005668:	08005687 	.word	0x08005687
 800566c:	0800569d 	.word	0x0800569d
 8005670:	080056bb 	.word	0x080056bb
 8005674:	080056bb 	.word	0x080056bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005678:	4b7d      	ldr	r3, [pc, #500]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a7c      	ldr	r2, [pc, #496]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005684:	e01a      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005686:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800568a:	3308      	adds	r3, #8
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fa1a 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800569a:	e00f      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	3328      	adds	r3, #40	@ 0x28
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f002 fac1 	bl	8007c2c <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b0:	e004      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	f023 0107 	bic.w	r1, r3, #7
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d2:	4a67      	ldr	r2, [pc, #412]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80056e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80056ee:	f04f 0b00 	mov.w	fp, #0
 80056f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80056f6:	d054      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80056f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005702:	d036      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005704:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005708:	d82f      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800570a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570e:	d032      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005714:	d829      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005716:	2bc0      	cmp	r3, #192	@ 0xc0
 8005718:	d02f      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800571a:	2bc0      	cmp	r3, #192	@ 0xc0
 800571c:	d825      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800571e:	2b80      	cmp	r3, #128	@ 0x80
 8005720:	d018      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005722:	2b80      	cmp	r3, #128	@ 0x80
 8005724:	d821      	bhi.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800572a:	2b40      	cmp	r3, #64	@ 0x40
 800572c:	d007      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800572e:	e01c      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4b4f      	ldr	r3, [pc, #316]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	4a4e      	ldr	r2, [pc, #312]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800573c:	e01e      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005742:	3308      	adds	r3, #8
 8005744:	2100      	movs	r1, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f002 f9be 	bl	8007ac8 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005752:	e013      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005758:	3328      	adds	r3, #40	@ 0x28
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f002 fa65 	bl	8007c2c <RCCEx_PLL3_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005768:	e008      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005770:	e004      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005772:	bf00      	nop
 8005774:	e002      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005784:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800578c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005792:	4a37      	ldr	r2, [pc, #220]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005794:	430b      	orrs	r3, r1
 8005796:	6513      	str	r3, [r2, #80]	@ 0x50
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800579e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80057a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80057ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80057b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d05c      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80057c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057cc:	d03b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057d2:	d834      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d8:	d037      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80057da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057de:	d82e      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057e4:	d033      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057ea:	d828      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d01a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d822      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005800:	d007      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005802:	e01c      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005810:	e01e      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005816:	3308      	adds	r3, #8
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f002 f954 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005826:	e013      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582c:	3328      	adds	r3, #40	@ 0x28
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f002 f9fb 	bl	8007c2c <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800583c:	e008      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005844:	e004      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800584e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10d      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005858:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800585a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005866:	4a02      	ldr	r2, [pc, #8]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005868:	430b      	orrs	r3, r1
 800586a:	6513      	str	r3, [r2, #80]	@ 0x50
 800586c:	e006      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005878:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800587c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005888:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800588c:	2300      	movs	r3, #0
 800588e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005892:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005896:	460b      	mov	r3, r1
 8005898:	4313      	orrs	r3, r2
 800589a:	d03a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800589c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a2:	2b30      	cmp	r3, #48	@ 0x30
 80058a4:	d01f      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80058a6:	2b30      	cmp	r3, #48	@ 0x30
 80058a8:	d819      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d00c      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d815      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d111      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ba:	4bae      	ldr	r3, [pc, #696]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4aad      	ldr	r2, [pc, #692]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058c6:	e011      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058cc:	3308      	adds	r3, #8
 80058ce:	2102      	movs	r1, #2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 f8f9 	bl	8007ac8 <RCCEx_PLL2_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058f4:	4b9f      	ldr	r3, [pc, #636]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005902:	4a9c      	ldr	r2, [pc, #624]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005904:	430b      	orrs	r3, r1
 8005906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800590e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800591e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d051      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800593c:	d035      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800593e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005942:	d82e      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005944:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005948:	d031      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800594a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800594e:	d828      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005954:	d01a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595a:	d822      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	d007      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005966:	e01c      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005968:	4b82      	ldr	r3, [pc, #520]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4a81      	ldr	r2, [pc, #516]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800596e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005974:	e01c      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597a:	3308      	adds	r3, #8
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f002 f8a2 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800598a:	e011      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800598c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005990:	3328      	adds	r3, #40	@ 0x28
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f002 f949 	bl	8007c2c <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059a0:	e006      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c6:	4a6b      	ldr	r2, [pc, #428]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80059e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d053      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a00:	d033      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a06:	d82c      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a0c:	d02f      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a12:	d826      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a18:	d02b      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a1e:	d820      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a24:	d012      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a2a:	d81a      	bhi.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d022      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d115      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 f842 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a4a:	e015      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a50:	3328      	adds	r3, #40	@ 0x28
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 f8e9 	bl	8007c2c <RCCEx_PLL3_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a60:	e00a      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a68:	e006      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a80:	4b3c      	ldr	r3, [pc, #240]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a8e:	4a39      	ldr	r2, [pc, #228]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d060      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ac6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005aca:	d039      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005acc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005ad0:	d832      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ad6:	d035      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005adc:	d82c      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae2:	d031      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae8:	d826      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005aee:	d02d      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005af4:	d820      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005afa:	d012      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b00:	d81a      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d024      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b0a:	d115      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b10:	3308      	adds	r3, #8
 8005b12:	2101      	movs	r1, #1
 8005b14:	4618      	mov	r0, r3
 8005b16:	f001 ffd7 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b20:	e017      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b26:	3328      	adds	r3, #40	@ 0x28
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 f87e 	bl	8007c2c <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b36:	e00c      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b40:	bf00      	nop
 8005b42:	e006      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b44:	bf00      	nop
 8005b46:	e004      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b48:	bf00      	nop
 8005b4a:	e002      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10e      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b6a:	4a02      	ldr	r2, [pc, #8]	@ (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d037      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005baa:	d00e      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb0:	d816      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d018      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bba:	d111      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4bc4      	ldr	r3, [pc, #784]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4ac3      	ldr	r2, [pc, #780]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bc8:	e00f      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 ff78 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bde:	e004      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005be6:	e000      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bf2:	4bb7      	ldr	r3, [pc, #732]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c00:	4ab3      	ldr	r2, [pc, #716]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c02:	430b      	orrs	r3, r1
 8005c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c06:	e003      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	d039      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d81c      	bhi.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c7d 	.word	0x08005c7d
 8005c44:	08005c51 	.word	0x08005c51
 8005c48:	08005c5f 	.word	0x08005c5f
 8005c4c:	08005c7d 	.word	0x08005c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4b9f      	ldr	r3, [pc, #636]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	4a9e      	ldr	r2, [pc, #632]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c5c:	e00f      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c62:	3308      	adds	r3, #8
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 ff2e 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c72:	e004      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c7a:	e000      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c86:	4b92      	ldr	r3, [pc, #584]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8a:	f023 0103 	bic.w	r1, r3, #3
 8005c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c94:	4a8e      	ldr	r2, [pc, #568]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c9a:	e003      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ca0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f000 8099 	beq.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cc6:	4b83      	ldr	r3, [pc, #524]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a82      	ldr	r2, [pc, #520]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fe83 	bl	80019dc <HAL_GetTick>
 8005cd6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cdc:	f7fb fe7e 	bl	80019dc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b64      	cmp	r3, #100	@ 0x64
 8005cea:	d903      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005cf2:	e005      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cf4:	4b77      	ldr	r3, [pc, #476]	@ (8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ed      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d173      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d08:	4b71      	ldr	r3, [pc, #452]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d14:	4053      	eors	r3, r2
 8005d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d1e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d2a:	4b69      	ldr	r3, [pc, #420]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2e:	4a68      	ldr	r2, [pc, #416]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d36:	4b66      	ldr	r3, [pc, #408]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	4a65      	ldr	r2, [pc, #404]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d42:	4a63      	ldr	r2, [pc, #396]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d56:	d118      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fb fe40 	bl	80019dc <HAL_GetTick>
 8005d5c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d60:	e00d      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d62:	f7fb fe3b 	bl	80019dc <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d903      	bls.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005d7c:	e005      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d7e:	4b54      	ldr	r3, [pc, #336]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0eb      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d129      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da2:	d10e      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005da4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005db4:	091a      	lsrs	r2, r3, #4
 8005db6:	4b48      	ldr	r3, [pc, #288]	@ (8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	4a45      	ldr	r2, [pc, #276]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6113      	str	r3, [r2, #16]
 8005dc0:	e005      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005dc2:	4b43      	ldr	r3, [pc, #268]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	4a42      	ldr	r2, [pc, #264]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005dcc:	6113      	str	r3, [r2, #16]
 8005dce:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dde:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005de6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005df4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f002 0301 	and.w	r3, r2, #1
 8005e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f000 8090 	beq.w	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e22:	2b28      	cmp	r3, #40	@ 0x28
 8005e24:	d870      	bhi.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005f11 	.word	0x08005f11
 8005e30:	08005f09 	.word	0x08005f09
 8005e34:	08005f09 	.word	0x08005f09
 8005e38:	08005f09 	.word	0x08005f09
 8005e3c:	08005f09 	.word	0x08005f09
 8005e40:	08005f09 	.word	0x08005f09
 8005e44:	08005f09 	.word	0x08005f09
 8005e48:	08005f09 	.word	0x08005f09
 8005e4c:	08005edd 	.word	0x08005edd
 8005e50:	08005f09 	.word	0x08005f09
 8005e54:	08005f09 	.word	0x08005f09
 8005e58:	08005f09 	.word	0x08005f09
 8005e5c:	08005f09 	.word	0x08005f09
 8005e60:	08005f09 	.word	0x08005f09
 8005e64:	08005f09 	.word	0x08005f09
 8005e68:	08005f09 	.word	0x08005f09
 8005e6c:	08005ef3 	.word	0x08005ef3
 8005e70:	08005f09 	.word	0x08005f09
 8005e74:	08005f09 	.word	0x08005f09
 8005e78:	08005f09 	.word	0x08005f09
 8005e7c:	08005f09 	.word	0x08005f09
 8005e80:	08005f09 	.word	0x08005f09
 8005e84:	08005f09 	.word	0x08005f09
 8005e88:	08005f09 	.word	0x08005f09
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005f09 	.word	0x08005f09
 8005e94:	08005f09 	.word	0x08005f09
 8005e98:	08005f09 	.word	0x08005f09
 8005e9c:	08005f09 	.word	0x08005f09
 8005ea0:	08005f09 	.word	0x08005f09
 8005ea4:	08005f09 	.word	0x08005f09
 8005ea8:	08005f09 	.word	0x08005f09
 8005eac:	08005f11 	.word	0x08005f11
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005f09 	.word	0x08005f09
 8005eb8:	08005f09 	.word	0x08005f09
 8005ebc:	08005f09 	.word	0x08005f09
 8005ec0:	08005f09 	.word	0x08005f09
 8005ec4:	08005f09 	.word	0x08005f09
 8005ec8:	08005f09 	.word	0x08005f09
 8005ecc:	08005f11 	.word	0x08005f11
 8005ed0:	58024400 	.word	0x58024400
 8005ed4:	58024800 	.word	0x58024800
 8005ed8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fdef 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ef0:	e00f      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef6:	3328      	adds	r3, #40	@ 0x28
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fe96 	bl	8007c2c <RCCEx_PLL3_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f06:	e004      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f1a:	4bc0      	ldr	r3, [pc, #768]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f2a:	4abc      	ldr	r2, [pc, #752]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f30:	e003      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f002 0302 	and.w	r3, r2, #2
 8005f46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d043      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d824      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f66:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005fb9 	.word	0x08005fb9
 8005f70:	08005f85 	.word	0x08005f85
 8005f74:	08005f9b 	.word	0x08005f9b
 8005f78:	08005fb9 	.word	0x08005fb9
 8005f7c:	08005fb9 	.word	0x08005fb9
 8005f80:	08005fb9 	.word	0x08005fb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fd9b 	bl	8007ac8 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f98:	e00f      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fe42 	bl	8007c2c <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fae:	e004      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005fb6:	e000      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fc2:	4b96      	ldr	r3, [pc, #600]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f023 0107 	bic.w	r1, r3, #7
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd2:	4a92      	ldr	r2, [pc, #584]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f002 0304 	and.w	r3, r2, #4
 8005fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ff8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d043      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800600a:	2b05      	cmp	r3, #5
 800600c:	d824      	bhi.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006061 	.word	0x08006061
 8006018:	0800602d 	.word	0x0800602d
 800601c:	08006043 	.word	0x08006043
 8006020:	08006061 	.word	0x08006061
 8006024:	08006061 	.word	0x08006061
 8006028:	08006061 	.word	0x08006061
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006030:	3308      	adds	r3, #8
 8006032:	2101      	movs	r1, #1
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fd47 	bl	8007ac8 <RCCEx_PLL2_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006040:	e00f      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006046:	3328      	adds	r3, #40	@ 0x28
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fdee 	bl	8007c2c <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006056:	e004      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800605e:	e000      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006062:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800606a:	4b6c      	ldr	r3, [pc, #432]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	f023 0107 	bic.w	r1, r3, #7
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800607a:	4a68      	ldr	r2, [pc, #416]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800607c:	430b      	orrs	r3, r1
 800607e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006080:	e003      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006086:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800608a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f002 0320 	and.w	r3, r2, #32
 8006096:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800609a:	2300      	movs	r3, #0
 800609c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060a4:	460b      	mov	r3, r1
 80060a6:	4313      	orrs	r3, r2
 80060a8:	d055      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060b6:	d033      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80060b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060bc:	d82c      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c2:	d02f      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80060c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c8:	d826      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060ce:	d02b      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80060d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060d4:	d820      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060da:	d012      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e0:	d81a      	bhi.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d022      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80060e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ea:	d115      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060f0:	3308      	adds	r3, #8
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fce7 	bl	8007ac8 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006100:	e015      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006106:	3328      	adds	r3, #40	@ 0x28
 8006108:	2102      	movs	r1, #2
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fd8e 	bl	8007c2c <RCCEx_PLL3_Config>
 8006110:	4603      	mov	r3, r0
 8006112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006116:	e00a      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800611e:	e006      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006120:	bf00      	nop
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006124:	bf00      	nop
 8006126:	e002      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006128:	bf00      	nop
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006136:	4b39      	ldr	r3, [pc, #228]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006146:	4a35      	ldr	r2, [pc, #212]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006148:	430b      	orrs	r3, r1
 800614a:	6553      	str	r3, [r2, #84]	@ 0x54
 800614c:	e003      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006152:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006166:	2300      	movs	r3, #0
 8006168:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800616c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	d058      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800617a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800617e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006182:	d033      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006184:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006188:	d82c      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800618e:	d02f      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006194:	d826      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800619a:	d02b      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800619c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061a0:	d820      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061a6:	d012      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ac:	d81a      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d022      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d115      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061bc:	3308      	adds	r3, #8
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fc81 	bl	8007ac8 <RCCEx_PLL2_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061cc:	e015      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061d2:	3328      	adds	r3, #40	@ 0x28
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fd28 	bl	8007c2c <RCCEx_PLL3_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061e2:	e00a      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80061ea:	e006      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061ec:	bf00      	nop
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061f0:	bf00      	nop
 80061f2:	e002      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10e      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006202:	4b06      	ldr	r3, [pc, #24]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800620e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006212:	4a02      	ldr	r2, [pc, #8]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6593      	str	r3, [r2, #88]	@ 0x58
 8006218:	e006      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800621a:	bf00      	nop
 800621c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006220:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006224:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006238:	2300      	movs	r3, #0
 800623a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800623e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006242:	460b      	mov	r3, r1
 8006244:	4313      	orrs	r3, r2
 8006246:	d055      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800624c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006250:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006254:	d033      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006256:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800625a:	d82c      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800625c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006260:	d02f      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006266:	d826      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006268:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800626c:	d02b      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800626e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006272:	d820      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006278:	d012      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800627e:	d81a      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d022      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006288:	d115      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800628a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800628e:	3308      	adds	r3, #8
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fc18 	bl	8007ac8 <RCCEx_PLL2_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800629e:	e015      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a4:	3328      	adds	r3, #40	@ 0x28
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fcbf 	bl	8007c2c <RCCEx_PLL3_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062b4:	e00a      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80062bc:	e006      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062be:	bf00      	nop
 80062c0:	e004      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10b      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062d4:	4ba1      	ldr	r3, [pc, #644]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80062dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062e4:	4a9d      	ldr	r2, [pc, #628]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062e6:	430b      	orrs	r3, r1
 80062e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ea:	e003      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80062f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f002 0308 	and.w	r3, r2, #8
 8006300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800630a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800630e:	460b      	mov	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	d01e      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800631c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006320:	d10c      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006326:	3328      	adds	r3, #40	@ 0x28
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fc7e 	bl	8007c2c <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800633c:	4b87      	ldr	r3, [pc, #540]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800633e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006340:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800634c:	4a83      	ldr	r2, [pc, #524]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f002 0310 	and.w	r3, r2, #16
 800635e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006362:	2300      	movs	r3, #0
 8006364:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006368:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800636c:	460b      	mov	r3, r1
 800636e:	4313      	orrs	r3, r2
 8006370:	d01e      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800637a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800637e:	d10c      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006384:	3328      	adds	r3, #40	@ 0x28
 8006386:	2102      	movs	r1, #2
 8006388:	4618      	mov	r0, r3
 800638a:	f001 fc4f 	bl	8007c2c <RCCEx_PLL3_Config>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800639a:	4b70      	ldr	r3, [pc, #448]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063aa:	4a6c      	ldr	r2, [pc, #432]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d03e      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063dc:	d022      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80063de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063e2:	d81b      	bhi.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ec:	d00b      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80063ee:	e015      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80063f4:	3308      	adds	r3, #8
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fb65 	bl	8007ac8 <RCCEx_PLL2_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006404:	e00f      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800640a:	3328      	adds	r3, #40	@ 0x28
 800640c:	2102      	movs	r1, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fc0c 	bl	8007c2c <RCCEx_PLL3_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800641a:	e004      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006426:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800642e:	4b4b      	ldr	r3, [pc, #300]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006432:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800643a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800643e:	4a47      	ldr	r2, [pc, #284]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6593      	str	r3, [r2, #88]	@ 0x58
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006446:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800644a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800644e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800645a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800645c:	2300      	movs	r3, #0
 800645e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006460:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006464:	460b      	mov	r3, r1
 8006466:	4313      	orrs	r3, r2
 8006468:	d03b      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800646e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006476:	d01f      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006478:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800647c:	d818      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006482:	d003      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006488:	d007      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800648a:	e011      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800648c:	4b33      	ldr	r3, [pc, #204]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	4a32      	ldr	r2, [pc, #200]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006498:	e00f      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800649e:	3328      	adds	r3, #40	@ 0x28
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fbc2 	bl	8007c2c <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	4a22      	ldr	r2, [pc, #136]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80064de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80064ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80064f0:	2300      	movs	r3, #0
 80064f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80064f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064f8:	460b      	mov	r3, r1
 80064fa:	4313      	orrs	r3, r2
 80064fc:	d034      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650c:	d007      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800650e:	e011      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006510:	4b12      	ldr	r3, [pc, #72]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	4a11      	ldr	r2, [pc, #68]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800651a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800651c:	e00e      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800651e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006522:	3308      	adds	r3, #8
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f001 face 	bl	8007ac8 <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006532:	e003      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800653a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006548:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800654c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006552:	4a02      	ldr	r2, [pc, #8]	@ (800655c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006554:	430b      	orrs	r3, r1
 8006556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006558:	e006      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006564:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006576:	2300      	movs	r3, #0
 8006578:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800657a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800657e:	460b      	mov	r3, r1
 8006580:	4313      	orrs	r3, r2
 8006582:	d00c      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006588:	3328      	adds	r3, #40	@ 0x28
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fb4d 	bl	8007c2c <RCCEx_PLL3_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800659e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80065ac:	2300      	movs	r3, #0
 80065ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80065b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d038      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c6:	d018      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80065c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065cc:	d811      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d2:	d014      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d8:	d80b      	bhi.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d011      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80065de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e2:	d106      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e4:	4bc3      	ldr	r3, [pc, #780]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4ac2      	ldr	r2, [pc, #776]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065f0:	e008      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065f8:	e004      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006604:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800660c:	4bb9      	ldr	r3, [pc, #740]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800660e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006610:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661c:	4ab5      	ldr	r2, [pc, #724]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800661e:	430b      	orrs	r3, r1
 8006620:	6553      	str	r3, [r2, #84]	@ 0x54
 8006622:	e003      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006628:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006638:	65bb      	str	r3, [r7, #88]	@ 0x58
 800663a:	2300      	movs	r3, #0
 800663c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800663e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d009      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006648:	4baa      	ldr	r3, [pc, #680]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006656:	4aa7      	ldr	r2, [pc, #668]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006668:	653b      	str	r3, [r7, #80]	@ 0x50
 800666a:	2300      	movs	r3, #0
 800666c:	657b      	str	r3, [r7, #84]	@ 0x54
 800666e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006678:	4b9e      	ldr	r3, [pc, #632]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	4a9b      	ldr	r2, [pc, #620]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800669a:	2300      	movs	r3, #0
 800669c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80066a8:	4b92      	ldr	r3, [pc, #584]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ac:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b6:	4a8f      	ldr	r2, [pc, #572]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ca:	2300      	movs	r3, #0
 80066cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066d8:	4b86      	ldr	r3, [pc, #536]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	4a85      	ldr	r2, [pc, #532]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066e2:	6113      	str	r3, [r2, #16]
 80066e4:	4b83      	ldr	r3, [pc, #524]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066e6:	6919      	ldr	r1, [r3, #16]
 80066e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066f0:	4a80      	ldr	r2, [pc, #512]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006704:	2300      	movs	r3, #0
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006708:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006712:	4b78      	ldr	r3, [pc, #480]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006716:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800671a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800671e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006720:	4a74      	ldr	r2, [pc, #464]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006722:	430b      	orrs	r3, r1
 8006724:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006732:	633b      	str	r3, [r7, #48]	@ 0x30
 8006734:	2300      	movs	r3, #0
 8006736:	637b      	str	r3, [r7, #52]	@ 0x34
 8006738:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006742:	4b6c      	ldr	r3, [pc, #432]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800674e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006752:	4a68      	ldr	r2, [pc, #416]	@ (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	2100      	movs	r1, #0
 8006762:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d011      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006778:	3308      	adds	r3, #8
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f9a3 	bl	8007ac8 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006788:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	2100      	movs	r1, #0
 80067a2:	6239      	str	r1, [r7, #32]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d011      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b8:	3308      	adds	r3, #8
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f983 	bl	8007ac8 <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80067c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	2100      	movs	r1, #0
 80067e2:	61b9      	str	r1, [r7, #24]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	d011      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f8:	3308      	adds	r3, #8
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f963 	bl	8007ac8 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006808:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006814:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	2100      	movs	r1, #0
 8006822:	6139      	str	r1, [r7, #16]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d011      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006838:	3328      	adds	r3, #40	@ 0x28
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f9f5 	bl	8007c2c <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8006848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006854:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	2100      	movs	r1, #0
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800686e:	460b      	mov	r3, r1
 8006870:	4313      	orrs	r3, r2
 8006872:	d011      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006878:	3328      	adds	r3, #40	@ 0x28
 800687a:	2101      	movs	r1, #1
 800687c:	4618      	mov	r0, r3
 800687e:	f001 f9d5 	bl	8007c2c <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006894:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	2100      	movs	r1, #0
 80068a2:	6039      	str	r1, [r7, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068ae:	460b      	mov	r3, r1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d011      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b8:	3328      	adds	r3, #40	@ 0x28
 80068ba:	2102      	movs	r1, #2
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f9b5 	bl	8007c2c <RCCEx_PLL3_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80068c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80068d8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	e000      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80068ec:	46bd      	mov	sp, r7
 80068ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400

080068f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b090      	sub	sp, #64	@ 0x40
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006906:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800690a:	430b      	orrs	r3, r1
 800690c:	f040 8094 	bne.w	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006910:	4b97      	ldr	r3, [pc, #604]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	2b04      	cmp	r3, #4
 800691e:	f200 8087 	bhi.w	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006922:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	0800693d 	.word	0x0800693d
 800692c:	08006965 	.word	0x08006965
 8006930:	0800698d 	.word	0x0800698d
 8006934:	08006a29 	.word	0x08006a29
 8006938:	080069b5 	.word	0x080069b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800693c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006944:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006948:	d108      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800694a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 ff68 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006958:	f000 bc97 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006960:	f000 bc93 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006964:	4b82      	ldr	r3, [pc, #520]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800696c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006970:	d108      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006972:	f107 0318 	add.w	r3, r7, #24
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fcac 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006980:	f000 bc83 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006988:	f000 bc7f 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800698c:	4b78      	ldr	r3, [pc, #480]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006998:	d108      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699a:	f107 030c 	add.w	r3, r7, #12
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fdec 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069a8:	f000 bc6f 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b0:	f000 bc6b 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069be:	4b6c      	ldr	r3, [pc, #432]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d0:	4b67      	ldr	r3, [pc, #412]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	08db      	lsrs	r3, r3, #3
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	4a66      	ldr	r2, [pc, #408]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e2:	e01f      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069e4:	4b62      	ldr	r3, [pc, #392]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f0:	d106      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80069f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069f8:	d102      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80069fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069fe:	e011      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a00:	4b5b      	ldr	r3, [pc, #364]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a0c:	d106      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a14:	d102      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a16:	4b59      	ldr	r3, [pc, #356]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a1a:	e003      	b.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a20:	f000 bc33 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006a24:	f000 bc31 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a28:	4b55      	ldr	r3, [pc, #340]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2c:	f000 bc2d 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a34:	f000 bc29 	b.w	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a3c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006a40:	430b      	orrs	r3, r1
 8006a42:	f040 809f 	bne.w	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006a46:	4b4a      	ldr	r3, [pc, #296]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006a4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a56:	d04d      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a5e:	f200 8084 	bhi.w	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a66:	d07d      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a6c:	d87d      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	2b80      	cmp	r3, #128	@ 0x80
 8006a72:	d02d      	beq.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	2b80      	cmp	r3, #128	@ 0x80
 8006a78:	d877      	bhi.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d012      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006a86:	e070      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a88:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fec2 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa4:	e3f1      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aaa:	e3ee      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aac:	4b30      	ldr	r3, [pc, #192]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ab8:	d107      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aba:	f107 0318 	add.w	r3, r7, #24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc08 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac8:	e3df      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ace:	e3dc      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ad0:	4b27      	ldr	r3, [pc, #156]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006adc:	d107      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ade:	f107 030c 	add.w	r3, r7, #12
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fd4a 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aec:	e3cd      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af2:	e3ca      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af4:	4b1e      	ldr	r3, [pc, #120]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006afe:	4b1c      	ldr	r3, [pc, #112]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b10:	4b17      	ldr	r3, [pc, #92]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	4a16      	ldr	r2, [pc, #88]	@ (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b22:	e01e      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b24:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b30:	d106      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b38:	d102      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3e:	e010      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b54:	d102      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b56:	4b09      	ldr	r3, [pc, #36]	@ (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5a:	e002      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b60:	e393      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b62:	e392      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b64:	4b06      	ldr	r3, [pc, #24]	@ (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b68:	e38f      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6e:	e38c      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b70:	58024400 	.word	0x58024400
 8006b74:	03d09000 	.word	0x03d09000
 8006b78:	003d0900 	.word	0x003d0900
 8006b7c:	016e3600 	.word	0x016e3600
 8006b80:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b88:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	f040 809c 	bne.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006b92:	4b9e      	ldr	r3, [pc, #632]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b96:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006b9a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba2:	d054      	beq.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006baa:	f200 808b 	bhi.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bb4:	f000 8083 	beq.w	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006bbe:	f200 8081 	bhi.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bc8:	d02f      	beq.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd0:	d878      	bhi.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bde:	d012      	beq.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006be0:	e070      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006be2:	4b8a      	ldr	r3, [pc, #552]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bee:	d107      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fe15 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfe:	e344      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c04:	e341      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c06:	4b81      	ldr	r3, [pc, #516]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c12:	d107      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c14:	f107 0318 	add.w	r3, r7, #24
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fb5b 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c22:	e332      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c28:	e32f      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c2a:	4b78      	ldr	r3, [pc, #480]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c36:	d107      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fc9d 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c46:	e320      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e31d      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c58:	4b6c      	ldr	r3, [pc, #432]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d10c      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c6a:	4b68      	ldr	r3, [pc, #416]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	4a66      	ldr	r2, [pc, #408]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c7c:	e01e      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c7e:	4b63      	ldr	r3, [pc, #396]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c92:	d102      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c94:	4b5f      	ldr	r3, [pc, #380]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c98:	e010      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cb0:	4b59      	ldr	r3, [pc, #356]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb4:	e002      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8006cba:	e2e6      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006cbc:	e2e5      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cbe:	4b57      	ldr	r3, [pc, #348]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc2:	e2e2      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc8:	e2df      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	f040 80a7 	bne.w	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006ce0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ce8:	d055      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cf0:	f200 8096 	bhi.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cfa:	f000 8084 	beq.w	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d04:	f200 808c 	bhi.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d0e:	d030      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d16:	f200 8083 	bhi.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d26:	d012      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006d28:	e07a      	b.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d2a:	4b38      	ldr	r3, [pc, #224]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d36:	d107      	bne.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd71 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d46:	e2a0      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d4c:	e29d      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d5a:	d107      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5c:	f107 0318 	add.w	r3, r7, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fab7 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d6a:	e28e      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d70:	e28b      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d72:	4b26      	ldr	r3, [pc, #152]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d80:	f107 030c 	add.w	r3, r7, #12
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fbf9 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	e27c      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d94:	e279      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d96:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006da0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d10c      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006db2:	4b16      	ldr	r3, [pc, #88]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	08db      	lsrs	r3, r3, #3
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dc4:	e01e      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dc6:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd2:	d106      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dda:	d102      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de0:	e010      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006de2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dee:	d106      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006df6:	d102      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006df8:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e02:	e242      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e04:	e241      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e06:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0a:	e23e      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e0c:	58024400 	.word	0x58024400
 8006e10:	03d09000 	.word	0x03d09000
 8006e14:	003d0900 	.word	0x003d0900
 8006e18:	016e3600 	.word	0x016e3600
 8006e1c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e24:	e231      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	f040 8085 	bne.w	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006e34:	4b9c      	ldr	r3, [pc, #624]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e44:	d06b      	beq.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e4c:	d874      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e54:	d056      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e5c:	d86c      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e64:	d03b      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e6c:	d864      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e74:	d021      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e7c:	d85c      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e8a:	d004      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006e8c:	e054      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e8e:	f7fe fb5f 	bl	8005550 <HAL_RCC_GetPCLK1Freq>
 8006e92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e94:	e1f9      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e96:	4b84      	ldr	r3, [pc, #528]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fa13 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb2:	e1ea      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb8:	e1e7      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eba:	4b7b      	ldr	r3, [pc, #492]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb55 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed6:	e1d8      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006edc:	e1d5      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ede:	4b72      	ldr	r3, [pc, #456]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d109      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eea:	4b6f      	ldr	r3, [pc, #444]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	08db      	lsrs	r3, r3, #3
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006efc:	e1c5      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f02:	e1c2      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f04:	4b68      	ldr	r3, [pc, #416]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f10:	d102      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006f12:	4b67      	ldr	r3, [pc, #412]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f16:	e1b8      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1c:	e1b5      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f1e:	4b62      	ldr	r3, [pc, #392]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f2a:	d102      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006f2c:	4b61      	ldr	r3, [pc, #388]	@ (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f30:	e1ab      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f36:	e1a8      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e1a5      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f42:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006f46:	430b      	orrs	r3, r1
 8006f48:	d173      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f4a:	4b57      	ldr	r3, [pc, #348]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f5a:	d02f      	beq.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f62:	d863      	bhi.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f70:	d012      	beq.n	8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006f72:	e05b      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f74:	4b4c      	ldr	r3, [pc, #304]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f80:	d107      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f82:	f107 0318 	add.w	r3, r7, #24
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 f9a4 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f90:	e17b      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f96:	e178      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f98:	4b43      	ldr	r3, [pc, #268]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fa4:	d107      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fa6:	f107 030c 	add.w	r3, r7, #12
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fae6 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb4:	e169      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fba:	e166      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fc6:	4b38      	ldr	r3, [pc, #224]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd8:	4b33      	ldr	r3, [pc, #204]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	08db      	lsrs	r3, r3, #3
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	4a32      	ldr	r2, [pc, #200]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fea:	e01e      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fec:	4b2e      	ldr	r3, [pc, #184]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff8:	d106      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007000:	d102      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007002:	4b2b      	ldr	r3, [pc, #172]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007006:	e010      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007008:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007014:	d106      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800701e:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007022:	e002      	b.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007028:	e12f      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800702a:	e12e      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e12b      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007036:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800703a:	430b      	orrs	r3, r1
 800703c:	d13c      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007046:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007054:	d012      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007056:	e023      	b.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007058:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007060:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007064:	d107      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fbda 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007074:	e109      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707a:	e106      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007084:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007088:	d107      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800708a:	f107 0318 	add.w	r3, r7, #24
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f920 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007098:	e0f7      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800709e:	e0f4      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a4:	e0f1      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	03d09000 	.word	0x03d09000
 80070b0:	003d0900 	.word	0x003d0900
 80070b4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80070b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80070c0:	430b      	orrs	r3, r1
 80070c2:	f040 8091 	bne.w	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80070c6:	4b73      	ldr	r3, [pc, #460]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80070d6:	f000 8081 	beq.w	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80070e0:	d87f      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070e8:	d06b      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070f0:	d877      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d056      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007100:	d86f      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007108:	d03b      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007110:	d867      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007118:	d021      	beq.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007120:	d85f      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d004      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800712e:	d004      	beq.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007130:	e057      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007132:	f000 f8b9 	bl	80072a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007136:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007138:	e0a7      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713a:	4b56      	ldr	r3, [pc, #344]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007146:	d107      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007148:	f107 0318 	add.w	r3, r7, #24
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f8c1 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007156:	e098      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800715c:	e095      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800715e:	4b4d      	ldr	r3, [pc, #308]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716a:	d107      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800716c:	f107 030c 	add.w	r3, r7, #12
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fa03 	bl	800757c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800717a:	e086      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007180:	e083      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007182:	4b44      	ldr	r3, [pc, #272]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b04      	cmp	r3, #4
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800718e:	4b41      	ldr	r3, [pc, #260]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	4a3f      	ldr	r2, [pc, #252]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a0:	e073      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071a6:	e070      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b4:	d102      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80071b6:	4b39      	ldr	r3, [pc, #228]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80071b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ba:	e066      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c0:	e063      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071c2:	4b34      	ldr	r3, [pc, #208]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071ce:	d102      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80071d0:	4b33      	ldr	r3, [pc, #204]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80071d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d4:	e059      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071da:	e056      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071dc:	4b31      	ldr	r3, [pc, #196]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e0:	e053      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071e6:	e050      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80071e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80071f0:	430b      	orrs	r3, r1
 80071f2:	d148      	bne.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80071f4:	4b27      	ldr	r3, [pc, #156]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80071f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007204:	d02a      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800720c:	d838      	bhi.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800720e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800721a:	d00d      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800721c:	e030      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800721e:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722a:	d102      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800722c:	4b1c      	ldr	r3, [pc, #112]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007230:	e02b      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007236:	e028      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007238:	4b16      	ldr	r3, [pc, #88]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007244:	d107      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f000 faea 	bl	8007824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007254:	e019      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725a:	e016      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800725c:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007268:	d107      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726a:	f107 0318 	add.w	r3, r7, #24
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f830 	bl	80072d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007278:	e007      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800727e:	e004      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007284:	e001      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800728c:	4618      	mov	r0, r3
 800728e:	3740      	adds	r7, #64	@ 0x40
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	58024400 	.word	0x58024400
 8007298:	03d09000 	.word	0x03d09000
 800729c:	003d0900 	.word	0x003d0900
 80072a0:	016e3600 	.word	0x016e3600
 80072a4:	00bb8000 	.word	0x00bb8000

080072a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80072ac:	f7fe f920 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	091b      	lsrs	r3, r3, #4
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	4904      	ldr	r1, [pc, #16]	@ (80072d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072be:	5ccb      	ldrb	r3, [r1, r3]
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	58024400 	.word	0x58024400
 80072d0:	0800de2c 	.word	0x0800de2c

080072d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b089      	sub	sp, #36	@ 0x24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072dc:	4ba1      	ldr	r3, [pc, #644]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80072e6:	4b9f      	ldr	r3, [pc, #636]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	0b1b      	lsrs	r3, r3, #12
 80072ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80072fe:	4b99      	ldr	r3, [pc, #612]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007302:	08db      	lsrs	r3, r3, #3
 8007304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	fb02 f303 	mul.w	r3, r2, r3
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8111 	beq.w	8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b02      	cmp	r3, #2
 8007326:	f000 8083 	beq.w	8007430 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b02      	cmp	r3, #2
 800732e:	f200 80a1 	bhi.w	8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d056      	beq.n	80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800733e:	e099      	b.n	8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007340:	4b88      	ldr	r3, [pc, #544]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d02d      	beq.n	80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800734c:	4b85      	ldr	r3, [pc, #532]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	08db      	lsrs	r3, r3, #3
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	4a84      	ldr	r2, [pc, #528]	@ (8007568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
 800735c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007376:	4b7b      	ldr	r3, [pc, #492]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007386:	ed97 6a03 	vldr	s12, [r7, #12]
 800738a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800739a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073a6:	e087      	b.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c2:	ee07 3a90 	vmov	s15, r3
 80073c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ea:	e065      	b.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b59      	ldr	r3, [pc, #356]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742e:	e043      	b.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b48      	ldr	r3, [pc, #288]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007472:	e021      	b.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b37      	ldr	r3, [pc, #220]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800756c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80074b8:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074bc:	0a5b      	lsrs	r3, r3, #9
 80074be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074de:	ee17 2a90 	vmov	r2, s15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80074e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007500:	edd7 6a07 	vldr	s13, [r7, #28]
 8007504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800750c:	ee17 2a90 	vmov	r2, s15
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007518:	0e1b      	lsrs	r3, r3, #24
 800751a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800752a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800753a:	ee17 2a90 	vmov	r2, s15
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007542:	e008      	b.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	609a      	str	r2, [r3, #8]
}
 8007556:	bf00      	nop
 8007558:	3724      	adds	r7, #36	@ 0x24
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	58024400 	.word	0x58024400
 8007568:	03d09000 	.word	0x03d09000
 800756c:	46000000 	.word	0x46000000
 8007570:	4c742400 	.word	0x4c742400
 8007574:	4a742400 	.word	0x4a742400
 8007578:	4bb71b00 	.word	0x4bb71b00

0800757c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800757c:	b480      	push	{r7}
 800757e:	b089      	sub	sp, #36	@ 0x24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007584:	4ba1      	ldr	r3, [pc, #644]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	f003 0303 	and.w	r3, r3, #3
 800758c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800758e:	4b9f      	ldr	r3, [pc, #636]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	0d1b      	lsrs	r3, r3, #20
 8007594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007598:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800759a:	4b9c      	ldr	r3, [pc, #624]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80075a6:	4b99      	ldr	r3, [pc, #612]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	fb02 f303 	mul.w	r3, r2, r3
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8111 	beq.w	80077ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f000 8083 	beq.w	80076d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f200 80a1 	bhi.w	800771c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d056      	beq.n	8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80075e6:	e099      	b.n	800771c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e8:	4b88      	ldr	r3, [pc, #544]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02d      	beq.n	8007650 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075f4:	4b85      	ldr	r3, [pc, #532]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	08db      	lsrs	r3, r3, #3
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	4a84      	ldr	r2, [pc, #528]	@ (8007810 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
 8007604:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b7b      	ldr	r3, [pc, #492]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007632:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800764e:	e087      	b.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b6a      	ldr	r3, [pc, #424]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007692:	e065      	b.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800781c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b59      	ldr	r3, [pc, #356]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	e043      	b.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	ee07 3a90 	vmov	s15, r3
 80076de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80076e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ea:	4b48      	ldr	r3, [pc, #288]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800770e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771a:	e021      	b.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800781c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b37      	ldr	r3, [pc, #220]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800775e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007760:	4b2a      	ldr	r3, [pc, #168]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	0a5b      	lsrs	r3, r3, #9
 8007766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800777a:	edd7 6a07 	vldr	s13, [r7, #28]
 800777e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007786:	ee17 2a90 	vmov	r2, s15
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800778e:	4b1f      	ldr	r3, [pc, #124]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b4:	ee17 2a90 	vmov	r2, s15
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80077bc:	4b13      	ldr	r3, [pc, #76]	@ (800780c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	0e1b      	lsrs	r3, r3, #24
 80077c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077e2:	ee17 2a90 	vmov	r2, s15
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077ea:	e008      	b.n	80077fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
}
 80077fe:	bf00      	nop
 8007800:	3724      	adds	r7, #36	@ 0x24
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	58024400 	.word	0x58024400
 8007810:	03d09000 	.word	0x03d09000
 8007814:	46000000 	.word	0x46000000
 8007818:	4c742400 	.word	0x4c742400
 800781c:	4a742400 	.word	0x4a742400
 8007820:	4bb71b00 	.word	0x4bb71b00

08007824 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007824:	b480      	push	{r7}
 8007826:	b089      	sub	sp, #36	@ 0x24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800782c:	4ba0      	ldr	r3, [pc, #640]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007836:	4b9e      	ldr	r3, [pc, #632]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007840:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007842:	4b9b      	ldr	r3, [pc, #620]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800784c:	4b98      	ldr	r3, [pc, #608]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800784e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007850:	08db      	lsrs	r3, r3, #3
 8007852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	fb02 f303 	mul.w	r3, r2, r3
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8111 	beq.w	8007a92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2b02      	cmp	r3, #2
 8007874:	f000 8083 	beq.w	800797e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b02      	cmp	r3, #2
 800787c:	f200 80a1 	bhi.w	80079c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d056      	beq.n	800793a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800788c:	e099      	b.n	80079c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800788e:	4b88      	ldr	r3, [pc, #544]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d02d      	beq.n	80078f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800789a:	4b85      	ldr	r3, [pc, #532]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	08db      	lsrs	r3, r3, #3
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	4a83      	ldr	r2, [pc, #524]	@ (8007ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078f4:	e087      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	ee07 3a90 	vmov	s15, r3
 80078fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007900:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007908:	4b69      	ldr	r3, [pc, #420]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800790a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007918:	ed97 6a03 	vldr	s12, [r7, #12]
 800791c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800792c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007938:	e065      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007944:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794c:	4b58      	ldr	r3, [pc, #352]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800794e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007960:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797c:	e043      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007988:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800798c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007990:	4b47      	ldr	r3, [pc, #284]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079c0:	e021      	b.n	8007a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80079d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d4:	4b36      	ldr	r3, [pc, #216]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007a06:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0a:	0a5b      	lsrs	r3, r3, #9
 8007a0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2c:	ee17 2a90 	vmov	r2, s15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007a34:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a5a:	ee17 2a90 	vmov	r2, s15
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007a62:	4b13      	ldr	r3, [pc, #76]	@ (8007ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	0e1b      	lsrs	r3, r3, #24
 8007a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6c:	ee07 3a90 	vmov	s15, r3
 8007a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a88:	ee17 2a90 	vmov	r2, s15
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a90:	e008      	b.n	8007aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	609a      	str	r2, [r3, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	3724      	adds	r7, #36	@ 0x24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	58024400 	.word	0x58024400
 8007ab4:	03d09000 	.word	0x03d09000
 8007ab8:	46000000 	.word	0x46000000
 8007abc:	4c742400 	.word	0x4c742400
 8007ac0:	4a742400 	.word	0x4a742400
 8007ac4:	4bb71b00 	.word	0x4bb71b00

08007ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad6:	4b53      	ldr	r3, [pc, #332]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d101      	bne.n	8007ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e099      	b.n	8007c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a4e      	ldr	r2, [pc, #312]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007aec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af2:	f7f9 ff73 	bl	80019dc <HAL_GetTick>
 8007af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007afa:	f7f9 ff6f 	bl	80019dc <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e086      	b.n	8007c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b0c:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1f0      	bne.n	8007afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b18:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	031b      	lsls	r3, r3, #12
 8007b26:	493f      	ldr	r1, [pc, #252]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	025b      	lsls	r3, r3, #9
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b5c:	4931      	ldr	r1, [pc, #196]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b62:	4b30      	ldr	r3, [pc, #192]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	492d      	ldr	r1, [pc, #180]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b74:	4b2b      	ldr	r3, [pc, #172]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	f023 0220 	bic.w	r2, r3, #32
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	4928      	ldr	r1, [pc, #160]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	4a26      	ldr	r2, [pc, #152]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b8c:	f023 0310 	bic.w	r3, r3, #16
 8007b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b92:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b96:	4b24      	ldr	r3, [pc, #144]	@ (8007c28 <RCCEx_PLL2_Config+0x160>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	69d2      	ldr	r2, [r2, #28]
 8007b9e:	00d2      	lsls	r2, r2, #3
 8007ba0:	4920      	ldr	r1, [pc, #128]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007baa:	4a1e      	ldr	r2, [pc, #120]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bac:	f043 0310 	orr.w	r3, r3, #16
 8007bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbc:	4a19      	ldr	r2, [pc, #100]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bc4:	e00f      	b.n	8007be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d106      	bne.n	8007bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bcc:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	4a14      	ldr	r2, [pc, #80]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bd8:	e005      	b.n	8007be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bda:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	4a11      	ldr	r2, [pc, #68]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007be6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a0e      	ldr	r2, [pc, #56]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007bec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bf2:	f7f9 fef3 	bl	80019dc <HAL_GetTick>
 8007bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bf8:	e008      	b.n	8007c0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bfa:	f7f9 feef 	bl	80019dc <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e006      	b.n	8007c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c0c:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <RCCEx_PLL2_Config+0x15c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0f0      	beq.n	8007bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	ffff0007 	.word	0xffff0007

08007c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c3a:	4b53      	ldr	r3, [pc, #332]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d101      	bne.n	8007c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e099      	b.n	8007d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c56:	f7f9 fec1 	bl	80019dc <HAL_GetTick>
 8007c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c5c:	e008      	b.n	8007c70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c5e:	f7f9 febd 	bl	80019dc <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e086      	b.n	8007d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c70:	4b45      	ldr	r3, [pc, #276]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f0      	bne.n	8007c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c7c:	4b42      	ldr	r3, [pc, #264]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	051b      	lsls	r3, r3, #20
 8007c8a:	493f      	ldr	r1, [pc, #252]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	025b      	lsls	r3, r3, #9
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	061b      	lsls	r3, r3, #24
 8007cbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cc0:	4931      	ldr	r1, [pc, #196]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cc6:	4b30      	ldr	r3, [pc, #192]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	492d      	ldr	r1, [pc, #180]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	4928      	ldr	r1, [pc, #160]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cea:	4b27      	ldr	r3, [pc, #156]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	4a26      	ldr	r2, [pc, #152]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cf6:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cfa:	4b24      	ldr	r3, [pc, #144]	@ (8007d8c <RCCEx_PLL3_Config+0x160>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	69d2      	ldr	r2, [r2, #28]
 8007d02:	00d2      	lsls	r2, r2, #3
 8007d04:	4920      	ldr	r1, [pc, #128]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d20:	4a19      	ldr	r2, [pc, #100]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d28:	e00f      	b.n	8007d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d106      	bne.n	8007d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d30:	4b15      	ldr	r3, [pc, #84]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	4a14      	ldr	r2, [pc, #80]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d3c:	e005      	b.n	8007d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d3e:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	4a11      	ldr	r2, [pc, #68]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d56:	f7f9 fe41 	bl	80019dc <HAL_GetTick>
 8007d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d5c:	e008      	b.n	8007d70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d5e:	f7f9 fe3d 	bl	80019dc <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e006      	b.n	8007d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <RCCEx_PLL3_Config+0x15c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	ffff0007 	.word	0xffff0007

08007d90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e02b      	b.n	8007dfc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7f8 fc87 	bl	80006cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f000 fe77 	bl	8008ac4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	f000 fecb 	bl	8008b7c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007de6:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <HAL_SDRAM_Init+0x74>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a06      	ldr	r2, [pc, #24]	@ (8007e04 <HAL_SDRAM_Init+0x74>)
 8007dec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007df0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	52004000 	.word	0x52004000

08007e08 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e1a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d101      	bne.n	8007e26 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007e22:	2302      	movs	r3, #2
 8007e24:	e021      	b.n	8007e6a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d002      	beq.n	8007e32 <HAL_SDRAM_SendCommand+0x2a>
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d118      	bne.n	8007e64 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 ff04 	bl	8008c50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d104      	bne.n	8007e5a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2205      	movs	r2, #5
 8007e54:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e58:	e006      	b.n	8007e68 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007e62:	e001      	b.n	8007e68 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e05e      	b.n	8007f44 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d106      	bne.n	8007ea0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7f9 fa54 	bl	8001348 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0203 	bic.w	r2, r2, #3
 8007eb6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4b22      	ldr	r3, [pc, #136]	@ (8007f4c <HAL_SPDIFRX_Init+0xd8>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007ed0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007ed6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007edc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007ee2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007ee8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007eee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007ef4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8007efa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8007f00:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d103      	bne.n	8007f1a <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f18:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d103      	bne.n	8007f2c <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f2a:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	ffc88407 	.word	0xffc88407

08007f50 <HAL_SPDIFRX_IRQHandler>:
  * @brief  This function handles SPDIFRX interrupt request.
  * @param  hspdif SPDIFRX handle
  * @retval HAL status
  */
void HAL_SPDIFRX_IRQHandler(SPDIFRX_HandleTypeDef *hspdif)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t itFlag   = hspdif->Instance->SR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itSource = hspdif->Instance->IMR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	60bb      	str	r3, [r7, #8]

  /* SPDIFRX in mode Data Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_RXNE) == SPDIFRX_FLAG_RXNE) && ((itSource &  SPDIFRX_IT_RXNE) == SPDIFRX_IT_RXNE))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <HAL_SPDIFRX_IRQHandler+0x3a>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d006      	beq.n	8007f8a <HAL_SPDIFRX_IRQHandler+0x3a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_RXNE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2201      	movs	r2, #1
 8007f82:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveDataFlow_IT(hspdif);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f861 	bl	800804c <SPDIFRX_ReceiveDataFlow_IT>
  }

  /* SPDIFRX in mode Control Flow Reception */
  if (((itFlag & SPDIFRX_FLAG_CSRNE) == SPDIFRX_FLAG_CSRNE) && ((itSource &  SPDIFRX_IT_CSRNE) == SPDIFRX_IT_CSRNE))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <HAL_SPDIFRX_IRQHandler+0x5c>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <HAL_SPDIFRX_IRQHandler+0x5c>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_CSRNE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	60da      	str	r2, [r3, #12]
    SPDIFRX_ReceiveControlFlow_IT(hspdif);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f883 	bl	80080b2 <SPDIFRX_ReceiveControlFlow_IT>
  }

  /* SPDIFRX Overrun error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_OVR) == SPDIFRX_FLAG_OVR) && ((itSource &  SPDIFRX_IT_OVRIE) == SPDIFRX_IT_OVRIE))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d011      	beq.n	8007fda <HAL_SPDIFRX_IRQHandler+0x8a>
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00c      	beq.n	8007fda <HAL_SPDIFRX_IRQHandler+0x8a>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_OVRIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_OVR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fcc:	f043 0202 	orr.w	r2, r3, #2
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f82f 	bl	8008038 <HAL_SPDIFRX_ErrorCallback>
  }

  /* SPDIFRX Parity error interrupt occurred */
  if (((itFlag & SPDIFRX_FLAG_PERR) == SPDIFRX_FLAG_PERR) && ((itSource &  SPDIFRX_IT_PERRIE) == SPDIFRX_IT_PERRIE))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d011      	beq.n	8008008 <HAL_SPDIFRX_IRQHandler+0xb8>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00c      	beq.n	8008008 <HAL_SPDIFRX_IRQHandler+0xb8>
  {
    __HAL_SPDIFRX_CLEAR_IT(hspdif, SPDIFRX_IT_PERRIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	60da      	str	r2, [r3, #12]

    /* Change the SPDIFRX error code */
    hspdif->ErrorCode |= HAL_SPDIFRX_ERROR_PE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ffa:	f043 0204 	orr.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* the transfer is not stopped */
    HAL_SPDIFRX_ErrorCallback(hspdif);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f818 	bl	8008038 <HAL_SPDIFRX_ErrorCallback>
  }
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_SPDIFRX_RxCpltCallback>:
  * @brief Rx Transfer (Data flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_RxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_SPDIFRX_CxCpltCallback>:
  * @brief Rx Transfer (Control flow) completed callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_CxCpltCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_RxCpltCallback could be implemented in the user file
  */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_SPDIFRX_ErrorCallback>:
  * @brief SPDIFRX error callbacks
  * @param hspdif SPDIFRX handle
  * @retval None
  */
__weak void HAL_SPDIFRX_ErrorCallback(SPDIFRX_HandleTypeDef *hspdif)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(hspdif);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SPDIFRX_ErrorCallback could be implemented in the user file
  */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <SPDIFRX_ReceiveDataFlow_IT>:
  * @brief Receive an amount of data (Data Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveDataFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pRxBuffPtr) = hspdif->Instance->DR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	6912      	ldr	r2, [r2, #16]
 800805e:	601a      	str	r2, [r3, #0]
  hspdif->pRxBuffPtr++;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	1d1a      	adds	r2, r3, #4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
  hspdif->RxXferCount--;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	875a      	strh	r2, [r3, #58]	@ 0x3a

  if (hspdif->RxXferCount == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d113      	bne.n	80080aa <SPDIFRX_ReceiveDataFlow_IT+0x5e>
  {
    /* Disable RXNE/PE and OVR interrupts */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_OVRIE | SPDIFRX_IT_PERRIE | SPDIFRX_IT_RXNE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6859      	ldr	r1, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	f64f 73f2 	movw	r3, #65522	@ 0xfff2
 8008090:	400b      	ands	r3, r1
 8008092:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->RxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_RxCpltCallback(hspdif);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ffb3 	bl	8008010 <HAL_SPDIFRX_RxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <SPDIFRX_ReceiveControlFlow_IT>:
  * @brief Receive an amount of data (Control Flow) with Interrupt
  * @param hspdif SPDIFRX handle
  * @retval None
  */
static void SPDIFRX_ReceiveControlFlow_IT(SPDIFRX_HandleTypeDef *hspdif)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hspdif->pCsBuffPtr) = hspdif->Instance->CSR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c2:	6952      	ldr	r2, [r2, #20]
 80080c4:	601a      	str	r2, [r3, #0]
  hspdif->pCsBuffPtr++;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ca:	1d1a      	adds	r2, r3, #4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hspdif->CsXferCount--;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspdif->CsXferCount == 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d113      	bne.n	8008110 <SPDIFRX_ReceiveControlFlow_IT+0x5e>
  {
    /* Disable CSRNE interrupt */
    __HAL_SPDIFRX_DISABLE_IT(hspdif, SPDIFRX_IT_CSRNE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6859      	ldr	r1, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80080f6:	400b      	ands	r3, r1
 80080f8:	6053      	str	r3, [r2, #4]

    hspdif->State = HAL_SPDIFRX_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(hspdif);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

#if (USE_HAL_SPDIFRX_REGISTER_CALLBACKS == 1)
    hspdif->CxCpltCallback(hspdif);
#else
    HAL_SPDIFRX_CxCpltCallback(hspdif);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ff8a 	bl	8008024 <HAL_SPDIFRX_CxCpltCallback>
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */
  }
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e049      	b.n	80081be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 fb76 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 fa66 	bl	8008628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d020      	beq.n	800822a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d01b      	beq.n	800822a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f06f 0202 	mvn.w	r2, #2
 80081fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9eb 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 8008216:	e005      	b.n	8008224 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f9dd 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9ee 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d020      	beq.n	8008276 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01b      	beq.n	8008276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f06f 0204 	mvn.w	r2, #4
 8008246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f9c5 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 8008262:	e005      	b.n	8008270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9b7 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9c8 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b00      	cmp	r3, #0
 800827e:	d020      	beq.n	80082c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01b      	beq.n	80082c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f06f 0208 	mvn.w	r2, #8
 8008292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2204      	movs	r2, #4
 8008298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f99f 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 80082ae:	e005      	b.n	80082bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f991 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9a2 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d020      	beq.n	800830e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01b      	beq.n	800830e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0210 	mvn.w	r2, #16
 80082de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2208      	movs	r2, #8
 80082e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f979 	bl	80085ec <HAL_TIM_IC_CaptureCallback>
 80082fa:	e005      	b.n	8008308 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f96b 	bl	80085d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f97c 	bl	8008600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00c      	beq.n	8008332 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f06f 0201 	mvn.w	r2, #1
 800832a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f949 	bl	80085c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fb3a 	bl	80089d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800837c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fb32 	bl	80089e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f936 	bl	8008614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00c      	beq.n	80083cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0220 	mvn.w	r2, #32
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fafa 	bl	80089c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e0dc      	b.n	80085aa <HAL_TIM_ConfigClockSource+0x1d6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	4b6a      	ldr	r3, [pc, #424]	@ (80085b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800840c:	4013      	ands	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a64      	ldr	r2, [pc, #400]	@ (80085b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	f000 80a9 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 800842c:	4a62      	ldr	r2, [pc, #392]	@ (80085b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	f200 80ae 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008434:	4a61      	ldr	r2, [pc, #388]	@ (80085bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	f000 80a1 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 800843c:	4a5f      	ldr	r2, [pc, #380]	@ (80085bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	f200 80a6 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008444:	4a5e      	ldr	r2, [pc, #376]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008446:	4293      	cmp	r3, r2
 8008448:	f000 8099 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 800844c:	4a5c      	ldr	r2, [pc, #368]	@ (80085c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800844e:	4293      	cmp	r3, r2
 8008450:	f200 809e 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008454:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008458:	f000 8091 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 800845c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008460:	f200 8096 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008468:	f000 8089 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 800846c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008470:	f200 808e 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008478:	d03e      	beq.n	80084f8 <HAL_TIM_ConfigClockSource+0x124>
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800847e:	f200 8087 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008486:	f000 8086 	beq.w	8008596 <HAL_TIM_ConfigClockSource+0x1c2>
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800848e:	d87f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008490:	2b70      	cmp	r3, #112	@ 0x70
 8008492:	d01a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0xf6>
 8008494:	2b70      	cmp	r3, #112	@ 0x70
 8008496:	d87b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 8008498:	2b60      	cmp	r3, #96	@ 0x60
 800849a:	d050      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x16a>
 800849c:	2b60      	cmp	r3, #96	@ 0x60
 800849e:	d877      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 80084a0:	2b50      	cmp	r3, #80	@ 0x50
 80084a2:	d03c      	beq.n	800851e <HAL_TIM_ConfigClockSource+0x14a>
 80084a4:	2b50      	cmp	r3, #80	@ 0x50
 80084a6:	d873      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 80084a8:	2b40      	cmp	r3, #64	@ 0x40
 80084aa:	d058      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x18a>
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	d86f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 80084b0:	2b30      	cmp	r3, #48	@ 0x30
 80084b2:	d064      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 80084b4:	2b30      	cmp	r3, #48	@ 0x30
 80084b6:	d86b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d060      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d867      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05c      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d05a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x1aa>
 80084c8:	e062      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084da:	f000 f9c3 	bl	8008864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	609a      	str	r2, [r3, #8]
      break;
 80084f6:	e04f      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008508:	f000 f9ac 	bl	8008864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800851a:	609a      	str	r2, [r3, #8]
      break;
 800851c:	e03c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	461a      	mov	r2, r3
 800852c:	f000 f91c 	bl	8008768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2150      	movs	r1, #80	@ 0x50
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f976 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 800853c:	e02c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800854a:	461a      	mov	r2, r3
 800854c:	f000 f93b 	bl	80087c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2160      	movs	r1, #96	@ 0x60
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f966 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 800855c:	e01c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800856a:	461a      	mov	r2, r3
 800856c:	f000 f8fc 	bl	8008768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2140      	movs	r1, #64	@ 0x40
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f956 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 800857c:	e00c      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f000 f94d 	bl	8008828 <TIM_ITRx_SetConfig>
      break;
 800858e:	e003      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e000      	b.n	8008598 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	ffceff88 	.word	0xffceff88
 80085b8:	00100040 	.word	0x00100040
 80085bc:	00100030 	.word	0x00100030
 80085c0:	00100020 	.word	0x00100020

080085c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a43      	ldr	r2, [pc, #268]	@ (8008748 <TIM_Base_SetConfig+0x120>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a40      	ldr	r2, [pc, #256]	@ (800874c <TIM_Base_SetConfig+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a3f      	ldr	r2, [pc, #252]	@ (8008750 <TIM_Base_SetConfig+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a3e      	ldr	r2, [pc, #248]	@ (8008754 <TIM_Base_SetConfig+0x12c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a3d      	ldr	r2, [pc, #244]	@ (8008758 <TIM_Base_SetConfig+0x130>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d108      	bne.n	800867a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800866e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a32      	ldr	r2, [pc, #200]	@ (8008748 <TIM_Base_SetConfig+0x120>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d01f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008688:	d01b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2f      	ldr	r2, [pc, #188]	@ (800874c <TIM_Base_SetConfig+0x124>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d017      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a2e      	ldr	r2, [pc, #184]	@ (8008750 <TIM_Base_SetConfig+0x128>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2d      	ldr	r2, [pc, #180]	@ (8008754 <TIM_Base_SetConfig+0x12c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00f      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008758 <TIM_Base_SetConfig+0x130>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2b      	ldr	r2, [pc, #172]	@ (800875c <TIM_Base_SetConfig+0x134>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a2a      	ldr	r2, [pc, #168]	@ (8008760 <TIM_Base_SetConfig+0x138>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_Base_SetConfig+0x9a>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a29      	ldr	r2, [pc, #164]	@ (8008764 <TIM_Base_SetConfig+0x13c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d108      	bne.n	80086d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689a      	ldr	r2, [r3, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a14      	ldr	r2, [pc, #80]	@ (8008748 <TIM_Base_SetConfig+0x120>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00f      	beq.n	800871a <TIM_Base_SetConfig+0xf2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a16      	ldr	r2, [pc, #88]	@ (8008758 <TIM_Base_SetConfig+0x130>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00b      	beq.n	800871a <TIM_Base_SetConfig+0xf2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a15      	ldr	r2, [pc, #84]	@ (800875c <TIM_Base_SetConfig+0x134>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d007      	beq.n	800871a <TIM_Base_SetConfig+0xf2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a14      	ldr	r2, [pc, #80]	@ (8008760 <TIM_Base_SetConfig+0x138>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d003      	beq.n	800871a <TIM_Base_SetConfig+0xf2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a13      	ldr	r2, [pc, #76]	@ (8008764 <TIM_Base_SetConfig+0x13c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d103      	bne.n	8008722 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f043 0204 	orr.w	r2, r3, #4
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40010000 	.word	0x40010000
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800

08008768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f023 0201 	bic.w	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 030a 	bic.w	r3, r3, #10
 80087a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b087      	sub	sp, #28
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	f023 0210 	bic.w	r2, r3, #16
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80087f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	031b      	lsls	r3, r3, #12
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008802:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <TIM_ITRx_SetConfig+0x38>)
 800883c:	4013      	ands	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	f043 0307 	orr.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	609a      	str	r2, [r3, #8]
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	ffcfff8f 	.word	0xffcfff8f

08008864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800887e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	021a      	lsls	r2, r3, #8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	431a      	orrs	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4313      	orrs	r3, r2
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	609a      	str	r2, [r3, #8]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e06d      	b.n	8008998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a30      	ldr	r2, [pc, #192]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a2f      	ldr	r2, [pc, #188]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d108      	bne.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80088f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a20      	ldr	r2, [pc, #128]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d022      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892e:	d01d      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1d      	ldr	r2, [pc, #116]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d018      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1c      	ldr	r2, [pc, #112]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1a      	ldr	r2, [pc, #104]	@ (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00e      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d009      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a16      	ldr	r2, [pc, #88]	@ (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a15      	ldr	r2, [pc, #84]	@ (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d10c      	bne.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	4313      	orrs	r3, r2
 800897c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400
 80089ac:	40000400 	.word	0x40000400
 80089b0:	40000800 	.word	0x40000800
 80089b4:	40000c00 	.word	0x40000c00
 80089b8:	40001800 	.word	0x40001800
 80089bc:	40014000 	.word	0x40014000

080089c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <FMC_NAND_Init+0x50>)
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	6851      	ldr	r1, [r2, #4]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	6892      	ldr	r2, [r2, #8]
 8008a16:	4311      	orrs	r1, r2
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	68d2      	ldr	r2, [r2, #12]
 8008a1c:	4311      	orrs	r1, r2
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	6912      	ldr	r2, [r2, #16]
 8008a22:	4311      	orrs	r1, r2
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	6952      	ldr	r2, [r2, #20]
 8008a28:	0252      	lsls	r2, r2, #9
 8008a2a:	4311      	orrs	r1, r2
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	6992      	ldr	r2, [r2, #24]
 8008a30:	0352      	lsls	r2, r2, #13
 8008a32:	430a      	orrs	r2, r1
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f043 0208 	orr.w	r2, r3, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	fff00189 	.word	0xfff00189

08008a50 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8008a66:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8008a6e:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8008a76:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8008aa0:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8008aa8:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8008ab0:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d121      	bne.n	8008b1a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <FMC_SDRAM_Init+0xb4>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	683a      	ldr	r2, [r7, #0]
 8008ae0:	6851      	ldr	r1, [r2, #4]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	6892      	ldr	r2, [r2, #8]
 8008ae6:	4311      	orrs	r1, r2
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	68d2      	ldr	r2, [r2, #12]
 8008aec:	4311      	orrs	r1, r2
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	6912      	ldr	r2, [r2, #16]
 8008af2:	4311      	orrs	r1, r2
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	6952      	ldr	r2, [r2, #20]
 8008af8:	4311      	orrs	r1, r2
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	6992      	ldr	r2, [r2, #24]
 8008afe:	4311      	orrs	r1, r2
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	69d2      	ldr	r2, [r2, #28]
 8008b04:	4311      	orrs	r1, r2
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	6a12      	ldr	r2, [r2, #32]
 8008b0a:	4311      	orrs	r1, r2
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b10:	430a      	orrs	r2, r1
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	e026      	b.n	8008b68 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	69d9      	ldr	r1, [r3, #28]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	4319      	orrs	r1, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	430b      	orrs	r3, r1
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b78 <FMC_SDRAM_Init+0xb4>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	6851      	ldr	r1, [r2, #4]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	6892      	ldr	r2, [r2, #8]
 8008b48:	4311      	orrs	r1, r2
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	68d2      	ldr	r2, [r2, #12]
 8008b4e:	4311      	orrs	r1, r2
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	6912      	ldr	r2, [r2, #16]
 8008b54:	4311      	orrs	r1, r2
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	6952      	ldr	r2, [r2, #20]
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	6992      	ldr	r2, [r2, #24]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	ffff8000 	.word	0xffff8000

08008b7c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d128      	bne.n	8008be0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	1e59      	subs	r1, r3, #1
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	4319      	orrs	r1, r3
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	4319      	orrs	r1, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	031b      	lsls	r3, r3, #12
 8008bb8:	4319      	orrs	r1, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	4319      	orrs	r1, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	051b      	lsls	r3, r3, #20
 8008bcc:	4319      	orrs	r1, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	061b      	lsls	r3, r3, #24
 8008bd6:	430b      	orrs	r3, r1
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	609a      	str	r2, [r3, #8]
 8008bde:	e02d      	b.n	8008c3c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	4b19      	ldr	r3, [pc, #100]	@ (8008c4c <FMC_SDRAM_Timing_Init+0xd0>)
 8008be6:	4013      	ands	r3, r2
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	68d2      	ldr	r2, [r2, #12]
 8008bec:	3a01      	subs	r2, #1
 8008bee:	0311      	lsls	r1, r2, #12
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	6952      	ldr	r2, [r2, #20]
 8008bf4:	3a01      	subs	r2, #1
 8008bf6:	0512      	lsls	r2, r2, #20
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	1e59      	subs	r1, r3, #1
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	4319      	orrs	r1, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	4319      	orrs	r1, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	041b      	lsls	r3, r3, #16
 8008c2a:	4319      	orrs	r1, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	061b      	lsls	r3, r3, #24
 8008c34:	430b      	orrs	r3, r1
 8008c36:	431a      	orrs	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	ff0f0fff 	.word	0xff0f0fff

08008c50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <FMC_SDRAM_SendCommand+0x44>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	6811      	ldr	r1, [r2, #0]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	6852      	ldr	r2, [r2, #4]
 8008c6c:	4311      	orrs	r1, r2
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	6892      	ldr	r2, [r2, #8]
 8008c72:	3a01      	subs	r2, #1
 8008c74:	0152      	lsls	r2, r2, #5
 8008c76:	4311      	orrs	r1, r2
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	68d2      	ldr	r2, [r2, #12]
 8008c7c:	0252      	lsls	r2, r2, #9
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	431a      	orrs	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	ffc00000 	.word	0xffc00000

08008c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c98:	b084      	sub	sp, #16
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	f107 001c 	add.w	r0, r7, #28
 8008ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008caa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d121      	bne.n	8008cf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d74 <USB_CoreInit+0xdc>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d105      	bne.n	8008cea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fafa 	bl	800a2e4 <USB_CoreReset>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	e01b      	b.n	8008d2e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 faee 	bl	800a2e4 <USB_CoreReset>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d106      	bne.n	8008d22 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d20:	e005      	b.n	8008d2e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d2e:	7fbb      	ldrb	r3, [r7, #30]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d116      	bne.n	8008d62 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d42:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <USB_CoreInit+0xe0>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f043 0206 	orr.w	r2, r3, #6
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f043 0220 	orr.w	r2, r3, #32
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d6e:	b004      	add	sp, #16
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	ffbdffbf 	.word	0xffbdffbf
 8008d78:	03ee0000 	.word	0x03ee0000

08008d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d165      	bne.n	8008e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4a41      	ldr	r2, [pc, #260]	@ (8008e98 <USB_SetTurnaroundTime+0x11c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d906      	bls.n	8008da6 <USB_SetTurnaroundTime+0x2a>
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4a40      	ldr	r2, [pc, #256]	@ (8008e9c <USB_SetTurnaroundTime+0x120>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d202      	bcs.n	8008da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008da0:	230f      	movs	r3, #15
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e062      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4a3c      	ldr	r2, [pc, #240]	@ (8008e9c <USB_SetTurnaroundTime+0x120>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d306      	bcc.n	8008dbc <USB_SetTurnaroundTime+0x40>
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ea0 <USB_SetTurnaroundTime+0x124>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d202      	bcs.n	8008dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008db6:	230e      	movs	r3, #14
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e057      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4a38      	ldr	r2, [pc, #224]	@ (8008ea0 <USB_SetTurnaroundTime+0x124>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d306      	bcc.n	8008dd2 <USB_SetTurnaroundTime+0x56>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4a37      	ldr	r2, [pc, #220]	@ (8008ea4 <USB_SetTurnaroundTime+0x128>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d202      	bcs.n	8008dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008dcc:	230d      	movs	r3, #13
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e04c      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	4a33      	ldr	r2, [pc, #204]	@ (8008ea4 <USB_SetTurnaroundTime+0x128>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d306      	bcc.n	8008de8 <USB_SetTurnaroundTime+0x6c>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	4a32      	ldr	r2, [pc, #200]	@ (8008ea8 <USB_SetTurnaroundTime+0x12c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d802      	bhi.n	8008de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008de2:	230c      	movs	r3, #12
 8008de4:	617b      	str	r3, [r7, #20]
 8008de6:	e041      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4a2f      	ldr	r2, [pc, #188]	@ (8008ea8 <USB_SetTurnaroundTime+0x12c>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d906      	bls.n	8008dfe <USB_SetTurnaroundTime+0x82>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	4a2e      	ldr	r2, [pc, #184]	@ (8008eac <USB_SetTurnaroundTime+0x130>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d802      	bhi.n	8008dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008df8:	230b      	movs	r3, #11
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e036      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	4a2a      	ldr	r2, [pc, #168]	@ (8008eac <USB_SetTurnaroundTime+0x130>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d906      	bls.n	8008e14 <USB_SetTurnaroundTime+0x98>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	4a29      	ldr	r2, [pc, #164]	@ (8008eb0 <USB_SetTurnaroundTime+0x134>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d802      	bhi.n	8008e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008e0e:	230a      	movs	r3, #10
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	e02b      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4a26      	ldr	r2, [pc, #152]	@ (8008eb0 <USB_SetTurnaroundTime+0x134>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d906      	bls.n	8008e2a <USB_SetTurnaroundTime+0xae>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4a25      	ldr	r2, [pc, #148]	@ (8008eb4 <USB_SetTurnaroundTime+0x138>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d202      	bcs.n	8008e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008e24:	2309      	movs	r3, #9
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e020      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4a21      	ldr	r2, [pc, #132]	@ (8008eb4 <USB_SetTurnaroundTime+0x138>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d306      	bcc.n	8008e40 <USB_SetTurnaroundTime+0xc4>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4a20      	ldr	r2, [pc, #128]	@ (8008eb8 <USB_SetTurnaroundTime+0x13c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d802      	bhi.n	8008e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e015      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb8 <USB_SetTurnaroundTime+0x13c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d906      	bls.n	8008e56 <USB_SetTurnaroundTime+0xda>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ebc <USB_SetTurnaroundTime+0x140>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d202      	bcs.n	8008e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e50:	2307      	movs	r3, #7
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e00a      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e56:	2306      	movs	r3, #6
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	e007      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e62:	2309      	movs	r3, #9
 8008e64:	617b      	str	r3, [r7, #20]
 8008e66:	e001      	b.n	8008e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e68:	2309      	movs	r3, #9
 8008e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	029b      	lsls	r3, r3, #10
 8008e80:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008e84:	431a      	orrs	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	00d8acbf 	.word	0x00d8acbf
 8008e9c:	00e4e1c0 	.word	0x00e4e1c0
 8008ea0:	00f42400 	.word	0x00f42400
 8008ea4:	01067380 	.word	0x01067380
 8008ea8:	011a499f 	.word	0x011a499f
 8008eac:	01312cff 	.word	0x01312cff
 8008eb0:	014ca43f 	.word	0x014ca43f
 8008eb4:	016e3600 	.word	0x016e3600
 8008eb8:	01a6ab1f 	.word	0x01a6ab1f
 8008ebc:	01e84800 	.word	0x01e84800

08008ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f043 0201 	orr.w	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f023 0201 	bic.w	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d115      	bne.n	8008f52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f32:	200a      	movs	r0, #10
 8008f34:	f7f8 fd5e 	bl	80019f4 <HAL_Delay>
      ms += 10U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	330a      	adds	r3, #10
 8008f3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f001 f93f 	bl	800a1c2 <USB_GetMode>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d01e      	beq.n	8008f88 <USB_SetCurrentMode+0x84>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f4e:	d9f0      	bls.n	8008f32 <USB_SetCurrentMode+0x2e>
 8008f50:	e01a      	b.n	8008f88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f52:	78fb      	ldrb	r3, [r7, #3]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d115      	bne.n	8008f84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f64:	200a      	movs	r0, #10
 8008f66:	f7f8 fd45 	bl	80019f4 <HAL_Delay>
      ms += 10U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	330a      	adds	r3, #10
 8008f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f926 	bl	800a1c2 <USB_GetMode>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <USB_SetCurrentMode+0x84>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f80:	d9f0      	bls.n	8008f64 <USB_SetCurrentMode+0x60>
 8008f82:	e001      	b.n	8008f88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e005      	b.n	8008f94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f8c:	d101      	bne.n	8008f92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b086      	sub	sp, #24
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	e009      	b.n	8008fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3340      	adds	r3, #64	@ 0x40
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b0e      	cmp	r3, #14
 8008fd4:	d9f2      	bls.n	8008fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d11c      	bne.n	8009018 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e005      	b.n	8009024 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800902a:	461a      	mov	r2, r3
 800902c:	2300      	movs	r3, #0
 800902e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009030:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009034:	2b01      	cmp	r3, #1
 8009036:	d10d      	bne.n	8009054 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f968 	bl	8009318 <USB_SetDevSpeed>
 8009048:	e008      	b.n	800905c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800904a:	2101      	movs	r1, #1
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f963 	bl	8009318 <USB_SetDevSpeed>
 8009052:	e003      	b.n	800905c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009054:	2103      	movs	r1, #3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f95e 	bl	8009318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800905c:	2110      	movs	r1, #16
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f8fa 	bl	8009258 <USB_FlushTxFifo>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f924 	bl	80092bc <USB_FlushRxFifo>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009084:	461a      	mov	r2, r3
 8009086:	2300      	movs	r3, #0
 8009088:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009090:	461a      	mov	r2, r3
 8009092:	2300      	movs	r3, #0
 8009094:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800909c:	461a      	mov	r2, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090a2:	2300      	movs	r3, #0
 80090a4:	613b      	str	r3, [r7, #16]
 80090a6:	e043      	b.n	8009130 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090be:	d118      	bne.n	80090f2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d2:	461a      	mov	r2, r3
 80090d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	e013      	b.n	8009104 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090e8:	461a      	mov	r2, r3
 80090ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	e008      	b.n	8009104 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fe:	461a      	mov	r2, r3
 8009100:	2300      	movs	r3, #0
 8009102:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	461a      	mov	r2, r3
 8009112:	2300      	movs	r3, #0
 8009114:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009122:	461a      	mov	r2, r3
 8009124:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009128:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009134:	461a      	mov	r2, r3
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4293      	cmp	r3, r2
 800913a:	d3b5      	bcc.n	80090a8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800913c:	2300      	movs	r3, #0
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	e043      	b.n	80091ca <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009154:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009158:	d118      	bne.n	800918c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916c:	461a      	mov	r2, r3
 800916e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	e013      	b.n	800919e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009182:	461a      	mov	r2, r3
 8009184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e008      	b.n	800919e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	2300      	movs	r3, #0
 800919c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	2300      	movs	r3, #0
 80091ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	461a      	mov	r2, r3
 80091be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80091c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	3301      	adds	r3, #1
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80091ce:	461a      	mov	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d3b5      	bcc.n	8009142 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80091f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d105      	bne.n	800920c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f043 0210 	orr.w	r2, r3, #16
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699a      	ldr	r2, [r3, #24]
 8009210:	4b0f      	ldr	r3, [pc, #60]	@ (8009250 <USB_DevInit+0x2b4>)
 8009212:	4313      	orrs	r3, r2
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009218:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	f043 0208 	orr.w	r2, r3, #8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800922c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009230:	2b01      	cmp	r3, #1
 8009232:	d105      	bne.n	8009240 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <USB_DevInit+0x2b8>)
 800923a:	4313      	orrs	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800924c:	b004      	add	sp, #16
 800924e:	4770      	bx	lr
 8009250:	803c3800 	.word	0x803c3800
 8009254:	40000004 	.word	0x40000004

08009258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009272:	d901      	bls.n	8009278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e01b      	b.n	80092b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	daf2      	bge.n	8009266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	019b      	lsls	r3, r3, #6
 8009288:	f043 0220 	orr.w	r2, r3, #32
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800929c:	d901      	bls.n	80092a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e006      	b.n	80092b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d0f0      	beq.n	8009290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092d4:	d901      	bls.n	80092da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e018      	b.n	800930c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	daf2      	bge.n	80092c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2210      	movs	r2, #16
 80092ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f8:	d901      	bls.n	80092fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e006      	b.n	800930c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b10      	cmp	r3, #16
 8009308:	d0f0      	beq.n	80092ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	68f9      	ldr	r1, [r7, #12]
 8009334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009338:	4313      	orrs	r3, r2
 800933a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800934a:	b480      	push	{r7}
 800934c:	b087      	sub	sp, #28
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 0306 	and.w	r3, r3, #6
 8009362:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
 800936e:	e00a      	b.n	8009386 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d002      	beq.n	800937c <USB_GetDevSpeed+0x32>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b06      	cmp	r3, #6
 800937a:	d102      	bne.n	8009382 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800937c:	2302      	movs	r3, #2
 800937e:	75fb      	strb	r3, [r7, #23]
 8009380:	e001      	b.n	8009386 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009382:	230f      	movs	r3, #15
 8009384:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009386:	7dfb      	ldrb	r3, [r7, #23]
}
 8009388:	4618      	mov	r0, r3
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d139      	bne.n	8009424 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b6:	69da      	ldr	r2, [r3, #28]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 030f 	and.w	r3, r3, #15
 80093c0:	2101      	movs	r1, #1
 80093c2:	fa01 f303 	lsl.w	r3, r1, r3
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093ce:	4313      	orrs	r3, r2
 80093d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d153      	bne.n	8009490 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	791b      	ldrb	r3, [r3, #4]
 8009402:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009404:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	059b      	lsls	r3, r3, #22
 800940a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800940c:	431a      	orrs	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	0159      	lsls	r1, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	440b      	add	r3, r1
 8009416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941a:	4619      	mov	r1, r3
 800941c:	4b20      	ldr	r3, [pc, #128]	@ (80094a0 <USB_ActivateEndpoint+0x10c>)
 800941e:	4313      	orrs	r3, r2
 8009420:	600b      	str	r3, [r1, #0]
 8009422:	e035      	b.n	8009490 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	2101      	movs	r1, #1
 8009436:	fa01 f303 	lsl.w	r3, r1, r3
 800943a:	041b      	lsls	r3, r3, #16
 800943c:	68f9      	ldr	r1, [r7, #12]
 800943e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009442:	4313      	orrs	r3, r2
 8009444:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d119      	bne.n	8009490 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	791b      	ldrb	r3, [r3, #4]
 8009476:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009478:	430b      	orrs	r3, r1
 800947a:	431a      	orrs	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	0159      	lsls	r1, r3, #5
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	440b      	add	r3, r1
 8009484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009488:	4619      	mov	r1, r3
 800948a:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <USB_ActivateEndpoint+0x10c>)
 800948c:	4313      	orrs	r3, r2
 800948e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	10008000 	.word	0x10008000

080094a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d161      	bne.n	8009584 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094d6:	d11f      	bne.n	8009518 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	0151      	lsls	r1, r2, #5
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	440a      	add	r2, r1
 80094ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009512:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009516:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800951e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 030f 	and.w	r3, r3, #15
 8009528:	2101      	movs	r1, #1
 800952a:	fa01 f303 	lsl.w	r3, r1, r3
 800952e:	b29b      	uxth	r3, r3
 8009530:	43db      	mvns	r3, r3
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009538:	4013      	ands	r3, r2
 800953a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009542:	69da      	ldr	r2, [r3, #28]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	2101      	movs	r1, #1
 800954e:	fa01 f303 	lsl.w	r3, r1, r3
 8009552:	b29b      	uxth	r3, r3
 8009554:	43db      	mvns	r3, r3
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800955c:	4013      	ands	r3, r2
 800955e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	0159      	lsls	r1, r3, #5
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	440b      	add	r3, r1
 8009576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800957a:	4619      	mov	r1, r3
 800957c:	4b35      	ldr	r3, [pc, #212]	@ (8009654 <USB_DeactivateEndpoint+0x1b0>)
 800957e:	4013      	ands	r3, r2
 8009580:	600b      	str	r3, [r1, #0]
 8009582:	e060      	b.n	8009646 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009596:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800959a:	d11f      	bne.n	80095dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	0151      	lsls	r1, r2, #5
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	440a      	add	r2, r1
 80095b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	2101      	movs	r1, #1
 80095ee:	fa01 f303 	lsl.w	r3, r1, r3
 80095f2:	041b      	lsls	r3, r3, #16
 80095f4:	43db      	mvns	r3, r3
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095fc:	4013      	ands	r3, r2
 80095fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009606:	69da      	ldr	r2, [r3, #28]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f303 	lsl.w	r3, r1, r3
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	43db      	mvns	r3, r3
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009620:	4013      	ands	r3, r2
 8009622:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	0159      	lsls	r1, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	440b      	add	r3, r1
 800963a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963e:	4619      	mov	r1, r3
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <USB_DeactivateEndpoint+0x1b4>)
 8009642:	4013      	ands	r3, r2
 8009644:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	ec337800 	.word	0xec337800
 8009658:	eff37800 	.word	0xeff37800

0800965c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08a      	sub	sp, #40	@ 0x28
 8009660:	af02      	add	r7, sp, #8
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	785b      	ldrb	r3, [r3, #1]
 8009678:	2b01      	cmp	r3, #1
 800967a:	f040 8185 	bne.w	8009988 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d132      	bne.n	80096ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	0159      	lsls	r1, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	440b      	add	r3, r1
 800969c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a0:	4619      	mov	r1, r3
 80096a2:	4ba7      	ldr	r3, [pc, #668]	@ (8009940 <USB_EPStartXfer+0x2e4>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	0159      	lsls	r1, r3, #5
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	440b      	add	r3, r1
 80096de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e2:	4619      	mov	r1, r3
 80096e4:	4b97      	ldr	r3, [pc, #604]	@ (8009944 <USB_EPStartXfer+0x2e8>)
 80096e6:	4013      	ands	r3, r2
 80096e8:	610b      	str	r3, [r1, #16]
 80096ea:	e097      	b.n	800981c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f8:	691a      	ldr	r2, [r3, #16]
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	0159      	lsls	r1, r3, #5
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	440b      	add	r3, r1
 8009702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009706:	4619      	mov	r1, r3
 8009708:	4b8e      	ldr	r3, [pc, #568]	@ (8009944 <USB_EPStartXfer+0x2e8>)
 800970a:	4013      	ands	r3, r2
 800970c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	0159      	lsls	r1, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	440b      	add	r3, r1
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	4619      	mov	r1, r3
 800972a:	4b85      	ldr	r3, [pc, #532]	@ (8009940 <USB_EPStartXfer+0x2e4>)
 800972c:	4013      	ands	r3, r2
 800972e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d11a      	bne.n	800976c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	691a      	ldr	r2, [r3, #16]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	429a      	cmp	r2, r3
 8009740:	d903      	bls.n	800974a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	0151      	lsls	r1, r2, #5
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	440a      	add	r2, r1
 8009760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009768:	6113      	str	r3, [r2, #16]
 800976a:	e044      	b.n	80097f6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	691a      	ldr	r2, [r3, #16]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	4413      	add	r3, r2
 8009776:	1e5a      	subs	r2, r3, #1
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009780:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	8afb      	ldrh	r3, [r7, #22]
 8009792:	04d9      	lsls	r1, r3, #19
 8009794:	4b6c      	ldr	r3, [pc, #432]	@ (8009948 <USB_EPStartXfer+0x2ec>)
 8009796:	400b      	ands	r3, r1
 8009798:	69b9      	ldr	r1, [r7, #24]
 800979a:	0148      	lsls	r0, r1, #5
 800979c:	69f9      	ldr	r1, [r7, #28]
 800979e:	4401      	add	r1, r0
 80097a0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097a4:	4313      	orrs	r3, r2
 80097a6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	791b      	ldrb	r3, [r3, #4]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d122      	bne.n	80097f6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	0151      	lsls	r1, r2, #5
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	440a      	add	r2, r1
 80097c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80097ce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	8afb      	ldrh	r3, [r7, #22]
 80097e0:	075b      	lsls	r3, r3, #29
 80097e2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80097e6:	69b9      	ldr	r1, [r7, #24]
 80097e8:	0148      	lsls	r0, r1, #5
 80097ea:	69f9      	ldr	r1, [r7, #28]
 80097ec:	4401      	add	r1, r0
 80097ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80097f2:	4313      	orrs	r3, r2
 80097f4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800980c:	69b9      	ldr	r1, [r7, #24]
 800980e:	0148      	lsls	r0, r1, #5
 8009810:	69f9      	ldr	r1, [r7, #28]
 8009812:	4401      	add	r1, r0
 8009814:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009818:	4313      	orrs	r3, r2
 800981a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d14b      	bne.n	80098ba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d009      	beq.n	800983e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009836:	461a      	mov	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	791b      	ldrb	r3, [r3, #4]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d128      	bne.n	8009898 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d110      	bne.n	8009878 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	69fa      	ldr	r2, [r7, #28]
 800986a:	440a      	add	r2, r1
 800986c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	e00f      	b.n	8009898 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009896:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	e169      	b.n	8009b8e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098d8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	791b      	ldrb	r3, [r3, #4]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d015      	beq.n	800990e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 8151 	beq.w	8009b8e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	2101      	movs	r1, #1
 80098fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009902:	69f9      	ldr	r1, [r7, #28]
 8009904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009908:	4313      	orrs	r3, r2
 800990a:	634b      	str	r3, [r1, #52]	@ 0x34
 800990c:	e13f      	b.n	8009b8e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800991a:	2b00      	cmp	r3, #0
 800991c:	d116      	bne.n	800994c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	69fa      	ldr	r2, [r7, #28]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009938:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	e015      	b.n	800996c <USB_EPStartXfer+0x310>
 8009940:	e007ffff 	.word	0xe007ffff
 8009944:	fff80000 	.word	0xfff80000
 8009948:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	440a      	add	r2, r1
 8009962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800996a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	68d9      	ldr	r1, [r3, #12]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	781a      	ldrb	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	b298      	uxth	r0, r3
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	4603      	mov	r3, r0
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f9b9 	bl	8009cf8 <USB_WritePacket>
 8009986:	e102      	b.n	8009b8e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009994:	691a      	ldr	r2, [r3, #16]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	0159      	lsls	r1, r3, #5
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	440b      	add	r3, r1
 800999e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a2:	4619      	mov	r1, r3
 80099a4:	4b7c      	ldr	r3, [pc, #496]	@ (8009b98 <USB_EPStartXfer+0x53c>)
 80099a6:	4013      	ands	r3, r2
 80099a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	015a      	lsls	r2, r3, #5
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	4413      	add	r3, r2
 80099b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b6:	691a      	ldr	r2, [r3, #16]
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	0159      	lsls	r1, r3, #5
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	440b      	add	r3, r1
 80099c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c4:	4619      	mov	r1, r3
 80099c6:	4b75      	ldr	r3, [pc, #468]	@ (8009b9c <USB_EPStartXfer+0x540>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d12f      	bne.n	8009a32 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	689a      	ldr	r2, [r3, #8]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a00:	69b9      	ldr	r1, [r7, #24]
 8009a02:	0148      	lsls	r0, r1, #5
 8009a04:	69f9      	ldr	r1, [r7, #28]
 8009a06:	4401      	add	r1, r0
 8009a08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a2e:	6113      	str	r3, [r2, #16]
 8009a30:	e05f      	b.n	8009af2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d123      	bne.n	8009a82 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a50:	69b9      	ldr	r1, [r7, #24]
 8009a52:	0148      	lsls	r0, r1, #5
 8009a54:	69f9      	ldr	r1, [r7, #28]
 8009a56:	4401      	add	r1, r0
 8009a58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a7e:	6113      	str	r3, [r2, #16]
 8009a80:	e037      	b.n	8009af2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	1e5a      	subs	r2, r3, #1
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a96:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	8afa      	ldrh	r2, [r7, #22]
 8009a9e:	fb03 f202 	mul.w	r2, r3, r2
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	8afb      	ldrh	r3, [r7, #22]
 8009ab6:	04d9      	lsls	r1, r3, #19
 8009ab8:	4b39      	ldr	r3, [pc, #228]	@ (8009ba0 <USB_EPStartXfer+0x544>)
 8009aba:	400b      	ands	r3, r1
 8009abc:	69b9      	ldr	r1, [r7, #24]
 8009abe:	0148      	lsls	r0, r1, #5
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	4401      	add	r1, r0
 8009ac4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad8:	691a      	ldr	r2, [r3, #16]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae2:	69b9      	ldr	r1, [r7, #24]
 8009ae4:	0148      	lsls	r0, r1, #5
 8009ae6:	69f9      	ldr	r1, [r7, #28]
 8009ae8:	4401      	add	r1, r0
 8009aea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009aee:	4313      	orrs	r3, r2
 8009af0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d10d      	bne.n	8009b14 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d009      	beq.n	8009b14 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	68d9      	ldr	r1, [r3, #12]
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b10:	460a      	mov	r2, r1
 8009b12:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	791b      	ldrb	r3, [r3, #4]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d128      	bne.n	8009b6e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d110      	bne.n	8009b4e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	0151      	lsls	r1, r2, #5
 8009b3e:	69fa      	ldr	r2, [r7, #28]
 8009b40:	440a      	add	r2, r1
 8009b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	e00f      	b.n	8009b6e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b6c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b88:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009b8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3720      	adds	r7, #32
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	fff80000 	.word	0xfff80000
 8009b9c:	e007ffff 	.word	0xe007ffff
 8009ba0:	1ff80000 	.word	0x1ff80000

08009ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	785b      	ldrb	r3, [r3, #1]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d14a      	bne.n	8009c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bda:	f040 8086 	bne.w	8009cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bfc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d902      	bls.n	8009c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	75fb      	strb	r3, [r7, #23]
          break;
 8009c3a:	e056      	b.n	8009cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c54:	d0e7      	beq.n	8009c26 <USB_EPStopXfer+0x82>
 8009c56:	e048      	b.n	8009cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c70:	d13b      	bne.n	8009cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	7812      	ldrb	r2, [r2, #0]
 8009c86:	0151      	lsls	r1, r2, #5
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	440a      	add	r2, r1
 8009c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	7812      	ldrb	r2, [r2, #0]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d902      	bls.n	8009cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8009cce:	e00c      	b.n	8009cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ce8:	d0e7      	beq.n	8009cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b089      	sub	sp, #36	@ 0x24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4611      	mov	r1, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	460b      	mov	r3, r1
 8009d08:	71fb      	strb	r3, [r7, #7]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d123      	bne.n	8009d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d1e:	88bb      	ldrh	r3, [r7, #4]
 8009d20:	3303      	adds	r3, #3
 8009d22:	089b      	lsrs	r3, r3, #2
 8009d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	e018      	b.n	8009d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	031a      	lsls	r2, r3, #12
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d38:	461a      	mov	r2, r3
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	3301      	adds	r3, #1
 8009d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	3301      	adds	r3, #1
 8009d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	61bb      	str	r3, [r7, #24]
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d3e2      	bcc.n	8009d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3724      	adds	r7, #36	@ 0x24
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b08b      	sub	sp, #44	@ 0x2c
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	089b      	lsrs	r3, r3, #2
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	623b      	str	r3, [r7, #32]
 8009d9e:	e014      	b.n	8009dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8009dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dae:	3301      	adds	r3, #1
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db4:	3301      	adds	r3, #1
 8009db6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	3301      	adds	r3, #1
 8009dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	623b      	str	r3, [r7, #32]
 8009dca:	6a3a      	ldr	r2, [r7, #32]
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d3e6      	bcc.n	8009da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009dd2:	8bfb      	ldrh	r3, [r7, #30]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01e      	beq.n	8009e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009de2:	461a      	mov	r2, r3
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	6812      	ldr	r2, [r2, #0]
 8009dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	fa22 f303 	lsr.w	r3, r2, r3
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	3301      	adds	r3, #1
 8009e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	3301      	adds	r3, #1
 8009e08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009e0a:	8bfb      	ldrh	r3, [r7, #30]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e10:	8bfb      	ldrh	r3, [r7, #30]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ea      	bne.n	8009dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	372c      	adds	r7, #44	@ 0x2c
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d12c      	bne.n	8009e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	db12      	blt.n	8009e78 <USB_EPSetStall+0x54>
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00f      	beq.n	8009e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	0151      	lsls	r1, r2, #5
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	440a      	add	r2, r1
 8009e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	e02b      	b.n	8009ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	db12      	blt.n	8009ed2 <USB_EPSetStall+0xae>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00f      	beq.n	8009ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ecc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	0151      	lsls	r1, r2, #5
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	440a      	add	r2, r1
 8009ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009eec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d128      	bne.n	8009f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	791b      	ldrb	r3, [r3, #4]
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d003      	beq.n	8009f4c <USB_EPClearStall+0x4c>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	791b      	ldrb	r3, [r3, #4]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d138      	bne.n	8009fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	e027      	b.n	8009fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	0151      	lsls	r1, r2, #5
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	440a      	add	r2, r1
 8009f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	791b      	ldrb	r3, [r3, #4]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d003      	beq.n	8009f9e <USB_EPClearStall+0x9e>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	791b      	ldrb	r3, [r3, #4]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d10f      	bne.n	8009fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	015a      	lsls	r2, r3, #5
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	0151      	lsls	r1, r2, #5
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	440a      	add	r2, r1
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a006:	4313      	orrs	r3, r2
 800a008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a032:	f023 0303 	bic.w	r3, r3, #3
 800a036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a046:	f023 0302 	bic.w	r3, r3, #2
 800a04a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a074:	f023 0303 	bic.w	r3, r3, #3
 800a078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a088:	f043 0302 	orr.w	r3, r3, #2
 800a08c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	0c1b      	lsrs	r3, r3, #16
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a112:	69db      	ldr	r3, [r3, #28]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	4013      	ands	r3, r2
 800a118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	b29b      	uxth	r3, r3
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a13a:	78fb      	ldrb	r3, [r7, #3]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	4013      	ands	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a158:	68bb      	ldr	r3, [r7, #8]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a166:	b480      	push	{r7}
 800a168:	b087      	sub	sp, #28
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a188:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	fa22 f303 	lsr.w	r3, r2, r3
 800a196:	01db      	lsls	r3, r3, #7
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
	...

0800a1e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4b09      	ldr	r3, [pc, #36]	@ (800a224 <USB_ActivateSetup+0x44>)
 800a1fe:	4013      	ands	r3, r2
 800a200:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	fffff800 	.word	0xfffff800

0800a228 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a228:	b480      	push	{r7}
 800a22a:	b087      	sub	sp, #28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	460b      	mov	r3, r1
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	333c      	adds	r3, #60	@ 0x3c
 800a23e:	3304      	adds	r3, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	4a26      	ldr	r2, [pc, #152]	@ (800a2e0 <USB_EP0_OutStart+0xb8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d90a      	bls.n	800a262 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a25c:	d101      	bne.n	800a262 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	e037      	b.n	800a2d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a268:	461a      	mov	r2, r3
 800a26a:	2300      	movs	r3, #0
 800a26c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a27c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a290:	f043 0318 	orr.w	r3, r3, #24
 800a294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a2a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d10f      	bne.n	800a2d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a2ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	4f54300a 	.word	0x4f54300a

0800a2e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a2fc:	d901      	bls.n	800a302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e01b      	b.n	800a33a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	daf2      	bge.n	800a2f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	f043 0201 	orr.w	r2, r3, #1
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a326:	d901      	bls.n	800a32c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e006      	b.n	800a33a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b01      	cmp	r3, #1
 800a336:	d0f0      	beq.n	800a31a <USB_CoreReset+0x36>

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a354:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a358:	f002 fd3e 	bl	800cdd8 <USBD_static_malloc>
 800a35c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32b0      	adds	r2, #176	@ 0xb0
 800a36e:	2100      	movs	r1, #0
 800a370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a374:	2302      	movs	r3, #2
 800a376:	e0d4      	b.n	800a522 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a378:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a37c:	2100      	movs	r1, #0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f002 fe8d 	bl	800d09e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32b0      	adds	r2, #176	@ 0xb0
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	32b0      	adds	r2, #176	@ 0xb0
 800a39e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7c1b      	ldrb	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d138      	bne.n	800a422 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3b0:	4b5e      	ldr	r3, [pc, #376]	@ (800a52c <USBD_CDC_Init+0x1e4>)
 800a3b2:	7819      	ldrb	r1, [r3, #0]
 800a3b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f002 fbe9 	bl	800cb92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3c0:	4b5a      	ldr	r3, [pc, #360]	@ (800a52c <USBD_CDC_Init+0x1e4>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	f003 020f 	and.w	r2, r3, #15
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	3324      	adds	r3, #36	@ 0x24
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3da:	4b55      	ldr	r3, [pc, #340]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a3dc:	7819      	ldrb	r1, [r3, #0]
 800a3de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f002 fbd4 	bl	800cb92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a3ea:	4b51      	ldr	r3, [pc, #324]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	f003 020f 	and.w	r2, r3, #15
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a402:	2201      	movs	r2, #1
 800a404:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a406:	4b4b      	ldr	r3, [pc, #300]	@ (800a534 <USBD_CDC_Init+0x1ec>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	3326      	adds	r3, #38	@ 0x26
 800a41c:	2210      	movs	r2, #16
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	e035      	b.n	800a48e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a422:	4b42      	ldr	r3, [pc, #264]	@ (800a52c <USBD_CDC_Init+0x1e4>)
 800a424:	7819      	ldrb	r1, [r3, #0]
 800a426:	2340      	movs	r3, #64	@ 0x40
 800a428:	2202      	movs	r2, #2
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f002 fbb1 	bl	800cb92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a430:	4b3e      	ldr	r3, [pc, #248]	@ (800a52c <USBD_CDC_Init+0x1e4>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 020f 	and.w	r2, r3, #15
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	440b      	add	r3, r1
 800a444:	3324      	adds	r3, #36	@ 0x24
 800a446:	2201      	movs	r2, #1
 800a448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a44a:	4b39      	ldr	r3, [pc, #228]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a44c:	7819      	ldrb	r1, [r3, #0]
 800a44e:	2340      	movs	r3, #64	@ 0x40
 800a450:	2202      	movs	r2, #2
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f002 fb9d 	bl	800cb92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a458:	4b35      	ldr	r3, [pc, #212]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	f003 020f 	and.w	r2, r3, #15
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	440b      	add	r3, r1
 800a46c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a470:	2201      	movs	r2, #1
 800a472:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a474:	4b2f      	ldr	r3, [pc, #188]	@ (800a534 <USBD_CDC_Init+0x1ec>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 020f 	and.w	r2, r3, #15
 800a47c:	6879      	ldr	r1, [r7, #4]
 800a47e:	4613      	mov	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	440b      	add	r3, r1
 800a488:	3326      	adds	r3, #38	@ 0x26
 800a48a:	2210      	movs	r2, #16
 800a48c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a48e:	4b29      	ldr	r3, [pc, #164]	@ (800a534 <USBD_CDC_Init+0x1ec>)
 800a490:	7819      	ldrb	r1, [r3, #0]
 800a492:	2308      	movs	r3, #8
 800a494:	2203      	movs	r2, #3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f002 fb7b 	bl	800cb92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a49c:	4b25      	ldr	r3, [pc, #148]	@ (800a534 <USBD_CDC_Init+0x1ec>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3324      	adds	r3, #36	@ 0x24
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	33b0      	adds	r3, #176	@ 0xb0
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e018      	b.n	800a522 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	7c1b      	ldrb	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a4fa:	7819      	ldrb	r1, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f002 fc32 	bl	800cd70 <USBD_LL_PrepareReceive>
 800a50c:	e008      	b.n	800a520 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a50e:	4b08      	ldr	r3, [pc, #32]	@ (800a530 <USBD_CDC_Init+0x1e8>)
 800a510:	7819      	ldrb	r1, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a518:	2340      	movs	r3, #64	@ 0x40
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f002 fc28 	bl	800cd70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	24000097 	.word	0x24000097
 800a530:	24000098 	.word	0x24000098
 800a534:	24000099 	.word	0x24000099

0800a538 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a544:	4b3a      	ldr	r3, [pc, #232]	@ (800a630 <USBD_CDC_DeInit+0xf8>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f002 fb47 	bl	800cbde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a550:	4b37      	ldr	r3, [pc, #220]	@ (800a630 <USBD_CDC_DeInit+0xf8>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	f003 020f 	and.w	r2, r3, #15
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	440b      	add	r3, r1
 800a564:	3324      	adds	r3, #36	@ 0x24
 800a566:	2200      	movs	r2, #0
 800a568:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a56a:	4b32      	ldr	r3, [pc, #200]	@ (800a634 <USBD_CDC_DeInit+0xfc>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f002 fb34 	bl	800cbde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a576:	4b2f      	ldr	r3, [pc, #188]	@ (800a634 <USBD_CDC_DeInit+0xfc>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f003 020f 	and.w	r2, r3, #15
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	440b      	add	r3, r1
 800a58a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a58e:	2200      	movs	r2, #0
 800a590:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a592:	4b29      	ldr	r3, [pc, #164]	@ (800a638 <USBD_CDC_DeInit+0x100>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f002 fb20 	bl	800cbde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a59e:	4b26      	ldr	r3, [pc, #152]	@ (800a638 <USBD_CDC_DeInit+0x100>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	f003 020f 	and.w	r2, r3, #15
 800a5a6:	6879      	ldr	r1, [r7, #4]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	440b      	add	r3, r1
 800a5b2:	3324      	adds	r3, #36	@ 0x24
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a5b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a638 <USBD_CDC_DeInit+0x100>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	f003 020f 	and.w	r2, r3, #15
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3326      	adds	r3, #38	@ 0x26
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	32b0      	adds	r2, #176	@ 0xb0
 800a5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01f      	beq.n	800a624 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	33b0      	adds	r3, #176	@ 0xb0
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	32b0      	adds	r2, #176	@ 0xb0
 800a602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a606:	4618      	mov	r0, r3
 800a608:	f002 fbf4 	bl	800cdf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	32b0      	adds	r2, #176	@ 0xb0
 800a616:	2100      	movs	r1, #0
 800a618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	24000097 	.word	0x24000097
 800a634:	24000098 	.word	0x24000098
 800a638:	24000099 	.word	0x24000099

0800a63c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	32b0      	adds	r2, #176	@ 0xb0
 800a650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a668:	2303      	movs	r3, #3
 800a66a:	e0bf      	b.n	800a7ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a674:	2b00      	cmp	r3, #0
 800a676:	d050      	beq.n	800a71a <USBD_CDC_Setup+0xde>
 800a678:	2b20      	cmp	r3, #32
 800a67a:	f040 80af 	bne.w	800a7dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	88db      	ldrh	r3, [r3, #6]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d03a      	beq.n	800a6fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	b25b      	sxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	da1b      	bge.n	800a6c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	33b0      	adds	r3, #176	@ 0xb0
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a6a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	88d2      	ldrh	r2, [r2, #6]
 800a6ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	88db      	ldrh	r3, [r3, #6]
 800a6b2:	2b07      	cmp	r3, #7
 800a6b4:	bf28      	it	cs
 800a6b6:	2307      	movcs	r3, #7
 800a6b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	89fa      	ldrh	r2, [r7, #14]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 fdd9 	bl	800c278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a6c6:	e090      	b.n	800a7ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	785a      	ldrb	r2, [r3, #1]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a6d8:	d803      	bhi.n	800a6e2 <USBD_CDC_Setup+0xa6>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	88db      	ldrh	r3, [r3, #6]
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	e000      	b.n	800a6e4 <USBD_CDC_Setup+0xa8>
 800a6e2:	2240      	movs	r2, #64	@ 0x40
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a6ea:	6939      	ldr	r1, [r7, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 fdeb 	bl	800c2d0 <USBD_CtlPrepareRx>
      break;
 800a6fa:	e076      	b.n	800a7ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	33b0      	adds	r3, #176	@ 0xb0
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4413      	add	r3, r2
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	7850      	ldrb	r0, [r2, #1]
 800a712:	2200      	movs	r2, #0
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	4798      	blx	r3
      break;
 800a718:	e067      	b.n	800a7ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	2b0b      	cmp	r3, #11
 800a720:	d851      	bhi.n	800a7c6 <USBD_CDC_Setup+0x18a>
 800a722:	a201      	add	r2, pc, #4	@ (adr r2, 800a728 <USBD_CDC_Setup+0xec>)
 800a724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a728:	0800a759 	.word	0x0800a759
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a7c7 	.word	0x0800a7c7
 800a734:	0800a7c7 	.word	0x0800a7c7
 800a738:	0800a7c7 	.word	0x0800a7c7
 800a73c:	0800a7c7 	.word	0x0800a7c7
 800a740:	0800a7c7 	.word	0x0800a7c7
 800a744:	0800a7c7 	.word	0x0800a7c7
 800a748:	0800a7c7 	.word	0x0800a7c7
 800a74c:	0800a7c7 	.word	0x0800a7c7
 800a750:	0800a783 	.word	0x0800a783
 800a754:	0800a7ad 	.word	0x0800a7ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b03      	cmp	r3, #3
 800a762:	d107      	bne.n	800a774 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a764:	f107 030a 	add.w	r3, r7, #10
 800a768:	2202      	movs	r2, #2
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f001 fd83 	bl	800c278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a772:	e032      	b.n	800a7da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 fd01 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 800a77c:	2303      	movs	r3, #3
 800a77e:	75fb      	strb	r3, [r7, #23]
          break;
 800a780:	e02b      	b.n	800a7da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d107      	bne.n	800a79e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a78e:	f107 030d 	add.w	r3, r7, #13
 800a792:	2201      	movs	r2, #1
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fd6e 	bl	800c278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a79c:	e01d      	b.n	800a7da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 fcec 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	75fb      	strb	r3, [r7, #23]
          break;
 800a7aa:	e016      	b.n	800a7da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d00f      	beq.n	800a7d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f001 fcdf 	bl	800c17e <USBD_CtlError>
            ret = USBD_FAIL;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a7c4:	e008      	b.n	800a7d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f001 fcd8 	bl	800c17e <USBD_CtlError>
          ret = USBD_FAIL;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7d2:	e002      	b.n	800a7da <USBD_CDC_Setup+0x19e>
          break;
 800a7d4:	bf00      	nop
 800a7d6:	e008      	b.n	800a7ea <USBD_CDC_Setup+0x1ae>
          break;
 800a7d8:	bf00      	nop
      }
      break;
 800a7da:	e006      	b.n	800a7ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 fccd 	bl	800c17e <USBD_CtlError>
      ret = USBD_FAIL;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32b0      	adds	r2, #176	@ 0xb0
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e065      	b.n	800a8ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	32b0      	adds	r2, #176	@ 0xb0
 800a828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	3318      	adds	r3, #24
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d02f      	beq.n	800a8a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	f003 020f 	and.w	r2, r3, #15
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	440b      	add	r3, r1
 800a85a:	3318      	adds	r3, #24
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	f003 010f 	and.w	r1, r3, #15
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	460b      	mov	r3, r1
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	440b      	add	r3, r1
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4403      	add	r3, r0
 800a870:	331c      	adds	r3, #28
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	fbb2 f1f3 	udiv	r1, r2, r3
 800a878:	fb01 f303 	mul.w	r3, r1, r3
 800a87c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d112      	bne.n	800a8a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	3318      	adds	r3, #24
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a89a:	78f9      	ldrb	r1, [r7, #3]
 800a89c:	2300      	movs	r3, #0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f002 fa44 	bl	800cd2e <USBD_LL_Transmit>
 800a8a6:	e01f      	b.n	800a8e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	33b0      	adds	r3, #176	@ 0xb0
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d010      	beq.n	800a8e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	33b0      	adds	r3, #176	@ 0xb0
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a8e4:	78fa      	ldrb	r2, [r7, #3]
 800a8e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	32b0      	adds	r2, #176	@ 0xb0
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	32b0      	adds	r2, #176	@ 0xb0
 800a918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a920:	2303      	movs	r3, #3
 800a922:	e01a      	b.n	800a95a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 fa42 	bl	800cdb2 <USBD_LL_GetRxDataSize>
 800a92e:	4602      	mov	r2, r0
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	33b0      	adds	r3, #176	@ 0xb0
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a954:	4611      	mov	r1, r2
 800a956:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	32b0      	adds	r2, #176	@ 0xb0
 800a974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a980:	2303      	movs	r3, #3
 800a982:	e024      	b.n	800a9ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	33b0      	adds	r3, #176	@ 0xb0
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d019      	beq.n	800a9cc <USBD_CDC_EP0_RxReady+0x6a>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a99e:	2bff      	cmp	r3, #255	@ 0xff
 800a9a0:	d014      	beq.n	800a9cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	33b0      	adds	r3, #176	@ 0xb0
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a9ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a9c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	22ff      	movs	r2, #255	@ 0xff
 800a9c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9e0:	2182      	movs	r1, #130	@ 0x82
 800a9e2:	4818      	ldr	r0, [pc, #96]	@ (800aa44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9e4:	f000 fd6b 	bl	800b4be <USBD_GetEpDesc>
 800a9e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4815      	ldr	r0, [pc, #84]	@ (800aa44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9ee:	f000 fd66 	bl	800b4be <USBD_GetEpDesc>
 800a9f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9f4:	2181      	movs	r1, #129	@ 0x81
 800a9f6:	4813      	ldr	r0, [pc, #76]	@ (800aa44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9f8:	f000 fd61 	bl	800b4be <USBD_GetEpDesc>
 800a9fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2210      	movs	r2, #16
 800aa08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d006      	beq.n	800aa1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa18:	711a      	strb	r2, [r3, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d006      	beq.n	800aa32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa2c:	711a      	strb	r2, [r3, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2243      	movs	r2, #67	@ 0x43
 800aa36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa38:	4b02      	ldr	r3, [pc, #8]	@ (800aa44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	24000054 	.word	0x24000054

0800aa48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa50:	2182      	movs	r1, #130	@ 0x82
 800aa52:	4818      	ldr	r0, [pc, #96]	@ (800aab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa54:	f000 fd33 	bl	800b4be <USBD_GetEpDesc>
 800aa58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	4815      	ldr	r0, [pc, #84]	@ (800aab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa5e:	f000 fd2e 	bl	800b4be <USBD_GetEpDesc>
 800aa62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa64:	2181      	movs	r1, #129	@ 0x81
 800aa66:	4813      	ldr	r0, [pc, #76]	@ (800aab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa68:	f000 fd29 	bl	800b4be <USBD_GetEpDesc>
 800aa6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2210      	movs	r2, #16
 800aa78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d006      	beq.n	800aa8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2200      	movs	r2, #0
 800aa84:	711a      	strb	r2, [r3, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f042 0202 	orr.w	r2, r2, #2
 800aa8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d006      	beq.n	800aaa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	711a      	strb	r2, [r3, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f042 0202 	orr.w	r2, r2, #2
 800aaa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2243      	movs	r2, #67	@ 0x43
 800aaa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aaa8:	4b02      	ldr	r3, [pc, #8]	@ (800aab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	24000054 	.word	0x24000054

0800aab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aac0:	2182      	movs	r1, #130	@ 0x82
 800aac2:	4818      	ldr	r0, [pc, #96]	@ (800ab24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aac4:	f000 fcfb 	bl	800b4be <USBD_GetEpDesc>
 800aac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aaca:	2101      	movs	r1, #1
 800aacc:	4815      	ldr	r0, [pc, #84]	@ (800ab24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aace:	f000 fcf6 	bl	800b4be <USBD_GetEpDesc>
 800aad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aad4:	2181      	movs	r1, #129	@ 0x81
 800aad6:	4813      	ldr	r0, [pc, #76]	@ (800ab24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aad8:	f000 fcf1 	bl	800b4be <USBD_GetEpDesc>
 800aadc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2210      	movs	r2, #16
 800aae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d006      	beq.n	800aafe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaf8:	711a      	strb	r2, [r3, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d006      	beq.n	800ab12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab0c:	711a      	strb	r2, [r3, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2243      	movs	r2, #67	@ 0x43
 800ab16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab18:	4b02      	ldr	r3, [pc, #8]	@ (800ab24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	24000054 	.word	0x24000054

0800ab28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	220a      	movs	r2, #10
 800ab34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	@ (800ab44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	24000010 	.word	0x24000010

0800ab48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e009      	b.n	800ab70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	33b0      	adds	r3, #176	@ 0xb0
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	32b0      	adds	r2, #176	@ 0xb0
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e008      	b.n	800abb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	371c      	adds	r7, #28
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	32b0      	adds	r2, #176	@ 0xb0
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e004      	b.n	800abee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
	...

0800abfc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	32b0      	adds	r2, #176	@ 0xb0
 800ac0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac14:	2301      	movs	r3, #1
 800ac16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e025      	b.n	800ac6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d11f      	bne.n	800ac6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ac34:	4b10      	ldr	r3, [pc, #64]	@ (800ac78 <USBD_CDC_TransmitPacket+0x7c>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f003 020f 	and.w	r2, r3, #15
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4403      	add	r3, r0
 800ac4e:	3318      	adds	r3, #24
 800ac50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ac52:	4b09      	ldr	r3, [pc, #36]	@ (800ac78 <USBD_CDC_TransmitPacket+0x7c>)
 800ac54:	7819      	ldrb	r1, [r3, #0]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f002 f863 	bl	800cd2e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	24000097 	.word	0x24000097

0800ac7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	32b0      	adds	r2, #176	@ 0xb0
 800ac8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	32b0      	adds	r2, #176	@ 0xb0
 800ac9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e018      	b.n	800acdc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	7c1b      	ldrb	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ace4 <USBD_CDC_ReceivePacket+0x68>)
 800acb4:	7819      	ldrb	r1, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f002 f855 	bl	800cd70 <USBD_LL_PrepareReceive>
 800acc6:	e008      	b.n	800acda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acc8:	4b06      	ldr	r3, [pc, #24]	@ (800ace4 <USBD_CDC_ReceivePacket+0x68>)
 800acca:	7819      	ldrb	r1, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acd2:	2340      	movs	r3, #64	@ 0x40
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f002 f84b 	bl	800cd70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acda:	2300      	movs	r3, #0
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	24000098 	.word	0x24000098

0800ace8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	4613      	mov	r3, r2
 800acf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800acfc:	4817      	ldr	r0, [pc, #92]	@ (800ad5c <USBD_Init+0x74>)
 800acfe:	f002 f971 	bl	800cfe4 <iprintf>
 800ad02:	4817      	ldr	r0, [pc, #92]	@ (800ad60 <USBD_Init+0x78>)
 800ad04:	f002 f96e 	bl	800cfe4 <iprintf>
 800ad08:	200a      	movs	r0, #10
 800ad0a:	f002 f97d 	bl	800d008 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e01f      	b.n	800ad52 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	79fa      	ldrb	r2, [r7, #7]
 800ad44:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f001 feb6 	bl	800cab8 <USBD_LL_Init>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800ddac 	.word	0x0800ddac
 800ad60:	0800ddb4 	.word	0x0800ddb4

0800ad64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800ad78:	481a      	ldr	r0, [pc, #104]	@ (800ade4 <USBD_RegisterClass+0x80>)
 800ad7a:	f002 f933 	bl	800cfe4 <iprintf>
 800ad7e:	481a      	ldr	r0, [pc, #104]	@ (800ade8 <USBD_RegisterClass+0x84>)
 800ad80:	f002 f930 	bl	800cfe4 <iprintf>
 800ad84:	200a      	movs	r0, #10
 800ad86:	f002 f93f 	bl	800d008 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e025      	b.n	800adda <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	32ae      	adds	r2, #174	@ 0xae
 800ada0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00f      	beq.n	800adca <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	32ae      	adds	r2, #174	@ 0xae
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adba:	f107 020e 	add.w	r2, r7, #14
 800adbe:	4610      	mov	r0, r2
 800adc0:	4798      	blx	r3
 800adc2:	4602      	mov	r2, r0
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	0800ddac 	.word	0x0800ddac
 800ade8:	0800ddcc 	.word	0x0800ddcc

0800adec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 feb1 	bl	800cb5c <USBD_LL_Start>
 800adfa:	4603      	mov	r3, r0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d009      	beq.n	800ae48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	4798      	blx	r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 f936 	bl	800c10a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800aeac:	461a      	mov	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aeba:	f003 031f 	and.w	r3, r3, #31
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d01a      	beq.n	800aef8 <USBD_LL_SetupStage+0x72>
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d822      	bhi.n	800af0c <USBD_LL_SetupStage+0x86>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <USBD_LL_SetupStage+0x4a>
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d00a      	beq.n	800aee4 <USBD_LL_SetupStage+0x5e>
 800aece:	e01d      	b.n	800af0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb63 	bl	800b5a4 <USBD_StdDevReq>
 800aede:	4603      	mov	r3, r0
 800aee0:	73fb      	strb	r3, [r7, #15]
      break;
 800aee2:	e020      	b.n	800af26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fbcb 	bl	800b688 <USBD_StdItfReq>
 800aef2:	4603      	mov	r3, r0
 800aef4:	73fb      	strb	r3, [r7, #15]
      break;
 800aef6:	e016      	b.n	800af26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fc2d 	bl	800b760 <USBD_StdEPReq>
 800af06:	4603      	mov	r3, r0
 800af08:	73fb      	strb	r3, [r7, #15]
      break;
 800af0a:	e00c      	b.n	800af26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800af16:	b2db      	uxtb	r3, r3
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 fe7e 	bl	800cc1c <USBD_LL_StallEP>
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
      break;
 800af24:	bf00      	nop
  }

  return ret;
 800af26:	7bfb      	ldrb	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	460b      	mov	r3, r1
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800af42:	7afb      	ldrb	r3, [r7, #11]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d16e      	bne.n	800b026 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af56:	2b03      	cmp	r3, #3
 800af58:	f040 8098 	bne.w	800b08c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	429a      	cmp	r2, r3
 800af66:	d913      	bls.n	800af90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	1ad2      	subs	r2, r2, r3
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	68da      	ldr	r2, [r3, #12]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	4293      	cmp	r3, r2
 800af80:	bf28      	it	cs
 800af82:	4613      	movcs	r3, r2
 800af84:	461a      	mov	r2, r3
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f001 f9be 	bl	800c30a <USBD_CtlContinueRx>
 800af8e:	e07d      	b.n	800b08c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d014      	beq.n	800afc8 <USBD_LL_DataOutStage+0x98>
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d81d      	bhi.n	800afde <USBD_LL_DataOutStage+0xae>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <USBD_LL_DataOutStage+0x7c>
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d003      	beq.n	800afb2 <USBD_LL_DataOutStage+0x82>
 800afaa:	e018      	b.n	800afde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	75bb      	strb	r3, [r7, #22]
            break;
 800afb0:	e018      	b.n	800afe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	4619      	mov	r1, r3
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 fa64 	bl	800b48a <USBD_CoreFindIF>
 800afc2:	4603      	mov	r3, r0
 800afc4:	75bb      	strb	r3, [r7, #22]
            break;
 800afc6:	e00d      	b.n	800afe4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	4619      	mov	r1, r3
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 fa66 	bl	800b4a4 <USBD_CoreFindEP>
 800afd8:	4603      	mov	r3, r0
 800afda:	75bb      	strb	r3, [r7, #22]
            break;
 800afdc:	e002      	b.n	800afe4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	75bb      	strb	r3, [r7, #22]
            break;
 800afe2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800afe4:	7dbb      	ldrb	r3, [r7, #22]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d119      	bne.n	800b01e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d113      	bne.n	800b01e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aff6:	7dba      	ldrb	r2, [r7, #22]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	32ae      	adds	r2, #174	@ 0xae
 800affc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b006:	7dba      	ldrb	r2, [r7, #22]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b00e:	7dba      	ldrb	r2, [r7, #22]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	32ae      	adds	r2, #174	@ 0xae
 800b014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f001 f984 	bl	800c32c <USBD_CtlSendStatus>
 800b024:	e032      	b.n	800b08c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 fa37 	bl	800b4a4 <USBD_CoreFindEP>
 800b036:	4603      	mov	r3, r0
 800b038:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b03a:	7dbb      	ldrb	r3, [r7, #22]
 800b03c:	2bff      	cmp	r3, #255	@ 0xff
 800b03e:	d025      	beq.n	800b08c <USBD_LL_DataOutStage+0x15c>
 800b040:	7dbb      	ldrb	r3, [r7, #22]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d122      	bne.n	800b08c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d117      	bne.n	800b082 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b052:	7dba      	ldrb	r2, [r7, #22]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	32ae      	adds	r2, #174	@ 0xae
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00f      	beq.n	800b082 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b062:	7dba      	ldrb	r2, [r7, #22]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b06a:	7dba      	ldrb	r2, [r7, #22]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	32ae      	adds	r2, #174	@ 0xae
 800b070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	7afa      	ldrb	r2, [r7, #11]
 800b078:	4611      	mov	r1, r2
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	4798      	blx	r3
 800b07e:	4603      	mov	r3, r0
 800b080:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	e000      	b.n	800b08e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60f8      	str	r0, [r7, #12]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	607a      	str	r2, [r7, #4]
 800b0a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b0a4:	7afb      	ldrb	r3, [r7, #11]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d16f      	bne.n	800b18a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3314      	adds	r3, #20
 800b0ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d15a      	bne.n	800b170 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d914      	bls.n	800b0f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f001 f8e6 	bl	800c2ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f001 fe41 	bl	800cd70 <USBD_LL_PrepareReceive>
 800b0ee:	e03f      	b.n	800b170 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	68da      	ldr	r2, [r3, #12]
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d11c      	bne.n	800b136 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b104:	429a      	cmp	r2, r3
 800b106:	d316      	bcc.n	800b136 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b112:	429a      	cmp	r2, r3
 800b114:	d20f      	bcs.n	800b136 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f001 f8c7 	bl	800c2ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f001 fe1e 	bl	800cd70 <USBD_LL_PrepareReceive>
 800b134:	e01c      	b.n	800b170 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d10f      	bne.n	800b162 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d009      	beq.n	800b162 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b162:	2180      	movs	r1, #128	@ 0x80
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f001 fd59 	bl	800cc1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f001 f8f1 	bl	800c352 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d03a      	beq.n	800b1f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff fe42 	bl	800ae04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b188:	e032      	b.n	800b1f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b190:	b2db      	uxtb	r3, r3
 800b192:	4619      	mov	r1, r3
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 f985 	bl	800b4a4 <USBD_CoreFindEP>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	2bff      	cmp	r3, #255	@ 0xff
 800b1a2:	d025      	beq.n	800b1f0 <USBD_LL_DataInStage+0x15a>
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d122      	bne.n	800b1f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d11c      	bne.n	800b1f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b1b6:	7dfa      	ldrb	r2, [r7, #23]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	32ae      	adds	r2, #174	@ 0xae
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d014      	beq.n	800b1f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b1c6:	7dfa      	ldrb	r2, [r7, #23]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b1ce:	7dfa      	ldrb	r2, [r7, #23]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	32ae      	adds	r2, #174	@ 0xae
 800b1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	7afa      	ldrb	r2, [r7, #11]
 800b1dc:	4611      	mov	r1, r2
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	4798      	blx	r3
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b1e6:	7dbb      	ldrb	r3, [r7, #22]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b1ec:	7dbb      	ldrb	r3, [r7, #22]
 800b1ee:	e000      	b.n	800b1f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2201      	movs	r2, #1
 800b20a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d014      	beq.n	800b260 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00e      	beq.n	800b260 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	6852      	ldr	r2, [r2, #4]
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	4611      	mov	r1, r2
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	4798      	blx	r3
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b260:	2340      	movs	r3, #64	@ 0x40
 800b262:	2200      	movs	r2, #0
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 fc93 	bl	800cb92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2240      	movs	r2, #64	@ 0x40
 800b278:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b27c:	2340      	movs	r3, #64	@ 0x40
 800b27e:	2200      	movs	r2, #0
 800b280:	2180      	movs	r1, #128	@ 0x80
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 fc85 	bl	800cb92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2240      	movs	r2, #64	@ 0x40
 800b292:	621a      	str	r2, [r3, #32]

  return ret;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	78fa      	ldrb	r2, [r7, #3]
 800b2ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d006      	beq.n	800b2e0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2204      	movs	r2, #4
 800b2e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b04      	cmp	r3, #4
 800b308:	d106      	bne.n	800b318 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b03      	cmp	r3, #3
 800b338:	d110      	bne.n	800b35c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b340:	2b00      	cmp	r3, #0
 800b342:	d00b      	beq.n	800b35c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	32ae      	adds	r2, #174	@ 0xae
 800b37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b384:	2303      	movs	r3, #3
 800b386:	e01c      	b.n	800b3c2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b03      	cmp	r3, #3
 800b392:	d115      	bne.n	800b3c0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32ae      	adds	r2, #174	@ 0xae
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	6a1b      	ldr	r3, [r3, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00b      	beq.n	800b3c0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	32ae      	adds	r2, #174	@ 0xae
 800b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	78fa      	ldrb	r2, [r7, #3]
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	32ae      	adds	r2, #174	@ 0xae
 800b3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e01c      	b.n	800b426 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d115      	bne.n	800b424 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	32ae      	adds	r2, #174	@ 0xae
 800b402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00b      	beq.n	800b424 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	32ae      	adds	r2, #174	@ 0xae
 800b416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b41c:	78fa      	ldrb	r2, [r7, #3]
 800b41e:	4611      	mov	r1, r2
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00e      	beq.n	800b480 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6852      	ldr	r2, [r2, #4]
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	4611      	mov	r1, r2
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b47c:	2303      	movs	r3, #3
 800b47e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b480:	7bfb      	ldrb	r3, [r7, #15]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b496:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b4be:	b580      	push	{r7, lr}
 800b4c0:	b086      	sub	sp, #24
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	885b      	ldrh	r3, [r3, #2]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d91f      	bls.n	800b524 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b4ea:	e013      	b.n	800b514 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b4ec:	f107 030a 	add.w	r3, r7, #10
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6978      	ldr	r0, [r7, #20]
 800b4f4:	f000 f81b 	bl	800b52e <USBD_GetNextDesc>
 800b4f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b05      	cmp	r3, #5
 800b500:	d108      	bne.n	800b514 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	789b      	ldrb	r3, [r3, #2]
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d008      	beq.n	800b522 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	b29a      	uxth	r2, r3
 800b51a:	897b      	ldrh	r3, [r7, #10]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d8e5      	bhi.n	800b4ec <USBD_GetEpDesc+0x2e>
 800b520:	e000      	b.n	800b524 <USBD_GetEpDesc+0x66>
          break;
 800b522:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b524:	693b      	ldr	r3, [r7, #16]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	4413      	add	r3, r2
 800b546:	b29a      	uxth	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4413      	add	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b566:	b480      	push	{r7}
 800b568:	b087      	sub	sp, #28
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b584:	8a3b      	ldrh	r3, [r7, #16]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	b21a      	sxth	r2, r3
 800b58a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b58e:	4313      	orrs	r3, r2
 800b590:	b21b      	sxth	r3, r3
 800b592:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b594:	89fb      	ldrh	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
	...

0800b5a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b5ba:	2b40      	cmp	r3, #64	@ 0x40
 800b5bc:	d005      	beq.n	800b5ca <USBD_StdDevReq+0x26>
 800b5be:	2b40      	cmp	r3, #64	@ 0x40
 800b5c0:	d857      	bhi.n	800b672 <USBD_StdDevReq+0xce>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00f      	beq.n	800b5e6 <USBD_StdDevReq+0x42>
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d153      	bne.n	800b672 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	32ae      	adds	r2, #174	@ 0xae
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	4798      	blx	r3
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e4:	e04a      	b.n	800b67c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d83b      	bhi.n	800b666 <USBD_StdDevReq+0xc2>
 800b5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <USBD_StdDevReq+0x50>)
 800b5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f4:	0800b649 	.word	0x0800b649
 800b5f8:	0800b65d 	.word	0x0800b65d
 800b5fc:	0800b667 	.word	0x0800b667
 800b600:	0800b653 	.word	0x0800b653
 800b604:	0800b667 	.word	0x0800b667
 800b608:	0800b627 	.word	0x0800b627
 800b60c:	0800b61d 	.word	0x0800b61d
 800b610:	0800b667 	.word	0x0800b667
 800b614:	0800b63f 	.word	0x0800b63f
 800b618:	0800b631 	.word	0x0800b631
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa3c 	bl	800ba9c <USBD_GetDescriptor>
          break;
 800b624:	e024      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fbcb 	bl	800bdc4 <USBD_SetAddress>
          break;
 800b62e:	e01f      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fc0a 	bl	800be4c <USBD_SetConfig>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]
          break;
 800b63c:	e018      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fcad 	bl	800bfa0 <USBD_GetConfig>
          break;
 800b646:	e013      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fcde 	bl	800c00c <USBD_GetStatus>
          break;
 800b650:	e00e      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fd0d 	bl	800c074 <USBD_SetFeature>
          break;
 800b65a:	e009      	b.n	800b670 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fd31 	bl	800c0c6 <USBD_ClrFeature>
          break;
 800b664:	e004      	b.n	800b670 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fd88 	bl	800c17e <USBD_CtlError>
          break;
 800b66e:	bf00      	nop
      }
      break;
 800b670:	e004      	b.n	800b67c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fd82 	bl	800c17e <USBD_CtlError>
      break;
 800b67a:	bf00      	nop
  }

  return ret;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop

0800b688 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b69e:	2b40      	cmp	r3, #64	@ 0x40
 800b6a0:	d005      	beq.n	800b6ae <USBD_StdItfReq+0x26>
 800b6a2:	2b40      	cmp	r3, #64	@ 0x40
 800b6a4:	d852      	bhi.n	800b74c <USBD_StdItfReq+0xc4>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <USBD_StdItfReq+0x26>
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d14e      	bne.n	800b74c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d840      	bhi.n	800b73e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	889b      	ldrh	r3, [r3, #4]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d836      	bhi.n	800b734 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	889b      	ldrh	r3, [r3, #4]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff fedb 	bl	800b48a <USBD_CoreFindIF>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	2bff      	cmp	r3, #255	@ 0xff
 800b6dc:	d01d      	beq.n	800b71a <USBD_StdItfReq+0x92>
 800b6de:	7bbb      	ldrb	r3, [r7, #14]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d11a      	bne.n	800b71a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b6e4:	7bba      	ldrb	r2, [r7, #14]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	32ae      	adds	r2, #174	@ 0xae
 800b6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00f      	beq.n	800b714 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b6f4:	7bba      	ldrb	r2, [r7, #14]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6fc:	7bba      	ldrb	r2, [r7, #14]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32ae      	adds	r2, #174	@ 0xae
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b712:	e004      	b.n	800b71e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b718:	e001      	b.n	800b71e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	88db      	ldrh	r3, [r3, #6]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d110      	bne.n	800b748 <USBD_StdItfReq+0xc0>
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10d      	bne.n	800b748 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fdfd 	bl	800c32c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b732:	e009      	b.n	800b748 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fd21 	bl	800c17e <USBD_CtlError>
          break;
 800b73c:	e004      	b.n	800b748 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fd1c 	bl	800c17e <USBD_CtlError>
          break;
 800b746:	e000      	b.n	800b74a <USBD_StdItfReq+0xc2>
          break;
 800b748:	bf00      	nop
      }
      break;
 800b74a:	e004      	b.n	800b756 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fd15 	bl	800c17e <USBD_CtlError>
      break;
 800b754:	bf00      	nop
  }

  return ret;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	889b      	ldrh	r3, [r3, #4]
 800b772:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b77c:	2b40      	cmp	r3, #64	@ 0x40
 800b77e:	d007      	beq.n	800b790 <USBD_StdEPReq+0x30>
 800b780:	2b40      	cmp	r3, #64	@ 0x40
 800b782:	f200 817f 	bhi.w	800ba84 <USBD_StdEPReq+0x324>
 800b786:	2b00      	cmp	r3, #0
 800b788:	d02a      	beq.n	800b7e0 <USBD_StdEPReq+0x80>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	f040 817a 	bne.w	800ba84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fe85 	bl	800b4a4 <USBD_CoreFindEP>
 800b79a:	4603      	mov	r3, r0
 800b79c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b79e:	7b7b      	ldrb	r3, [r7, #13]
 800b7a0:	2bff      	cmp	r3, #255	@ 0xff
 800b7a2:	f000 8174 	beq.w	800ba8e <USBD_StdEPReq+0x32e>
 800b7a6:	7b7b      	ldrb	r3, [r7, #13]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f040 8170 	bne.w	800ba8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b7ae:	7b7a      	ldrb	r2, [r7, #13]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b7b6:	7b7a      	ldrb	r2, [r7, #13]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	32ae      	adds	r2, #174	@ 0xae
 800b7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f000 8163 	beq.w	800ba8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b7c8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	32ae      	adds	r2, #174	@ 0xae
 800b7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b7de:	e156      	b.n	800ba8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d008      	beq.n	800b7fa <USBD_StdEPReq+0x9a>
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	f300 8145 	bgt.w	800ba78 <USBD_StdEPReq+0x318>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 809b 	beq.w	800b92a <USBD_StdEPReq+0x1ca>
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d03c      	beq.n	800b872 <USBD_StdEPReq+0x112>
 800b7f8:	e13e      	b.n	800ba78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b02      	cmp	r3, #2
 800b804:	d002      	beq.n	800b80c <USBD_StdEPReq+0xac>
 800b806:	2b03      	cmp	r3, #3
 800b808:	d016      	beq.n	800b838 <USBD_StdEPReq+0xd8>
 800b80a:	e02c      	b.n	800b866 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00d      	beq.n	800b82e <USBD_StdEPReq+0xce>
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b80      	cmp	r3, #128	@ 0x80
 800b816:	d00a      	beq.n	800b82e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 f9fd 	bl	800cc1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b822:	2180      	movs	r1, #128	@ 0x80
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 f9f9 	bl	800cc1c <USBD_LL_StallEP>
 800b82a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b82c:	e020      	b.n	800b870 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fca4 	bl	800c17e <USBD_CtlError>
              break;
 800b836:	e01b      	b.n	800b870 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	885b      	ldrh	r3, [r3, #2]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10e      	bne.n	800b85e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00b      	beq.n	800b85e <USBD_StdEPReq+0xfe>
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	2b80      	cmp	r3, #128	@ 0x80
 800b84a:	d008      	beq.n	800b85e <USBD_StdEPReq+0xfe>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	88db      	ldrh	r3, [r3, #6]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b854:	7bbb      	ldrb	r3, [r7, #14]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 f9df 	bl	800cc1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fd64 	bl	800c32c <USBD_CtlSendStatus>

              break;
 800b864:	e004      	b.n	800b870 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fc88 	bl	800c17e <USBD_CtlError>
              break;
 800b86e:	bf00      	nop
          }
          break;
 800b870:	e107      	b.n	800ba82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d002      	beq.n	800b884 <USBD_StdEPReq+0x124>
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d016      	beq.n	800b8b0 <USBD_StdEPReq+0x150>
 800b882:	e04b      	b.n	800b91c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00d      	beq.n	800b8a6 <USBD_StdEPReq+0x146>
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	2b80      	cmp	r3, #128	@ 0x80
 800b88e:	d00a      	beq.n	800b8a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 f9c1 	bl	800cc1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b89a:	2180      	movs	r1, #128	@ 0x80
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f001 f9bd 	bl	800cc1c <USBD_LL_StallEP>
 800b8a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8a4:	e040      	b.n	800b928 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fc68 	bl	800c17e <USBD_CtlError>
              break;
 800b8ae:	e03b      	b.n	800b928 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	885b      	ldrh	r3, [r3, #2]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d136      	bne.n	800b926 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8c2:	7bbb      	ldrb	r3, [r7, #14]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 f9c7 	bl	800cc5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fd2d 	bl	800c32c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fde4 	bl	800b4a4 <USBD_CoreFindEP>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e0:	7b7b      	ldrb	r3, [r7, #13]
 800b8e2:	2bff      	cmp	r3, #255	@ 0xff
 800b8e4:	d01f      	beq.n	800b926 <USBD_StdEPReq+0x1c6>
 800b8e6:	7b7b      	ldrb	r3, [r7, #13]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d11c      	bne.n	800b926 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b8f4:	7b7a      	ldrb	r2, [r7, #13]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	32ae      	adds	r2, #174	@ 0xae
 800b8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d010      	beq.n	800b926 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b904:	7b7a      	ldrb	r2, [r7, #13]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	32ae      	adds	r2, #174	@ 0xae
 800b90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	4798      	blx	r3
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b91a:	e004      	b.n	800b926 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fc2d 	bl	800c17e <USBD_CtlError>
              break;
 800b924:	e000      	b.n	800b928 <USBD_StdEPReq+0x1c8>
              break;
 800b926:	bf00      	nop
          }
          break;
 800b928:	e0ab      	b.n	800ba82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d002      	beq.n	800b93c <USBD_StdEPReq+0x1dc>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d032      	beq.n	800b9a0 <USBD_StdEPReq+0x240>
 800b93a:	e097      	b.n	800ba6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d007      	beq.n	800b952 <USBD_StdEPReq+0x1f2>
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b80      	cmp	r3, #128	@ 0x80
 800b946:	d004      	beq.n	800b952 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fc17 	bl	800c17e <USBD_CtlError>
                break;
 800b950:	e091      	b.n	800ba76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b952:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da0b      	bge.n	800b972 <USBD_StdEPReq+0x212>
 800b95a:	7bbb      	ldrb	r3, [r7, #14]
 800b95c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	3310      	adds	r3, #16
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	3304      	adds	r3, #4
 800b970:	e00b      	b.n	800b98a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b978:	4613      	mov	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	4413      	add	r3, r2
 800b988:	3304      	adds	r3, #4
 800b98a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2202      	movs	r2, #2
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fc6d 	bl	800c278 <USBD_CtlSendData>
              break;
 800b99e:	e06a      	b.n	800ba76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b9a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	da11      	bge.n	800b9cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	f003 020f 	and.w	r2, r3, #15
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3324      	adds	r3, #36	@ 0x24
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d117      	bne.n	800b9f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fbda 	bl	800c17e <USBD_CtlError>
                  break;
 800b9ca:	e054      	b.n	800ba76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	f003 020f 	and.w	r2, r3, #15
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d104      	bne.n	800b9f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fbc7 	bl	800c17e <USBD_CtlError>
                  break;
 800b9f0:	e041      	b.n	800ba76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da0b      	bge.n	800ba12 <USBD_StdEPReq+0x2b2>
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	3310      	adds	r3, #16
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	e00b      	b.n	800ba2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba12:	7bbb      	ldrb	r3, [r7, #14]
 800ba14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	3304      	adds	r3, #4
 800ba2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <USBD_StdEPReq+0x2d8>
 800ba32:	7bbb      	ldrb	r3, [r7, #14]
 800ba34:	2b80      	cmp	r3, #128	@ 0x80
 800ba36:	d103      	bne.n	800ba40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e00e      	b.n	800ba5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 f927 	bl	800cc98 <USBD_LL_IsStallEP>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2201      	movs	r2, #1
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e002      	b.n	800ba5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2202      	movs	r2, #2
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 fc07 	bl	800c278 <USBD_CtlSendData>
              break;
 800ba6a:	e004      	b.n	800ba76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fb85 	bl	800c17e <USBD_CtlError>
              break;
 800ba74:	bf00      	nop
          }
          break;
 800ba76:	e004      	b.n	800ba82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fb7f 	bl	800c17e <USBD_CtlError>
          break;
 800ba80:	bf00      	nop
      }
      break;
 800ba82:	e005      	b.n	800ba90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fb79 	bl	800c17e <USBD_CtlError>
      break;
 800ba8c:	e000      	b.n	800ba90 <USBD_StdEPReq+0x330>
      break;
 800ba8e:	bf00      	nop
  }

  return ret;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800baae:	2300      	movs	r3, #0
 800bab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	885b      	ldrh	r3, [r3, #2]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	3b01      	subs	r3, #1
 800babc:	2b0e      	cmp	r3, #14
 800babe:	f200 8152 	bhi.w	800bd66 <USBD_GetDescriptor+0x2ca>
 800bac2:	a201      	add	r2, pc, #4	@ (adr r2, 800bac8 <USBD_GetDescriptor+0x2c>)
 800bac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac8:	0800bb39 	.word	0x0800bb39
 800bacc:	0800bb51 	.word	0x0800bb51
 800bad0:	0800bb91 	.word	0x0800bb91
 800bad4:	0800bd67 	.word	0x0800bd67
 800bad8:	0800bd67 	.word	0x0800bd67
 800badc:	0800bd07 	.word	0x0800bd07
 800bae0:	0800bd33 	.word	0x0800bd33
 800bae4:	0800bd67 	.word	0x0800bd67
 800bae8:	0800bd67 	.word	0x0800bd67
 800baec:	0800bd67 	.word	0x0800bd67
 800baf0:	0800bd67 	.word	0x0800bd67
 800baf4:	0800bd67 	.word	0x0800bd67
 800baf8:	0800bd67 	.word	0x0800bd67
 800bafc:	0800bd67 	.word	0x0800bd67
 800bb00:	0800bb05 	.word	0x0800bb05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb16:	69db      	ldr	r3, [r3, #28]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7c12      	ldrb	r2, [r2, #16]
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bb26:	e126      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fb27 	bl	800c17e <USBD_CtlError>
        err++;
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	3301      	adds	r3, #1
 800bb34:	72fb      	strb	r3, [r7, #11]
      break;
 800bb36:	e11e      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7c12      	ldrb	r2, [r2, #16]
 800bb44:	f107 0108 	add.w	r1, r7, #8
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	60f8      	str	r0, [r7, #12]
      break;
 800bb4e:	e112      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7c1b      	ldrb	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	2202      	movs	r2, #2
 800bb70:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb72:	e100      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7c:	f107 0208 	add.w	r2, r7, #8
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	701a      	strb	r2, [r3, #0]
      break;
 800bb8e:	e0f2      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	885b      	ldrh	r3, [r3, #2]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b05      	cmp	r3, #5
 800bb98:	f200 80ac 	bhi.w	800bcf4 <USBD_GetDescriptor+0x258>
 800bb9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <USBD_GetDescriptor+0x108>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bbbd 	.word	0x0800bbbd
 800bba8:	0800bbf1 	.word	0x0800bbf1
 800bbac:	0800bc25 	.word	0x0800bc25
 800bbb0:	0800bc59 	.word	0x0800bc59
 800bbb4:	0800bc8d 	.word	0x0800bc8d
 800bbb8:	0800bcc1 	.word	0x0800bcc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	7c12      	ldrb	r2, [r2, #16]
 800bbd4:	f107 0108 	add.w	r1, r7, #8
 800bbd8:	4610      	mov	r0, r2
 800bbda:	4798      	blx	r3
 800bbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbde:	e091      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 facb 	bl	800c17e <USBD_CtlError>
            err++;
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	3301      	adds	r3, #1
 800bbec:	72fb      	strb	r3, [r7, #11]
          break;
 800bbee:	e089      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00b      	beq.n	800bc14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	7c12      	ldrb	r2, [r2, #16]
 800bc08:	f107 0108 	add.w	r1, r7, #8
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
 800bc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc12:	e077      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fab1 	bl	800c17e <USBD_CtlError>
            err++;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	72fb      	strb	r3, [r7, #11]
          break;
 800bc22:	e06f      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	7c12      	ldrb	r2, [r2, #16]
 800bc3c:	f107 0108 	add.w	r1, r7, #8
 800bc40:	4610      	mov	r0, r2
 800bc42:	4798      	blx	r3
 800bc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc46:	e05d      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fa97 	bl	800c17e <USBD_CtlError>
            err++;
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	3301      	adds	r3, #1
 800bc54:	72fb      	strb	r3, [r7, #11]
          break;
 800bc56:	e055      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	7c12      	ldrb	r2, [r2, #16]
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	4610      	mov	r0, r2
 800bc76:	4798      	blx	r3
 800bc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc7a:	e043      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fa7d 	bl	800c17e <USBD_CtlError>
            err++;
 800bc84:	7afb      	ldrb	r3, [r7, #11]
 800bc86:	3301      	adds	r3, #1
 800bc88:	72fb      	strb	r3, [r7, #11]
          break;
 800bc8a:	e03b      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc9e:	695b      	ldr	r3, [r3, #20]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e029      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fa63 	bl	800c17e <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e021      	b.n	800bd04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e00f      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fa49 	bl	800c17e <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e007      	b.n	800bd04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa41 	bl	800c17e <USBD_CtlError>
          err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd02:	bf00      	nop
      }
      break;
 800bd04:	e037      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7c1b      	ldrb	r3, [r3, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d109      	bne.n	800bd22 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd16:	f107 0208 	add.w	r2, r7, #8
 800bd1a:	4610      	mov	r0, r2
 800bd1c:	4798      	blx	r3
 800bd1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd20:	e029      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fa2a 	bl	800c17e <USBD_CtlError>
        err++;
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd30:	e021      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10d      	bne.n	800bd56 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd42:	f107 0208 	add.w	r2, r7, #8
 800bd46:	4610      	mov	r0, r2
 800bd48:	4798      	blx	r3
 800bd4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	2207      	movs	r2, #7
 800bd52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd54:	e00f      	b.n	800bd76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd56:	6839      	ldr	r1, [r7, #0]
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 fa10 	bl	800c17e <USBD_CtlError>
        err++;
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	3301      	adds	r3, #1
 800bd62:	72fb      	strb	r3, [r7, #11]
      break;
 800bd64:	e007      	b.n	800bd76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fa08 	bl	800c17e <USBD_CtlError>
      err++;
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	3301      	adds	r3, #1
 800bd72:	72fb      	strb	r3, [r7, #11]
      break;
 800bd74:	bf00      	nop
  }

  if (err != 0U)
 800bd76:	7afb      	ldrb	r3, [r7, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11e      	bne.n	800bdba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	88db      	ldrh	r3, [r3, #6]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d016      	beq.n	800bdb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bd84:	893b      	ldrh	r3, [r7, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00e      	beq.n	800bda8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	88da      	ldrh	r2, [r3, #6]
 800bd8e:	893b      	ldrh	r3, [r7, #8]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	bf28      	it	cs
 800bd94:	4613      	movcs	r3, r2
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd9a:	893b      	ldrh	r3, [r7, #8]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68f9      	ldr	r1, [r7, #12]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fa69 	bl	800c278 <USBD_CtlSendData>
 800bda6:	e009      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f9e7 	bl	800c17e <USBD_CtlError>
 800bdb0:	e004      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 faba 	bl	800c32c <USBD_CtlSendStatus>
 800bdb8:	e000      	b.n	800bdbc <USBD_GetDescriptor+0x320>
    return;
 800bdba:	bf00      	nop
  }
}
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop

0800bdc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	889b      	ldrh	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d131      	bne.n	800be3a <USBD_SetAddress+0x76>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	88db      	ldrh	r3, [r3, #6]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d12d      	bne.n	800be3a <USBD_SetAddress+0x76>
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	885b      	ldrh	r3, [r3, #2]
 800bde2:	2b7f      	cmp	r3, #127	@ 0x7f
 800bde4:	d829      	bhi.n	800be3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	885b      	ldrh	r3, [r3, #2]
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d104      	bne.n	800be08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f9bc 	bl	800c17e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be06:	e01d      	b.n	800be44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be10:	7bfb      	ldrb	r3, [r7, #15]
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 ff6b 	bl	800ccf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fa86 	bl	800c32c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2202      	movs	r2, #2
 800be2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2e:	e009      	b.n	800be44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be38:	e004      	b.n	800be44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f99e 	bl	800c17e <USBD_CtlError>
  }
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	4b4e      	ldr	r3, [pc, #312]	@ (800bf9c <USBD_SetConfig+0x150>)
 800be62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be64:	4b4d      	ldr	r3, [pc, #308]	@ (800bf9c <USBD_SetConfig+0x150>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d905      	bls.n	800be78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f985 	bl	800c17e <USBD_CtlError>
    return USBD_FAIL;
 800be74:	2303      	movs	r3, #3
 800be76:	e08c      	b.n	800bf92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	2b02      	cmp	r3, #2
 800be82:	d002      	beq.n	800be8a <USBD_SetConfig+0x3e>
 800be84:	2b03      	cmp	r3, #3
 800be86:	d029      	beq.n	800bedc <USBD_SetConfig+0x90>
 800be88:	e075      	b.n	800bf76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be8a:	4b44      	ldr	r3, [pc, #272]	@ (800bf9c <USBD_SetConfig+0x150>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d020      	beq.n	800bed4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800be92:	4b42      	ldr	r3, [pc, #264]	@ (800bf9c <USBD_SetConfig+0x150>)
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be9c:	4b3f      	ldr	r3, [pc, #252]	@ (800bf9c <USBD_SetConfig+0x150>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7fe ffb9 	bl	800ae1a <USBD_SetClassConfig>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d008      	beq.n	800bec4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f962 	bl	800c17e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bec2:	e065      	b.n	800bf90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fa31 	bl	800c32c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2203      	movs	r2, #3
 800bece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bed2:	e05d      	b.n	800bf90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa29 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800beda:	e059      	b.n	800bf90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bedc:	4b2f      	ldr	r3, [pc, #188]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d112      	bne.n	800bf0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800beec:	4b2b      	ldr	r3, [pc, #172]	@ (800bf9c <USBD_SetConfig+0x150>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bef6:	4b29      	ldr	r3, [pc, #164]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7fe ffa8 	bl	800ae52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fa12 	bl	800c32c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf08:	e042      	b.n	800bf90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf0a:	4b24      	ldr	r3, [pc, #144]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d02a      	beq.n	800bf6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	4619      	mov	r1, r3
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7fe ff96 	bl	800ae52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf26:	4b1d      	ldr	r3, [pc, #116]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf30:	4b1a      	ldr	r3, [pc, #104]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7fe ff6f 	bl	800ae1a <USBD_SetClassConfig>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00f      	beq.n	800bf66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f918 	bl	800c17e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7fe ff7b 	bl	800ae52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2202      	movs	r2, #2
 800bf60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bf64:	e014      	b.n	800bf90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f9e0 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800bf6c:	e010      	b.n	800bf90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f9dc 	bl	800c32c <USBD_CtlSendStatus>
      break;
 800bf74:	e00c      	b.n	800bf90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f900 	bl	800c17e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf7e:	4b07      	ldr	r3, [pc, #28]	@ (800bf9c <USBD_SetConfig+0x150>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7fe ff64 	bl	800ae52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf8e:	bf00      	nop
  }

  return ret;
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	240003f8 	.word	0x240003f8

0800bfa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	88db      	ldrh	r3, [r3, #6]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d004      	beq.n	800bfbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f8e2 	bl	800c17e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfba:	e023      	b.n	800c004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	dc02      	bgt.n	800bfce <USBD_GetConfig+0x2e>
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc03      	bgt.n	800bfd4 <USBD_GetConfig+0x34>
 800bfcc:	e015      	b.n	800bffa <USBD_GetConfig+0x5a>
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d00b      	beq.n	800bfea <USBD_GetConfig+0x4a>
 800bfd2:	e012      	b.n	800bffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f948 	bl	800c278 <USBD_CtlSendData>
        break;
 800bfe8:	e00c      	b.n	800c004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3304      	adds	r3, #4
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f940 	bl	800c278 <USBD_CtlSendData>
        break;
 800bff8:	e004      	b.n	800c004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f8be 	bl	800c17e <USBD_CtlError>
        break;
 800c002:	bf00      	nop
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	2b02      	cmp	r3, #2
 800c022:	d81e      	bhi.n	800c062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	88db      	ldrh	r3, [r3, #6]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d004      	beq.n	800c036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f8a5 	bl	800c17e <USBD_CtlError>
        break;
 800c034:	e01a      	b.n	800c06c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c042:	2b00      	cmp	r3, #0
 800c044:	d005      	beq.n	800c052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f043 0202 	orr.w	r2, r3, #2
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	330c      	adds	r3, #12
 800c056:	2202      	movs	r2, #2
 800c058:	4619      	mov	r1, r3
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f90c 	bl	800c278 <USBD_CtlSendData>
      break;
 800c060:	e004      	b.n	800c06c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f88a 	bl	800c17e <USBD_CtlError>
      break;
 800c06a:	bf00      	nop
  }
}
 800c06c:	bf00      	nop
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	885b      	ldrh	r3, [r3, #2]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d107      	bne.n	800c096 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2201      	movs	r2, #1
 800c08a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 f94c 	bl	800c32c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c094:	e013      	b.n	800c0be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d10b      	bne.n	800c0b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	889b      	ldrh	r3, [r3, #4]
 800c0a2:	0a1b      	lsrs	r3, r3, #8
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f93c 	bl	800c32c <USBD_CtlSendStatus>
}
 800c0b4:	e003      	b.n	800c0be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f860 	bl	800c17e <USBD_CtlError>
}
 800c0be:	bf00      	nop
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d80b      	bhi.n	800c0f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	885b      	ldrh	r3, [r3, #2]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d10c      	bne.n	800c100 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f91c 	bl	800c32c <USBD_CtlSendStatus>
      }
      break;
 800c0f4:	e004      	b.n	800c100 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f840 	bl	800c17e <USBD_CtlError>
      break;
 800c0fe:	e000      	b.n	800c102 <USBD_ClrFeature+0x3c>
      break;
 800c100:	bf00      	nop
  }
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	781a      	ldrb	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fa16 	bl	800b566 <SWAPBYTE>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	3301      	adds	r3, #1
 800c146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fa09 	bl	800b566 <SWAPBYTE>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff f9fc 	bl	800b566 <SWAPBYTE>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	80da      	strh	r2, [r3, #6]
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c188:	2180      	movs	r1, #128	@ 0x80
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fd46 	bl	800cc1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c190:	2100      	movs	r1, #0
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fd42 	bl	800cc1c <USBD_LL_StallEP>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d042      	beq.n	800c23c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c1ba:	6938      	ldr	r0, [r7, #16]
 800c1bc:	f000 f842 	bl	800c244 <USBD_GetLen>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1ca:	d808      	bhi.n	800c1de <USBD_GetString+0x3e>
 800c1cc:	6938      	ldr	r0, [r7, #16]
 800c1ce:	f000 f839 	bl	800c244 <USBD_GetLen>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	e001      	b.n	800c1e2 <USBD_GetString+0x42>
 800c1de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	7812      	ldrb	r2, [r2, #0]
 800c1f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	2203      	movs	r2, #3
 800c200:	701a      	strb	r2, [r3, #0]
  idx++;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	3301      	adds	r3, #1
 800c206:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c208:	e013      	b.n	800c232 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	4413      	add	r3, r2
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	7812      	ldrb	r2, [r2, #0]
 800c214:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
    idx++;
 800c21c:	7dfb      	ldrb	r3, [r7, #23]
 800c21e:	3301      	adds	r3, #1
 800c220:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	4413      	add	r3, r2
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	3301      	adds	r3, #1
 800c230:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e7      	bne.n	800c20a <USBD_GetString+0x6a>
 800c23a:	e000      	b.n	800c23e <USBD_GetString+0x9e>
    return;
 800c23c:	bf00      	nop
  }
}
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c254:	e005      	b.n	800c262 <USBD_GetLen+0x1e>
  {
    len++;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
 800c258:	3301      	adds	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3301      	adds	r3, #1
 800c260:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1f5      	bne.n	800c256 <USBD_GetLen+0x12>
  }

  return len;
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3714      	adds	r7, #20
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2202      	movs	r2, #2
 800c288:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	2100      	movs	r1, #0
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fd45 	bl	800cd2e <USBD_LL_Transmit>

  return USBD_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	2100      	movs	r1, #0
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f000 fd34 	bl	800cd2e <USBD_LL_Transmit>

  return USBD_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2203      	movs	r2, #3
 800c2e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 fd38 	bl	800cd70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	60b9      	str	r1, [r7, #8]
 800c314:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	2100      	movs	r1, #0
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 fd27 	bl	800cd70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2204      	movs	r2, #4
 800c338:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c33c:	2300      	movs	r3, #0
 800c33e:	2200      	movs	r2, #0
 800c340:	2100      	movs	r1, #0
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fcf3 	bl	800cd2e <USBD_LL_Transmit>

  return USBD_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2205      	movs	r2, #5
 800c35e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c362:	2300      	movs	r3, #0
 800c364:	2200      	movs	r2, #0
 800c366:	2100      	movs	r1, #0
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fd01 	bl	800cd70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c37c:	2201      	movs	r2, #1
 800c37e:	4913      	ldr	r1, [pc, #76]	@ (800c3cc <MX_USB_DEVICE_Init+0x54>)
 800c380:	4813      	ldr	r0, [pc, #76]	@ (800c3d0 <MX_USB_DEVICE_Init+0x58>)
 800c382:	f7fe fcb1 	bl	800ace8 <USBD_Init>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c38c:	f7f4 ff32 	bl	80011f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c390:	4910      	ldr	r1, [pc, #64]	@ (800c3d4 <MX_USB_DEVICE_Init+0x5c>)
 800c392:	480f      	ldr	r0, [pc, #60]	@ (800c3d0 <MX_USB_DEVICE_Init+0x58>)
 800c394:	f7fe fce6 	bl	800ad64 <USBD_RegisterClass>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c39e:	f7f4 ff29 	bl	80011f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c3a2:	490d      	ldr	r1, [pc, #52]	@ (800c3d8 <MX_USB_DEVICE_Init+0x60>)
 800c3a4:	480a      	ldr	r0, [pc, #40]	@ (800c3d0 <MX_USB_DEVICE_Init+0x58>)
 800c3a6:	f7fe fbcf 	bl	800ab48 <USBD_CDC_RegisterInterface>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c3b0:	f7f4 ff20 	bl	80011f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c3b4:	4806      	ldr	r0, [pc, #24]	@ (800c3d0 <MX_USB_DEVICE_Init+0x58>)
 800c3b6:	f7fe fd19 	bl	800adec <USBD_Start>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c3c0:	f7f4 ff18 	bl	80011f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800c3c4:	f7f8 f922 	bl	800460c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c3c8:	bf00      	nop
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	240000b0 	.word	0x240000b0
 800c3d0:	240003fc 	.word	0x240003fc
 800c3d4:	2400001c 	.word	0x2400001c
 800c3d8:	2400009c 	.word	0x2400009c

0800c3dc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4905      	ldr	r1, [pc, #20]	@ (800c3f8 <CDC_Init_HS+0x1c>)
 800c3e4:	4805      	ldr	r0, [pc, #20]	@ (800c3fc <CDC_Init_HS+0x20>)
 800c3e6:	f7fe fbc9 	bl	800ab7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800c3ea:	4905      	ldr	r1, [pc, #20]	@ (800c400 <CDC_Init_HS+0x24>)
 800c3ec:	4803      	ldr	r0, [pc, #12]	@ (800c3fc <CDC_Init_HS+0x20>)
 800c3ee:	f7fe fbe7 	bl	800abc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3f2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	24000ed8 	.word	0x24000ed8
 800c3fc:	240003fc 	.word	0x240003fc
 800c400:	240006d8 	.word	0x240006d8

0800c404 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800c408:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	6039      	str	r1, [r7, #0]
 800c41e:	71fb      	strb	r3, [r7, #7]
 800c420:	4613      	mov	r3, r2
 800c422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b23      	cmp	r3, #35	@ 0x23
 800c428:	d84a      	bhi.n	800c4c0 <CDC_Control_HS+0xac>
 800c42a:	a201      	add	r2, pc, #4	@ (adr r2, 800c430 <CDC_Control_HS+0x1c>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c4c1 	.word	0x0800c4c1
 800c434:	0800c4c1 	.word	0x0800c4c1
 800c438:	0800c4c1 	.word	0x0800c4c1
 800c43c:	0800c4c1 	.word	0x0800c4c1
 800c440:	0800c4c1 	.word	0x0800c4c1
 800c444:	0800c4c1 	.word	0x0800c4c1
 800c448:	0800c4c1 	.word	0x0800c4c1
 800c44c:	0800c4c1 	.word	0x0800c4c1
 800c450:	0800c4c1 	.word	0x0800c4c1
 800c454:	0800c4c1 	.word	0x0800c4c1
 800c458:	0800c4c1 	.word	0x0800c4c1
 800c45c:	0800c4c1 	.word	0x0800c4c1
 800c460:	0800c4c1 	.word	0x0800c4c1
 800c464:	0800c4c1 	.word	0x0800c4c1
 800c468:	0800c4c1 	.word	0x0800c4c1
 800c46c:	0800c4c1 	.word	0x0800c4c1
 800c470:	0800c4c1 	.word	0x0800c4c1
 800c474:	0800c4c1 	.word	0x0800c4c1
 800c478:	0800c4c1 	.word	0x0800c4c1
 800c47c:	0800c4c1 	.word	0x0800c4c1
 800c480:	0800c4c1 	.word	0x0800c4c1
 800c484:	0800c4c1 	.word	0x0800c4c1
 800c488:	0800c4c1 	.word	0x0800c4c1
 800c48c:	0800c4c1 	.word	0x0800c4c1
 800c490:	0800c4c1 	.word	0x0800c4c1
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c4c1 	.word	0x0800c4c1
 800c4a8:	0800c4c1 	.word	0x0800c4c1
 800c4ac:	0800c4c1 	.word	0x0800c4c1
 800c4b0:	0800c4c1 	.word	0x0800c4c1
 800c4b4:	0800c4c1 	.word	0x0800c4c1
 800c4b8:	0800c4c1 	.word	0x0800c4c1
 800c4bc:	0800c4c1 	.word	0x0800c4c1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4c0:	bf00      	nop
  }

  return (USBD_OK);
 800c4c2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	4805      	ldr	r0, [pc, #20]	@ (800c4f4 <CDC_Receive_HS+0x24>)
 800c4de:	f7fe fb6f 	bl	800abc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800c4e2:	4804      	ldr	r0, [pc, #16]	@ (800c4f4 <CDC_Receive_HS+0x24>)
 800c4e4:	f7fe fbca 	bl	800ac7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c4e8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	240003fc 	.word	0x240003fc

0800c4f8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800c508:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <CDC_Transmit_HS+0x48>)
 800c50a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c50e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e00b      	b.n	800c536 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800c51e:	887b      	ldrh	r3, [r7, #2]
 800c520:	461a      	mov	r2, r3
 800c522:	6879      	ldr	r1, [r7, #4]
 800c524:	4806      	ldr	r0, [pc, #24]	@ (800c540 <CDC_Transmit_HS+0x48>)
 800c526:	f7fe fb29 	bl	800ab7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800c52a:	4805      	ldr	r0, [pc, #20]	@ (800c540 <CDC_Transmit_HS+0x48>)
 800c52c:	f7fe fb66 	bl	800abfc <USBD_CDC_TransmitPacket>
 800c530:	4603      	mov	r3, r0
 800c532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	240003fc 	.word	0x240003fc

0800c544 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800c556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	371c      	adds	r7, #28
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
	...

0800c568 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	6039      	str	r1, [r7, #0]
 800c572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2212      	movs	r2, #18
 800c578:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c57a:	4b03      	ldr	r3, [pc, #12]	@ (800c588 <USBD_HS_DeviceDescriptor+0x20>)
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	240000d0 	.word	0x240000d0

0800c58c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	4603      	mov	r3, r0
 800c594:	6039      	str	r1, [r7, #0]
 800c596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2204      	movs	r2, #4
 800c59c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c59e:	4b03      	ldr	r3, [pc, #12]	@ (800c5ac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	240000e4 	.word	0x240000e4

0800c5b0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	6039      	str	r1, [r7, #0]
 800c5ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	4907      	ldr	r1, [pc, #28]	@ (800c5e4 <USBD_HS_ProductStrDescriptor+0x34>)
 800c5c6:	4808      	ldr	r0, [pc, #32]	@ (800c5e8 <USBD_HS_ProductStrDescriptor+0x38>)
 800c5c8:	f7ff fdea 	bl	800c1a0 <USBD_GetString>
 800c5cc:	e004      	b.n	800c5d8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	4904      	ldr	r1, [pc, #16]	@ (800c5e4 <USBD_HS_ProductStrDescriptor+0x34>)
 800c5d2:	4805      	ldr	r0, [pc, #20]	@ (800c5e8 <USBD_HS_ProductStrDescriptor+0x38>)
 800c5d4:	f7ff fde4 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5d8:	4b02      	ldr	r3, [pc, #8]	@ (800c5e4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	240016d8 	.word	0x240016d8
 800c5e8:	0800dde4 	.word	0x0800dde4

0800c5ec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	4904      	ldr	r1, [pc, #16]	@ (800c60c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c5fc:	4804      	ldr	r0, [pc, #16]	@ (800c610 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c5fe:	f7ff fdcf 	bl	800c1a0 <USBD_GetString>
  return USBD_StrDesc;
 800c602:	4b02      	ldr	r3, [pc, #8]	@ (800c60c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	240016d8 	.word	0x240016d8
 800c610:	0800ddfc 	.word	0x0800ddfc

0800c614 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	6039      	str	r1, [r7, #0]
 800c61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	221a      	movs	r2, #26
 800c624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c626:	f000 f843 	bl	800c6b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c62a:	4b02      	ldr	r3, [pc, #8]	@ (800c634 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	240000e8 	.word	0x240000e8

0800c638 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c644:	79fb      	ldrb	r3, [r7, #7]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d105      	bne.n	800c656 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	4907      	ldr	r1, [pc, #28]	@ (800c66c <USBD_HS_ConfigStrDescriptor+0x34>)
 800c64e:	4808      	ldr	r0, [pc, #32]	@ (800c670 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c650:	f7ff fda6 	bl	800c1a0 <USBD_GetString>
 800c654:	e004      	b.n	800c660 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	4904      	ldr	r1, [pc, #16]	@ (800c66c <USBD_HS_ConfigStrDescriptor+0x34>)
 800c65a:	4805      	ldr	r0, [pc, #20]	@ (800c670 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c65c:	f7ff fda0 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c660:	4b02      	ldr	r3, [pc, #8]	@ (800c66c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	240016d8 	.word	0x240016d8
 800c670:	0800de10 	.word	0x0800de10

0800c674 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d105      	bne.n	800c692 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	4907      	ldr	r1, [pc, #28]	@ (800c6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c68a:	4808      	ldr	r0, [pc, #32]	@ (800c6ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c68c:	f7ff fd88 	bl	800c1a0 <USBD_GetString>
 800c690:	e004      	b.n	800c69c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	4904      	ldr	r1, [pc, #16]	@ (800c6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c696:	4805      	ldr	r0, [pc, #20]	@ (800c6ac <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c698:	f7ff fd82 	bl	800c1a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c69c:	4b02      	ldr	r3, [pc, #8]	@ (800c6a8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	240016d8 	.word	0x240016d8
 800c6ac:	0800de1c 	.word	0x0800de1c

0800c6b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f4 <Get_SerialNum+0x44>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800c6f8 <Get_SerialNum+0x48>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c6fc <Get_SerialNum+0x4c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d009      	beq.n	800c6ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c6d6:	2208      	movs	r2, #8
 800c6d8:	4909      	ldr	r1, [pc, #36]	@ (800c700 <Get_SerialNum+0x50>)
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f000 f814 	bl	800c708 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c6e0:	2204      	movs	r2, #4
 800c6e2:	4908      	ldr	r1, [pc, #32]	@ (800c704 <Get_SerialNum+0x54>)
 800c6e4:	68b8      	ldr	r0, [r7, #8]
 800c6e6:	f000 f80f 	bl	800c708 <IntToUnicode>
  }
}
 800c6ea:	bf00      	nop
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	08fff800 	.word	0x08fff800
 800c6f8:	08fff804 	.word	0x08fff804
 800c6fc:	08fff808 	.word	0x08fff808
 800c700:	240000ea 	.word	0x240000ea
 800c704:	240000fa 	.word	0x240000fa

0800c708 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]
 800c71e:	e027      	b.n	800c770 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	0f1b      	lsrs	r3, r3, #28
 800c724:	2b09      	cmp	r3, #9
 800c726:	d80b      	bhi.n	800c740 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	0f1b      	lsrs	r3, r3, #28
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	7dfb      	ldrb	r3, [r7, #23]
 800c730:	005b      	lsls	r3, r3, #1
 800c732:	4619      	mov	r1, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	440b      	add	r3, r1
 800c738:	3230      	adds	r2, #48	@ 0x30
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e00a      	b.n	800c756 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	0f1b      	lsrs	r3, r3, #28
 800c744:	b2da      	uxtb	r2, r3
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	4619      	mov	r1, r3
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	440b      	add	r3, r1
 800c750:	3237      	adds	r2, #55	@ 0x37
 800c752:	b2d2      	uxtb	r2, r2
 800c754:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	011b      	lsls	r3, r3, #4
 800c75a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	005b      	lsls	r3, r3, #1
 800c760:	3301      	adds	r3, #1
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	4413      	add	r3, r2
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	3301      	adds	r3, #1
 800c76e:	75fb      	strb	r3, [r7, #23]
 800c770:	7dfa      	ldrb	r2, [r7, #23]
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	429a      	cmp	r2, r3
 800c776:	d3d3      	bcc.n	800c720 <IntToUnicode+0x18>
  }
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
	...

0800c788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b0ba      	sub	sp, #232	@ 0xe8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c790:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	605a      	str	r2, [r3, #4]
 800c79a:	609a      	str	r2, [r3, #8]
 800c79c:	60da      	str	r2, [r3, #12]
 800c79e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c7a0:	f107 0310 	add.w	r3, r7, #16
 800c7a4:	22c0      	movs	r2, #192	@ 0xc0
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fc78 	bl	800d09e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a45      	ldr	r2, [pc, #276]	@ (800c8c8 <HAL_PCD_MspInit+0x140>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	f040 8082 	bne.w	800c8be <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c7ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c7be:	f04f 0300 	mov.w	r3, #0
 800c7c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c7c6:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800c7ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c7ce:	f107 0310 	add.w	r3, r7, #16
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f8 fed2 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800c7de:	f7f4 fd09 	bl	80011f4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800c7e2:	f7f7 ff13 	bl	800460c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7e6:	4b39      	ldr	r3, [pc, #228]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c7e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c7ec:	4a37      	ldr	r2, [pc, #220]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c7ee:	f043 0301 	orr.w	r3, r3, #1
 800c7f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800c7f6:	4b35      	ldr	r3, [pc, #212]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c7f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c80c:	2300      	movs	r3, #0
 800c80e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c812:	2300      	movs	r3, #0
 800c814:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c818:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c81c:	4619      	mov	r1, r3
 800c81e:	482c      	ldr	r0, [pc, #176]	@ (800c8d0 <HAL_PCD_MspInit+0x148>)
 800c820:	f7f5 fa94 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800c824:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c828:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c82c:	2302      	movs	r3, #2
 800c82e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c832:	2300      	movs	r3, #0
 800c834:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c838:	2300      	movs	r3, #0
 800c83a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c83e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c842:	4619      	mov	r1, r3
 800c844:	4822      	ldr	r0, [pc, #136]	@ (800c8d0 <HAL_PCD_MspInit+0x148>)
 800c846:	f7f5 fa81 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c84a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c84e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c852:	2302      	movs	r3, #2
 800c854:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c858:	2301      	movs	r3, #1
 800c85a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c85e:	2300      	movs	r3, #0
 800c860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c864:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800c868:	4619      	mov	r1, r3
 800c86a:	4819      	ldr	r0, [pc, #100]	@ (800c8d0 <HAL_PCD_MspInit+0x148>)
 800c86c:	f7f5 fa6e 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c870:	4b16      	ldr	r3, [pc, #88]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c872:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c876:	4a15      	ldr	r2, [pc, #84]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c87c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800c880:	4b12      	ldr	r3, [pc, #72]	@ (800c8cc <HAL_PCD_MspInit+0x144>)
 800c882:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800c886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c88a:	60bb      	str	r3, [r7, #8]
 800c88c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800c88e:	2200      	movs	r2, #0
 800c890:	2100      	movs	r1, #0
 800c892:	204a      	movs	r0, #74	@ 0x4a
 800c894:	f7f5 f9ad 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800c898:	204a      	movs	r0, #74	@ 0x4a
 800c89a:	f7f5 f9c4 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800c89e:	2200      	movs	r2, #0
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	204b      	movs	r0, #75	@ 0x4b
 800c8a4:	f7f5 f9a5 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800c8a8:	204b      	movs	r0, #75	@ 0x4b
 800c8aa:	f7f5 f9bc 	bl	8001c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	204d      	movs	r0, #77	@ 0x4d
 800c8b4:	f7f5 f99d 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c8b8:	204d      	movs	r0, #77	@ 0x4d
 800c8ba:	f7f5 f9b4 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c8be:	bf00      	nop
 800c8c0:	37e8      	adds	r7, #232	@ 0xe8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	40040000 	.word	0x40040000
 800c8cc:	58024400 	.word	0x58024400
 800c8d0:	58020000 	.word	0x58020000

0800c8d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7fe facb 	bl	800ae86 <USBD_LL_SetupStage>
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c90a:	78fa      	ldrb	r2, [r7, #3]
 800c90c:	6879      	ldr	r1, [r7, #4]
 800c90e:	4613      	mov	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	440b      	add	r3, r1
 800c918:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	78fb      	ldrb	r3, [r7, #3]
 800c920:	4619      	mov	r1, r3
 800c922:	f7fe fb05 	bl	800af30 <USBD_LL_DataOutStage>
}
 800c926:	bf00      	nop
 800c928:	3708      	adds	r7, #8
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	460b      	mov	r3, r1
 800c938:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	4613      	mov	r3, r2
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	440b      	add	r3, r1
 800c94e:	3320      	adds	r3, #32
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	4619      	mov	r1, r3
 800c956:	f7fe fb9e 	bl	800b096 <USBD_LL_DataInStage>
}
 800c95a:	bf00      	nop
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe fcd8 	bl	800b326 <USBD_LL_SOF>
}
 800c976:	bf00      	nop
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c986:	2301      	movs	r3, #1
 800c988:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	79db      	ldrb	r3, [r3, #7]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c992:	2300      	movs	r3, #0
 800c994:	73fb      	strb	r3, [r7, #15]
 800c996:	e008      	b.n	800c9aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	79db      	ldrb	r3, [r3, #7]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d102      	bne.n	800c9a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	73fb      	strb	r3, [r7, #15]
 800c9a4:	e001      	b.n	800c9aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9a6:	f7f4 fc25 	bl	80011f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9b0:	7bfa      	ldrb	r2, [r7, #15]
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fe fc72 	bl	800b29e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fe fc1a 	bl	800b1fa <USBD_LL_Reset>
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fc6d 	bl	800b2be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	6812      	ldr	r2, [r2, #0]
 800c9f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c9f6:	f043 0301 	orr.w	r3, r3, #1
 800c9fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7adb      	ldrb	r3, [r3, #11]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d005      	beq.n	800ca10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca04:	4b04      	ldr	r3, [pc, #16]	@ (800ca18 <HAL_PCD_SuspendCallback+0x48>)
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	4a03      	ldr	r2, [pc, #12]	@ (800ca18 <HAL_PCD_SuspendCallback+0x48>)
 800ca0a:	f043 0306 	orr.w	r3, r3, #6
 800ca0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	e000ed00 	.word	0xe000ed00

0800ca1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fe fc63 	bl	800b2f6 <USBD_LL_Resume>
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca4a:	78fa      	ldrb	r2, [r7, #3]
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fcbb 	bl	800b3ca <USBD_LL_IsoOUTIncomplete>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca6e:	78fa      	ldrb	r2, [r7, #3]
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fe fc77 	bl	800b366 <USBD_LL_IsoINIncomplete>
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe fccd 	bl	800b42e <USBD_LL_DevConnected>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fe fcca 	bl	800b444 <USBD_LL_DevDisconnected>
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d140      	bne.n	800cb4a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800cac8:	4a22      	ldr	r2, [pc, #136]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a20      	ldr	r2, [pc, #128]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cad4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cad8:	4b1e      	ldr	r3, [pc, #120]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cada:	4a1f      	ldr	r2, [pc, #124]	@ (800cb58 <USBD_LL_Init+0xa0>)
 800cadc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800cade:	4b1d      	ldr	r3, [pc, #116]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cae0:	2209      	movs	r2, #9
 800cae2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800cae4:	4b1b      	ldr	r3, [pc, #108]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cae6:	2202      	movs	r2, #2
 800cae8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800caea:	4b1a      	ldr	r3, [pc, #104]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800caec:	2200      	movs	r2, #0
 800caee:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800caf0:	4b18      	ldr	r3, [pc, #96]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800caf2:	2202      	movs	r2, #2
 800caf4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800caf6:	4b17      	ldr	r3, [pc, #92]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cafc:	4b15      	ldr	r3, [pc, #84]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800cb02:	4b14      	ldr	r3, [pc, #80]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800cb08:	4b12      	ldr	r3, [pc, #72]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800cb0e:	4b11      	ldr	r3, [pc, #68]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cb14:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800cb1a:	480e      	ldr	r0, [pc, #56]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb1c:	f7f6 fa9c 	bl	8003058 <HAL_PCD_Init>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800cb26:	f7f4 fb65 	bl	80011f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800cb2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cb2e:	4809      	ldr	r0, [pc, #36]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb30:	f7f7 fcf1 	bl	8004516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800cb34:	2280      	movs	r2, #128	@ 0x80
 800cb36:	2100      	movs	r1, #0
 800cb38:	4806      	ldr	r0, [pc, #24]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb3a:	f7f7 fca5 	bl	8004488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800cb3e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800cb42:	2101      	movs	r1, #1
 800cb44:	4803      	ldr	r0, [pc, #12]	@ (800cb54 <USBD_LL_Init+0x9c>)
 800cb46:	f7f7 fc9f 	bl	8004488 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	240018d8 	.word	0x240018d8
 800cb58:	40040000 	.word	0x40040000

0800cb5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f6 fb7c 	bl	8003270 <HAL_PCD_Start>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f000 f942 	bl	800ce08 <USBD_Get_USB_Status>
 800cb84:	4603      	mov	r3, r0
 800cb86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	461a      	mov	r2, r3
 800cba0:	4603      	mov	r3, r0
 800cba2:	70fb      	strb	r3, [r7, #3]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70bb      	strb	r3, [r7, #2]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cbba:	78bb      	ldrb	r3, [r7, #2]
 800cbbc:	883a      	ldrh	r2, [r7, #0]
 800cbbe:	78f9      	ldrb	r1, [r7, #3]
 800cbc0:	f7f7 f87d 	bl	8003cbe <HAL_PCD_EP_Open>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f91c 	bl	800ce08 <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbf8:	78fa      	ldrb	r2, [r7, #3]
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f7 f8c8 	bl	8003d92 <HAL_PCD_EP_Close>
 800cc02:	4603      	mov	r3, r0
 800cc04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 f8fd 	bl	800ce08 <USBD_Get_USB_Status>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7f7 f980 	bl	8003f40 <HAL_PCD_EP_SetStall>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f8de 	bl	800ce08 <USBD_Get_USB_Status>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc74:	78fa      	ldrb	r2, [r7, #3]
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7f7 f9c4 	bl	8004006 <HAL_PCD_EP_ClrStall>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f8bf 	bl	800ce08 <USBD_Get_USB_Status>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	da0b      	bge.n	800cccc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccb4:	78fb      	ldrb	r3, [r7, #3]
 800ccb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	3316      	adds	r3, #22
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	e00b      	b.n	800cce4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccd2:	68f9      	ldr	r1, [r7, #12]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	4413      	add	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	440b      	add	r3, r1
 800ccde:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd0a:	78fa      	ldrb	r2, [r7, #3]
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7f6 ffb1 	bl	8003c76 <HAL_PCD_SetAddress>
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 f874 	bl	800ce08 <USBD_Get_USB_Status>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b086      	sub	sp, #24
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60f8      	str	r0, [r7, #12]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd4c:	7af9      	ldrb	r1, [r7, #11]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	f7f7 f8bb 	bl	8003ecc <HAL_PCD_EP_Transmit>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 f853 	bl	800ce08 <USBD_Get_USB_Status>
 800cd62:	4603      	mov	r3, r0
 800cd64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd66:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	607a      	str	r2, [r7, #4]
 800cd7a:	603b      	str	r3, [r7, #0]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cd8e:	7af9      	ldrb	r1, [r7, #11]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	f7f7 f847 	bl	8003e26 <HAL_PCD_EP_Receive>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f832 	bl	800ce08 <USBD_Get_USB_Status>
 800cda4:	4603      	mov	r3, r0
 800cda6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cda8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7f7 f867 	bl	8003e9c <HAL_PCD_EP_GetRxCount>
 800cdce:	4603      	mov	r3, r0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cde0:	4b03      	ldr	r3, [pc, #12]	@ (800cdf0 <USBD_static_malloc+0x18>)
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	24001dbc 	.word	0x24001dbc

0800cdf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d817      	bhi.n	800ce4c <USBD_Get_USB_Status+0x44>
 800ce1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce24 <USBD_Get_USB_Status+0x1c>)
 800ce1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce22:	bf00      	nop
 800ce24:	0800ce35 	.word	0x0800ce35
 800ce28:	0800ce3b 	.word	0x0800ce3b
 800ce2c:	0800ce41 	.word	0x0800ce41
 800ce30:	0800ce47 	.word	0x0800ce47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73fb      	strb	r3, [r7, #15]
    break;
 800ce38:	e00b      	b.n	800ce52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce3e:	e008      	b.n	800ce52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce40:	2301      	movs	r3, #1
 800ce42:	73fb      	strb	r3, [r7, #15]
    break;
 800ce44:	e005      	b.n	800ce52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce46:	2303      	movs	r3, #3
 800ce48:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4a:	e002      	b.n	800ce52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce50:	bf00      	nop
  }
  return usb_status;
 800ce52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <std>:
 800ce60:	2300      	movs	r3, #0
 800ce62:	b510      	push	{r4, lr}
 800ce64:	4604      	mov	r4, r0
 800ce66:	e9c0 3300 	strd	r3, r3, [r0]
 800ce6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce6e:	6083      	str	r3, [r0, #8]
 800ce70:	8181      	strh	r1, [r0, #12]
 800ce72:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce74:	81c2      	strh	r2, [r0, #14]
 800ce76:	6183      	str	r3, [r0, #24]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	2208      	movs	r2, #8
 800ce7c:	305c      	adds	r0, #92	@ 0x5c
 800ce7e:	f000 f90e 	bl	800d09e <memset>
 800ce82:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb8 <std+0x58>)
 800ce84:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce86:	4b0d      	ldr	r3, [pc, #52]	@ (800cebc <std+0x5c>)
 800ce88:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cec0 <std+0x60>)
 800ce8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cec4 <std+0x64>)
 800ce90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce92:	4b0d      	ldr	r3, [pc, #52]	@ (800cec8 <std+0x68>)
 800ce94:	6224      	str	r4, [r4, #32]
 800ce96:	429c      	cmp	r4, r3
 800ce98:	d006      	beq.n	800cea8 <std+0x48>
 800ce9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce9e:	4294      	cmp	r4, r2
 800cea0:	d002      	beq.n	800cea8 <std+0x48>
 800cea2:	33d0      	adds	r3, #208	@ 0xd0
 800cea4:	429c      	cmp	r4, r3
 800cea6:	d105      	bne.n	800ceb4 <std+0x54>
 800cea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb0:	f000 b96e 	b.w	800d190 <__retarget_lock_init_recursive>
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	bf00      	nop
 800ceb8:	0800d019 	.word	0x0800d019
 800cebc:	0800d03b 	.word	0x0800d03b
 800cec0:	0800d073 	.word	0x0800d073
 800cec4:	0800d097 	.word	0x0800d097
 800cec8:	24001fdc 	.word	0x24001fdc

0800cecc <stdio_exit_handler>:
 800cecc:	4a02      	ldr	r2, [pc, #8]	@ (800ced8 <stdio_exit_handler+0xc>)
 800cece:	4903      	ldr	r1, [pc, #12]	@ (800cedc <stdio_exit_handler+0x10>)
 800ced0:	4803      	ldr	r0, [pc, #12]	@ (800cee0 <stdio_exit_handler+0x14>)
 800ced2:	f000 b869 	b.w	800cfa8 <_fwalk_sglue>
 800ced6:	bf00      	nop
 800ced8:	24000104 	.word	0x24000104
 800cedc:	0800da31 	.word	0x0800da31
 800cee0:	24000114 	.word	0x24000114

0800cee4 <cleanup_stdio>:
 800cee4:	6841      	ldr	r1, [r0, #4]
 800cee6:	4b0c      	ldr	r3, [pc, #48]	@ (800cf18 <cleanup_stdio+0x34>)
 800cee8:	4299      	cmp	r1, r3
 800ceea:	b510      	push	{r4, lr}
 800ceec:	4604      	mov	r4, r0
 800ceee:	d001      	beq.n	800cef4 <cleanup_stdio+0x10>
 800cef0:	f000 fd9e 	bl	800da30 <_fflush_r>
 800cef4:	68a1      	ldr	r1, [r4, #8]
 800cef6:	4b09      	ldr	r3, [pc, #36]	@ (800cf1c <cleanup_stdio+0x38>)
 800cef8:	4299      	cmp	r1, r3
 800cefa:	d002      	beq.n	800cf02 <cleanup_stdio+0x1e>
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fd97 	bl	800da30 <_fflush_r>
 800cf02:	68e1      	ldr	r1, [r4, #12]
 800cf04:	4b06      	ldr	r3, [pc, #24]	@ (800cf20 <cleanup_stdio+0x3c>)
 800cf06:	4299      	cmp	r1, r3
 800cf08:	d004      	beq.n	800cf14 <cleanup_stdio+0x30>
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf10:	f000 bd8e 	b.w	800da30 <_fflush_r>
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	bf00      	nop
 800cf18:	24001fdc 	.word	0x24001fdc
 800cf1c:	24002044 	.word	0x24002044
 800cf20:	240020ac 	.word	0x240020ac

0800cf24 <global_stdio_init.part.0>:
 800cf24:	b510      	push	{r4, lr}
 800cf26:	4b0b      	ldr	r3, [pc, #44]	@ (800cf54 <global_stdio_init.part.0+0x30>)
 800cf28:	4c0b      	ldr	r4, [pc, #44]	@ (800cf58 <global_stdio_init.part.0+0x34>)
 800cf2a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf5c <global_stdio_init.part.0+0x38>)
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	4620      	mov	r0, r4
 800cf30:	2200      	movs	r2, #0
 800cf32:	2104      	movs	r1, #4
 800cf34:	f7ff ff94 	bl	800ce60 <std>
 800cf38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	2109      	movs	r1, #9
 800cf40:	f7ff ff8e 	bl	800ce60 <std>
 800cf44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf48:	2202      	movs	r2, #2
 800cf4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf4e:	2112      	movs	r1, #18
 800cf50:	f7ff bf86 	b.w	800ce60 <std>
 800cf54:	24002114 	.word	0x24002114
 800cf58:	24001fdc 	.word	0x24001fdc
 800cf5c:	0800cecd 	.word	0x0800cecd

0800cf60 <__sfp_lock_acquire>:
 800cf60:	4801      	ldr	r0, [pc, #4]	@ (800cf68 <__sfp_lock_acquire+0x8>)
 800cf62:	f000 b916 	b.w	800d192 <__retarget_lock_acquire_recursive>
 800cf66:	bf00      	nop
 800cf68:	2400211d 	.word	0x2400211d

0800cf6c <__sfp_lock_release>:
 800cf6c:	4801      	ldr	r0, [pc, #4]	@ (800cf74 <__sfp_lock_release+0x8>)
 800cf6e:	f000 b911 	b.w	800d194 <__retarget_lock_release_recursive>
 800cf72:	bf00      	nop
 800cf74:	2400211d 	.word	0x2400211d

0800cf78 <__sinit>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	f7ff fff0 	bl	800cf60 <__sfp_lock_acquire>
 800cf80:	6a23      	ldr	r3, [r4, #32]
 800cf82:	b11b      	cbz	r3, 800cf8c <__sinit+0x14>
 800cf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf88:	f7ff bff0 	b.w	800cf6c <__sfp_lock_release>
 800cf8c:	4b04      	ldr	r3, [pc, #16]	@ (800cfa0 <__sinit+0x28>)
 800cf8e:	6223      	str	r3, [r4, #32]
 800cf90:	4b04      	ldr	r3, [pc, #16]	@ (800cfa4 <__sinit+0x2c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1f5      	bne.n	800cf84 <__sinit+0xc>
 800cf98:	f7ff ffc4 	bl	800cf24 <global_stdio_init.part.0>
 800cf9c:	e7f2      	b.n	800cf84 <__sinit+0xc>
 800cf9e:	bf00      	nop
 800cfa0:	0800cee5 	.word	0x0800cee5
 800cfa4:	24002114 	.word	0x24002114

0800cfa8 <_fwalk_sglue>:
 800cfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfac:	4607      	mov	r7, r0
 800cfae:	4688      	mov	r8, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfb8:	f1b9 0901 	subs.w	r9, r9, #1
 800cfbc:	d505      	bpl.n	800cfca <_fwalk_sglue+0x22>
 800cfbe:	6824      	ldr	r4, [r4, #0]
 800cfc0:	2c00      	cmp	r4, #0
 800cfc2:	d1f7      	bne.n	800cfb4 <_fwalk_sglue+0xc>
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d907      	bls.n	800cfe0 <_fwalk_sglue+0x38>
 800cfd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	d003      	beq.n	800cfe0 <_fwalk_sglue+0x38>
 800cfd8:	4629      	mov	r1, r5
 800cfda:	4638      	mov	r0, r7
 800cfdc:	47c0      	blx	r8
 800cfde:	4306      	orrs	r6, r0
 800cfe0:	3568      	adds	r5, #104	@ 0x68
 800cfe2:	e7e9      	b.n	800cfb8 <_fwalk_sglue+0x10>

0800cfe4 <iprintf>:
 800cfe4:	b40f      	push	{r0, r1, r2, r3}
 800cfe6:	b507      	push	{r0, r1, r2, lr}
 800cfe8:	4906      	ldr	r1, [pc, #24]	@ (800d004 <iprintf+0x20>)
 800cfea:	ab04      	add	r3, sp, #16
 800cfec:	6808      	ldr	r0, [r1, #0]
 800cfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff2:	6881      	ldr	r1, [r0, #8]
 800cff4:	9301      	str	r3, [sp, #4]
 800cff6:	f000 f9f1 	bl	800d3dc <_vfiprintf_r>
 800cffa:	b003      	add	sp, #12
 800cffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d000:	b004      	add	sp, #16
 800d002:	4770      	bx	lr
 800d004:	24000110 	.word	0x24000110

0800d008 <putchar>:
 800d008:	4b02      	ldr	r3, [pc, #8]	@ (800d014 <putchar+0xc>)
 800d00a:	4601      	mov	r1, r0
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	6882      	ldr	r2, [r0, #8]
 800d010:	f000 bd36 	b.w	800da80 <_putc_r>
 800d014:	24000110 	.word	0x24000110

0800d018 <__sread>:
 800d018:	b510      	push	{r4, lr}
 800d01a:	460c      	mov	r4, r1
 800d01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d020:	f000 f868 	bl	800d0f4 <_read_r>
 800d024:	2800      	cmp	r0, #0
 800d026:	bfab      	itete	ge
 800d028:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d02a:	89a3      	ldrhlt	r3, [r4, #12]
 800d02c:	181b      	addge	r3, r3, r0
 800d02e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d032:	bfac      	ite	ge
 800d034:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d036:	81a3      	strhlt	r3, [r4, #12]
 800d038:	bd10      	pop	{r4, pc}

0800d03a <__swrite>:
 800d03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d03e:	461f      	mov	r7, r3
 800d040:	898b      	ldrh	r3, [r1, #12]
 800d042:	05db      	lsls	r3, r3, #23
 800d044:	4605      	mov	r5, r0
 800d046:	460c      	mov	r4, r1
 800d048:	4616      	mov	r6, r2
 800d04a:	d505      	bpl.n	800d058 <__swrite+0x1e>
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	2302      	movs	r3, #2
 800d052:	2200      	movs	r2, #0
 800d054:	f000 f83c 	bl	800d0d0 <_lseek_r>
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d05e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d062:	81a3      	strh	r3, [r4, #12]
 800d064:	4632      	mov	r2, r6
 800d066:	463b      	mov	r3, r7
 800d068:	4628      	mov	r0, r5
 800d06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d06e:	f000 b853 	b.w	800d118 <_write_r>

0800d072 <__sseek>:
 800d072:	b510      	push	{r4, lr}
 800d074:	460c      	mov	r4, r1
 800d076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07a:	f000 f829 	bl	800d0d0 <_lseek_r>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	bf15      	itete	ne
 800d084:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d086:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d08a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d08e:	81a3      	strheq	r3, [r4, #12]
 800d090:	bf18      	it	ne
 800d092:	81a3      	strhne	r3, [r4, #12]
 800d094:	bd10      	pop	{r4, pc}

0800d096 <__sclose>:
 800d096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d09a:	f000 b809 	b.w	800d0b0 <_close_r>

0800d09e <memset>:
 800d09e:	4402      	add	r2, r0
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d100      	bne.n	800d0a8 <memset+0xa>
 800d0a6:	4770      	bx	lr
 800d0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800d0ac:	e7f9      	b.n	800d0a2 <memset+0x4>
	...

0800d0b0 <_close_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d06      	ldr	r5, [pc, #24]	@ (800d0cc <_close_r+0x1c>)
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	4608      	mov	r0, r1
 800d0ba:	602b      	str	r3, [r5, #0]
 800d0bc:	f7f4 fa87 	bl	80015ce <_close>
 800d0c0:	1c43      	adds	r3, r0, #1
 800d0c2:	d102      	bne.n	800d0ca <_close_r+0x1a>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	b103      	cbz	r3, 800d0ca <_close_r+0x1a>
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	24002118 	.word	0x24002118

0800d0d0 <_lseek_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4d07      	ldr	r5, [pc, #28]	@ (800d0f0 <_lseek_r+0x20>)
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	4608      	mov	r0, r1
 800d0d8:	4611      	mov	r1, r2
 800d0da:	2200      	movs	r2, #0
 800d0dc:	602a      	str	r2, [r5, #0]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	f7f4 fa9c 	bl	800161c <_lseek>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_lseek_r+0x1e>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_lseek_r+0x1e>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	24002118 	.word	0x24002118

0800d0f4 <_read_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d07      	ldr	r5, [pc, #28]	@ (800d114 <_read_r+0x20>)
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	2200      	movs	r2, #0
 800d100:	602a      	str	r2, [r5, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	f7f4 fa2a 	bl	800155c <_read>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	d102      	bne.n	800d112 <_read_r+0x1e>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	b103      	cbz	r3, 800d112 <_read_r+0x1e>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	bd38      	pop	{r3, r4, r5, pc}
 800d114:	24002118 	.word	0x24002118

0800d118 <_write_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4d07      	ldr	r5, [pc, #28]	@ (800d138 <_write_r+0x20>)
 800d11c:	4604      	mov	r4, r0
 800d11e:	4608      	mov	r0, r1
 800d120:	4611      	mov	r1, r2
 800d122:	2200      	movs	r2, #0
 800d124:	602a      	str	r2, [r5, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	f7f4 fa35 	bl	8001596 <_write>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_write_r+0x1e>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_write_r+0x1e>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	24002118 	.word	0x24002118

0800d13c <__errno>:
 800d13c:	4b01      	ldr	r3, [pc, #4]	@ (800d144 <__errno+0x8>)
 800d13e:	6818      	ldr	r0, [r3, #0]
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	24000110 	.word	0x24000110

0800d148 <__libc_init_array>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	4d0d      	ldr	r5, [pc, #52]	@ (800d180 <__libc_init_array+0x38>)
 800d14c:	4c0d      	ldr	r4, [pc, #52]	@ (800d184 <__libc_init_array+0x3c>)
 800d14e:	1b64      	subs	r4, r4, r5
 800d150:	10a4      	asrs	r4, r4, #2
 800d152:	2600      	movs	r6, #0
 800d154:	42a6      	cmp	r6, r4
 800d156:	d109      	bne.n	800d16c <__libc_init_array+0x24>
 800d158:	4d0b      	ldr	r5, [pc, #44]	@ (800d188 <__libc_init_array+0x40>)
 800d15a:	4c0c      	ldr	r4, [pc, #48]	@ (800d18c <__libc_init_array+0x44>)
 800d15c:	f000 fdec 	bl	800dd38 <_init>
 800d160:	1b64      	subs	r4, r4, r5
 800d162:	10a4      	asrs	r4, r4, #2
 800d164:	2600      	movs	r6, #0
 800d166:	42a6      	cmp	r6, r4
 800d168:	d105      	bne.n	800d176 <__libc_init_array+0x2e>
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d170:	4798      	blx	r3
 800d172:	3601      	adds	r6, #1
 800d174:	e7ee      	b.n	800d154 <__libc_init_array+0xc>
 800d176:	f855 3b04 	ldr.w	r3, [r5], #4
 800d17a:	4798      	blx	r3
 800d17c:	3601      	adds	r6, #1
 800d17e:	e7f2      	b.n	800d166 <__libc_init_array+0x1e>
 800d180:	0800de78 	.word	0x0800de78
 800d184:	0800de78 	.word	0x0800de78
 800d188:	0800de78 	.word	0x0800de78
 800d18c:	0800de7c 	.word	0x0800de7c

0800d190 <__retarget_lock_init_recursive>:
 800d190:	4770      	bx	lr

0800d192 <__retarget_lock_acquire_recursive>:
 800d192:	4770      	bx	lr

0800d194 <__retarget_lock_release_recursive>:
 800d194:	4770      	bx	lr
	...

0800d198 <_free_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4605      	mov	r5, r0
 800d19c:	2900      	cmp	r1, #0
 800d19e:	d041      	beq.n	800d224 <_free_r+0x8c>
 800d1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a4:	1f0c      	subs	r4, r1, #4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	bfb8      	it	lt
 800d1aa:	18e4      	addlt	r4, r4, r3
 800d1ac:	f000 f8e0 	bl	800d370 <__malloc_lock>
 800d1b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d228 <_free_r+0x90>)
 800d1b2:	6813      	ldr	r3, [r2, #0]
 800d1b4:	b933      	cbnz	r3, 800d1c4 <_free_r+0x2c>
 800d1b6:	6063      	str	r3, [r4, #4]
 800d1b8:	6014      	str	r4, [r2, #0]
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c0:	f000 b8dc 	b.w	800d37c <__malloc_unlock>
 800d1c4:	42a3      	cmp	r3, r4
 800d1c6:	d908      	bls.n	800d1da <_free_r+0x42>
 800d1c8:	6820      	ldr	r0, [r4, #0]
 800d1ca:	1821      	adds	r1, r4, r0
 800d1cc:	428b      	cmp	r3, r1
 800d1ce:	bf01      	itttt	eq
 800d1d0:	6819      	ldreq	r1, [r3, #0]
 800d1d2:	685b      	ldreq	r3, [r3, #4]
 800d1d4:	1809      	addeq	r1, r1, r0
 800d1d6:	6021      	streq	r1, [r4, #0]
 800d1d8:	e7ed      	b.n	800d1b6 <_free_r+0x1e>
 800d1da:	461a      	mov	r2, r3
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	b10b      	cbz	r3, 800d1e4 <_free_r+0x4c>
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	d9fa      	bls.n	800d1da <_free_r+0x42>
 800d1e4:	6811      	ldr	r1, [r2, #0]
 800d1e6:	1850      	adds	r0, r2, r1
 800d1e8:	42a0      	cmp	r0, r4
 800d1ea:	d10b      	bne.n	800d204 <_free_r+0x6c>
 800d1ec:	6820      	ldr	r0, [r4, #0]
 800d1ee:	4401      	add	r1, r0
 800d1f0:	1850      	adds	r0, r2, r1
 800d1f2:	4283      	cmp	r3, r0
 800d1f4:	6011      	str	r1, [r2, #0]
 800d1f6:	d1e0      	bne.n	800d1ba <_free_r+0x22>
 800d1f8:	6818      	ldr	r0, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	6053      	str	r3, [r2, #4]
 800d1fe:	4408      	add	r0, r1
 800d200:	6010      	str	r0, [r2, #0]
 800d202:	e7da      	b.n	800d1ba <_free_r+0x22>
 800d204:	d902      	bls.n	800d20c <_free_r+0x74>
 800d206:	230c      	movs	r3, #12
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	e7d6      	b.n	800d1ba <_free_r+0x22>
 800d20c:	6820      	ldr	r0, [r4, #0]
 800d20e:	1821      	adds	r1, r4, r0
 800d210:	428b      	cmp	r3, r1
 800d212:	bf04      	itt	eq
 800d214:	6819      	ldreq	r1, [r3, #0]
 800d216:	685b      	ldreq	r3, [r3, #4]
 800d218:	6063      	str	r3, [r4, #4]
 800d21a:	bf04      	itt	eq
 800d21c:	1809      	addeq	r1, r1, r0
 800d21e:	6021      	streq	r1, [r4, #0]
 800d220:	6054      	str	r4, [r2, #4]
 800d222:	e7ca      	b.n	800d1ba <_free_r+0x22>
 800d224:	bd38      	pop	{r3, r4, r5, pc}
 800d226:	bf00      	nop
 800d228:	24002124 	.word	0x24002124

0800d22c <sbrk_aligned>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4e0f      	ldr	r6, [pc, #60]	@ (800d26c <sbrk_aligned+0x40>)
 800d230:	460c      	mov	r4, r1
 800d232:	6831      	ldr	r1, [r6, #0]
 800d234:	4605      	mov	r5, r0
 800d236:	b911      	cbnz	r1, 800d23e <sbrk_aligned+0x12>
 800d238:	f000 fcea 	bl	800dc10 <_sbrk_r>
 800d23c:	6030      	str	r0, [r6, #0]
 800d23e:	4621      	mov	r1, r4
 800d240:	4628      	mov	r0, r5
 800d242:	f000 fce5 	bl	800dc10 <_sbrk_r>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d103      	bne.n	800d252 <sbrk_aligned+0x26>
 800d24a:	f04f 34ff 	mov.w	r4, #4294967295
 800d24e:	4620      	mov	r0, r4
 800d250:	bd70      	pop	{r4, r5, r6, pc}
 800d252:	1cc4      	adds	r4, r0, #3
 800d254:	f024 0403 	bic.w	r4, r4, #3
 800d258:	42a0      	cmp	r0, r4
 800d25a:	d0f8      	beq.n	800d24e <sbrk_aligned+0x22>
 800d25c:	1a21      	subs	r1, r4, r0
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 fcd6 	bl	800dc10 <_sbrk_r>
 800d264:	3001      	adds	r0, #1
 800d266:	d1f2      	bne.n	800d24e <sbrk_aligned+0x22>
 800d268:	e7ef      	b.n	800d24a <sbrk_aligned+0x1e>
 800d26a:	bf00      	nop
 800d26c:	24002120 	.word	0x24002120

0800d270 <_malloc_r>:
 800d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d274:	1ccd      	adds	r5, r1, #3
 800d276:	f025 0503 	bic.w	r5, r5, #3
 800d27a:	3508      	adds	r5, #8
 800d27c:	2d0c      	cmp	r5, #12
 800d27e:	bf38      	it	cc
 800d280:	250c      	movcc	r5, #12
 800d282:	2d00      	cmp	r5, #0
 800d284:	4606      	mov	r6, r0
 800d286:	db01      	blt.n	800d28c <_malloc_r+0x1c>
 800d288:	42a9      	cmp	r1, r5
 800d28a:	d904      	bls.n	800d296 <_malloc_r+0x26>
 800d28c:	230c      	movs	r3, #12
 800d28e:	6033      	str	r3, [r6, #0]
 800d290:	2000      	movs	r0, #0
 800d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d36c <_malloc_r+0xfc>
 800d29a:	f000 f869 	bl	800d370 <__malloc_lock>
 800d29e:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a2:	461c      	mov	r4, r3
 800d2a4:	bb44      	cbnz	r4, 800d2f8 <_malloc_r+0x88>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f7ff ffbf 	bl	800d22c <sbrk_aligned>
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	d158      	bne.n	800d366 <_malloc_r+0xf6>
 800d2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2b8:	4627      	mov	r7, r4
 800d2ba:	2f00      	cmp	r7, #0
 800d2bc:	d143      	bne.n	800d346 <_malloc_r+0xd6>
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	d04b      	beq.n	800d35a <_malloc_r+0xea>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	eb04 0903 	add.w	r9, r4, r3
 800d2cc:	f000 fca0 	bl	800dc10 <_sbrk_r>
 800d2d0:	4581      	cmp	r9, r0
 800d2d2:	d142      	bne.n	800d35a <_malloc_r+0xea>
 800d2d4:	6821      	ldr	r1, [r4, #0]
 800d2d6:	1a6d      	subs	r5, r5, r1
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ffa6 	bl	800d22c <sbrk_aligned>
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d03a      	beq.n	800d35a <_malloc_r+0xea>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	442b      	add	r3, r5
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	bb62      	cbnz	r2, 800d34c <_malloc_r+0xdc>
 800d2f2:	f8c8 7000 	str.w	r7, [r8]
 800d2f6:	e00f      	b.n	800d318 <_malloc_r+0xa8>
 800d2f8:	6822      	ldr	r2, [r4, #0]
 800d2fa:	1b52      	subs	r2, r2, r5
 800d2fc:	d420      	bmi.n	800d340 <_malloc_r+0xd0>
 800d2fe:	2a0b      	cmp	r2, #11
 800d300:	d917      	bls.n	800d332 <_malloc_r+0xc2>
 800d302:	1961      	adds	r1, r4, r5
 800d304:	42a3      	cmp	r3, r4
 800d306:	6025      	str	r5, [r4, #0]
 800d308:	bf18      	it	ne
 800d30a:	6059      	strne	r1, [r3, #4]
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	bf08      	it	eq
 800d310:	f8c8 1000 	streq.w	r1, [r8]
 800d314:	5162      	str	r2, [r4, r5]
 800d316:	604b      	str	r3, [r1, #4]
 800d318:	4630      	mov	r0, r6
 800d31a:	f000 f82f 	bl	800d37c <__malloc_unlock>
 800d31e:	f104 000b 	add.w	r0, r4, #11
 800d322:	1d23      	adds	r3, r4, #4
 800d324:	f020 0007 	bic.w	r0, r0, #7
 800d328:	1ac2      	subs	r2, r0, r3
 800d32a:	bf1c      	itt	ne
 800d32c:	1a1b      	subne	r3, r3, r0
 800d32e:	50a3      	strne	r3, [r4, r2]
 800d330:	e7af      	b.n	800d292 <_malloc_r+0x22>
 800d332:	6862      	ldr	r2, [r4, #4]
 800d334:	42a3      	cmp	r3, r4
 800d336:	bf0c      	ite	eq
 800d338:	f8c8 2000 	streq.w	r2, [r8]
 800d33c:	605a      	strne	r2, [r3, #4]
 800d33e:	e7eb      	b.n	800d318 <_malloc_r+0xa8>
 800d340:	4623      	mov	r3, r4
 800d342:	6864      	ldr	r4, [r4, #4]
 800d344:	e7ae      	b.n	800d2a4 <_malloc_r+0x34>
 800d346:	463c      	mov	r4, r7
 800d348:	687f      	ldr	r7, [r7, #4]
 800d34a:	e7b6      	b.n	800d2ba <_malloc_r+0x4a>
 800d34c:	461a      	mov	r2, r3
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	42a3      	cmp	r3, r4
 800d352:	d1fb      	bne.n	800d34c <_malloc_r+0xdc>
 800d354:	2300      	movs	r3, #0
 800d356:	6053      	str	r3, [r2, #4]
 800d358:	e7de      	b.n	800d318 <_malloc_r+0xa8>
 800d35a:	230c      	movs	r3, #12
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 f80c 	bl	800d37c <__malloc_unlock>
 800d364:	e794      	b.n	800d290 <_malloc_r+0x20>
 800d366:	6005      	str	r5, [r0, #0]
 800d368:	e7d6      	b.n	800d318 <_malloc_r+0xa8>
 800d36a:	bf00      	nop
 800d36c:	24002124 	.word	0x24002124

0800d370 <__malloc_lock>:
 800d370:	4801      	ldr	r0, [pc, #4]	@ (800d378 <__malloc_lock+0x8>)
 800d372:	f7ff bf0e 	b.w	800d192 <__retarget_lock_acquire_recursive>
 800d376:	bf00      	nop
 800d378:	2400211c 	.word	0x2400211c

0800d37c <__malloc_unlock>:
 800d37c:	4801      	ldr	r0, [pc, #4]	@ (800d384 <__malloc_unlock+0x8>)
 800d37e:	f7ff bf09 	b.w	800d194 <__retarget_lock_release_recursive>
 800d382:	bf00      	nop
 800d384:	2400211c 	.word	0x2400211c

0800d388 <__sfputc_r>:
 800d388:	6893      	ldr	r3, [r2, #8]
 800d38a:	3b01      	subs	r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	b410      	push	{r4}
 800d390:	6093      	str	r3, [r2, #8]
 800d392:	da08      	bge.n	800d3a6 <__sfputc_r+0x1e>
 800d394:	6994      	ldr	r4, [r2, #24]
 800d396:	42a3      	cmp	r3, r4
 800d398:	db01      	blt.n	800d39e <__sfputc_r+0x16>
 800d39a:	290a      	cmp	r1, #10
 800d39c:	d103      	bne.n	800d3a6 <__sfputc_r+0x1e>
 800d39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a2:	f000 bba1 	b.w	800dae8 <__swbuf_r>
 800d3a6:	6813      	ldr	r3, [r2, #0]
 800d3a8:	1c58      	adds	r0, r3, #1
 800d3aa:	6010      	str	r0, [r2, #0]
 800d3ac:	7019      	strb	r1, [r3, #0]
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <__sfputs_r>:
 800d3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	460f      	mov	r7, r1
 800d3bc:	4614      	mov	r4, r2
 800d3be:	18d5      	adds	r5, r2, r3
 800d3c0:	42ac      	cmp	r4, r5
 800d3c2:	d101      	bne.n	800d3c8 <__sfputs_r+0x12>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e007      	b.n	800d3d8 <__sfputs_r+0x22>
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	463a      	mov	r2, r7
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7ff ffda 	bl	800d388 <__sfputc_r>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d1f3      	bne.n	800d3c0 <__sfputs_r+0xa>
 800d3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3dc <_vfiprintf_r>:
 800d3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e0:	460d      	mov	r5, r1
 800d3e2:	b09d      	sub	sp, #116	@ 0x74
 800d3e4:	4614      	mov	r4, r2
 800d3e6:	4698      	mov	r8, r3
 800d3e8:	4606      	mov	r6, r0
 800d3ea:	b118      	cbz	r0, 800d3f4 <_vfiprintf_r+0x18>
 800d3ec:	6a03      	ldr	r3, [r0, #32]
 800d3ee:	b90b      	cbnz	r3, 800d3f4 <_vfiprintf_r+0x18>
 800d3f0:	f7ff fdc2 	bl	800cf78 <__sinit>
 800d3f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3f6:	07d9      	lsls	r1, r3, #31
 800d3f8:	d405      	bmi.n	800d406 <_vfiprintf_r+0x2a>
 800d3fa:	89ab      	ldrh	r3, [r5, #12]
 800d3fc:	059a      	lsls	r2, r3, #22
 800d3fe:	d402      	bmi.n	800d406 <_vfiprintf_r+0x2a>
 800d400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d402:	f7ff fec6 	bl	800d192 <__retarget_lock_acquire_recursive>
 800d406:	89ab      	ldrh	r3, [r5, #12]
 800d408:	071b      	lsls	r3, r3, #28
 800d40a:	d501      	bpl.n	800d410 <_vfiprintf_r+0x34>
 800d40c:	692b      	ldr	r3, [r5, #16]
 800d40e:	b99b      	cbnz	r3, 800d438 <_vfiprintf_r+0x5c>
 800d410:	4629      	mov	r1, r5
 800d412:	4630      	mov	r0, r6
 800d414:	f000 fba6 	bl	800db64 <__swsetup_r>
 800d418:	b170      	cbz	r0, 800d438 <_vfiprintf_r+0x5c>
 800d41a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d41c:	07dc      	lsls	r4, r3, #31
 800d41e:	d504      	bpl.n	800d42a <_vfiprintf_r+0x4e>
 800d420:	f04f 30ff 	mov.w	r0, #4294967295
 800d424:	b01d      	add	sp, #116	@ 0x74
 800d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42a:	89ab      	ldrh	r3, [r5, #12]
 800d42c:	0598      	lsls	r0, r3, #22
 800d42e:	d4f7      	bmi.n	800d420 <_vfiprintf_r+0x44>
 800d430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d432:	f7ff feaf 	bl	800d194 <__retarget_lock_release_recursive>
 800d436:	e7f3      	b.n	800d420 <_vfiprintf_r+0x44>
 800d438:	2300      	movs	r3, #0
 800d43a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d43c:	2320      	movs	r3, #32
 800d43e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d442:	f8cd 800c 	str.w	r8, [sp, #12]
 800d446:	2330      	movs	r3, #48	@ 0x30
 800d448:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5f8 <_vfiprintf_r+0x21c>
 800d44c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d450:	f04f 0901 	mov.w	r9, #1
 800d454:	4623      	mov	r3, r4
 800d456:	469a      	mov	sl, r3
 800d458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d45c:	b10a      	cbz	r2, 800d462 <_vfiprintf_r+0x86>
 800d45e:	2a25      	cmp	r2, #37	@ 0x25
 800d460:	d1f9      	bne.n	800d456 <_vfiprintf_r+0x7a>
 800d462:	ebba 0b04 	subs.w	fp, sl, r4
 800d466:	d00b      	beq.n	800d480 <_vfiprintf_r+0xa4>
 800d468:	465b      	mov	r3, fp
 800d46a:	4622      	mov	r2, r4
 800d46c:	4629      	mov	r1, r5
 800d46e:	4630      	mov	r0, r6
 800d470:	f7ff ffa1 	bl	800d3b6 <__sfputs_r>
 800d474:	3001      	adds	r0, #1
 800d476:	f000 80a7 	beq.w	800d5c8 <_vfiprintf_r+0x1ec>
 800d47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d47c:	445a      	add	r2, fp
 800d47e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d480:	f89a 3000 	ldrb.w	r3, [sl]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 809f 	beq.w	800d5c8 <_vfiprintf_r+0x1ec>
 800d48a:	2300      	movs	r3, #0
 800d48c:	f04f 32ff 	mov.w	r2, #4294967295
 800d490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d494:	f10a 0a01 	add.w	sl, sl, #1
 800d498:	9304      	str	r3, [sp, #16]
 800d49a:	9307      	str	r3, [sp, #28]
 800d49c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4a2:	4654      	mov	r4, sl
 800d4a4:	2205      	movs	r2, #5
 800d4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4aa:	4853      	ldr	r0, [pc, #332]	@ (800d5f8 <_vfiprintf_r+0x21c>)
 800d4ac:	f7f2 ff20 	bl	80002f0 <memchr>
 800d4b0:	9a04      	ldr	r2, [sp, #16]
 800d4b2:	b9d8      	cbnz	r0, 800d4ec <_vfiprintf_r+0x110>
 800d4b4:	06d1      	lsls	r1, r2, #27
 800d4b6:	bf44      	itt	mi
 800d4b8:	2320      	movmi	r3, #32
 800d4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4be:	0713      	lsls	r3, r2, #28
 800d4c0:	bf44      	itt	mi
 800d4c2:	232b      	movmi	r3, #43	@ 0x2b
 800d4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4ce:	d015      	beq.n	800d4fc <_vfiprintf_r+0x120>
 800d4d0:	9a07      	ldr	r2, [sp, #28]
 800d4d2:	4654      	mov	r4, sl
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f04f 0c0a 	mov.w	ip, #10
 800d4da:	4621      	mov	r1, r4
 800d4dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e0:	3b30      	subs	r3, #48	@ 0x30
 800d4e2:	2b09      	cmp	r3, #9
 800d4e4:	d94b      	bls.n	800d57e <_vfiprintf_r+0x1a2>
 800d4e6:	b1b0      	cbz	r0, 800d516 <_vfiprintf_r+0x13a>
 800d4e8:	9207      	str	r2, [sp, #28]
 800d4ea:	e014      	b.n	800d516 <_vfiprintf_r+0x13a>
 800d4ec:	eba0 0308 	sub.w	r3, r0, r8
 800d4f0:	fa09 f303 	lsl.w	r3, r9, r3
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	9304      	str	r3, [sp, #16]
 800d4f8:	46a2      	mov	sl, r4
 800d4fa:	e7d2      	b.n	800d4a2 <_vfiprintf_r+0xc6>
 800d4fc:	9b03      	ldr	r3, [sp, #12]
 800d4fe:	1d19      	adds	r1, r3, #4
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	9103      	str	r1, [sp, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfbb      	ittet	lt
 800d508:	425b      	neglt	r3, r3
 800d50a:	f042 0202 	orrlt.w	r2, r2, #2
 800d50e:	9307      	strge	r3, [sp, #28]
 800d510:	9307      	strlt	r3, [sp, #28]
 800d512:	bfb8      	it	lt
 800d514:	9204      	strlt	r2, [sp, #16]
 800d516:	7823      	ldrb	r3, [r4, #0]
 800d518:	2b2e      	cmp	r3, #46	@ 0x2e
 800d51a:	d10a      	bne.n	800d532 <_vfiprintf_r+0x156>
 800d51c:	7863      	ldrb	r3, [r4, #1]
 800d51e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d520:	d132      	bne.n	800d588 <_vfiprintf_r+0x1ac>
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	1d1a      	adds	r2, r3, #4
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	9203      	str	r2, [sp, #12]
 800d52a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d52e:	3402      	adds	r4, #2
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d608 <_vfiprintf_r+0x22c>
 800d536:	7821      	ldrb	r1, [r4, #0]
 800d538:	2203      	movs	r2, #3
 800d53a:	4650      	mov	r0, sl
 800d53c:	f7f2 fed8 	bl	80002f0 <memchr>
 800d540:	b138      	cbz	r0, 800d552 <_vfiprintf_r+0x176>
 800d542:	9b04      	ldr	r3, [sp, #16]
 800d544:	eba0 000a 	sub.w	r0, r0, sl
 800d548:	2240      	movs	r2, #64	@ 0x40
 800d54a:	4082      	lsls	r2, r0
 800d54c:	4313      	orrs	r3, r2
 800d54e:	3401      	adds	r4, #1
 800d550:	9304      	str	r3, [sp, #16]
 800d552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d556:	4829      	ldr	r0, [pc, #164]	@ (800d5fc <_vfiprintf_r+0x220>)
 800d558:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d55c:	2206      	movs	r2, #6
 800d55e:	f7f2 fec7 	bl	80002f0 <memchr>
 800d562:	2800      	cmp	r0, #0
 800d564:	d03f      	beq.n	800d5e6 <_vfiprintf_r+0x20a>
 800d566:	4b26      	ldr	r3, [pc, #152]	@ (800d600 <_vfiprintf_r+0x224>)
 800d568:	bb1b      	cbnz	r3, 800d5b2 <_vfiprintf_r+0x1d6>
 800d56a:	9b03      	ldr	r3, [sp, #12]
 800d56c:	3307      	adds	r3, #7
 800d56e:	f023 0307 	bic.w	r3, r3, #7
 800d572:	3308      	adds	r3, #8
 800d574:	9303      	str	r3, [sp, #12]
 800d576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d578:	443b      	add	r3, r7
 800d57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d57c:	e76a      	b.n	800d454 <_vfiprintf_r+0x78>
 800d57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d582:	460c      	mov	r4, r1
 800d584:	2001      	movs	r0, #1
 800d586:	e7a8      	b.n	800d4da <_vfiprintf_r+0xfe>
 800d588:	2300      	movs	r3, #0
 800d58a:	3401      	adds	r4, #1
 800d58c:	9305      	str	r3, [sp, #20]
 800d58e:	4619      	mov	r1, r3
 800d590:	f04f 0c0a 	mov.w	ip, #10
 800d594:	4620      	mov	r0, r4
 800d596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d59a:	3a30      	subs	r2, #48	@ 0x30
 800d59c:	2a09      	cmp	r2, #9
 800d59e:	d903      	bls.n	800d5a8 <_vfiprintf_r+0x1cc>
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d0c6      	beq.n	800d532 <_vfiprintf_r+0x156>
 800d5a4:	9105      	str	r1, [sp, #20]
 800d5a6:	e7c4      	b.n	800d532 <_vfiprintf_r+0x156>
 800d5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e7f0      	b.n	800d594 <_vfiprintf_r+0x1b8>
 800d5b2:	ab03      	add	r3, sp, #12
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4b12      	ldr	r3, [pc, #72]	@ (800d604 <_vfiprintf_r+0x228>)
 800d5ba:	a904      	add	r1, sp, #16
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f3af 8000 	nop.w
 800d5c2:	4607      	mov	r7, r0
 800d5c4:	1c78      	adds	r0, r7, #1
 800d5c6:	d1d6      	bne.n	800d576 <_vfiprintf_r+0x19a>
 800d5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	d405      	bmi.n	800d5da <_vfiprintf_r+0x1fe>
 800d5ce:	89ab      	ldrh	r3, [r5, #12]
 800d5d0:	059a      	lsls	r2, r3, #22
 800d5d2:	d402      	bmi.n	800d5da <_vfiprintf_r+0x1fe>
 800d5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5d6:	f7ff fddd 	bl	800d194 <__retarget_lock_release_recursive>
 800d5da:	89ab      	ldrh	r3, [r5, #12]
 800d5dc:	065b      	lsls	r3, r3, #25
 800d5de:	f53f af1f 	bmi.w	800d420 <_vfiprintf_r+0x44>
 800d5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5e4:	e71e      	b.n	800d424 <_vfiprintf_r+0x48>
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	462a      	mov	r2, r5
 800d5ec:	4b05      	ldr	r3, [pc, #20]	@ (800d604 <_vfiprintf_r+0x228>)
 800d5ee:	a904      	add	r1, sp, #16
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	f000 f879 	bl	800d6e8 <_printf_i>
 800d5f6:	e7e4      	b.n	800d5c2 <_vfiprintf_r+0x1e6>
 800d5f8:	0800de3c 	.word	0x0800de3c
 800d5fc:	0800de46 	.word	0x0800de46
 800d600:	00000000 	.word	0x00000000
 800d604:	0800d3b7 	.word	0x0800d3b7
 800d608:	0800de42 	.word	0x0800de42

0800d60c <_printf_common>:
 800d60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d610:	4616      	mov	r6, r2
 800d612:	4698      	mov	r8, r3
 800d614:	688a      	ldr	r2, [r1, #8]
 800d616:	690b      	ldr	r3, [r1, #16]
 800d618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d61c:	4293      	cmp	r3, r2
 800d61e:	bfb8      	it	lt
 800d620:	4613      	movlt	r3, r2
 800d622:	6033      	str	r3, [r6, #0]
 800d624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d628:	4607      	mov	r7, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	b10a      	cbz	r2, 800d632 <_printf_common+0x26>
 800d62e:	3301      	adds	r3, #1
 800d630:	6033      	str	r3, [r6, #0]
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	0699      	lsls	r1, r3, #26
 800d636:	bf42      	ittt	mi
 800d638:	6833      	ldrmi	r3, [r6, #0]
 800d63a:	3302      	addmi	r3, #2
 800d63c:	6033      	strmi	r3, [r6, #0]
 800d63e:	6825      	ldr	r5, [r4, #0]
 800d640:	f015 0506 	ands.w	r5, r5, #6
 800d644:	d106      	bne.n	800d654 <_printf_common+0x48>
 800d646:	f104 0a19 	add.w	sl, r4, #25
 800d64a:	68e3      	ldr	r3, [r4, #12]
 800d64c:	6832      	ldr	r2, [r6, #0]
 800d64e:	1a9b      	subs	r3, r3, r2
 800d650:	42ab      	cmp	r3, r5
 800d652:	dc26      	bgt.n	800d6a2 <_printf_common+0x96>
 800d654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d658:	6822      	ldr	r2, [r4, #0]
 800d65a:	3b00      	subs	r3, #0
 800d65c:	bf18      	it	ne
 800d65e:	2301      	movne	r3, #1
 800d660:	0692      	lsls	r2, r2, #26
 800d662:	d42b      	bmi.n	800d6bc <_printf_common+0xb0>
 800d664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d668:	4641      	mov	r1, r8
 800d66a:	4638      	mov	r0, r7
 800d66c:	47c8      	blx	r9
 800d66e:	3001      	adds	r0, #1
 800d670:	d01e      	beq.n	800d6b0 <_printf_common+0xa4>
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	6922      	ldr	r2, [r4, #16]
 800d676:	f003 0306 	and.w	r3, r3, #6
 800d67a:	2b04      	cmp	r3, #4
 800d67c:	bf02      	ittt	eq
 800d67e:	68e5      	ldreq	r5, [r4, #12]
 800d680:	6833      	ldreq	r3, [r6, #0]
 800d682:	1aed      	subeq	r5, r5, r3
 800d684:	68a3      	ldr	r3, [r4, #8]
 800d686:	bf0c      	ite	eq
 800d688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d68c:	2500      	movne	r5, #0
 800d68e:	4293      	cmp	r3, r2
 800d690:	bfc4      	itt	gt
 800d692:	1a9b      	subgt	r3, r3, r2
 800d694:	18ed      	addgt	r5, r5, r3
 800d696:	2600      	movs	r6, #0
 800d698:	341a      	adds	r4, #26
 800d69a:	42b5      	cmp	r5, r6
 800d69c:	d11a      	bne.n	800d6d4 <_printf_common+0xc8>
 800d69e:	2000      	movs	r0, #0
 800d6a0:	e008      	b.n	800d6b4 <_printf_common+0xa8>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4652      	mov	r2, sl
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	47c8      	blx	r9
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d103      	bne.n	800d6b8 <_printf_common+0xac>
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b8:	3501      	adds	r5, #1
 800d6ba:	e7c6      	b.n	800d64a <_printf_common+0x3e>
 800d6bc:	18e1      	adds	r1, r4, r3
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	2030      	movs	r0, #48	@ 0x30
 800d6c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6c6:	4422      	add	r2, r4
 800d6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6d0:	3302      	adds	r3, #2
 800d6d2:	e7c7      	b.n	800d664 <_printf_common+0x58>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4622      	mov	r2, r4
 800d6d8:	4641      	mov	r1, r8
 800d6da:	4638      	mov	r0, r7
 800d6dc:	47c8      	blx	r9
 800d6de:	3001      	adds	r0, #1
 800d6e0:	d0e6      	beq.n	800d6b0 <_printf_common+0xa4>
 800d6e2:	3601      	adds	r6, #1
 800d6e4:	e7d9      	b.n	800d69a <_printf_common+0x8e>
	...

0800d6e8 <_printf_i>:
 800d6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ec:	7e0f      	ldrb	r7, [r1, #24]
 800d6ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d6f0:	2f78      	cmp	r7, #120	@ 0x78
 800d6f2:	4691      	mov	r9, r2
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	469a      	mov	sl, r3
 800d6fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6fe:	d807      	bhi.n	800d710 <_printf_i+0x28>
 800d700:	2f62      	cmp	r7, #98	@ 0x62
 800d702:	d80a      	bhi.n	800d71a <_printf_i+0x32>
 800d704:	2f00      	cmp	r7, #0
 800d706:	f000 80d2 	beq.w	800d8ae <_printf_i+0x1c6>
 800d70a:	2f58      	cmp	r7, #88	@ 0x58
 800d70c:	f000 80b9 	beq.w	800d882 <_printf_i+0x19a>
 800d710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d718:	e03a      	b.n	800d790 <_printf_i+0xa8>
 800d71a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d71e:	2b15      	cmp	r3, #21
 800d720:	d8f6      	bhi.n	800d710 <_printf_i+0x28>
 800d722:	a101      	add	r1, pc, #4	@ (adr r1, 800d728 <_printf_i+0x40>)
 800d724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d728:	0800d781 	.word	0x0800d781
 800d72c:	0800d795 	.word	0x0800d795
 800d730:	0800d711 	.word	0x0800d711
 800d734:	0800d711 	.word	0x0800d711
 800d738:	0800d711 	.word	0x0800d711
 800d73c:	0800d711 	.word	0x0800d711
 800d740:	0800d795 	.word	0x0800d795
 800d744:	0800d711 	.word	0x0800d711
 800d748:	0800d711 	.word	0x0800d711
 800d74c:	0800d711 	.word	0x0800d711
 800d750:	0800d711 	.word	0x0800d711
 800d754:	0800d895 	.word	0x0800d895
 800d758:	0800d7bf 	.word	0x0800d7bf
 800d75c:	0800d84f 	.word	0x0800d84f
 800d760:	0800d711 	.word	0x0800d711
 800d764:	0800d711 	.word	0x0800d711
 800d768:	0800d8b7 	.word	0x0800d8b7
 800d76c:	0800d711 	.word	0x0800d711
 800d770:	0800d7bf 	.word	0x0800d7bf
 800d774:	0800d711 	.word	0x0800d711
 800d778:	0800d711 	.word	0x0800d711
 800d77c:	0800d857 	.word	0x0800d857
 800d780:	6833      	ldr	r3, [r6, #0]
 800d782:	1d1a      	adds	r2, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6032      	str	r2, [r6, #0]
 800d788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d78c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d790:	2301      	movs	r3, #1
 800d792:	e09d      	b.n	800d8d0 <_printf_i+0x1e8>
 800d794:	6833      	ldr	r3, [r6, #0]
 800d796:	6820      	ldr	r0, [r4, #0]
 800d798:	1d19      	adds	r1, r3, #4
 800d79a:	6031      	str	r1, [r6, #0]
 800d79c:	0606      	lsls	r6, r0, #24
 800d79e:	d501      	bpl.n	800d7a4 <_printf_i+0xbc>
 800d7a0:	681d      	ldr	r5, [r3, #0]
 800d7a2:	e003      	b.n	800d7ac <_printf_i+0xc4>
 800d7a4:	0645      	lsls	r5, r0, #25
 800d7a6:	d5fb      	bpl.n	800d7a0 <_printf_i+0xb8>
 800d7a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7ac:	2d00      	cmp	r5, #0
 800d7ae:	da03      	bge.n	800d7b8 <_printf_i+0xd0>
 800d7b0:	232d      	movs	r3, #45	@ 0x2d
 800d7b2:	426d      	negs	r5, r5
 800d7b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7b8:	4859      	ldr	r0, [pc, #356]	@ (800d920 <_printf_i+0x238>)
 800d7ba:	230a      	movs	r3, #10
 800d7bc:	e011      	b.n	800d7e2 <_printf_i+0xfa>
 800d7be:	6821      	ldr	r1, [r4, #0]
 800d7c0:	6833      	ldr	r3, [r6, #0]
 800d7c2:	0608      	lsls	r0, r1, #24
 800d7c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7c8:	d402      	bmi.n	800d7d0 <_printf_i+0xe8>
 800d7ca:	0649      	lsls	r1, r1, #25
 800d7cc:	bf48      	it	mi
 800d7ce:	b2ad      	uxthmi	r5, r5
 800d7d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7d2:	4853      	ldr	r0, [pc, #332]	@ (800d920 <_printf_i+0x238>)
 800d7d4:	6033      	str	r3, [r6, #0]
 800d7d6:	bf14      	ite	ne
 800d7d8:	230a      	movne	r3, #10
 800d7da:	2308      	moveq	r3, #8
 800d7dc:	2100      	movs	r1, #0
 800d7de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d7e2:	6866      	ldr	r6, [r4, #4]
 800d7e4:	60a6      	str	r6, [r4, #8]
 800d7e6:	2e00      	cmp	r6, #0
 800d7e8:	bfa2      	ittt	ge
 800d7ea:	6821      	ldrge	r1, [r4, #0]
 800d7ec:	f021 0104 	bicge.w	r1, r1, #4
 800d7f0:	6021      	strge	r1, [r4, #0]
 800d7f2:	b90d      	cbnz	r5, 800d7f8 <_printf_i+0x110>
 800d7f4:	2e00      	cmp	r6, #0
 800d7f6:	d04b      	beq.n	800d890 <_printf_i+0x1a8>
 800d7f8:	4616      	mov	r6, r2
 800d7fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7fe:	fb03 5711 	mls	r7, r3, r1, r5
 800d802:	5dc7      	ldrb	r7, [r0, r7]
 800d804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d808:	462f      	mov	r7, r5
 800d80a:	42bb      	cmp	r3, r7
 800d80c:	460d      	mov	r5, r1
 800d80e:	d9f4      	bls.n	800d7fa <_printf_i+0x112>
 800d810:	2b08      	cmp	r3, #8
 800d812:	d10b      	bne.n	800d82c <_printf_i+0x144>
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	07df      	lsls	r7, r3, #31
 800d818:	d508      	bpl.n	800d82c <_printf_i+0x144>
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	6861      	ldr	r1, [r4, #4]
 800d81e:	4299      	cmp	r1, r3
 800d820:	bfde      	ittt	le
 800d822:	2330      	movle	r3, #48	@ 0x30
 800d824:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d828:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d82c:	1b92      	subs	r2, r2, r6
 800d82e:	6122      	str	r2, [r4, #16]
 800d830:	f8cd a000 	str.w	sl, [sp]
 800d834:	464b      	mov	r3, r9
 800d836:	aa03      	add	r2, sp, #12
 800d838:	4621      	mov	r1, r4
 800d83a:	4640      	mov	r0, r8
 800d83c:	f7ff fee6 	bl	800d60c <_printf_common>
 800d840:	3001      	adds	r0, #1
 800d842:	d14a      	bne.n	800d8da <_printf_i+0x1f2>
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	b004      	add	sp, #16
 800d84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	f043 0320 	orr.w	r3, r3, #32
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	4833      	ldr	r0, [pc, #204]	@ (800d924 <_printf_i+0x23c>)
 800d858:	2778      	movs	r7, #120	@ 0x78
 800d85a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	6831      	ldr	r1, [r6, #0]
 800d862:	061f      	lsls	r7, r3, #24
 800d864:	f851 5b04 	ldr.w	r5, [r1], #4
 800d868:	d402      	bmi.n	800d870 <_printf_i+0x188>
 800d86a:	065f      	lsls	r7, r3, #25
 800d86c:	bf48      	it	mi
 800d86e:	b2ad      	uxthmi	r5, r5
 800d870:	6031      	str	r1, [r6, #0]
 800d872:	07d9      	lsls	r1, r3, #31
 800d874:	bf44      	itt	mi
 800d876:	f043 0320 	orrmi.w	r3, r3, #32
 800d87a:	6023      	strmi	r3, [r4, #0]
 800d87c:	b11d      	cbz	r5, 800d886 <_printf_i+0x19e>
 800d87e:	2310      	movs	r3, #16
 800d880:	e7ac      	b.n	800d7dc <_printf_i+0xf4>
 800d882:	4827      	ldr	r0, [pc, #156]	@ (800d920 <_printf_i+0x238>)
 800d884:	e7e9      	b.n	800d85a <_printf_i+0x172>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	f023 0320 	bic.w	r3, r3, #32
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	e7f6      	b.n	800d87e <_printf_i+0x196>
 800d890:	4616      	mov	r6, r2
 800d892:	e7bd      	b.n	800d810 <_printf_i+0x128>
 800d894:	6833      	ldr	r3, [r6, #0]
 800d896:	6825      	ldr	r5, [r4, #0]
 800d898:	6961      	ldr	r1, [r4, #20]
 800d89a:	1d18      	adds	r0, r3, #4
 800d89c:	6030      	str	r0, [r6, #0]
 800d89e:	062e      	lsls	r6, r5, #24
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	d501      	bpl.n	800d8a8 <_printf_i+0x1c0>
 800d8a4:	6019      	str	r1, [r3, #0]
 800d8a6:	e002      	b.n	800d8ae <_printf_i+0x1c6>
 800d8a8:	0668      	lsls	r0, r5, #25
 800d8aa:	d5fb      	bpl.n	800d8a4 <_printf_i+0x1bc>
 800d8ac:	8019      	strh	r1, [r3, #0]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6123      	str	r3, [r4, #16]
 800d8b2:	4616      	mov	r6, r2
 800d8b4:	e7bc      	b.n	800d830 <_printf_i+0x148>
 800d8b6:	6833      	ldr	r3, [r6, #0]
 800d8b8:	1d1a      	adds	r2, r3, #4
 800d8ba:	6032      	str	r2, [r6, #0]
 800d8bc:	681e      	ldr	r6, [r3, #0]
 800d8be:	6862      	ldr	r2, [r4, #4]
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7f2 fd14 	bl	80002f0 <memchr>
 800d8c8:	b108      	cbz	r0, 800d8ce <_printf_i+0x1e6>
 800d8ca:	1b80      	subs	r0, r0, r6
 800d8cc:	6060      	str	r0, [r4, #4]
 800d8ce:	6863      	ldr	r3, [r4, #4]
 800d8d0:	6123      	str	r3, [r4, #16]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8d8:	e7aa      	b.n	800d830 <_printf_i+0x148>
 800d8da:	6923      	ldr	r3, [r4, #16]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4649      	mov	r1, r9
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	47d0      	blx	sl
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d0ad      	beq.n	800d844 <_printf_i+0x15c>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	079b      	lsls	r3, r3, #30
 800d8ec:	d413      	bmi.n	800d916 <_printf_i+0x22e>
 800d8ee:	68e0      	ldr	r0, [r4, #12]
 800d8f0:	9b03      	ldr	r3, [sp, #12]
 800d8f2:	4298      	cmp	r0, r3
 800d8f4:	bfb8      	it	lt
 800d8f6:	4618      	movlt	r0, r3
 800d8f8:	e7a6      	b.n	800d848 <_printf_i+0x160>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	4649      	mov	r1, r9
 800d900:	4640      	mov	r0, r8
 800d902:	47d0      	blx	sl
 800d904:	3001      	adds	r0, #1
 800d906:	d09d      	beq.n	800d844 <_printf_i+0x15c>
 800d908:	3501      	adds	r5, #1
 800d90a:	68e3      	ldr	r3, [r4, #12]
 800d90c:	9903      	ldr	r1, [sp, #12]
 800d90e:	1a5b      	subs	r3, r3, r1
 800d910:	42ab      	cmp	r3, r5
 800d912:	dcf2      	bgt.n	800d8fa <_printf_i+0x212>
 800d914:	e7eb      	b.n	800d8ee <_printf_i+0x206>
 800d916:	2500      	movs	r5, #0
 800d918:	f104 0619 	add.w	r6, r4, #25
 800d91c:	e7f5      	b.n	800d90a <_printf_i+0x222>
 800d91e:	bf00      	nop
 800d920:	0800de4d 	.word	0x0800de4d
 800d924:	0800de5e 	.word	0x0800de5e

0800d928 <__sflush_r>:
 800d928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d930:	0716      	lsls	r6, r2, #28
 800d932:	4605      	mov	r5, r0
 800d934:	460c      	mov	r4, r1
 800d936:	d454      	bmi.n	800d9e2 <__sflush_r+0xba>
 800d938:	684b      	ldr	r3, [r1, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	dc02      	bgt.n	800d944 <__sflush_r+0x1c>
 800d93e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d940:	2b00      	cmp	r3, #0
 800d942:	dd48      	ble.n	800d9d6 <__sflush_r+0xae>
 800d944:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d946:	2e00      	cmp	r6, #0
 800d948:	d045      	beq.n	800d9d6 <__sflush_r+0xae>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d950:	682f      	ldr	r7, [r5, #0]
 800d952:	6a21      	ldr	r1, [r4, #32]
 800d954:	602b      	str	r3, [r5, #0]
 800d956:	d030      	beq.n	800d9ba <__sflush_r+0x92>
 800d958:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d95a:	89a3      	ldrh	r3, [r4, #12]
 800d95c:	0759      	lsls	r1, r3, #29
 800d95e:	d505      	bpl.n	800d96c <__sflush_r+0x44>
 800d960:	6863      	ldr	r3, [r4, #4]
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d966:	b10b      	cbz	r3, 800d96c <__sflush_r+0x44>
 800d968:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d96a:	1ad2      	subs	r2, r2, r3
 800d96c:	2300      	movs	r3, #0
 800d96e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d970:	6a21      	ldr	r1, [r4, #32]
 800d972:	4628      	mov	r0, r5
 800d974:	47b0      	blx	r6
 800d976:	1c43      	adds	r3, r0, #1
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	d106      	bne.n	800d98a <__sflush_r+0x62>
 800d97c:	6829      	ldr	r1, [r5, #0]
 800d97e:	291d      	cmp	r1, #29
 800d980:	d82b      	bhi.n	800d9da <__sflush_r+0xb2>
 800d982:	4a2a      	ldr	r2, [pc, #168]	@ (800da2c <__sflush_r+0x104>)
 800d984:	410a      	asrs	r2, r1
 800d986:	07d6      	lsls	r6, r2, #31
 800d988:	d427      	bmi.n	800d9da <__sflush_r+0xb2>
 800d98a:	2200      	movs	r2, #0
 800d98c:	6062      	str	r2, [r4, #4]
 800d98e:	04d9      	lsls	r1, r3, #19
 800d990:	6922      	ldr	r2, [r4, #16]
 800d992:	6022      	str	r2, [r4, #0]
 800d994:	d504      	bpl.n	800d9a0 <__sflush_r+0x78>
 800d996:	1c42      	adds	r2, r0, #1
 800d998:	d101      	bne.n	800d99e <__sflush_r+0x76>
 800d99a:	682b      	ldr	r3, [r5, #0]
 800d99c:	b903      	cbnz	r3, 800d9a0 <__sflush_r+0x78>
 800d99e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9a2:	602f      	str	r7, [r5, #0]
 800d9a4:	b1b9      	cbz	r1, 800d9d6 <__sflush_r+0xae>
 800d9a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9aa:	4299      	cmp	r1, r3
 800d9ac:	d002      	beq.n	800d9b4 <__sflush_r+0x8c>
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7ff fbf2 	bl	800d198 <_free_r>
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9b8:	e00d      	b.n	800d9d6 <__sflush_r+0xae>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b0      	blx	r6
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	1c50      	adds	r0, r2, #1
 800d9c4:	d1c9      	bne.n	800d95a <__sflush_r+0x32>
 800d9c6:	682b      	ldr	r3, [r5, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0c6      	beq.n	800d95a <__sflush_r+0x32>
 800d9cc:	2b1d      	cmp	r3, #29
 800d9ce:	d001      	beq.n	800d9d4 <__sflush_r+0xac>
 800d9d0:	2b16      	cmp	r3, #22
 800d9d2:	d11e      	bne.n	800da12 <__sflush_r+0xea>
 800d9d4:	602f      	str	r7, [r5, #0]
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	e022      	b.n	800da20 <__sflush_r+0xf8>
 800d9da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9de:	b21b      	sxth	r3, r3
 800d9e0:	e01b      	b.n	800da1a <__sflush_r+0xf2>
 800d9e2:	690f      	ldr	r7, [r1, #16]
 800d9e4:	2f00      	cmp	r7, #0
 800d9e6:	d0f6      	beq.n	800d9d6 <__sflush_r+0xae>
 800d9e8:	0793      	lsls	r3, r2, #30
 800d9ea:	680e      	ldr	r6, [r1, #0]
 800d9ec:	bf08      	it	eq
 800d9ee:	694b      	ldreq	r3, [r1, #20]
 800d9f0:	600f      	str	r7, [r1, #0]
 800d9f2:	bf18      	it	ne
 800d9f4:	2300      	movne	r3, #0
 800d9f6:	eba6 0807 	sub.w	r8, r6, r7
 800d9fa:	608b      	str	r3, [r1, #8]
 800d9fc:	f1b8 0f00 	cmp.w	r8, #0
 800da00:	dde9      	ble.n	800d9d6 <__sflush_r+0xae>
 800da02:	6a21      	ldr	r1, [r4, #32]
 800da04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da06:	4643      	mov	r3, r8
 800da08:	463a      	mov	r2, r7
 800da0a:	4628      	mov	r0, r5
 800da0c:	47b0      	blx	r6
 800da0e:	2800      	cmp	r0, #0
 800da10:	dc08      	bgt.n	800da24 <__sflush_r+0xfc>
 800da12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da1a:	81a3      	strh	r3, [r4, #12]
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	4407      	add	r7, r0
 800da26:	eba8 0800 	sub.w	r8, r8, r0
 800da2a:	e7e7      	b.n	800d9fc <__sflush_r+0xd4>
 800da2c:	dfbffffe 	.word	0xdfbffffe

0800da30 <_fflush_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	690b      	ldr	r3, [r1, #16]
 800da34:	4605      	mov	r5, r0
 800da36:	460c      	mov	r4, r1
 800da38:	b913      	cbnz	r3, 800da40 <_fflush_r+0x10>
 800da3a:	2500      	movs	r5, #0
 800da3c:	4628      	mov	r0, r5
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	b118      	cbz	r0, 800da4a <_fflush_r+0x1a>
 800da42:	6a03      	ldr	r3, [r0, #32]
 800da44:	b90b      	cbnz	r3, 800da4a <_fflush_r+0x1a>
 800da46:	f7ff fa97 	bl	800cf78 <__sinit>
 800da4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0f3      	beq.n	800da3a <_fflush_r+0xa>
 800da52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da54:	07d0      	lsls	r0, r2, #31
 800da56:	d404      	bmi.n	800da62 <_fflush_r+0x32>
 800da58:	0599      	lsls	r1, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_fflush_r+0x32>
 800da5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da5e:	f7ff fb98 	bl	800d192 <__retarget_lock_acquire_recursive>
 800da62:	4628      	mov	r0, r5
 800da64:	4621      	mov	r1, r4
 800da66:	f7ff ff5f 	bl	800d928 <__sflush_r>
 800da6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da6c:	07da      	lsls	r2, r3, #31
 800da6e:	4605      	mov	r5, r0
 800da70:	d4e4      	bmi.n	800da3c <_fflush_r+0xc>
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	059b      	lsls	r3, r3, #22
 800da76:	d4e1      	bmi.n	800da3c <_fflush_r+0xc>
 800da78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da7a:	f7ff fb8b 	bl	800d194 <__retarget_lock_release_recursive>
 800da7e:	e7dd      	b.n	800da3c <_fflush_r+0xc>

0800da80 <_putc_r>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	460d      	mov	r5, r1
 800da84:	4614      	mov	r4, r2
 800da86:	4606      	mov	r6, r0
 800da88:	b118      	cbz	r0, 800da92 <_putc_r+0x12>
 800da8a:	6a03      	ldr	r3, [r0, #32]
 800da8c:	b90b      	cbnz	r3, 800da92 <_putc_r+0x12>
 800da8e:	f7ff fa73 	bl	800cf78 <__sinit>
 800da92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da94:	07d8      	lsls	r0, r3, #31
 800da96:	d405      	bmi.n	800daa4 <_putc_r+0x24>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	0599      	lsls	r1, r3, #22
 800da9c:	d402      	bmi.n	800daa4 <_putc_r+0x24>
 800da9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daa0:	f7ff fb77 	bl	800d192 <__retarget_lock_acquire_recursive>
 800daa4:	68a3      	ldr	r3, [r4, #8]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	60a3      	str	r3, [r4, #8]
 800daac:	da05      	bge.n	800daba <_putc_r+0x3a>
 800daae:	69a2      	ldr	r2, [r4, #24]
 800dab0:	4293      	cmp	r3, r2
 800dab2:	db12      	blt.n	800dada <_putc_r+0x5a>
 800dab4:	b2eb      	uxtb	r3, r5
 800dab6:	2b0a      	cmp	r3, #10
 800dab8:	d00f      	beq.n	800dada <_putc_r+0x5a>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	6022      	str	r2, [r4, #0]
 800dac0:	701d      	strb	r5, [r3, #0]
 800dac2:	b2ed      	uxtb	r5, r5
 800dac4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dac6:	07da      	lsls	r2, r3, #31
 800dac8:	d405      	bmi.n	800dad6 <_putc_r+0x56>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	059b      	lsls	r3, r3, #22
 800dace:	d402      	bmi.n	800dad6 <_putc_r+0x56>
 800dad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dad2:	f7ff fb5f 	bl	800d194 <__retarget_lock_release_recursive>
 800dad6:	4628      	mov	r0, r5
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	4629      	mov	r1, r5
 800dadc:	4622      	mov	r2, r4
 800dade:	4630      	mov	r0, r6
 800dae0:	f000 f802 	bl	800dae8 <__swbuf_r>
 800dae4:	4605      	mov	r5, r0
 800dae6:	e7ed      	b.n	800dac4 <_putc_r+0x44>

0800dae8 <__swbuf_r>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	460e      	mov	r6, r1
 800daec:	4614      	mov	r4, r2
 800daee:	4605      	mov	r5, r0
 800daf0:	b118      	cbz	r0, 800dafa <__swbuf_r+0x12>
 800daf2:	6a03      	ldr	r3, [r0, #32]
 800daf4:	b90b      	cbnz	r3, 800dafa <__swbuf_r+0x12>
 800daf6:	f7ff fa3f 	bl	800cf78 <__sinit>
 800dafa:	69a3      	ldr	r3, [r4, #24]
 800dafc:	60a3      	str	r3, [r4, #8]
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	071a      	lsls	r2, r3, #28
 800db02:	d501      	bpl.n	800db08 <__swbuf_r+0x20>
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	b943      	cbnz	r3, 800db1a <__swbuf_r+0x32>
 800db08:	4621      	mov	r1, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	f000 f82a 	bl	800db64 <__swsetup_r>
 800db10:	b118      	cbz	r0, 800db1a <__swbuf_r+0x32>
 800db12:	f04f 37ff 	mov.w	r7, #4294967295
 800db16:	4638      	mov	r0, r7
 800db18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1a:	6823      	ldr	r3, [r4, #0]
 800db1c:	6922      	ldr	r2, [r4, #16]
 800db1e:	1a98      	subs	r0, r3, r2
 800db20:	6963      	ldr	r3, [r4, #20]
 800db22:	b2f6      	uxtb	r6, r6
 800db24:	4283      	cmp	r3, r0
 800db26:	4637      	mov	r7, r6
 800db28:	dc05      	bgt.n	800db36 <__swbuf_r+0x4e>
 800db2a:	4621      	mov	r1, r4
 800db2c:	4628      	mov	r0, r5
 800db2e:	f7ff ff7f 	bl	800da30 <_fflush_r>
 800db32:	2800      	cmp	r0, #0
 800db34:	d1ed      	bne.n	800db12 <__swbuf_r+0x2a>
 800db36:	68a3      	ldr	r3, [r4, #8]
 800db38:	3b01      	subs	r3, #1
 800db3a:	60a3      	str	r3, [r4, #8]
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	6022      	str	r2, [r4, #0]
 800db42:	701e      	strb	r6, [r3, #0]
 800db44:	6962      	ldr	r2, [r4, #20]
 800db46:	1c43      	adds	r3, r0, #1
 800db48:	429a      	cmp	r2, r3
 800db4a:	d004      	beq.n	800db56 <__swbuf_r+0x6e>
 800db4c:	89a3      	ldrh	r3, [r4, #12]
 800db4e:	07db      	lsls	r3, r3, #31
 800db50:	d5e1      	bpl.n	800db16 <__swbuf_r+0x2e>
 800db52:	2e0a      	cmp	r6, #10
 800db54:	d1df      	bne.n	800db16 <__swbuf_r+0x2e>
 800db56:	4621      	mov	r1, r4
 800db58:	4628      	mov	r0, r5
 800db5a:	f7ff ff69 	bl	800da30 <_fflush_r>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d0d9      	beq.n	800db16 <__swbuf_r+0x2e>
 800db62:	e7d6      	b.n	800db12 <__swbuf_r+0x2a>

0800db64 <__swsetup_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4b29      	ldr	r3, [pc, #164]	@ (800dc0c <__swsetup_r+0xa8>)
 800db68:	4605      	mov	r5, r0
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	460c      	mov	r4, r1
 800db6e:	b118      	cbz	r0, 800db78 <__swsetup_r+0x14>
 800db70:	6a03      	ldr	r3, [r0, #32]
 800db72:	b90b      	cbnz	r3, 800db78 <__swsetup_r+0x14>
 800db74:	f7ff fa00 	bl	800cf78 <__sinit>
 800db78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7c:	0719      	lsls	r1, r3, #28
 800db7e:	d422      	bmi.n	800dbc6 <__swsetup_r+0x62>
 800db80:	06da      	lsls	r2, r3, #27
 800db82:	d407      	bmi.n	800db94 <__swsetup_r+0x30>
 800db84:	2209      	movs	r2, #9
 800db86:	602a      	str	r2, [r5, #0]
 800db88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	f04f 30ff 	mov.w	r0, #4294967295
 800db92:	e033      	b.n	800dbfc <__swsetup_r+0x98>
 800db94:	0758      	lsls	r0, r3, #29
 800db96:	d512      	bpl.n	800dbbe <__swsetup_r+0x5a>
 800db98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db9a:	b141      	cbz	r1, 800dbae <__swsetup_r+0x4a>
 800db9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dba0:	4299      	cmp	r1, r3
 800dba2:	d002      	beq.n	800dbaa <__swsetup_r+0x46>
 800dba4:	4628      	mov	r0, r5
 800dba6:	f7ff faf7 	bl	800d198 <_free_r>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbae:	89a3      	ldrh	r3, [r4, #12]
 800dbb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6063      	str	r3, [r4, #4]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	f043 0308 	orr.w	r3, r3, #8
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	b94b      	cbnz	r3, 800dbde <__swsetup_r+0x7a>
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbd4:	d003      	beq.n	800dbde <__swsetup_r+0x7a>
 800dbd6:	4621      	mov	r1, r4
 800dbd8:	4628      	mov	r0, r5
 800dbda:	f000 f84f 	bl	800dc7c <__smakebuf_r>
 800dbde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe2:	f013 0201 	ands.w	r2, r3, #1
 800dbe6:	d00a      	beq.n	800dbfe <__swsetup_r+0x9a>
 800dbe8:	2200      	movs	r2, #0
 800dbea:	60a2      	str	r2, [r4, #8]
 800dbec:	6962      	ldr	r2, [r4, #20]
 800dbee:	4252      	negs	r2, r2
 800dbf0:	61a2      	str	r2, [r4, #24]
 800dbf2:	6922      	ldr	r2, [r4, #16]
 800dbf4:	b942      	cbnz	r2, 800dc08 <__swsetup_r+0xa4>
 800dbf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dbfa:	d1c5      	bne.n	800db88 <__swsetup_r+0x24>
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
 800dbfe:	0799      	lsls	r1, r3, #30
 800dc00:	bf58      	it	pl
 800dc02:	6962      	ldrpl	r2, [r4, #20]
 800dc04:	60a2      	str	r2, [r4, #8]
 800dc06:	e7f4      	b.n	800dbf2 <__swsetup_r+0x8e>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	e7f7      	b.n	800dbfc <__swsetup_r+0x98>
 800dc0c:	24000110 	.word	0x24000110

0800dc10 <_sbrk_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4d06      	ldr	r5, [pc, #24]	@ (800dc2c <_sbrk_r+0x1c>)
 800dc14:	2300      	movs	r3, #0
 800dc16:	4604      	mov	r4, r0
 800dc18:	4608      	mov	r0, r1
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	f7f3 fd0c 	bl	8001638 <_sbrk>
 800dc20:	1c43      	adds	r3, r0, #1
 800dc22:	d102      	bne.n	800dc2a <_sbrk_r+0x1a>
 800dc24:	682b      	ldr	r3, [r5, #0]
 800dc26:	b103      	cbz	r3, 800dc2a <_sbrk_r+0x1a>
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	bd38      	pop	{r3, r4, r5, pc}
 800dc2c:	24002118 	.word	0x24002118

0800dc30 <__swhatbuf_r>:
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	460c      	mov	r4, r1
 800dc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc38:	2900      	cmp	r1, #0
 800dc3a:	b096      	sub	sp, #88	@ 0x58
 800dc3c:	4615      	mov	r5, r2
 800dc3e:	461e      	mov	r6, r3
 800dc40:	da0d      	bge.n	800dc5e <__swhatbuf_r+0x2e>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc48:	f04f 0100 	mov.w	r1, #0
 800dc4c:	bf14      	ite	ne
 800dc4e:	2340      	movne	r3, #64	@ 0x40
 800dc50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc54:	2000      	movs	r0, #0
 800dc56:	6031      	str	r1, [r6, #0]
 800dc58:	602b      	str	r3, [r5, #0]
 800dc5a:	b016      	add	sp, #88	@ 0x58
 800dc5c:	bd70      	pop	{r4, r5, r6, pc}
 800dc5e:	466a      	mov	r2, sp
 800dc60:	f000 f848 	bl	800dcf4 <_fstat_r>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	dbec      	blt.n	800dc42 <__swhatbuf_r+0x12>
 800dc68:	9901      	ldr	r1, [sp, #4]
 800dc6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc72:	4259      	negs	r1, r3
 800dc74:	4159      	adcs	r1, r3
 800dc76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc7a:	e7eb      	b.n	800dc54 <__swhatbuf_r+0x24>

0800dc7c <__smakebuf_r>:
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc80:	079d      	lsls	r5, r3, #30
 800dc82:	4606      	mov	r6, r0
 800dc84:	460c      	mov	r4, r1
 800dc86:	d507      	bpl.n	800dc98 <__smakebuf_r+0x1c>
 800dc88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc8c:	6023      	str	r3, [r4, #0]
 800dc8e:	6123      	str	r3, [r4, #16]
 800dc90:	2301      	movs	r3, #1
 800dc92:	6163      	str	r3, [r4, #20]
 800dc94:	b003      	add	sp, #12
 800dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc98:	ab01      	add	r3, sp, #4
 800dc9a:	466a      	mov	r2, sp
 800dc9c:	f7ff ffc8 	bl	800dc30 <__swhatbuf_r>
 800dca0:	9f00      	ldr	r7, [sp, #0]
 800dca2:	4605      	mov	r5, r0
 800dca4:	4639      	mov	r1, r7
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff fae2 	bl	800d270 <_malloc_r>
 800dcac:	b948      	cbnz	r0, 800dcc2 <__smakebuf_r+0x46>
 800dcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcb2:	059a      	lsls	r2, r3, #22
 800dcb4:	d4ee      	bmi.n	800dc94 <__smakebuf_r+0x18>
 800dcb6:	f023 0303 	bic.w	r3, r3, #3
 800dcba:	f043 0302 	orr.w	r3, r3, #2
 800dcbe:	81a3      	strh	r3, [r4, #12]
 800dcc0:	e7e2      	b.n	800dc88 <__smakebuf_r+0xc>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	6020      	str	r0, [r4, #0]
 800dcc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	9b01      	ldr	r3, [sp, #4]
 800dcce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcd2:	b15b      	cbz	r3, 800dcec <__smakebuf_r+0x70>
 800dcd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f000 f81d 	bl	800dd18 <_isatty_r>
 800dcde:	b128      	cbz	r0, 800dcec <__smakebuf_r+0x70>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	f023 0303 	bic.w	r3, r3, #3
 800dce6:	f043 0301 	orr.w	r3, r3, #1
 800dcea:	81a3      	strh	r3, [r4, #12]
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	431d      	orrs	r5, r3
 800dcf0:	81a5      	strh	r5, [r4, #12]
 800dcf2:	e7cf      	b.n	800dc94 <__smakebuf_r+0x18>

0800dcf4 <_fstat_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4d07      	ldr	r5, [pc, #28]	@ (800dd14 <_fstat_r+0x20>)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	4611      	mov	r1, r2
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	f7f3 fc70 	bl	80015e6 <_fstat>
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	d102      	bne.n	800dd10 <_fstat_r+0x1c>
 800dd0a:	682b      	ldr	r3, [r5, #0]
 800dd0c:	b103      	cbz	r3, 800dd10 <_fstat_r+0x1c>
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	bd38      	pop	{r3, r4, r5, pc}
 800dd12:	bf00      	nop
 800dd14:	24002118 	.word	0x24002118

0800dd18 <_isatty_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4d06      	ldr	r5, [pc, #24]	@ (800dd34 <_isatty_r+0x1c>)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	602b      	str	r3, [r5, #0]
 800dd24:	f7f3 fc6f 	bl	8001606 <_isatty>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d102      	bne.n	800dd32 <_isatty_r+0x1a>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	b103      	cbz	r3, 800dd32 <_isatty_r+0x1a>
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	24002118 	.word	0x24002118

0800dd38 <_init>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	bf00      	nop
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr

0800dd44 <_fini>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	bf00      	nop
 800dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4a:	bc08      	pop	{r3}
 800dd4c:	469e      	mov	lr, r3
 800dd4e:	4770      	bx	lr
