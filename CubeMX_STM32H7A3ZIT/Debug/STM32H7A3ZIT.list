
STM32H7A3ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c064  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c314  0800c314  0000d314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c3e8  0800c3e8  0000d3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c3ec  0800c3ec  0000d3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0800c3f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001f6c  24000160  0800c550  0000e160  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240020cc  0800c550  0000f0cc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ffc0  00000000  00000000  0000e18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d30  00000000  00000000  0002e14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00032e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001253  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035642  00000000  00000000  00035923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024669  00000000  00000000  0006af65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b04c  00000000  00000000  0008f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ca61a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bb4  00000000  00000000  001ca660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001d1214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000160 	.word	0x24000160
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c2fc 	.word	0x0800c2fc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000164 	.word	0x24000164
 80002ec:	0800c2fc 	.word	0x0800c2fc

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_FMC_Init>:
NAND_HandleTypeDef hnand1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8000396:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
 80003c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80003c4:	4b46      	ldr	r3, [pc, #280]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003c6:	4a47      	ldr	r2, [pc, #284]	@ (80004e4 <MX_FMC_Init+0x154>)
 80003c8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80003ca:	4b45      	ldr	r3, [pc, #276]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003d0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80003d2:	4b43      	ldr	r3, [pc, #268]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80003d8:	4b41      	ldr	r3, [pc, #260]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80003de:	4b40      	ldr	r3, [pc, #256]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80003e4:	4b3e      	ldr	r3, [pc, #248]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80003ea:	4b3d      	ldr	r3, [pc, #244]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80003f0:	4b3b      	ldr	r3, [pc, #236]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2112;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	@ (80004e0 <MX_FMC_Init+0x150>)
 80003f8:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 64;
 80003fe:	4b38      	ldr	r3, [pc, #224]	@ (80004e0 <MX_FMC_Init+0x150>)
 8000400:	2240      	movs	r2, #64	@ 0x40
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 64;
 8000404:	4b36      	ldr	r3, [pc, #216]	@ (80004e0 <MX_FMC_Init+0x150>)
 8000406:	2240      	movs	r2, #64	@ 0x40
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 2048;
 800040a:	4b35      	ldr	r3, [pc, #212]	@ (80004e0 <MX_FMC_Init+0x150>)
 800040c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 8000412:	4b33      	ldr	r3, [pc, #204]	@ (80004e0 <MX_FMC_Init+0x150>)
 8000414:	2200      	movs	r2, #0
 8000416:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 8000418:	4b31      	ldr	r3, [pc, #196]	@ (80004e0 <MX_FMC_Init+0x150>)
 800041a:	2200      	movs	r2, #0
 800041c:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800041e:	4b30      	ldr	r3, [pc, #192]	@ (80004e0 <MX_FMC_Init+0x150>)
 8000420:	2201      	movs	r2, #1
 8000422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8000426:	23fc      	movs	r3, #252	@ 0xfc
 8000428:	633b      	str	r3, [r7, #48]	@ 0x30
  ComSpaceTiming.WaitSetupTime = 252;
 800042a:	23fc      	movs	r3, #252	@ 0xfc
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
  ComSpaceTiming.HoldSetupTime = 252;
 800042e:	23fc      	movs	r3, #252	@ 0xfc
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
  ComSpaceTiming.HiZSetupTime = 252;
 8000432:	23fc      	movs	r3, #252	@ 0xfc
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8000436:	23fc      	movs	r3, #252	@ 0xfc
 8000438:	623b      	str	r3, [r7, #32]
  AttSpaceTiming.WaitSetupTime = 252;
 800043a:	23fc      	movs	r3, #252	@ 0xfc
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  AttSpaceTiming.HoldSetupTime = 252;
 800043e:	23fc      	movs	r3, #252	@ 0xfc
 8000440:	62bb      	str	r3, [r7, #40]	@ 0x28
  AttSpaceTiming.HiZSetupTime = 252;
 8000442:	23fc      	movs	r3, #252	@ 0xfc
 8000444:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8000446:	f107 0220 	add.w	r2, r7, #32
 800044a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800044e:	4619      	mov	r1, r3
 8000450:	4823      	ldr	r0, [pc, #140]	@ (80004e0 <MX_FMC_Init+0x150>)
 8000452:	f001 fe51 	bl	80020f8 <HAL_NAND_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_FMC_Init+0xd0>
  {
    Error_Handler( );
 800045c:	f000 fd78 	bl	8000f50 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000460:	4b21      	ldr	r3, [pc, #132]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000462:	4a22      	ldr	r2, [pc, #136]	@ (80004ec <MX_FMC_Init+0x15c>)
 8000464:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000466:	4b20      	ldr	r3, [pc, #128]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800046c:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <MX_FMC_Init+0x158>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000472:	4b1d      	ldr	r3, [pc, #116]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000474:	2204      	movs	r2, #4
 8000476:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_FMC_Init+0x158>)
 800047a:	2210      	movs	r2, #16
 800047c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800047e:	4b1a      	ldr	r3, [pc, #104]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000480:	2240      	movs	r2, #64	@ 0x40
 8000482:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000486:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800048a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800048c:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <MX_FMC_Init+0x158>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <MX_FMC_Init+0x158>)
 8000494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000498:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <MX_FMC_Init+0x158>)
 800049c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80004a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <MX_FMC_Init+0x158>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 9;
 80004ac:	2309      	movs	r3, #9
 80004ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 6;
 80004b0:	2306      	movs	r3, #6
 80004b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 9;
 80004b4:	2309      	movs	r3, #9
 80004b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80004b8:	2303      	movs	r3, #3
 80004ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 3;
 80004bc:	2303      	movs	r3, #3
 80004be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 3;
 80004c0:	2303      	movs	r3, #3
 80004c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <MX_FMC_Init+0x158>)
 80004ca:	f006 fcfb 	bl	8006ec4 <HAL_SDRAM_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 80004d4:	f000 fd3c 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80004d8:	bf00      	nop
 80004da:	3740      	adds	r7, #64	@ 0x40
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2400017c 	.word	0x2400017c
 80004e4:	52004080 	.word	0x52004080
 80004e8:	240001bc 	.word	0x240001bc
 80004ec:	52004140 	.word	0x52004140

080004f0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0b8      	sub	sp, #224	@ 0xe0
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000506:	4b5c      	ldr	r3, [pc, #368]	@ (8000678 <HAL_FMC_MspInit+0x188>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	f040 80af 	bne.w	800066e <HAL_FMC_MspInit+0x17e>
    return;
  }
  FMC_Initialized = 1;
 8000510:	4b59      	ldr	r3, [pc, #356]	@ (8000678 <HAL_FMC_MspInit+0x188>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	22c0      	movs	r2, #192	@ 0xc0
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f00b f934 	bl	800b78c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000524:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000530:	2300      	movs	r3, #0
 8000532:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	4618      	mov	r0, r3
 800053a:	f004 f8b9 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000544:	f000 fd04 	bl	8000f50 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000548:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <HAL_FMC_MspInit+0x18c>)
 800054a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <HAL_FMC_MspInit+0x18c>)
 8000550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000554:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000558:	4b48      	ldr	r3, [pc, #288]	@ (800067c <HAL_FMC_MspInit+0x18c>)
 800055a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800055e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000566:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800056a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	2302      	movs	r3, #2
 8000570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000580:	230c      	movs	r3, #12
 8000582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000586:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800058a:	4619      	mov	r1, r3
 800058c:	483c      	ldr	r0, [pc, #240]	@ (8000680 <HAL_FMC_MspInit+0x190>)
 800058e:	f001 f96b 	bl	8001868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000592:	230d      	movs	r3, #13
 8000594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000598:	2302      	movs	r3, #2
 800059a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005aa:	230c      	movs	r3, #12
 80005ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005b4:	4619      	mov	r1, r3
 80005b6:	4833      	ldr	r0, [pc, #204]	@ (8000684 <HAL_FMC_MspInit+0x194>)
 80005b8:	f001 f956 	bl	8001868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005bc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005d6:	230c      	movs	r3, #12
 80005d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005e0:	4619      	mov	r1, r3
 80005e2:	4829      	ldr	r0, [pc, #164]	@ (8000688 <HAL_FMC_MspInit+0x198>)
 80005e4:	f001 f940 	bl	8001868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005e8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80005ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000602:	230c      	movs	r3, #12
 8000604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800060c:	4619      	mov	r1, r3
 800060e:	481f      	ldr	r0, [pc, #124]	@ (800068c <HAL_FMC_MspInit+0x19c>)
 8000610:	f001 f92a 	bl	8001868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000614:	f64d 7373 	movw	r3, #57203	@ 0xdf73
 8000618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800062e:	230c      	movs	r3, #12
 8000630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000634:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000638:	4619      	mov	r1, r3
 800063a:	4815      	ldr	r0, [pc, #84]	@ (8000690 <HAL_FMC_MspInit+0x1a0>)
 800063c:	f001 f914 	bl	8001868 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800065a:	2309      	movs	r3, #9
 800065c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000664:	4619      	mov	r1, r3
 8000666:	4807      	ldr	r0, [pc, #28]	@ (8000684 <HAL_FMC_MspInit+0x194>)
 8000668:	f001 f8fe 	bl	8001868 <HAL_GPIO_Init>
 800066c:	e000      	b.n	8000670 <HAL_FMC_MspInit+0x180>
    return;
 800066e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000670:	37e0      	adds	r7, #224	@ 0xe0
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	240001f0 	.word	0x240001f0
 800067c:	58024400 	.word	0x58024400
 8000680:	58021400 	.word	0x58021400
 8000684:	58020800 	.word	0x58020800
 8000688:	58021800 	.word	0x58021800
 800068c:	58021000 	.word	0x58021000
 8000690:	58020c00 	.word	0x58020c00

08000694 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 800069c:	f7ff ff28 	bl	80004f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80006b0:	f7ff ff1e 	bl	80004f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	4b60      	ldr	r3, [pc, #384]	@ (8000854 <MX_GPIO_Init+0x198>)
 80006d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006d8:	4a5e      	ldr	r2, [pc, #376]	@ (8000854 <MX_GPIO_Init+0x198>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80006e2:	4b5c      	ldr	r3, [pc, #368]	@ (8000854 <MX_GPIO_Init+0x198>)
 80006e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b58      	ldr	r3, [pc, #352]	@ (8000854 <MX_GPIO_Init+0x198>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80006f6:	4a57      	ldr	r2, [pc, #348]	@ (8000854 <MX_GPIO_Init+0x198>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000700:	4b54      	ldr	r3, [pc, #336]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070e:	4b51      	ldr	r3, [pc, #324]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000710:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000714:	4a4f      	ldr	r2, [pc, #316]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800071e:	4b4d      	ldr	r3, [pc, #308]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000720:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b49      	ldr	r3, [pc, #292]	@ (8000854 <MX_GPIO_Init+0x198>)
 800072e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000732:	4a48      	ldr	r2, [pc, #288]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800073c:	4b45      	ldr	r3, [pc, #276]	@ (8000854 <MX_GPIO_Init+0x198>)
 800073e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	4b42      	ldr	r3, [pc, #264]	@ (8000854 <MX_GPIO_Init+0x198>)
 800074c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000750:	4a40      	ldr	r2, [pc, #256]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000756:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800075a:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <MX_GPIO_Init+0x198>)
 800075c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <MX_GPIO_Init+0x198>)
 800076a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800076e:	4a39      	ldr	r2, [pc, #228]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000778:	4b36      	ldr	r3, [pc, #216]	@ (8000854 <MX_GPIO_Init+0x198>)
 800077a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b33      	ldr	r3, [pc, #204]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000788:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800078c:	4a31      	ldr	r2, [pc, #196]	@ (8000854 <MX_GPIO_Init+0x198>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000796:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <MX_GPIO_Init+0x198>)
 8000798:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2150      	movs	r1, #80	@ 0x50
 80007a8:	482b      	ldr	r0, [pc, #172]	@ (8000858 <MX_GPIO_Init+0x19c>)
 80007aa:	f001 fa0d 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b4:	4829      	ldr	r0, [pc, #164]	@ (800085c <MX_GPIO_Init+0x1a0>)
 80007b6:	f001 fa07 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	21c0      	movs	r1, #192	@ 0xc0
 80007be:	4828      	ldr	r0, [pc, #160]	@ (8000860 <MX_GPIO_Init+0x1a4>)
 80007c0:	f001 fa02 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80007c4:	232c      	movs	r3, #44	@ 0x2c
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4820      	ldr	r0, [pc, #128]	@ (8000858 <MX_GPIO_Init+0x19c>)
 80007d8:	f001 f846 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007dc:	2350      	movs	r3, #80	@ 0x50
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4819      	ldr	r0, [pc, #100]	@ (8000858 <MX_GPIO_Init+0x19c>)
 80007f4:	f001 f838 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4812      	ldr	r0, [pc, #72]	@ (800085c <MX_GPIO_Init+0x1a0>)
 8000812:	f001 f829 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000816:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_GPIO_Init+0x1a0>)
 800082c:	f001 f81c 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000830:	23c0      	movs	r3, #192	@ 0xc0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	@ (8000860 <MX_GPIO_Init+0x1a4>)
 8000848:	f001 f80e 	bl	8001868 <HAL_GPIO_Init>

}
 800084c:	bf00      	nop
 800084e:	3730      	adds	r7, #48	@ 0x30
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400
 8000858:	58021000 	.word	0x58021000
 800085c:	58020800 	.word	0x58020800
 8000860:	58021400 	.word	0x58021400

08000864 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_I2C1_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	@ (80008dc <MX_I2C1_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800086e:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_I2C1_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <MX_I2C1_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_I2C1_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <MX_I2C1_Init+0x74>)
 80008a0:	f001 f9c6 	bl	8001c30 <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 fb51 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <MX_I2C1_Init+0x74>)
 80008b2:	f001 fa59 	bl	8001d68 <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 fb48 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_I2C1_Init+0x74>)
 80008c4:	f001 fa9b 	bl	8001dfe <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fb3f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	240001f4 	.word	0x240001f4
 80008dc:	40005400 	.word	0x40005400
 80008e0:	20b0ccff 	.word	0x20b0ccff

080008e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_I2C2_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_I2C2_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C2_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_I2C2_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C2_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_I2C2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000920:	f001 f986 	bl	8001c30 <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 fb11 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000932:	f001 fa19 	bl	8001d68 <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fb08 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_I2C2_Init+0x74>)
 8000944:	f001 fa5b 	bl	8001dfe <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 faff 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000248 	.word	0x24000248
 800095c:	40005800 	.word	0x40005800
 8000960:	20b0ccff 	.word	0x20b0ccff

08000964 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0bc      	sub	sp, #240	@ 0xf0
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	22c0      	movs	r2, #192	@ 0xc0
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00a ff01 	bl	800b78c <memset>
  if(i2cHandle->Instance==I2C1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a4d      	ldr	r2, [pc, #308]	@ (8000ac4 <HAL_I2C_MspInit+0x160>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d146      	bne.n	8000a22 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000994:	f04f 0208 	mov.w	r2, #8
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fe80 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009b6:	f000 facb 	bl	8000f50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b43      	ldr	r3, [pc, #268]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c0:	4a41      	ldr	r2, [pc, #260]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ca:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 80009cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d8:	23c0      	movs	r3, #192	@ 0xc0
 80009da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f0:	2304      	movs	r3, #4
 80009f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009fa:	4619      	mov	r1, r3
 80009fc:	4833      	ldr	r0, [pc, #204]	@ (8000acc <HAL_I2C_MspInit+0x168>)
 80009fe:	f000 ff33 	bl	8001868 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a02:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a08:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a0e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000a12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a20:	e04b      	b.n	8000aba <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad0 <HAL_I2C_MspInit+0x16c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d146      	bne.n	8000aba <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a2c:	f04f 0208 	mov.w	r2, #8
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 0318 	add.w	r3, r7, #24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fe34 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000a4e:	f000 fa7f 	bl	8000f50 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a78:	2312      	movs	r3, #18
 8000a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <HAL_I2C_MspInit+0x168>)
 8000a98:	f000 fee6 	bl	8001868 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000a9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000aa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aa8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_I2C_MspInit+0x164>)
 8000aae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
}
 8000aba:	bf00      	nop
 8000abc:	37f0      	adds	r7, #240	@ 0xf0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020400 	.word	0x58020400
 8000ad0:	40005800 	.word	0x40005800

08000ad4 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
I2S_HandleTypeDef hi2s2;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000ada:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <MX_I2S1_Init+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000ae0:	2206      	movs	r2, #6
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000aea:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af0:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000af4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000af8:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000afc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b00:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b14:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_I2S1_Init+0x60>)
 8000b22:	f001 f9b9 	bl	8001e98 <HAL_I2S_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_I2S1_Init+0x5c>
  {
    Error_Handler();
 8000b2c:	f000 fa10 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2400029c 	.word	0x2400029c
 8000b38:	40013000 	.word	0x40013000

08000b3c <MX_I2S2_Init>:
/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <MX_I2S2_Init+0x64>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b62:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000b66:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hi2s2.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hi2s2.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s2.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_I2S2_Init+0x60>)
 8000b88:	f001 f986 	bl	8001e98 <HAL_I2S_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2S2_Init+0x5a>
  {
    Error_Handler();
 8000b92:	f000 f9dd 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	240002f0 	.word	0x240002f0
 8000ba0:	40003800 	.word	0x40003800

08000ba4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0be      	sub	sp, #248	@ 0xf8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	22c0      	movs	r2, #192	@ 0xc0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f00a fde1 	bl	800b78c <memset>
  if(i2sHandle->Instance==SPI1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a71      	ldr	r2, [pc, #452]	@ (8000d94 <HAL_I2S_MspInit+0x1f0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d16b      	bne.n	8000cac <HAL_I2S_MspInit+0x108>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fd60 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8000bf6:	f000 f9ab 	bl	8000f50 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	4b67      	ldr	r3, [pc, #412]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000bfc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c00:	4a65      	ldr	r2, [pc, #404]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c06:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8000c0a:	4b63      	ldr	r3, [pc, #396]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c0c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	4b5f      	ldr	r3, [pc, #380]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c28:	4b5b      	ldr	r3, [pc, #364]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c3c:	4a56      	ldr	r2, [pc, #344]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    PC4     ------> I2S1_MCK
    PA15     ------> I2S1_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8000c54:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000c58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4848      	ldr	r0, [pc, #288]	@ (8000d9c <HAL_I2S_MspInit+0x1f8>)
 8000c7c:	f000 fdf4 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c80:	2310      	movs	r3, #16
 8000c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c98:	2305      	movs	r3, #5
 8000c9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	483e      	ldr	r0, [pc, #248]	@ (8000da0 <HAL_I2S_MspInit+0x1fc>)
 8000ca6:	f000 fddf 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000caa:	e06f      	b.n	8000d8c <HAL_I2S_MspInit+0x1e8>
  else if(i2sHandle->Instance==SPI2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8000da4 <HAL_I2S_MspInit+0x200>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d16a      	bne.n	8000d8c <HAL_I2S_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cba:	f04f 0300 	mov.w	r3, #0
 8000cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 fcef 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_I2S_MspInit+0x138>
      Error_Handler();
 8000cd8:	f000 f93a 	bl	8000f50 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000cde:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000cee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000cfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d00:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_I2S_MspInit+0x1f4>)
 8000d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000d36:	2342      	movs	r3, #66	@ 0x42
 8000d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	@ (8000da0 <HAL_I2S_MspInit+0x1fc>)
 8000d5c:	f000 fd84 	bl	8001868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d60:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4808      	ldr	r0, [pc, #32]	@ (8000da8 <HAL_I2S_MspInit+0x204>)
 8000d88:	f000 fd6e 	bl	8001868 <HAL_GPIO_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	37f8      	adds	r7, #248	@ 0xf8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013000 	.word	0x40013000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	58020800 	.word	0x58020800
 8000da4:	40003800 	.word	0x40003800
 8000da8:	58020400 	.word	0x58020400

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int buffer = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000db6:	f000 f89f 	bl	8000ef8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fb17 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f823 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f7ff fc7b 	bl	80006bc <MX_GPIO_Init>
  MX_FMC_Init();
 8000dc6:	f7ff fae3 	bl	8000390 <MX_FMC_Init>
  MX_I2S1_Init();
 8000dca:	f7ff fe83 	bl	8000ad4 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000dce:	f7ff feb5 	bl	8000b3c <MX_I2S2_Init>
  MX_SPDIFRX_Init();
 8000dd2:	f000 f8c3 	bl	8000f5c <MX_SPDIFRX_Init>
  MX_I2C1_Init();
 8000dd6:	f7ff fd45 	bl	8000864 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dda:	f7ff fd83 	bl	80008e4 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000dde:	f009 fd75 	bl	800a8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  while(1) {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000de2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <main+0x54>)
 8000de8:	f000 ff07 	bl	8001bfa <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 8000dec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df0:	f000 fb8e 	bl	8001510 <HAL_Delay>
  	  printf("Fart\r\n");
 8000df4:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <main+0x58>)
 8000df6:	f00a fbe9 	bl	800b5cc <puts>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dfa:	bf00      	nop
 8000dfc:	e7f1      	b.n	8000de2 <main+0x36>
 8000dfe:	bf00      	nop
 8000e00:	58020800 	.word	0x58020800
 8000e04:	0800c314 	.word	0x0800c314

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09c      	sub	sp, #112	@ 0x70
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	224c      	movs	r2, #76	@ 0x4c
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00a fcb8 	bl	800b78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00a fcb2 	bl	800b78c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e28:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <SystemClock_Config+0xe8>)
 8000e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f002 fc4a 	bl	80036cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <SystemClock_Config+0xec>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef4 <SystemClock_Config+0xec>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <SystemClock_Config+0xec>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e54:	bf00      	nop
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <SystemClock_Config+0xec>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e62:	d1f8      	bne.n	8000e56 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e64:	2322      	movs	r3, #34	@ 0x22
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000e6c:	2340      	movs	r3, #64	@ 0x40
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8000e80:	2323      	movs	r3, #35	@ 0x23
 8000e82:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e90:	230c      	movs	r3, #12
 8000e92:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 fc5d 	bl	8003760 <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000eac:	f000 f850 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	233f      	movs	r3, #63	@ 0x3f
 8000eb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ec0:	2340      	movs	r3, #64	@ 0x40
 8000ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ec4:	2340      	movs	r3, #64	@ 0x40
 8000ec6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ecc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ece:	2340      	movs	r3, #64	@ 0x40
 8000ed0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f874 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000ee2:	f000 f835 	bl	8000f50 <Error_Handler>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3770      	adds	r7, #112	@ 0x70
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58024800 	.word	0x58024800

08000ef8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f0a:	f000 fc35 	bl	8001778 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f1e:	2387      	movs	r3, #135	@ 0x87
 8000f20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fc53 	bl	80017e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 fc30 	bl	80017a8 <HAL_MPU_Enable>

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f62:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000f66:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif.Init.SymbolClockGen = DISABLE;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif.Init.BackupSymbolClockGen = DISABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_SPDIFRX_Init+0x6c>)
 8000fb6:	f005 ffc1 	bl	8006f3c <HAL_SPDIFRX_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SPDIFRX_Init+0x68>
  {
    Error_Handler();
 8000fc0:	f7ff ffc6 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	24000344 	.word	0x24000344

08000fcc <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	22c0      	movs	r2, #192	@ 0xc0
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00a fbcd 	bl	800b78c <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8000ffa:	d141      	bne.n	8001080 <HAL_SPDIFRX_MspInit+0xb4>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8000ffc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8001008:	2300      	movs	r3, #0
 800100a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fb4d 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 800101c:	f7ff ff98 	bl	8000f50 <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001022:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001026:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001032:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_SPDIFRX_MspInit+0xbc>)
 8001050:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001078:	4619      	mov	r1, r3
 800107a:	4804      	ldr	r0, [pc, #16]	@ (800108c <HAL_SPDIFRX_MspInit+0xc0>)
 800107c:	f000 fbf4 	bl	8001868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 8001080:	bf00      	nop
 8001082:	37e8      	adds	r7, #232	@ 0xe8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58020c00 	.word	0x58020c00

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_MspInit+0x30>)
 8001098:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_MspInit+0x30>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_MspInit+0x30>)
 80010a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	58024400 	.word	0x58024400

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <NMI_Handler+0x4>

080010cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <MemManage_Handler+0x4>

080010dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111a:	f000 f9d9 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800112a:	f001 f970 	bl	800240e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2400187c 	.word	0x2400187c

08001138 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800113e:	f001 f966 	bl	800240e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2400187c 	.word	0x2400187c

0800114c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <OTG_HS_IRQHandler+0x10>)
 8001152:	f001 f95c 	bl	800240e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2400187c 	.word	0x2400187c

08001160 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00a      	b.n	8001188 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001172:	f3af 8000 	nop.w
 8001176:	4601      	mov	r1, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf0      	blt.n	8001172 <_read+0x12>
  }

  return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e009      	b.n	80011c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf1      	blt.n	80011ac <_write+0x12>
  }
  return len;
 80011c8:	687b      	ldr	r3, [r7, #4]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_close>:

int _close(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011fa:	605a      	str	r2, [r3, #4]
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_isatty>:

int _isatty(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f00a fadc 	bl	800b828 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	24100000 	.word	0x24100000
 800129c:	00000400 	.word	0x00000400
 80012a0:	24000394 	.word	0x24000394
 80012a4:	240020d0 	.word	0x240020d0

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <SystemInit+0xd0>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a31      	ldr	r2, [pc, #196]	@ (8001378 <SystemInit+0xd0>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012bc:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <SystemInit+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d807      	bhi.n	80012d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c8:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <SystemInit+0xd4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <SystemInit+0xd4>)
 80012d2:	f043 0303 	orr.w	r3, r3, #3
 80012d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <SystemInit+0xd8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <SystemInit+0xd8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e4:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <SystemInit+0xd8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <SystemInit+0xd8>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4924      	ldr	r1, [pc, #144]	@ (8001380 <SystemInit+0xd8>)
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <SystemInit+0xdc>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <SystemInit+0xd4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <SystemInit+0xd4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	4a1c      	ldr	r2, [pc, #112]	@ (800137c <SystemInit+0xd4>)
 800130c:	f043 0303 	orr.w	r3, r3, #3
 8001310:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <SystemInit+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <SystemInit+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <SystemInit+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <SystemInit+0xd8>)
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <SystemInit+0xe0>)
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <SystemInit+0xd8>)
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <SystemInit+0xe4>)
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <SystemInit+0xd8>)
 8001332:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <SystemInit+0xe8>)
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <SystemInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <SystemInit+0xd8>)
 800133e:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <SystemInit+0xe8>)
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <SystemInit+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <SystemInit+0xd8>)
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <SystemInit+0xe8>)
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <SystemInit+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SystemInit+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SystemInit+0xd8>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <SystemInit+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <SystemInit+0xec>)
 8001368:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800136c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	52002000 	.word	0x52002000
 8001380:	58024400 	.word	0x58024400
 8001384:	eaf6ed7f 	.word	0xeaf6ed7f
 8001388:	02020200 	.word	0x02020200
 800138c:	01ff0000 	.word	0x01ff0000
 8001390:	01010280 	.word	0x01010280
 8001394:	52004000 	.word	0x52004000

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ff84 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f00a fa35 	bl	800b834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fcef 	bl	8000dac <main>
  bx  lr
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80013d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d8:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 80013dc:	0800c3f0 	.word	0x0800c3f0
  ldr r2, =_sbss
 80013e0:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 80013e4:	240020cc 	.word	0x240020cc

080013e8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f2:	2003      	movs	r0, #3
 80013f4:	f000 f980 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80013f8:	f002 ff9a 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4913      	ldr	r1, [pc, #76]	@ (8001458 <HAL_Init+0x6c>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_Init+0x6c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_Init+0x70>)
 800142e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <HAL_Init+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f814 	bl	8001464 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e002      	b.n	800144c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001446:	f7ff fe23 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	0800c39c 	.word	0x0800c39c
 800145c:	24000004 	.word	0x24000004
 8001460:	24000000 	.word	0x24000000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_InitTick+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e021      	b.n	80014bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_InitTick+0x64>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f965 	bl	800175e <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f92f 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x68>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2400000c 	.word	0x2400000c
 80014c8:	24000000 	.word	0x24000000
 80014cc:	24000008 	.word	0x24000008

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2400000c 	.word	0x2400000c
 80014f4:	24000398 	.word	0x24000398

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	24000398 	.word	0x24000398

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400000c 	.word	0x2400000c

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x40>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00
 800159c:	05fa0000 	.word	0x05fa0000

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	@ (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff29 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff40 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff33 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa4 	bl	80016b4 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800177c:	f3bf 8f5f 	dmb	sy
}
 8001780:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_MPU_Disable+0x28>)
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <HAL_MPU_Disable+0x28>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_MPU_Disable+0x2c>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	e000ed90 	.word	0xe000ed90

080017a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017b0:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_MPU_Enable+0x38>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_MPU_Enable+0x3c>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <HAL_MPU_Enable+0x3c>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017c6:	f3bf 8f4f 	dsb	sy
}
 80017ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017cc:	f3bf 8f6f 	isb	sy
}
 80017d0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed90 	.word	0xe000ed90
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	785a      	ldrb	r2, [r3, #1]
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_MPU_ConfigRegion+0x7c>)
 80017f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <HAL_MPU_ConfigRegion+0x7c>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <HAL_MPU_ConfigRegion+0x7c>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001804:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <HAL_MPU_ConfigRegion+0x7c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7adb      	ldrb	r3, [r3, #11]
 8001816:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001818:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7a9b      	ldrb	r3, [r3, #10]
 800181e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001820:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7b5b      	ldrb	r3, [r3, #13]
 8001826:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7b9b      	ldrb	r3, [r3, #14]
 800182e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7bdb      	ldrb	r3, [r3, #15]
 8001836:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7a5b      	ldrb	r3, [r3, #9]
 800183e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7a1b      	ldrb	r3, [r3, #8]
 8001846:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001848:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001852:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001854:	6113      	str	r3, [r2, #16]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed90 	.word	0xe000ed90

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <HAL_GPIO_Init+0x234>)
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800187a:	e194      	b.n	8001ba6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8186 	beq.w	8001ba0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x44>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 0201 	and.w	r2, r3, #1
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	69b9      	ldr	r1, [r7, #24]
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80e0 	beq.w	8001ba0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa0 <HAL_GPIO_Init+0x238>)
 80019e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019e6:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <HAL_GPIO_Init+0x238>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80019f0:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_GPIO_Init+0x238>)
 80019f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <HAL_GPIO_Init+0x23c>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <HAL_GPIO_Init+0x240>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d052      	beq.n	8001ad0 <HAL_GPIO_Init+0x268>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_GPIO_Init+0x244>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d031      	beq.n	8001a96 <HAL_GPIO_Init+0x22e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab0 <HAL_GPIO_Init+0x248>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x22a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_GPIO_Init+0x24c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d025      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <HAL_GPIO_Init+0x250>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01f      	beq.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_GPIO_Init+0x254>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d019      	beq.n	8001a86 <HAL_GPIO_Init+0x21e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac0 <HAL_GPIO_Init+0x258>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <HAL_GPIO_Init+0x25c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <HAL_GPIO_Init+0x260>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_GPIO_Init+0x264>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a72:	2309      	movs	r3, #9
 8001a74:	e02d      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a76:	230a      	movs	r3, #10
 8001a78:	e02b      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	e029      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e027      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e025      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e023      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e021      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e01f      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e01d      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e01b      	b.n	8001ad2 <HAL_GPIO_Init+0x26a>
 8001a9a:	bf00      	nop
 8001a9c:	58000080 	.word	0x58000080
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58000400 	.word	0x58000400
 8001aa8:	58020000 	.word	0x58020000
 8001aac:	58020400 	.word	0x58020400
 8001ab0:	58020800 	.word	0x58020800
 8001ab4:	58020c00 	.word	0x58020c00
 8001ab8:	58021000 	.word	0x58021000
 8001abc:	58021400 	.word	0x58021400
 8001ac0:	58021800 	.word	0x58021800
 8001ac4:	58021c00 	.word	0x58021c00
 8001ac8:	58022000 	.word	0x58022000
 8001acc:	58022400 	.word	0x58022400
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae2:	4938      	ldr	r1, [pc, #224]	@ (8001bc4 <HAL_GPIO_Init+0x35c>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f47f ae63 	bne.w	800187c <HAL_GPIO_Init+0x14>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3724      	adds	r7, #36	@ 0x24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58000400 	.word	0x58000400

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0c:	887a      	ldrh	r2, [r7, #2]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	041a      	lsls	r2, r3, #16
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08b      	b.n	8001d5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fe84 	bl	8000964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	@ 0x24
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e006      	b.n	8001cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d108      	bne.n	8001cd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	e007      	b.n	8001ce2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <HAL_I2C_Init+0x134>)
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69d9      	ldr	r1, [r3, #28]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	02008000 	.word	0x02008000

08001d68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d138      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e032      	b.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2224      	movs	r2, #36	@ 0x24
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e000      	b.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	d139      	bne.n	8001e88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e033      	b.n	8001e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2224      	movs	r2, #36	@ 0x24
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e000      	b.n	8001e8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
  }
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e11a      	b.n	80020e0 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe fe70 	bl	8000ba4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d008      	beq.n	8001f0c <HAL_I2S_Init+0x74>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d004      	beq.n	8001f0c <HAL_I2S_Init+0x74>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	f040 8094 	bne.w	8002034 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d067      	beq.n	8001fe4 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e001      	b.n	8001f26 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8001f22:	2301      	movs	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b30      	cmp	r3, #48	@ 0x30
 8001f2c:	d003      	beq.n	8001f36 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8001f32:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f34:	d102      	bne.n	8001f3c <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8001f36:	2301      	movs	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	e001      	b.n	8001f40 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	@ (80020e8 <HAL_I2S_Init+0x250>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d107      	bne.n	8001f5a <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8001f4a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	f003 fd6b 	bl	8005a2c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	e006      	b.n	8001f68 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8001f5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	f003 fd63 	bl	8005a2c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f66:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f70:	d113      	bne.n	8001f9a <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	3305      	adds	r3, #5
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e014      	b.n	8001fc4 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	3305      	adds	r3, #5
 8001fc2:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4a49      	ldr	r2, [pc, #292]	@ (80020ec <HAL_I2S_Init+0x254>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e003      	b.n	8001fec <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d102      	bne.n	8001ff8 <HAL_I2S_Init+0x160>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d002      	beq.n	8001ffe <HAL_I2S_Init+0x166>
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2bff      	cmp	r3, #255	@ 0xff
 8001ffc:	d907      	bls.n	800200e <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e068      	b.n	80020e0 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8002014:	2301      	movs	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800201e:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_I2S_Init+0x258>)
 8002020:	4013      	ands	r3, r2
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	0411      	lsls	r1, r2, #16
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	0612      	lsls	r2, r2, #24
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	430b      	orrs	r3, r1
 8002032:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800203a:	4b2e      	ldr	r3, [pc, #184]	@ (80020f4 <HAL_I2S_Init+0x25c>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6851      	ldr	r1, [r2, #4]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6892      	ldr	r2, [r2, #8]
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68d2      	ldr	r2, [r2, #12]
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6992      	ldr	r2, [r2, #24]
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a12      	ldr	r2, [r2, #32]
 8002058:	4311      	orrs	r1, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6912      	ldr	r2, [r2, #16]
 8002064:	430a      	orrs	r2, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f640 72f8 	movw	r2, #4088	@ 0xff8
 800207a:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800208a:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d007      	beq.n	80020ba <HAL_I2S_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d003      	beq.n	80020ba <HAL_I2S_Init+0x222>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d10a      	bne.n	80020d0 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	58001400 	.word	0x58001400
 80020ec:	cccccccd 	.word	0xcccccccd
 80020f0:	fe00ffff 	.word	0xfe00ffff
 80020f4:	fdff9040 	.word	0xfdff9040

080020f8 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e037      	b.n	800217e <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f7fe fab6 	bl	8000694 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f004 ff70 	bl	8007018 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	461a      	mov	r2, r3
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	f004 ff92 	bl	800706c <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	461a      	mov	r2, r3
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f004 ffa7 	bl	80070a6 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0204 	orr.w	r2, r2, #4
 8002166:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_NAND_Init+0x90>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a06      	ldr	r2, [pc, #24]	@ (8002188 <HAL_NAND_Init+0x90>)
 800216e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002172:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	52004000 	.word	0x52004000

0800218c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0fe      	b.n	800239c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f008 fd6c 	bl	800ac90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2203      	movs	r2, #3
 80021bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f005 f976 	bl	80074b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7c1a      	ldrb	r2, [r3, #16]
 80021d2:	f88d 2000 	strb.w	r2, [sp]
 80021d6:	3304      	adds	r3, #4
 80021d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021da:	f005 f847 	bl	800726c <USB_CoreInit>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0d5      	b.n	800239c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 f96e 	bl	80074d8 <USB_SetCurrentMode>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0c6      	b.n	800239c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e04a      	b.n	80022aa <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3315      	adds	r3, #21
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002228:	7bfa      	ldrb	r2, [r7, #15]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3314      	adds	r3, #20
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	b298      	uxth	r0, r3
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	332e      	adds	r3, #46	@ 0x2e
 8002250:	4602      	mov	r2, r0
 8002252:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3318      	adds	r3, #24
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	331c      	adds	r3, #28
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3320      	adds	r3, #32
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3324      	adds	r3, #36	@ 0x24
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	3301      	adds	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3af      	bcc.n	8002214 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e044      	b.n	8002344 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	3301      	adds	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	791b      	ldrb	r3, [r3, #4]
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3b5      	bcc.n	80022ba <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7c1a      	ldrb	r2, [r3, #16]
 8002356:	f88d 2000 	strb.w	r2, [sp]
 800235a:	3304      	adds	r3, #4
 800235c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235e:	f005 f907 	bl	8007570 <USB_DevInit>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e013      	b.n	800239c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7b1b      	ldrb	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f001 f96e 	bl	800366c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f006 f94a 	bl	800862e <USB_DevDisconnect>

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_PCD_Start+0x1c>
 80023bc:	2302      	movs	r3, #2
 80023be:	e022      	b.n	8002406 <HAL_PCD_Start+0x62>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 f851 	bl	8007494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f006 f8f8 	bl	80085ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b08d      	sub	sp, #52	@ 0x34
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f006 f9b6 	bl	8008796 <USB_GetMode>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 84b9 	bne.w	8002da4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f006 f91a 	bl	8008670 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 84af 	beq.w	8002da2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f006 f907 	bl	8008670 <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d107      	bne.n	800247c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f002 0202 	and.w	r2, r2, #2
 800247a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f006 f8f5 	bl	8008670 <USB_ReadInterrupts>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d161      	bne.n	8002554 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0210 	bic.w	r2, r2, #16
 800249e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	0c5b      	lsrs	r3, r3, #17
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d124      	bne.n	8002516 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d035      	beq.n	8002544 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a38      	ldr	r0, [r7, #32]
 80024ec:	f005 ff2c 	bl	8008348 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024fc:	441a      	add	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800250e:	441a      	add	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	e016      	b.n	8002544 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	0c5b      	lsrs	r3, r3, #17
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	2b06      	cmp	r3, #6
 8002520:	d110      	bne.n	8002544 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002528:	2208      	movs	r2, #8
 800252a:	4619      	mov	r1, r3
 800252c:	6a38      	ldr	r0, [r7, #32]
 800252e:	f005 ff0b 	bl	8008348 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253e:	441a      	add	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0210 	orr.w	r2, r2, #16
 8002552:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f006 f889 	bl	8008670 <USB_ReadInterrupts>
 800255e:	4603      	mov	r3, r0
 8002560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002564:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002568:	f040 80a7 	bne.w	80026ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f006 f88e 	bl	8008696 <USB_ReadDevAllOutEpInterrupt>
 800257a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800257c:	e099      	b.n	80026b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 808e 	beq.w	80026a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f006 f8b2 	bl	80086fe <USB_ReadDevOutEPInterrupt>
 800259a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00c      	beq.n	80025c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b2:	461a      	mov	r2, r3
 80025b4:	2301      	movs	r3, #1
 80025b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fed0 	bl	8003360 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2308      	movs	r3, #8
 80025da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 ffa6 	bl	8003530 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025fa:	461a      	mov	r2, r3
 80025fc:	2310      	movs	r3, #16
 80025fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d030      	beq.n	800266c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b80      	cmp	r3, #128	@ 0x80
 8002614:	d109      	bne.n	800262a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002628:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	3304      	adds	r3, #4
 800263e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d108      	bne.n	800265a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2200      	movs	r2, #0
 800264c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f008 fc73 	bl	800af40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	2302      	movs	r3, #2
 800266a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002682:	461a      	mov	r2, r3
 8002684:	2320      	movs	r3, #32
 8002686:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800269e:	461a      	mov	r2, r3
 80026a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	3301      	adds	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80026ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80026b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f af62 	bne.w	800257e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 ffd6 	bl	8008670 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ce:	f040 80db 	bne.w	8002888 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 fff7 	bl	80086ca <USB_ReadDevAllInEpInterrupt>
 80026dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80026e2:	e0cd      	b.n	8002880 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80c2 	beq.w	8002874 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f006 f81d 	bl	800873a <USB_ReadDevInEPInterrupt>
 8002700:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d057      	beq.n	80027bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	2201      	movs	r2, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	69f9      	ldr	r1, [r7, #28]
 8002728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800272c:	4013      	ands	r3, r2
 800272e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800273c:	461a      	mov	r2, r3
 800273e:	2301      	movs	r3, #1
 8002740:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	799b      	ldrb	r3, [r3, #6]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d132      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3320      	adds	r3, #32
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4403      	add	r3, r0
 800276a:	331c      	adds	r3, #28
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4419      	add	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4403      	add	r3, r0
 800277e:	3320      	adds	r3, #32
 8002780:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x3a2>
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3324      	adds	r3, #36	@ 0x24
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027a8:	461a      	mov	r2, r3
 80027aa:	2101      	movs	r1, #1
 80027ac:	f006 f826 	bl	80087fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4619      	mov	r1, r3
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f008 fb3d 	bl	800ae36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2308      	movs	r3, #8
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027ee:	461a      	mov	r2, r3
 80027f0:	2310      	movs	r3, #16
 80027f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800280a:	461a      	mov	r2, r3
 800280c:	2340      	movs	r3, #64	@ 0x40
 800280e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d023      	beq.n	8002862 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800281a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800281c:	6a38      	ldr	r0, [r7, #32]
 800281e:	f005 f805 	bl	800782c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3310      	adds	r3, #16
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	78db      	ldrb	r3, [r3, #3]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f008 fb8a 	bl	800af64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800285c:	461a      	mov	r2, r3
 800285e:	2302      	movs	r3, #2
 8002860:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800286c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fcea 	bl	8003248 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	3301      	adds	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	f47f af2e 	bne.w	80026e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f005 feef 	bl	8008670 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800289c:	d122      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028c4:	2100      	movs	r1, #0
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fef4 	bl	80036b4 <HAL_PCDEx_LPM_Callback>
 80028cc:	e002      	b.n	80028d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f008 fb28 	bl	800af24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80028e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fec1 	bl	8008670 <USB_ReadInterrupts>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028f8:	d112      	bne.n	8002920 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f008 fae4 	bl	800aed8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f005 fea3 	bl	8008670 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002934:	d121      	bne.n	800297a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002944:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800296a:	2101      	movs	r1, #1
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fea1 	bl	80036b4 <HAL_PCDEx_LPM_Callback>
 8002972:	e002      	b.n	800297a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f008 faaf 	bl	800aed8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f005 fe76 	bl	8008670 <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800298e:	f040 80b7 	bne.w	8002b00 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2110      	movs	r1, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 ff3d 	bl	800782c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b6:	e046      	b.n	8002a46 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029c4:	461a      	mov	r2, r3
 80029c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80029e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a10:	0151      	lsls	r1, r2, #5
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	440a      	add	r2, r1
 8002a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a42:	3301      	adds	r3, #1
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d3b2      	bcc.n	80029b8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a60:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7bdb      	ldrb	r3, [r3, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a7e:	f043 030b 	orr.w	r3, r3, #11
 8002a82:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a94:	f043 030b 	orr.w	r3, r3, #11
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	e015      	b.n	8002ac8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac2:	f043 030b 	orr.w	r3, r3, #11
 8002ac6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ada:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aea:	461a      	mov	r2, r3
 8002aec:	f005 fe86 	bl	80087fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 fdb3 	bl	8008670 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b14:	d123      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f005 fe4a 	bl	80087b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 fefa 	bl	800791e <USB_GetDevSpeed>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681c      	ldr	r4, [r3, #0]
 8002b36:	f001 fd75 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8002b3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b40:	461a      	mov	r2, r3
 8002b42:	4620      	mov	r0, r4
 8002b44:	f004 fc04 	bl	8007350 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f008 f99c 	bl	800ae86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 fd84 	bl	8008670 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d10a      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f008 f979 	bl	800ae6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f002 0208 	and.w	r2, r2, #8
 8002b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 fd6f 	bl	8008670 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b98:	2b80      	cmp	r3, #128	@ 0x80
 8002b9a:	d123      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bac:	e014      	b.n	8002bd8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fb0a 	bl	80031e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d3e4      	bcc.n	8002bae <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 fd41 	bl	8008670 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf8:	d13c      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfe:	e02b      	b.n	8002c58 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3318      	adds	r3, #24
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d115      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	da12      	bge.n	8002c52 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3317      	adds	r3, #23
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 faca 	bl	80031e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	3301      	adds	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d3cd      	bcc.n	8002c00 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f005 fcf9 	bl	8008670 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c88:	d156      	bne.n	8002d38 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	e045      	b.n	8002d1c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d12e      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da2b      	bge.n	8002d16 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	0c1a      	lsrs	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002cc8:	4053      	eors	r3, r2
 8002cca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d121      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d12:	6053      	str	r3, [r2, #4]
            break;
 8002d14:	e008      	b.n	8002d28 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d3b3      	bcc.n	8002c90 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f005 fc97 	bl	8008670 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4c:	d10a      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f008 f91a 	bl	800af88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f005 fc81 	bl	8008670 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d115      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f008 f90a 	bl	800afa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	e000      	b.n	8002da4 <HAL_PCD_IRQHandler+0x996>
      return;
 8002da2:	bf00      	nop
    }
  }
}
 8002da4:	3734      	adds	r7, #52	@ 0x34
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}

08002daa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_PCD_SetAddress+0x1a>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e012      	b.n	8002dea <HAL_PCD_SetAddress+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 fbe0 	bl	80085a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	4608      	mov	r0, r1
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4603      	mov	r3, r0
 8002e02:	70fb      	strb	r3, [r7, #3]
 8002e04:	460b      	mov	r3, r1
 8002e06:	803b      	strh	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	da0f      	bge.n	8002e38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	f003 020f 	and.w	r2, r3, #15
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	3310      	adds	r3, #16
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	705a      	strb	r2, [r3, #1]
 8002e36:	e00f      	b.n	8002e58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e64:	883b      	ldrh	r3, [r7, #0]
 8002e66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	78ba      	ldrb	r2, [r7, #2]
 8002e72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e86:	78bb      	ldrb	r3, [r7, #2]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d102      	bne.n	8002e92 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_EP_Open+0xae>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e00e      	b.n	8002ebe <HAL_PCD_EP_Open+0xcc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fd5a 	bl	8007968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da0f      	bge.n	8002efa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 020f 	and.w	r2, r3, #15
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3310      	adds	r3, #16
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	705a      	strb	r2, [r3, #1]
 8002ef8:	e00f      	b.n	8002f1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_PCD_EP_Close+0x6e>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e00e      	b.n	8002f52 <HAL_PCD_EP_Close+0x8c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fd98 	bl	8007a78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	460b      	mov	r3, r1
 8002f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	799b      	ldrb	r3, [r3, #6]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	799b      	ldrb	r3, [r3, #6]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	f004 fe35 	bl	8007c30 <USB_EPStartXfer>

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	460b      	mov	r3, r1
 800300e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	3310      	adds	r3, #16
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	3304      	adds	r3, #4
 8003026:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2201      	movs	r2, #1
 800303e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	b2da      	uxtb	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	799b      	ldrb	r3, [r3, #6]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	799b      	ldrb	r3, [r3, #6]
 8003062:	461a      	mov	r2, r3
 8003064:	6979      	ldr	r1, [r7, #20]
 8003066:	f004 fde3 	bl	8007c30 <USB_EPStartXfer>

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	7912      	ldrb	r2, [r2, #4]
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e04f      	b.n	8003132 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003096:	2b00      	cmp	r3, #0
 8003098:	da0f      	bge.n	80030ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3310      	adds	r3, #16
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	705a      	strb	r2, [r3, #1]
 80030b8:	e00d      	b.n	80030d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_PCD_EP_SetStall+0x82>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e01d      	b.n	8003132 <HAL_PCD_EP_SetStall+0xbe>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	4618      	mov	r0, r3
 8003106:	f005 f977 	bl	80083f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7999      	ldrb	r1, [r3, #6]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003122:	461a      	mov	r2, r3
 8003124:	f005 fb6a 	bl	80087fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	7912      	ldrb	r2, [r2, #4]
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e042      	b.n	80031de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3310      	adds	r3, #16
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00f      	b.n	80031a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_PCD_EP_ClrStall+0x86>
 80031bc:	2302      	movs	r3, #2
 80031be:	e00e      	b.n	80031de <HAL_PCD_EP_ClrStall+0xa4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68f9      	ldr	r1, [r7, #12]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 f980 	bl	80084d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da0c      	bge.n	8003214 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3310      	adds	r3, #16
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e00c      	b.n	800322e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 ff9f 	bl	8008178 <USB_EPStopXfer>
 800323a:	4603      	mov	r3, r0
 800323c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800323e:	7afb      	ldrb	r3, [r7, #11]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af02      	add	r7, sp, #8
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	3310      	adds	r3, #16
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d901      	bls.n	8003280 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e06b      	b.n	8003358 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	429a      	cmp	r2, r3
 8003294:	d902      	bls.n	800329c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3303      	adds	r3, #3
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032a4:	e02a      	b.n	80032fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d902      	bls.n	80032c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3303      	adds	r3, #3
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4603      	mov	r3, r0
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f004 fff4 	bl	80082cc <USB_WritePacket>

    ep->xfer_buff  += len;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	441a      	add	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	429a      	cmp	r2, r3
 8003310:	d809      	bhi.n	8003326 <PCD_WriteEmptyTxFifo+0xde>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800331a:	429a      	cmp	r2, r3
 800331c:	d203      	bcs.n	8003326 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1bf      	bne.n	80032a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	429a      	cmp	r2, r3
 8003330:	d811      	bhi.n	8003356 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	43db      	mvns	r3, r3
 800334c:	6939      	ldr	r1, [r7, #16]
 800334e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003352:	4013      	ands	r3, r2
 8003354:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	333c      	adds	r3, #60	@ 0x3c
 8003378:	3304      	adds	r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	799b      	ldrb	r3, [r3, #6]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d17b      	bne.n	800348e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4a61      	ldr	r2, [pc, #388]	@ (8003528 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	f240 80b9 	bls.w	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80b3 	beq.w	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c2:	461a      	mov	r2, r3
 80033c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c8:	6093      	str	r3, [r2, #8]
 80033ca:	e0a7      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	2320      	movs	r3, #32
 80033e6:	6093      	str	r3, [r2, #8]
 80033e8:	e098      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 8093 	bne.w	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003528 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d90f      	bls.n	800341e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003414:	461a      	mov	r2, r3
 8003416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800341a:	6093      	str	r3, [r2, #8]
 800341c:	e07e      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	0159      	lsls	r1, r3, #5
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	440b      	add	r3, r1
 8003440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d114      	bne.n	8003480 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003468:	461a      	mov	r2, r3
 800346a:	2101      	movs	r1, #1
 800346c:	f005 f9c6 	bl	80087fc <USB_EP0_OutStart>
 8003470:	e006      	b.n	8003480 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f007 fcba 	bl	800ae00 <HAL_PCD_DataOutStageCallback>
 800348c:	e046      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	4a26      	ldr	r2, [pc, #152]	@ (800352c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d124      	bne.n	80034e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ac:	461a      	mov	r2, r3
 80034ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b2:	6093      	str	r3, [r2, #8]
 80034b4:	e032      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	2320      	movs	r3, #32
 80034d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f007 fc91 	bl	800ae00 <HAL_PCD_DataOutStageCallback>
 80034de:	e01d      	b.n	800351c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d114      	bne.n	8003510 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003508:	461a      	mov	r2, r3
 800350a:	2100      	movs	r1, #0
 800350c:	f005 f976 	bl	80087fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f007 fc72 	bl	800ae00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	4f54300a 	.word	0x4f54300a
 800352c:	4f54310a 	.word	0x4f54310a

08003530 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	333c      	adds	r3, #60	@ 0x3c
 8003548:	3304      	adds	r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d90e      	bls.n	8003584 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357c:	461a      	mov	r2, r3
 800357e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003582:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f007 fc29 	bl	800addc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90c      	bls.n	80035ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	799b      	ldrb	r3, [r3, #6]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035a4:	461a      	mov	r2, r3
 80035a6:	2101      	movs	r1, #1
 80035a8:	f005 f928 	bl	80087fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	4f54300a 	.word	0x4f54300a

080035bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
 80035c8:	4613      	mov	r3, r2
 80035ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035da:	883b      	ldrh	r3, [r7, #0]
 80035dc:	0419      	lsls	r1, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e8:	e028      	b.n	800363c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	4413      	add	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e00d      	b.n	800361a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	3340      	adds	r3, #64	@ 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	3b01      	subs	r3, #1
 8003620:	429a      	cmp	r2, r3
 8003622:	d3ec      	bcc.n	80035fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003624:	883b      	ldrh	r3, [r7, #0]
 8003626:	0418      	lsls	r0, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	3b01      	subs	r3, #1
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	4302      	orrs	r2, r0
 8003634:	3340      	adds	r3, #64	@ 0x40
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800369c:	4313      	orrs	r3, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	10000003 	.word	0x10000003

080036b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d00a      	beq.n	80036f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036e0:	4b16      	ldr	r3, [pc, #88]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e01f      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e01d      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 0207 	bic.w	r2, r3, #7
 80036fe:	490f      	ldr	r1, [pc, #60]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4313      	orrs	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003706:	f7fd fef7 	bl	80014f8 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800370c:	e009      	b.n	8003722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800370e:	f7fd fef3 	bl	80014f8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800371c:	d901      	bls.n	8003722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_PWREx_ConfigSupply+0x70>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372e:	d1ee      	bne.n	800370e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	58024800 	.word	0x58024800

08003740 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	58024800 	.word	0x58024800

08003760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08c      	sub	sp, #48	@ 0x30
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 bc1f 	b.w	8003fb2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80b3 	beq.w	80038e8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003782:	4b95      	ldr	r3, [pc, #596]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800378c:	4b92      	ldr	r3, [pc, #584]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	2b10      	cmp	r3, #16
 8003796:	d007      	beq.n	80037a8 <HAL_RCC_OscConfig+0x48>
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	2b18      	cmp	r3, #24
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x64>
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b8b      	ldr	r3, [pc, #556]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8098 	beq.w	80038e6 <HAL_RCC_OscConfig+0x186>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 8093 	bne.w	80038e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e3f6      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x7c>
 80037ce:	4b82      	ldr	r3, [pc, #520]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a81      	ldr	r2, [pc, #516]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e058      	b.n	800388e <HAL_RCC_OscConfig+0x12e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_RCC_OscConfig+0xaa>
 80037e4:	4b7c      	ldr	r3, [pc, #496]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7b      	ldr	r2, [pc, #492]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b79      	ldr	r3, [pc, #484]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a78      	ldr	r2, [pc, #480]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b76      	ldr	r3, [pc, #472]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a75      	ldr	r2, [pc, #468]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e041      	b.n	800388e <HAL_RCC_OscConfig+0x12e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003812:	d112      	bne.n	800383a <HAL_RCC_OscConfig+0xda>
 8003814:	4b70      	ldr	r3, [pc, #448]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6f      	ldr	r2, [pc, #444]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800381a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b6d      	ldr	r3, [pc, #436]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6c      	ldr	r2, [pc, #432]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003826:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b6a      	ldr	r3, [pc, #424]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a69      	ldr	r2, [pc, #420]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e029      	b.n	800388e <HAL_RCC_OscConfig+0x12e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003842:	d112      	bne.n	800386a <HAL_RCC_OscConfig+0x10a>
 8003844:	4b64      	ldr	r3, [pc, #400]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a63      	ldr	r2, [pc, #396]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800384a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b61      	ldr	r3, [pc, #388]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a60      	ldr	r2, [pc, #384]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b5e      	ldr	r3, [pc, #376]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a5d      	ldr	r2, [pc, #372]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e011      	b.n	800388e <HAL_RCC_OscConfig+0x12e>
 800386a:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5a      	ldr	r2, [pc, #360]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003870:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b58      	ldr	r3, [pc, #352]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a57      	ldr	r2, [pc, #348]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800387c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b55      	ldr	r3, [pc, #340]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a54      	ldr	r2, [pc, #336]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003888:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800388c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d013      	beq.n	80038be <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7fd fe2f 	bl	80014f8 <HAL_GetTick>
 800389a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389e:	f7fd fe2b 	bl	80014f8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	@ 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e380      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b0:	4b49      	ldr	r3, [pc, #292]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x13e>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038be:	f7fd fe1b 	bl	80014f8 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c6:	f7fd fe17 	bl	80014f8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	@ 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e36c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038d8:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x166>
 80038e4:	e000      	b.n	80038e8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 808c 	beq.w	8003a0e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b38      	ldr	r3, [pc, #224]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003900:	4b35      	ldr	r3, [pc, #212]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_RCC_OscConfig+0x1bc>
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	2b18      	cmp	r3, #24
 8003910:	d137      	bne.n	8003982 <HAL_RCC_OscConfig+0x222>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d132      	bne.n	8003982 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800391c:	4b2e      	ldr	r3, [pc, #184]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_OscConfig+0x1d4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e33e      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003934:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 0219 	bic.w	r2, r3, #25
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4925      	ldr	r1, [pc, #148]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fd fdd7 	bl	80014f8 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394e:	f7fd fdd3 	bl	80014f8 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e328      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	4917      	ldr	r1, [pc, #92]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800397c:	4313      	orrs	r3, r2
 800397e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	e045      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d028      	beq.n	80039dc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800398a:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0219 	bic.w	r2, r3, #25
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4910      	ldr	r1, [pc, #64]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fdac 	bl	80014f8 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fd fda8 	bl	80014f8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e2fd      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	4901      	ldr	r1, [pc, #4]	@ (80039d8 <HAL_RCC_OscConfig+0x278>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
 80039d6:	e01a      	b.n	8003a0e <HAL_RCC_OscConfig+0x2ae>
 80039d8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039dc:	4b97      	ldr	r3, [pc, #604]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a96      	ldr	r2, [pc, #600]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fd86 	bl	80014f8 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fd fd82 	bl	80014f8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e2d7      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a02:	4b8e      	ldr	r3, [pc, #568]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d06a      	beq.n	8003af0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	4b88      	ldr	r3, [pc, #544]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a24:	4b85      	ldr	r3, [pc, #532]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2e0>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b18      	cmp	r3, #24
 8003a34:	d11b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x30e>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d116      	bne.n	8003a6e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a40:	4b7e      	ldr	r3, [pc, #504]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b80      	cmp	r3, #128	@ 0x80
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e2ac      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a58:	4b78      	ldr	r3, [pc, #480]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	4975      	ldr	r1, [pc, #468]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a6c:	e040      	b.n	8003af0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d023      	beq.n	8003abe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a76:	4b71      	ldr	r3, [pc, #452]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a70      	ldr	r2, [pc, #448]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fd fd39 	bl	80014f8 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a8a:	f7fd fd35 	bl	80014f8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e28a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a9c:	4b67      	ldr	r3, [pc, #412]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003aa8:	4b64      	ldr	r3, [pc, #400]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	4961      	ldr	r1, [pc, #388]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60cb      	str	r3, [r1, #12]
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003abe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5e      	ldr	r2, [pc, #376]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fd15 	bl	80014f8 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fd11 	bl	80014f8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e266      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae4:	4b55      	ldr	r3, [pc, #340]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d036      	beq.n	8003b6a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b04:	4b4d      	ldr	r3, [pc, #308]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b08:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd fcf2 	bl	80014f8 <HAL_GetTick>
 8003b14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7fd fcee 	bl	80014f8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e243      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b2a:	4b44      	ldr	r3, [pc, #272]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3b8>
 8003b36:	e018      	b.n	8003b6a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b38:	4b40      	ldr	r3, [pc, #256]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fd fcd8 	bl	80014f8 <HAL_GetTick>
 8003b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fd fcd4 	bl	80014f8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e229      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b5e:	4b37      	ldr	r3, [pc, #220]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d036      	beq.n	8003be4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d019      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003b84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fcb5 	bl	80014f8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b92:	f7fd fcb1 	bl	80014f8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e206      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x432>
 8003bb0:	e018      	b.n	8003be4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb2:	4b22      	ldr	r3, [pc, #136]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a21      	ldr	r2, [pc, #132]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003bb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fc9b 	bl	80014f8 <HAL_GetTick>
 8003bc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc6:	f7fd fc97 	bl	80014f8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1ec      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bd8:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80af 	beq.w	8003d50 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf2:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <HAL_RCC_OscConfig+0x4e0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a12      	ldr	r2, [pc, #72]	@ (8003c40 <HAL_RCC_OscConfig+0x4e0>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfe:	f7fd fc7b 	bl	80014f8 <HAL_GetTick>
 8003c02:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd fc77 	bl	80014f8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	@ 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1cc      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c18:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <HAL_RCC_OscConfig+0x4e0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x4e4>
 8003c2c:	4b03      	ldr	r3, [pc, #12]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c30:	4a02      	ldr	r2, [pc, #8]	@ (8003c3c <HAL_RCC_OscConfig+0x4dc>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c38:	e05b      	b.n	8003cf2 <HAL_RCC_OscConfig+0x592>
 8003c3a:	bf00      	nop
 8003c3c:	58024400 	.word	0x58024400
 8003c40:	58024800 	.word	0x58024800
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0x512>
 8003c4c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	4a9c      	ldr	r2, [pc, #624]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c58:	4b9a      	ldr	r3, [pc, #616]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	4a99      	ldr	r2, [pc, #612]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c64:	4b97      	ldr	r3, [pc, #604]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	4a96      	ldr	r2, [pc, #600]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c6a:	f023 0304 	bic.w	r3, r3, #4
 8003c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c70:	e03f      	b.n	8003cf2 <HAL_RCC_OscConfig+0x592>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	d112      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x540>
 8003c7a:	4b92      	ldr	r3, [pc, #584]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	4a91      	ldr	r2, [pc, #580]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c86:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	4a8e      	ldr	r2, [pc, #568]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c92:	4b8c      	ldr	r3, [pc, #560]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	4a8b      	ldr	r2, [pc, #556]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9e:	e028      	b.n	8003cf2 <HAL_RCC_OscConfig+0x592>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b85      	cmp	r3, #133	@ 0x85
 8003ca6:	d112      	bne.n	8003cce <HAL_RCC_OscConfig+0x56e>
 8003ca8:	4b86      	ldr	r3, [pc, #536]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	4a85      	ldr	r2, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cae:	f043 0304 	orr.w	r3, r3, #4
 8003cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb4:	4b83      	ldr	r3, [pc, #524]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a82      	ldr	r2, [pc, #520]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc0:	4b80      	ldr	r3, [pc, #512]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	e011      	b.n	8003cf2 <HAL_RCC_OscConfig+0x592>
 8003cce:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cda:	4b7a      	ldr	r3, [pc, #488]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	4a79      	ldr	r2, [pc, #484]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce6:	4b77      	ldr	r3, [pc, #476]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	4a76      	ldr	r2, [pc, #472]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003cec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d015      	beq.n	8003d26 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fd fbfd 	bl	80014f8 <HAL_GetTick>
 8003cfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fd fbf9 	bl	80014f8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e14c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d18:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ee      	beq.n	8003d02 <HAL_RCC_OscConfig+0x5a2>
 8003d24:	e014      	b.n	8003d50 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd fbe7 	bl	80014f8 <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fd fbe3 	bl	80014f8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e136      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d44:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 812b 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d62:	2b18      	cmp	r3, #24
 8003d64:	f000 80bb 	beq.w	8003ede <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 8095 	bne.w	8003e9c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b54      	ldr	r3, [pc, #336]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a53      	ldr	r2, [pc, #332]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fbbb 	bl	80014f8 <HAL_GetTick>
 8003d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fd fbb7 	bl	80014f8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e10c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d98:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da4:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003da6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003da8:	4b47      	ldr	r3, [pc, #284]	@ (8003ec8 <HAL_RCC_OscConfig+0x768>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	430a      	orrs	r2, r1
 8003db8:	4942      	ldr	r1, [pc, #264]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	3b01      	subs	r3, #1
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003dee:	4935      	ldr	r1, [pc, #212]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003df4:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	4a32      	ldr	r2, [pc, #200]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e00:	4b30      	ldr	r3, [pc, #192]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e04:	4b31      	ldr	r3, [pc, #196]	@ (8003ecc <HAL_RCC_OscConfig+0x76c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e0c:	00d2      	lsls	r2, r2, #3
 8003e0e:	492d      	ldr	r1, [pc, #180]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	f023 020c 	bic.w	r2, r3, #12
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	4928      	ldr	r1, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e26:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	f023 0202 	bic.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	4924      	ldr	r1, [pc, #144]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e38:	4b22      	ldr	r3, [pc, #136]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	4a21      	ldr	r2, [pc, #132]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003e50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fb40 	bl	80014f8 <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fb3c 	bl	80014f8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e091      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x71c>
 8003e9a:	e089      	b.n	8003fb0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <HAL_RCC_OscConfig+0x764>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd fb26 	bl	80014f8 <HAL_GetTick>
 8003eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eae:	e00f      	b.n	8003ed0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd fb22 	bl	80014f8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d908      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e077      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
 8003ec2:	bf00      	nop
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	fffffc0c 	.word	0xfffffc0c
 8003ecc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e9      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x750>
 8003edc:	e068      	b.n	8003fb0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ede:	4b37      	ldr	r3, [pc, #220]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ee4:	4b35      	ldr	r3, [pc, #212]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d031      	beq.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0203 	and.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d12a      	bne.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d122      	bne.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d11a      	bne.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	0a5b      	lsrs	r3, r3, #9
 8003f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d111      	bne.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d108      	bne.n	8003f56 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	0e1b      	lsrs	r3, r3, #24
 8003f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f5a:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	08db      	lsrs	r3, r3, #3
 8003f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f64:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d01f      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f70:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a11      	ldr	r2, [pc, #68]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f7c:	f7fd fabc 	bl	80014f8 <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f82:	bf00      	nop
 8003f84:	f7fd fab8 	bl	80014f8 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d0f9      	beq.n	8003f84 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f90:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <HAL_RCC_OscConfig+0x860>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f9c:	00d2      	lsls	r2, r2, #3
 8003f9e:	4907      	ldr	r1, [pc, #28]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003fa4:	4b05      	ldr	r3, [pc, #20]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <HAL_RCC_OscConfig+0x85c>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3730      	adds	r7, #48	@ 0x30
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	ffff0007 	.word	0xffff0007

08003fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e19c      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d910      	bls.n	8004008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b87      	ldr	r3, [pc, #540]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 020f 	bic.w	r2, r3, #15
 8003fee:	4985      	ldr	r1, [pc, #532]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b83      	ldr	r3, [pc, #524]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e184      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	4b7b      	ldr	r3, [pc, #492]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004020:	429a      	cmp	r2, r3
 8004022:	d908      	bls.n	8004036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004024:	4b78      	ldr	r3, [pc, #480]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	4975      	ldr	r1, [pc, #468]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004032:	4313      	orrs	r3, r2
 8004034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	4b70      	ldr	r3, [pc, #448]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800404e:	429a      	cmp	r2, r3
 8004050:	d908      	bls.n	8004064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004052:	4b6d      	ldr	r3, [pc, #436]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	496a      	ldr	r1, [pc, #424]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004060:	4313      	orrs	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	4b64      	ldr	r3, [pc, #400]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800407c:	429a      	cmp	r2, r3
 800407e:	d908      	bls.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004080:	4b61      	ldr	r3, [pc, #388]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	495e      	ldr	r1, [pc, #376]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 800408e:	4313      	orrs	r3, r2
 8004090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d908      	bls.n	80040c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040ae:	4b56      	ldr	r3, [pc, #344]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4953      	ldr	r1, [pc, #332]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	429a      	cmp	r2, r3
 80040da:	d908      	bls.n	80040ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f023 020f 	bic.w	r2, r3, #15
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4947      	ldr	r1, [pc, #284]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d055      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040fa:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4940      	ldr	r1, [pc, #256]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004108:	4313      	orrs	r3, r2
 800410a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d107      	bne.n	8004124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004114:	4b3c      	ldr	r3, [pc, #240]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d121      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0f6      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d107      	bne.n	800413c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800412c:	4b36      	ldr	r3, [pc, #216]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0ea      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d107      	bne.n	8004154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004144:	4b30      	ldr	r3, [pc, #192]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0de      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004154:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0d6      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004164:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f023 0207 	bic.w	r2, r3, #7
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4925      	ldr	r1, [pc, #148]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004176:	f7fd f9bf 	bl	80014f8 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417c:	e00a      	b.n	8004194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417e:	f7fd f9bb 	bl	80014f8 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0be      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004194:	4b1c      	ldr	r3, [pc, #112]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d1eb      	bne.n	800417e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d010      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	429a      	cmp	r2, r3
 80041c0:	d208      	bcs.n	80041d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c2:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f023 020f 	bic.w	r2, r3, #15
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	490e      	ldr	r1, [pc, #56]	@ (8004208 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d214      	bcs.n	800420c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 020f 	bic.w	r2, r3, #15
 80041ea:	4906      	ldr	r1, [pc, #24]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b04      	ldr	r3, [pc, #16]	@ (8004204 <HAL_RCC_ClockConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e086      	b.n	8004312 <HAL_RCC_ClockConfig+0x34e>
 8004204:	52002000 	.word	0x52002000
 8004208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	4b3f      	ldr	r3, [pc, #252]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004224:	429a      	cmp	r2, r3
 8004226:	d208      	bcs.n	800423a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004228:	4b3c      	ldr	r3, [pc, #240]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	4939      	ldr	r1, [pc, #228]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 8004236:	4313      	orrs	r3, r2
 8004238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d010      	beq.n	8004268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	4b34      	ldr	r3, [pc, #208]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004252:	429a      	cmp	r2, r3
 8004254:	d208      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004256:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	492e      	ldr	r1, [pc, #184]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 8004264:	4313      	orrs	r3, r2
 8004266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	4b28      	ldr	r3, [pc, #160]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004280:	429a      	cmp	r2, r3
 8004282:	d208      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004284:	4b25      	ldr	r3, [pc, #148]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4922      	ldr	r1, [pc, #136]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 8004292:	4313      	orrs	r3, r2
 8004294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d010      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	4b1d      	ldr	r3, [pc, #116]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d208      	bcs.n	80042c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4917      	ldr	r1, [pc, #92]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80042c4:	f000 f834 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	4912      	ldr	r1, [pc, #72]	@ (8004320 <HAL_RCC_ClockConfig+0x35c>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
 80042e0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042e2:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <HAL_RCC_ClockConfig+0x358>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	4a0d      	ldr	r2, [pc, #52]	@ (8004320 <HAL_RCC_ClockConfig+0x35c>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x360>)
 80042fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <HAL_RCC_ClockConfig+0x364>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x368>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd f8ac 	bl	8001464 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	58024400 	.word	0x58024400
 8004320:	0800c39c 	.word	0x0800c39c
 8004324:	24000004 	.word	0x24000004
 8004328:	24000000 	.word	0x24000000
 800432c:	24000008 	.word	0x24000008

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	@ 0x24
 8004334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004336:	4bb3      	ldr	r3, [pc, #716]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800433e:	2b18      	cmp	r3, #24
 8004340:	f200 8155 	bhi.w	80045ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004344:	a201      	add	r2, pc, #4	@ (adr r2, 800434c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	080043b1 	.word	0x080043b1
 8004350:	080045ef 	.word	0x080045ef
 8004354:	080045ef 	.word	0x080045ef
 8004358:	080045ef 	.word	0x080045ef
 800435c:	080045ef 	.word	0x080045ef
 8004360:	080045ef 	.word	0x080045ef
 8004364:	080045ef 	.word	0x080045ef
 8004368:	080045ef 	.word	0x080045ef
 800436c:	080043d7 	.word	0x080043d7
 8004370:	080045ef 	.word	0x080045ef
 8004374:	080045ef 	.word	0x080045ef
 8004378:	080045ef 	.word	0x080045ef
 800437c:	080045ef 	.word	0x080045ef
 8004380:	080045ef 	.word	0x080045ef
 8004384:	080045ef 	.word	0x080045ef
 8004388:	080045ef 	.word	0x080045ef
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080045ef 	.word	0x080045ef
 8004394:	080045ef 	.word	0x080045ef
 8004398:	080045ef 	.word	0x080045ef
 800439c:	080045ef 	.word	0x080045ef
 80043a0:	080045ef 	.word	0x080045ef
 80043a4:	080045ef 	.word	0x080045ef
 80043a8:	080045ef 	.word	0x080045ef
 80043ac:	080043e3 	.word	0x080043e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043b0:	4b94      	ldr	r3, [pc, #592]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043bc:	4b91      	ldr	r3, [pc, #580]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	4a90      	ldr	r2, [pc, #576]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80043ce:	e111      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043d0:	4b8d      	ldr	r3, [pc, #564]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80043d2:	61bb      	str	r3, [r7, #24]
      break;
 80043d4:	e10e      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80043d6:	4b8d      	ldr	r3, [pc, #564]	@ (800460c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043d8:	61bb      	str	r3, [r7, #24]
      break;
 80043da:	e10b      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80043dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80043de:	61bb      	str	r3, [r7, #24]
      break;
 80043e0:	e108      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043e2:	4b88      	ldr	r3, [pc, #544]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80043ec:	4b85      	ldr	r3, [pc, #532]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043f8:	4b82      	ldr	r3, [pc, #520]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004402:	4b80      	ldr	r3, [pc, #512]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80e1 	beq.w	80045e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f000 8083 	beq.w	8004534 <HAL_RCC_GetSysClockFreq+0x204>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b02      	cmp	r3, #2
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x248>
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x114>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d056      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004442:	e099      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004444:	4b6f      	ldr	r3, [pc, #444]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004450:	4b6c      	ldr	r3, [pc, #432]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	4a6b      	ldr	r2, [pc, #428]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b62      	ldr	r3, [pc, #392]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a02 	vldr	s12, [r7, #8]
 800448e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80044aa:	e087      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	4b51      	ldr	r3, [pc, #324]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80044d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044ee:	e065      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800461c <HAL_RCC_GetSysClockFreq+0x2ec>
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a02 	vldr	s12, [r7, #8]
 8004516:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004532:	e043      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b2f      	ldr	r3, [pc, #188]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a02 	vldr	s12, [r7, #8]
 800455a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004576:	e021      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800461c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b1e      	ldr	r3, [pc, #120]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a02 	vldr	s12, [r7, #8]
 800459e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	0a5b      	lsrs	r3, r3, #9
 80045c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c6:	3301      	adds	r3, #1
 80045c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e0:	ee17 3a90 	vmov	r3, s15
 80045e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80045e6:	e005      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61bb      	str	r3, [r7, #24]
      break;
 80045ec:	e002      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80045ee:	4b07      	ldr	r3, [pc, #28]	@ (800460c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045f0:	61bb      	str	r3, [r7, #24]
      break;
 80045f2:	bf00      	nop
  }

  return sysclockfreq;
 80045f4:	69bb      	ldr	r3, [r7, #24]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	@ 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	03d09000 	.word	0x03d09000
 800460c:	003d0900 	.word	0x003d0900
 8004610:	016e3600 	.word	0x016e3600
 8004614:	46000000 	.word	0x46000000
 8004618:	4c742400 	.word	0x4c742400
 800461c:	4a742400 	.word	0x4a742400
 8004620:	4bb71b00 	.word	0x4bb71b00

08004624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800462a:	f7ff fe81 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 800462e:	4602      	mov	r2, r0
 8004630:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x50>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	0a1b      	lsrs	r3, r3, #8
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	490f      	ldr	r1, [pc, #60]	@ (8004678 <HAL_RCC_GetHCLKFreq+0x54>)
 800463c:	5ccb      	ldrb	r3, [r1, r3]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004648:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x50>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <HAL_RCC_GetHCLKFreq+0x54>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a07      	ldr	r2, [pc, #28]	@ (800467c <HAL_RCC_GetHCLKFreq+0x58>)
 8004660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004662:	4a07      	ldr	r2, [pc, #28]	@ (8004680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <HAL_RCC_GetHCLKFreq+0x58>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	58024400 	.word	0x58024400
 8004678:	0800c39c 	.word	0x0800c39c
 800467c:	24000004 	.word	0x24000004
 8004680:	24000000 	.word	0x24000000

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004688:	f7ff ffcc 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4904      	ldr	r1, [pc, #16]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	58024400 	.word	0x58024400
 80046ac:	0800c39c 	.word	0x0800c39c

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b0c8      	sub	sp, #288	@ 0x120
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046d4:	2500      	movs	r5, #0
 80046d6:	ea54 0305 	orrs.w	r3, r4, r5
 80046da:	d049      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046e6:	d02f      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046ec:	d828      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f2:	d01a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f8:	d822      	bhi.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004702:	d007      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004704:	e01c      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004706:	4ba7      	ldr	r3, [pc, #668]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	4aa6      	ldr	r2, [pc, #664]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004712:	e01a      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004718:	3308      	adds	r3, #8
 800471a:	2102      	movs	r1, #2
 800471c:	4618      	mov	r0, r3
 800471e:	f002 fa6d 	bl	8006bfc <RCCEx_PLL2_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004728:	e00f      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800472a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800472e:	3328      	adds	r3, #40	@ 0x28
 8004730:	2102      	movs	r1, #2
 8004732:	4618      	mov	r0, r3
 8004734:	f002 fb14 	bl	8006d60 <RCCEx_PLL3_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800473e:	e004      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004746:	e000      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004752:	4b94      	ldr	r3, [pc, #592]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800475a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004760:	4a90      	ldr	r2, [pc, #576]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004762:	430b      	orrs	r3, r1
 8004764:	6513      	str	r3, [r2, #80]	@ 0x50
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800476c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800477c:	f04f 0900 	mov.w	r9, #0
 8004780:	ea58 0309 	orrs.w	r3, r8, r9
 8004784:	d047      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478c:	2b04      	cmp	r3, #4
 800478e:	d82a      	bhi.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004790:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047ad 	.word	0x080047ad
 800479c:	080047bb 	.word	0x080047bb
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047ef 	.word	0x080047ef
 80047a8:	080047ef 	.word	0x080047ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4b7d      	ldr	r3, [pc, #500]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	4a7c      	ldr	r2, [pc, #496]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047b8:	e01a      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047be:	3308      	adds	r3, #8
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 fa1a 	bl	8006bfc <RCCEx_PLL2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047ce:	e00f      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d4:	3328      	adds	r3, #40	@ 0x28
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f002 fac1 	bl	8006d60 <RCCEx_PLL3_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047e4:	e004      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047ec:	e000      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f8:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047fc:	f023 0107 	bic.w	r1, r3, #7
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	4a67      	ldr	r2, [pc, #412]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6513      	str	r3, [r2, #80]	@ 0x50
 800480c:	e003      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004812:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004822:	f04f 0b00 	mov.w	fp, #0
 8004826:	ea5a 030b 	orrs.w	r3, sl, fp
 800482a:	d054      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004836:	d036      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004838:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800483c:	d82f      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800483e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004842:	d032      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004848:	d829      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800484a:	2bc0      	cmp	r3, #192	@ 0xc0
 800484c:	d02f      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800484e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004850:	d825      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004852:	2b80      	cmp	r3, #128	@ 0x80
 8004854:	d018      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004856:	2b80      	cmp	r3, #128	@ 0x80
 8004858:	d821      	bhi.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d007      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004862:	e01c      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004864:	4b4f      	ldr	r3, [pc, #316]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	4a4e      	ldr	r2, [pc, #312]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004870:	e01e      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004876:	3308      	adds	r3, #8
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f002 f9be 	bl	8006bfc <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004886:	e013      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800488c:	3328      	adds	r3, #40	@ 0x28
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f002 fa65 	bl	8006d60 <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800489c:	e008      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048a4:	e004      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80048ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80048b8:	4b3a      	ldr	r3, [pc, #232]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c6:	4a37      	ldr	r2, [pc, #220]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80048e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80048ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d05c      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004900:	d03b      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004902:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004906:	d834      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490c:	d037      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800490e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004912:	d82e      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004914:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004918:	d033      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800491a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800491e:	d828      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004924:	d01a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492a:	d822      	bhi.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d007      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004936:	e01c      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004938:	4b1a      	ldr	r3, [pc, #104]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a19      	ldr	r2, [pc, #100]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800493e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004944:	e01e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800494a:	3308      	adds	r3, #8
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f002 f954 	bl	8006bfc <RCCEx_PLL2_Config>
 8004954:	4603      	mov	r3, r0
 8004956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800495a:	e013      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004960:	3328      	adds	r3, #40	@ 0x28
 8004962:	2100      	movs	r1, #0
 8004964:	4618      	mov	r0, r3
 8004966:	f002 f9fb 	bl	8006d60 <RCCEx_PLL3_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004970:	e008      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004978:	e004      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004984:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10d      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499a:	4a02      	ldr	r2, [pc, #8]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499c:	430b      	orrs	r3, r1
 800499e:	6513      	str	r3, [r2, #80]	@ 0x50
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80049bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80049c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80049ca:	460b      	mov	r3, r1
 80049cc:	4313      	orrs	r3, r2
 80049ce:	d03a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	2b30      	cmp	r3, #48	@ 0x30
 80049d8:	d01f      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d819      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d00c      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d815      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80049ea:	2b10      	cmp	r3, #16
 80049ec:	d111      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ee:	4bae      	ldr	r3, [pc, #696]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4aad      	ldr	r2, [pc, #692]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80049fa:	e011      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a00:	3308      	adds	r3, #8
 8004a02:	2102      	movs	r1, #2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f002 f8f9 	bl	8006bfc <RCCEx_PLL2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a28:	4b9f      	ldr	r3, [pc, #636]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a36:	4a9c      	ldr	r2, [pc, #624]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004a52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004a5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d051      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a70:	d035      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004a72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a76:	d82e      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a7c:	d031      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004a7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a82:	d828      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a88:	d01a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8e:	d822      	bhi.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a98:	d007      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004a9a:	e01c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4b82      	ldr	r3, [pc, #520]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4a81      	ldr	r2, [pc, #516]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aae:	3308      	adds	r3, #8
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 f8a2 	bl	8006bfc <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004abe:	e011      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ac4:	3328      	adds	r3, #40	@ 0x28
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 f949 	bl	8006d60 <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ad4:	e006      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004aec:	4b6e      	ldr	r3, [pc, #440]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004afa:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b00:	e003      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b06:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004b24:	460b      	mov	r3, r1
 8004b26:	4313      	orrs	r3, r2
 8004b28:	d053      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b34:	d033      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004b36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3a:	d82c      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b40:	d02f      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004b42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b46:	d826      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b4c:	d02b      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004b4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b52:	d820      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b58:	d012      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004b5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5e:	d81a      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b68:	d115      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2101      	movs	r1, #1
 8004b72:	4618      	mov	r0, r3
 8004b74:	f002 f842 	bl	8006bfc <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b7e:	e015      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b84:	3328      	adds	r3, #40	@ 0x28
 8004b86:	2101      	movs	r1, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f002 f8e9 	bl	8006d60 <RCCEx_PLL3_Config>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b94:	e00a      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b9c:	e006      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bc2:	4a39      	ldr	r2, [pc, #228]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004be8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d060      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bfa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004bfe:	d039      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004c00:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004c04:	d832      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c0a:	d035      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c10:	d82c      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c16:	d031      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1c:	d826      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c22:	d02d      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004c24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c28:	d820      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c2e:	d012      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c34:	d81a      	bhi.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d024      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3e:	d115      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c44:	3308      	adds	r3, #8
 8004c46:	2101      	movs	r1, #1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 ffd7 	bl	8006bfc <RCCEx_PLL2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c54:	e017      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5a:	3328      	adds	r3, #40	@ 0x28
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 f87e 	bl	8006d60 <RCCEx_PLL3_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c6a:	e00c      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c72:	e008      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c74:	bf00      	nop
 8004c76:	e006      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c78:	bf00      	nop
 8004c7a:	e004      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c7c:	bf00      	nop
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10e      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c9e:	4a02      	ldr	r2, [pc, #8]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca4:	e006      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d037      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cde:	d00e      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce4:	d816      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cee:	d111      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4bc4      	ldr	r3, [pc, #784]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	4ac3      	ldr	r2, [pc, #780]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d02:	3308      	adds	r3, #8
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 ff78 	bl	8006bfc <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d26:	4bb7      	ldr	r3, [pc, #732]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d34:	4ab3      	ldr	r2, [pc, #716]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d039      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d81c      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004db1 	.word	0x08004db1
 8004d78:	08004d85 	.word	0x08004d85
 8004d7c:	08004d93 	.word	0x08004d93
 8004d80:	08004db1 	.word	0x08004db1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d84:	4b9f      	ldr	r3, [pc, #636]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	4a9e      	ldr	r2, [pc, #632]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004d90:	e00f      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d96:	3308      	adds	r3, #8
 8004d98:	2102      	movs	r1, #2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 ff2e 	bl	8006bfc <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004dba:	4b92      	ldr	r3, [pc, #584]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbe:	f023 0103 	bic.w	r1, r3, #3
 8004dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc8:	4a8e      	ldr	r2, [pc, #568]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004de4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004dee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f000 8099 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfa:	4b83      	ldr	r3, [pc, #524]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a82      	ldr	r2, [pc, #520]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e06:	f7fc fb77 	bl	80014f8 <HAL_GetTick>
 8004e0a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7fc fb72 	bl	80014f8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	@ 0x64
 8004e1e:	d903      	bls.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e26:	e005      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e28:	4b77      	ldr	r3, [pc, #476]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ed      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d173      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e3c:	4b71      	ldr	r3, [pc, #452]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e48:	4053      	eors	r3, r2
 8004e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d015      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e52:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5e:	4b69      	ldr	r3, [pc, #420]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a68      	ldr	r2, [pc, #416]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6a:	4b66      	ldr	r3, [pc, #408]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6e:	4a65      	ldr	r2, [pc, #404]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004e76:	4a63      	ldr	r2, [pc, #396]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fb34 	bl	80014f8 <HAL_GetTick>
 8004e90:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e94:	e00d      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fc fb2f 	bl	80014f8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004eb0:	e005      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb2:	4b54      	ldr	r3, [pc, #336]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0eb      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d129      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ee8:	091a      	lsrs	r2, r3, #4
 8004eea:	4b48      	ldr	r3, [pc, #288]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	4a45      	ldr	r2, [pc, #276]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6113      	str	r3, [r2, #16]
 8004ef4:	e005      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004ef6:	4b43      	ldr	r3, [pc, #268]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	4a42      	ldr	r2, [pc, #264]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004efc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f00:	6113      	str	r3, [r2, #16]
 8004f02:	4b40      	ldr	r3, [pc, #256]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	4a3c      	ldr	r2, [pc, #240]	@ (8005004 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f18:	e008      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 0301 	and.w	r3, r2, #1
 8004f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f42:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f000 8090 	beq.w	800506e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f56:	2b28      	cmp	r3, #40	@ 0x28
 8004f58:	d870      	bhi.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08005045 	.word	0x08005045
 8004f64:	0800503d 	.word	0x0800503d
 8004f68:	0800503d 	.word	0x0800503d
 8004f6c:	0800503d 	.word	0x0800503d
 8004f70:	0800503d 	.word	0x0800503d
 8004f74:	0800503d 	.word	0x0800503d
 8004f78:	0800503d 	.word	0x0800503d
 8004f7c:	0800503d 	.word	0x0800503d
 8004f80:	08005011 	.word	0x08005011
 8004f84:	0800503d 	.word	0x0800503d
 8004f88:	0800503d 	.word	0x0800503d
 8004f8c:	0800503d 	.word	0x0800503d
 8004f90:	0800503d 	.word	0x0800503d
 8004f94:	0800503d 	.word	0x0800503d
 8004f98:	0800503d 	.word	0x0800503d
 8004f9c:	0800503d 	.word	0x0800503d
 8004fa0:	08005027 	.word	0x08005027
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	0800503d 	.word	0x0800503d
 8004fac:	0800503d 	.word	0x0800503d
 8004fb0:	0800503d 	.word	0x0800503d
 8004fb4:	0800503d 	.word	0x0800503d
 8004fb8:	0800503d 	.word	0x0800503d
 8004fbc:	0800503d 	.word	0x0800503d
 8004fc0:	08005045 	.word	0x08005045
 8004fc4:	0800503d 	.word	0x0800503d
 8004fc8:	0800503d 	.word	0x0800503d
 8004fcc:	0800503d 	.word	0x0800503d
 8004fd0:	0800503d 	.word	0x0800503d
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	0800503d 	.word	0x0800503d
 8004fdc:	0800503d 	.word	0x0800503d
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	0800503d 	.word	0x0800503d
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	0800503d 	.word	0x0800503d
 8004ff0:	0800503d 	.word	0x0800503d
 8004ff4:	0800503d 	.word	0x0800503d
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	08005045 	.word	0x08005045
 8005004:	58024400 	.word	0x58024400
 8005008:	58024800 	.word	0x58024800
 800500c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005014:	3308      	adds	r3, #8
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fdef 	bl	8006bfc <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005024:	e00f      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800502a:	3328      	adds	r3, #40	@ 0x28
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fe96 	bl	8006d60 <RCCEx_PLL3_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800503a:	e004      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005042:	e000      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005046:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800504e:	4bc0      	ldr	r3, [pc, #768]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800505e:	4abc      	ldr	r2, [pc, #752]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005060:	430b      	orrs	r3, r1
 8005062:	6553      	str	r3, [r2, #84]	@ 0x54
 8005064:	e003      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005066:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800506a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f002 0302 	and.w	r3, r2, #2
 800507a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800507e:	2300      	movs	r3, #0
 8005080:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005084:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005088:	460b      	mov	r3, r1
 800508a:	4313      	orrs	r3, r2
 800508c:	d043      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800508e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005096:	2b05      	cmp	r3, #5
 8005098:	d824      	bhi.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050ed 	.word	0x080050ed
 80050a4:	080050b9 	.word	0x080050b9
 80050a8:	080050cf 	.word	0x080050cf
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050ed 	.word	0x080050ed
 80050b4:	080050ed 	.word	0x080050ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050bc:	3308      	adds	r3, #8
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 fd9b 	bl	8006bfc <RCCEx_PLL2_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050cc:	e00f      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d2:	3328      	adds	r3, #40	@ 0x28
 80050d4:	2101      	movs	r1, #1
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 fe42 	bl	8006d60 <RCCEx_PLL3_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80050e2:	e004      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80050ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80050f6:	4b96      	ldr	r3, [pc, #600]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	f023 0107 	bic.w	r1, r3, #7
 80050fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005106:	4a92      	ldr	r2, [pc, #584]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005108:	430b      	orrs	r3, r1
 800510a:	6553      	str	r3, [r2, #84]	@ 0x54
 800510c:	e003      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005112:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511e:	f002 0304 	and.w	r3, r2, #4
 8005122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800512c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d043      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800513a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800513e:	2b05      	cmp	r3, #5
 8005140:	d824      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005195 	.word	0x08005195
 800514c:	08005161 	.word	0x08005161
 8005150:	08005177 	.word	0x08005177
 8005154:	08005195 	.word	0x08005195
 8005158:	08005195 	.word	0x08005195
 800515c:	08005195 	.word	0x08005195
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005160:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005164:	3308      	adds	r3, #8
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f001 fd47 	bl	8006bfc <RCCEx_PLL2_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005174:	e00f      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800517a:	3328      	adds	r3, #40	@ 0x28
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fdee 	bl	8006d60 <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800518a:	e004      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519e:	4b6c      	ldr	r3, [pc, #432]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	f023 0107 	bic.w	r1, r3, #7
 80051a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051ae:	4a68      	ldr	r2, [pc, #416]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051b0:	430b      	orrs	r3, r1
 80051b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f002 0320 	and.w	r3, r2, #32
 80051ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051ce:	2300      	movs	r3, #0
 80051d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051d8:	460b      	mov	r3, r1
 80051da:	4313      	orrs	r3, r2
 80051dc:	d055      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ea:	d033      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80051ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f0:	d82c      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f6:	d02f      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fc:	d826      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80051fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005202:	d02b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005208:	d820      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800520a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800520e:	d012      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005214:	d81a      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d022      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521e:	d115      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005224:	3308      	adds	r3, #8
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fce7 	bl	8006bfc <RCCEx_PLL2_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005234:	e015      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523a:	3328      	adds	r3, #40	@ 0x28
 800523c:	2102      	movs	r1, #2
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fd8e 	bl	8006d60 <RCCEx_PLL3_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800524a:	e00a      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005252:	e006      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005254:	bf00      	nop
 8005256:	e004      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005258:	bf00      	nop
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800525c:	bf00      	nop
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005262:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800527a:	4a35      	ldr	r2, [pc, #212]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800527c:	430b      	orrs	r3, r1
 800527e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005280:	e003      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005282:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005286:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	d058      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052b6:	d033      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80052b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80052bc:	d82c      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c2:	d02f      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052c8:	d826      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ce:	d02b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80052d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052d4:	d820      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052da:	d012      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e0:	d81a      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d022      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ea:	d115      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f0:	3308      	adds	r3, #8
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fc81 	bl	8006bfc <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005300:	e015      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005306:	3328      	adds	r3, #40	@ 0x28
 8005308:	2102      	movs	r1, #2
 800530a:	4618      	mov	r0, r3
 800530c:	f001 fd28 	bl	8006d60 <RCCEx_PLL3_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005316:	e00a      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800531e:	e006      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005320:	bf00      	nop
 8005322:	e004      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005324:	bf00      	nop
 8005326:	e002      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800532c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10e      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800533e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005342:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005346:	4a02      	ldr	r2, [pc, #8]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005348:	430b      	orrs	r3, r1
 800534a:	6593      	str	r3, [r2, #88]	@ 0x58
 800534c:	e006      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800534e:	bf00      	nop
 8005350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005358:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800535c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005372:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d055      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005384:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005388:	d033      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800538a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800538e:	d82c      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005394:	d02f      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539a:	d826      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800539c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053a0:	d02b      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80053a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80053a6:	d820      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053ac:	d012      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80053ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b2:	d81a      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d022      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053bc:	d115      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c2:	3308      	adds	r3, #8
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fc18 	bl	8006bfc <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053d2:	e015      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d8:	3328      	adds	r3, #40	@ 0x28
 80053da:	2102      	movs	r1, #2
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 fcbf 	bl	8006d60 <RCCEx_PLL3_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80053e8:	e00a      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053f0:	e006      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80053f2:	bf00      	nop
 80053f4:	e004      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80053f6:	bf00      	nop
 80053f8:	e002      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80053fa:	bf00      	nop
 80053fc:	e000      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80053fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005400:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005408:	4ba1      	ldr	r3, [pc, #644]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800540a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005418:	4a9d      	ldr	r2, [pc, #628]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800541a:	430b      	orrs	r3, r1
 800541c:	6593      	str	r3, [r2, #88]	@ 0x58
 800541e:	e003      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005424:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f002 0308 	and.w	r3, r2, #8
 8005434:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800543e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005442:	460b      	mov	r3, r1
 8005444:	4313      	orrs	r3, r2
 8005446:	d01e      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800545a:	3328      	adds	r3, #40	@ 0x28
 800545c:	2102      	movs	r1, #2
 800545e:	4618      	mov	r0, r3
 8005460:	f001 fc7e 	bl	8006d60 <RCCEx_PLL3_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005470:	4b87      	ldr	r3, [pc, #540]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005480:	4a83      	ldr	r2, [pc, #524]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f002 0310 	and.w	r3, r2, #16
 8005492:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005496:	2300      	movs	r3, #0
 8005498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800549c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d01e      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80054a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b2:	d10c      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b8:	3328      	adds	r3, #40	@ 0x28
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 fc4f 	bl	8006d60 <RCCEx_PLL3_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ce:	4b70      	ldr	r3, [pc, #448]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80054d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054de:	4a6c      	ldr	r2, [pc, #432]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80054f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f4:	2300      	movs	r3, #0
 80054f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d03e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005508:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800550c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005510:	d022      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005512:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005516:	d81b      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005520:	d00b      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005522:	e015      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005528:	3308      	adds	r3, #8
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f001 fb65 	bl	8006bfc <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005538:	e00f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800553a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800553e:	3328      	adds	r3, #40	@ 0x28
 8005540:	2102      	movs	r1, #2
 8005542:	4618      	mov	r0, r3
 8005544:	f001 fc0c 	bl	8006d60 <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800554e:	e004      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005562:	4b4b      	ldr	r3, [pc, #300]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800556a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005572:	4a47      	ldr	r2, [pc, #284]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6593      	str	r3, [r2, #88]	@ 0x58
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800557e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800558e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005590:	2300      	movs	r3, #0
 8005592:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005594:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055aa:	d01f      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80055ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80055b0:	d818      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80055b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055b6:	d003      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80055b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055bc:	d007      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80055be:	e011      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c0:	4b33      	ldr	r3, [pc, #204]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	4a32      	ldr	r2, [pc, #200]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80055cc:	e00f      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d2:	3328      	adds	r3, #40	@ 0x28
 80055d4:	2101      	movs	r1, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 fbc2 	bl	8006d60 <RCCEx_PLL3_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80055e2:	e004      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80055ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f6:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6553      	str	r3, [r2, #84]	@ 0x54
 800560c:	e003      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005612:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005622:	673b      	str	r3, [r7, #112]	@ 0x70
 8005624:	2300      	movs	r3, #0
 8005626:	677b      	str	r3, [r7, #116]	@ 0x74
 8005628:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800562c:	460b      	mov	r3, r1
 800562e:	4313      	orrs	r3, r2
 8005630:	d034      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800563c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005640:	d007      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005642:	e011      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005644:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	4a11      	ldr	r2, [pc, #68]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005650:	e00e      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	3308      	adds	r3, #8
 8005658:	2102      	movs	r1, #2
 800565a:	4618      	mov	r0, r3
 800565c:	f001 face 	bl	8006bfc <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005666:	e003      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800566e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005678:	4b05      	ldr	r3, [pc, #20]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800567a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005686:	4a02      	ldr	r2, [pc, #8]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005688:	430b      	orrs	r3, r1
 800568a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800568c:	e006      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005698:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80056a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056aa:	2300      	movs	r3, #0
 80056ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d00c      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056bc:	3328      	adds	r3, #40	@ 0x28
 80056be:	2102      	movs	r1, #2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 fb4d 	bl	8006d60 <RCCEx_PLL3_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80056de:	663b      	str	r3, [r7, #96]	@ 0x60
 80056e0:	2300      	movs	r3, #0
 80056e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80056e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80056e8:	460b      	mov	r3, r1
 80056ea:	4313      	orrs	r3, r2
 80056ec:	d038      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80056ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056fa:	d018      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80056fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005700:	d811      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005706:	d014      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800570c:	d80b      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005716:	d106      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005718:	4bc3      	ldr	r3, [pc, #780]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	4ac2      	ldr	r2, [pc, #776]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800571e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800572c:	e004      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005738:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005740:	4bb9      	ldr	r3, [pc, #740]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005744:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005750:	4ab5      	ldr	r2, [pc, #724]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005752:	430b      	orrs	r3, r1
 8005754:	6553      	str	r3, [r2, #84]	@ 0x54
 8005756:	e003      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800575c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800576c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800576e:	2300      	movs	r3, #0
 8005770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005772:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005776:	460b      	mov	r3, r1
 8005778:	4313      	orrs	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800577c:	4baa      	ldr	r3, [pc, #680]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800577e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005780:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800578a:	4aa7      	ldr	r2, [pc, #668]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800578c:	430b      	orrs	r3, r1
 800578e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800579c:	653b      	str	r3, [r7, #80]	@ 0x50
 800579e:	2300      	movs	r3, #0
 80057a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80057a6:	460b      	mov	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057ac:	4b9e      	ldr	r3, [pc, #632]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80057b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	4a9b      	ldr	r2, [pc, #620]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057bc:	430b      	orrs	r3, r1
 80057be:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80057c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80057cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ce:	2300      	movs	r3, #0
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80057dc:	4b92      	ldr	r3, [pc, #584]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80057e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ea:	4a8f      	ldr	r2, [pc, #572]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80057fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057fe:	2300      	movs	r3, #0
 8005800:	647b      	str	r3, [r7, #68]	@ 0x44
 8005802:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580c:	4b86      	ldr	r3, [pc, #536]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	4a85      	ldr	r2, [pc, #532]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005812:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005816:	6113      	str	r3, [r2, #16]
 8005818:	4b83      	ldr	r3, [pc, #524]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800581a:	6919      	ldr	r1, [r3, #16]
 800581c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005820:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005824:	4a80      	ldr	r2, [pc, #512]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005826:	430b      	orrs	r3, r1
 8005828:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800582a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005838:	2300      	movs	r3, #0
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800583c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005846:	4b78      	ldr	r3, [pc, #480]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800584e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005854:	4a74      	ldr	r2, [pc, #464]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005856:	430b      	orrs	r3, r1
 8005858:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005866:	633b      	str	r3, [r7, #48]	@ 0x30
 8005868:	2300      	movs	r3, #0
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005876:	4b6c      	ldr	r3, [pc, #432]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005886:	4a68      	ldr	r2, [pc, #416]	@ (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005888:	430b      	orrs	r3, r1
 800588a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800588c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	2100      	movs	r1, #0
 8005896:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800589e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d011      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ac:	3308      	adds	r3, #8
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 f9a3 	bl	8006bfc <RCCEx_PLL2_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80058bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	2100      	movs	r1, #0
 80058d6:	6239      	str	r1, [r7, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d011      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ec:	3308      	adds	r3, #8
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f983 	bl	8006bfc <RCCEx_PLL2_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80058fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005904:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005908:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	2100      	movs	r1, #0
 8005916:	61b9      	str	r1, [r7, #24]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005922:	460b      	mov	r3, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	d011      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592c:	3308      	adds	r3, #8
 800592e:	2102      	movs	r1, #2
 8005930:	4618      	mov	r0, r3
 8005932:	f001 f963 	bl	8006bfc <RCCEx_PLL2_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800593c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005948:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800594c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	2100      	movs	r1, #0
 8005956:	6139      	str	r1, [r7, #16]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005962:	460b      	mov	r3, r1
 8005964:	4313      	orrs	r3, r2
 8005966:	d011      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596c:	3328      	adds	r3, #40	@ 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f001 f9f5 	bl	8006d60 <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800597c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005988:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800598c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	2100      	movs	r1, #0
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d011      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	2101      	movs	r1, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f9d5 	bl	8006d60 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	2100      	movs	r1, #0
 80059d6:	6039      	str	r1, [r7, #0]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d011      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 f9b5 	bl	8006d60 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005a0c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a26:	bf00      	nop
 8005a28:	58024400 	.word	0x58024400

08005a2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b090      	sub	sp, #64	@ 0x40
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a3a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	f040 8094 	bne.w	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005a44:	4b97      	ldr	r3, [pc, #604]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	f200 8087 	bhi.w	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005a56:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a71 	.word	0x08005a71
 8005a60:	08005a99 	.word	0x08005a99
 8005a64:	08005ac1 	.word	0x08005ac1
 8005a68:	08005b5d 	.word	0x08005b5d
 8005a6c:	08005ae9 	.word	0x08005ae9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a70:	4b8c      	ldr	r3, [pc, #560]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a7c:	d108      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 ff68 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a8c:	f000 bc97 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a94:	f000 bc93 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a98:	4b82      	ldr	r3, [pc, #520]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aa6:	f107 0318 	add.w	r3, r7, #24
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fcac 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ab4:	f000 bc83 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	f000 bc7f 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ac0:	4b78      	ldr	r3, [pc, #480]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fdec 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005adc:	f000 bc6f 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	f000 bc6b 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ae8:	4b6e      	ldr	r3, [pc, #440]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005af0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005af2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b04:	4b67      	ldr	r3, [pc, #412]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	4a66      	ldr	r2, [pc, #408]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	e01f      	b.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b18:	4b62      	ldr	r3, [pc, #392]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b24:	d106      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b32:	e011      	b.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b34:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b40:	d106      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b48:	d102      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b4a:	4b59      	ldr	r3, [pc, #356]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b4e:	e003      	b.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b54:	f000 bc33 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005b58:	f000 bc31 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b5c:	4b55      	ldr	r3, [pc, #340]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b60:	f000 bc2d 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b68:	f000 bc29 	b.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b70:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005b74:	430b      	orrs	r3, r1
 8005b76:	f040 809f 	bne.w	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8005b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005b82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d04d      	beq.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b92:	f200 8084 	bhi.w	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b9a:	d07d      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba0:	d87d      	bhi.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b80      	cmp	r3, #128	@ 0x80
 8005ba6:	d02d      	beq.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	2b80      	cmp	r3, #128	@ 0x80
 8005bac:	d877      	bhi.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d012      	beq.n	8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005bba:	e070      	b.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bbc:	4b39      	ldr	r3, [pc, #228]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bc8:	d107      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fec2 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bd8:	e3f1      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bde:	e3ee      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005be0:	4b30      	ldr	r3, [pc, #192]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bec:	d107      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bee:	f107 0318 	add.w	r3, r7, #24
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fc08 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bfc:	e3df      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c02:	e3dc      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c04:	4b27      	ldr	r3, [pc, #156]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c10:	d107      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c12:	f107 030c 	add.w	r3, r7, #12
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fd4a 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c20:	e3cd      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005c22:	2300      	movs	r3, #0
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c26:	e3ca      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c28:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c44:	4b17      	ldr	r3, [pc, #92]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	4a16      	ldr	r2, [pc, #88]	@ (8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c56:	e01e      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c58:	4b12      	ldr	r3, [pc, #72]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c64:	d106      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c6c:	d102      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c72:	e010      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c80:	d106      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c88:	d102      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c8a:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c8e:	e002      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c94:	e393      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005c96:	e392      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c98:	4b06      	ldr	r3, [pc, #24]	@ (8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9c:	e38f      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca2:	e38c      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	03d09000 	.word	0x03d09000
 8005cac:	003d0900 	.word	0x003d0900
 8005cb0:	016e3600 	.word	0x016e3600
 8005cb4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cbc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	f040 809c 	bne.w	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cca:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd6:	d054      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cde:	f200 808b 	bhi.w	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ce8:	f000 8083 	beq.w	8005df2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005cf2:	f200 8081 	bhi.w	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfc:	d02f      	beq.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d04:	d878      	bhi.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d12:	d012      	beq.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005d14:	e070      	b.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d16:	4b8a      	ldr	r3, [pc, #552]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d22:	d107      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fe15 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d32:	e344      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d38:	e341      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d3a:	4b81      	ldr	r3, [pc, #516]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d46:	d107      	bne.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d48:	f107 0318 	add.w	r3, r7, #24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fb5b 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d56:	e332      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d5c:	e32f      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d5e:	4b78      	ldr	r3, [pc, #480]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d6c:	f107 030c 	add.w	r3, r7, #12
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fc9d 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d7a:	e320      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d80:	e31d      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d82:	4b6f      	ldr	r3, [pc, #444]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d10c      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d9e:	4b68      	ldr	r3, [pc, #416]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	4a66      	ldr	r2, [pc, #408]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db0:	e01e      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005db2:	4b63      	ldr	r3, [pc, #396]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbe:	d106      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc6:	d102      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005dc8:	4b5f      	ldr	r3, [pc, #380]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dcc:	e010      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dce:	4b5c      	ldr	r3, [pc, #368]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dda:	d106      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005de2:	d102      	bne.n	8005dea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005de4:	4b59      	ldr	r3, [pc, #356]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de8:	e002      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8005dee:	e2e6      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005df0:	e2e5      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005df2:	4b57      	ldr	r3, [pc, #348]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df6:	e2e2      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfc:	e2df      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e02:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005e06:	430b      	orrs	r3, r1
 8005e08:	f040 80a7 	bne.w	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e10:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005e14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e1c:	d055      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e24:	f200 8096 	bhi.w	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e2e:	f000 8084 	beq.w	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e38:	f200 808c 	bhi.w	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e42:	d030      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4a:	f200 8083 	bhi.w	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	d012      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8005e5c:	e07a      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e5e:	4b38      	ldr	r3, [pc, #224]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fd71 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e7a:	e2a0      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e80:	e29d      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e82:	4b2f      	ldr	r3, [pc, #188]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e90:	f107 0318 	add.w	r3, r7, #24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fab7 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e9e:	e28e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea4:	e28b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ea6:	4b26      	ldr	r3, [pc, #152]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fbf9 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ec2:	e27c      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec8:	e279      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005eca:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d10c      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ee6:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	08db      	lsrs	r3, r3, #3
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	4a14      	ldr	r2, [pc, #80]	@ (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ef8:	e01e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005efa:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f06:	d106      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f0e:	d102      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005f10:	4b0d      	ldr	r3, [pc, #52]	@ (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f14:	e010      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f16:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f22:	d106      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f2a:	d102      	bne.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f30:	e002      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005f36:	e242      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f38:	e241      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f3a:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f3e:	e23e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005f40:	58024400 	.word	0x58024400
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	003d0900 	.word	0x003d0900
 8005f4c:	016e3600 	.word	0x016e3600
 8005f50:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f58:	e231      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f5e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005f62:	430b      	orrs	r3, r1
 8005f64:	f040 8085 	bne.w	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005f68:	4b9c      	ldr	r3, [pc, #624]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005f70:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f78:	d06b      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f80:	d874      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f88:	d056      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f90:	d86c      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f98:	d03b      	beq.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fa0:	d864      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fa8:	d021      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fb0:	d85c      	bhi.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fbe:	d004      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005fc0:	e054      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005fc2:	f7fe fb5f 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8005fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fc8:	e1f9      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fca:	4b84      	ldr	r3, [pc, #528]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fd8:	f107 0318 	add.w	r3, r7, #24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fa13 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fe6:	e1ea      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fec:	e1e7      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fee:	4b7b      	ldr	r3, [pc, #492]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffa:	d107      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ffc:	f107 030c 	add.w	r3, r7, #12
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fb55 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800600a:	e1d8      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006010:	e1d5      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006012:	4b72      	ldr	r3, [pc, #456]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b04      	cmp	r3, #4
 800601c:	d109      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800601e:	4b6f      	ldr	r3, [pc, #444]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	08db      	lsrs	r3, r3, #3
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	4a6d      	ldr	r2, [pc, #436]	@ (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006030:	e1c5      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006036:	e1c2      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006038:	4b68      	ldr	r3, [pc, #416]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006044:	d102      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006046:	4b67      	ldr	r3, [pc, #412]	@ (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e1b8      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e1b5      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006052:	4b62      	ldr	r3, [pc, #392]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800605e:	d102      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006060:	4b61      	ldr	r3, [pc, #388]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006064:	e1ab      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800606a:	e1a8      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006070:	e1a5      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006076:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800607a:	430b      	orrs	r3, r1
 800607c:	d173      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800607e:	4b57      	ldr	r3, [pc, #348]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006082:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006086:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800608e:	d02f      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006096:	d863      	bhi.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d012      	beq.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80060a6:	e05b      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060a8:	4b4c      	ldr	r3, [pc, #304]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b4:	d107      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b6:	f107 0318 	add.w	r3, r7, #24
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f9a4 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c4:	e17b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ca:	e178      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060cc:	4b43      	ldr	r3, [pc, #268]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d8:	d107      	bne.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fae6 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060e8:	e169      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ee:	e166      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060f0:	4b3a      	ldr	r3, [pc, #232]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060fa:	4b38      	ldr	r3, [pc, #224]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b04      	cmp	r3, #4
 8006104:	d10c      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610c:	4b33      	ldr	r3, [pc, #204]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	08db      	lsrs	r3, r3, #3
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	4a32      	ldr	r2, [pc, #200]	@ (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006118:	fa22 f303 	lsr.w	r3, r2, r3
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611e:	e01e      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006120:	4b2e      	ldr	r3, [pc, #184]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800612c:	d106      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800612e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006134:	d102      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006136:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800613a:	e010      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800613c:	4b27      	ldr	r3, [pc, #156]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006148:	d106      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800614a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006150:	d102      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006152:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006156:	e002      	b.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800615c:	e12f      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800615e:	e12e      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e12b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800616e:	430b      	orrs	r3, r1
 8006170:	d13c      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006172:	4b1a      	ldr	r3, [pc, #104]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800617a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800617c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006188:	d012      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800618a:	e023      	b.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800618c:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006198:	d107      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800619a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fbda 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a8:	e109      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ae:	e106      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061b0:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061bc:	d107      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061be:	f107 0318 	add.w	r3, r7, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f920 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061cc:	e0f7      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d2:	e0f4      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80061d4:	2300      	movs	r3, #0
 80061d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d8:	e0f1      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80061da:	bf00      	nop
 80061dc:	58024400 	.word	0x58024400
 80061e0:	03d09000 	.word	0x03d09000
 80061e4:	003d0900 	.word	0x003d0900
 80061e8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80061ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f040 8091 	bne.w	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80061fa:	4b73      	ldr	r3, [pc, #460]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80061fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006206:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800620a:	f000 8081 	beq.w	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006214:	d87f      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800621c:	d06b      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006224:	d877      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622c:	d056      	beq.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d86f      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800623c:	d03b      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006244:	d867      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800624c:	d021      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800624e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006254:	d85f      	bhi.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d004      	beq.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006262:	d004      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006264:	e057      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006266:	f000 f8b9 	bl	80063dc <HAL_RCCEx_GetD3PCLK1Freq>
 800626a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800626c:	e0a7      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800626e:	4b56      	ldr	r3, [pc, #344]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800627a:	d107      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627c:	f107 0318 	add.w	r3, r7, #24
 8006280:	4618      	mov	r0, r3
 8006282:	f000 f8c1 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800628a:	e098      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006290:	e095      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006292:	4b4d      	ldr	r3, [pc, #308]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800629a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800629e:	d107      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fa03 	bl	80066b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062ae:	e086      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b4:	e083      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062b6:	4b44      	ldr	r3, [pc, #272]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d109      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c2:	4b41      	ldr	r3, [pc, #260]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062d4:	e073      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062da:	e070      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80062dc:	4b3a      	ldr	r3, [pc, #232]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062e8:	d102      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062ee:	e066      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f4:	e063      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80062f6:	4b34      	ldr	r3, [pc, #208]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006302:	d102      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006304:	4b33      	ldr	r3, [pc, #204]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006308:	e059      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800630e:	e056      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006310:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006314:	e053      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631a:	e050      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006324:	430b      	orrs	r3, r1
 8006326:	d148      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006328:	4b27      	ldr	r3, [pc, #156]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800632a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006330:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006338:	d02a      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006340:	d838      	bhi.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800634e:	d00d      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006350:	e030      	b.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006352:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800635e:	d102      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006360:	4b1c      	ldr	r3, [pc, #112]	@ (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006364:	e02b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636a:	e028      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800636c:	4b16      	ldr	r3, [pc, #88]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800637a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637e:	4618      	mov	r0, r3
 8006380:	f000 faea 	bl	8006958 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006388:	e019      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638e:	e016      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006390:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800639c:	d107      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639e:	f107 0318 	add.w	r3, r7, #24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f830 	bl	8006408 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80063ac:	e007      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b2:	e004      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b8:	e001      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80063be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3740      	adds	r7, #64	@ 0x40
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	58024400 	.word	0x58024400
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	003d0900 	.word	0x003d0900
 80063d4:	016e3600 	.word	0x016e3600
 80063d8:	00bb8000 	.word	0x00bb8000

080063dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80063e0:	f7fe f920 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 80063e4:	4602      	mov	r2, r0
 80063e6:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	4904      	ldr	r1, [pc, #16]	@ (8006404 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063f2:	5ccb      	ldrb	r3, [r1, r3]
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	58024400 	.word	0x58024400
 8006404:	0800c39c 	.word	0x0800c39c

08006408 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006408:	b480      	push	{r7}
 800640a:	b089      	sub	sp, #36	@ 0x24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006410:	4ba1      	ldr	r3, [pc, #644]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800641a:	4b9f      	ldr	r3, [pc, #636]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	0b1b      	lsrs	r3, r3, #12
 8006420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006424:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006426:	4b9c      	ldr	r3, [pc, #624]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006432:	4b99      	ldr	r3, [pc, #612]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	08db      	lsrs	r3, r3, #3
 8006438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8111 	beq.w	8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b02      	cmp	r3, #2
 800645a:	f000 8083 	beq.w	8006564 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b02      	cmp	r3, #2
 8006462:	f200 80a1 	bhi.w	80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d056      	beq.n	8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006472:	e099      	b.n	80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006474:	4b88      	ldr	r3, [pc, #544]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d02d      	beq.n	80064dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006480:	4b85      	ldr	r3, [pc, #532]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	4a84      	ldr	r2, [pc, #528]	@ (800669c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	ee07 3a90 	vmov	s15, r3
 8006498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80064be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064da:	e087      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006502:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800651e:	e065      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800652e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006532:	4b59      	ldr	r3, [pc, #356]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006542:	ed97 6a03 	vldr	s12, [r7, #12]
 8006546:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006562:	e043      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006576:	4b48      	ldr	r3, [pc, #288]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006586:	ed97 6a03 	vldr	s12, [r7, #12]
 800658a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a6:	e021      	b.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b37      	ldr	r3, [pc, #220]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f6:	ee07 3a90 	vmov	s15, r3
 80065fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006606:	edd7 6a07 	vldr	s13, [r7, #28]
 800660a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800660e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006612:	ee17 2a90 	vmov	r2, s15
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800661a:	4b1f      	ldr	r3, [pc, #124]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	0c1b      	lsrs	r3, r3, #16
 8006620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006624:	ee07 3a90 	vmov	s15, r3
 8006628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006630:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006634:	edd7 6a07 	vldr	s13, [r7, #28]
 8006638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800663c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006640:	ee17 2a90 	vmov	r2, s15
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006648:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	0e1b      	lsrs	r3, r3, #24
 800664e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800665e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006662:	edd7 6a07 	vldr	s13, [r7, #28]
 8006666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	ee17 2a90 	vmov	r2, s15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006676:	e008      	b.n	800668a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	609a      	str	r2, [r3, #8]
}
 800668a:	bf00      	nop
 800668c:	3724      	adds	r7, #36	@ 0x24
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	46000000 	.word	0x46000000
 80066a4:	4c742400 	.word	0x4c742400
 80066a8:	4a742400 	.word	0x4a742400
 80066ac:	4bb71b00 	.word	0x4bb71b00

080066b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b089      	sub	sp, #36	@ 0x24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80066c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	0d1b      	lsrs	r3, r3, #20
 80066c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066da:	4b99      	ldr	r3, [pc, #612]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8111 	beq.w	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b02      	cmp	r3, #2
 8006702:	f000 8083 	beq.w	800680c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b02      	cmp	r3, #2
 800670a:	f200 80a1 	bhi.w	8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d056      	beq.n	80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800671a:	e099      	b.n	8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800671c:	4b88      	ldr	r3, [pc, #544]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006728:	4b85      	ldr	r3, [pc, #532]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	08db      	lsrs	r3, r3, #3
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	4a84      	ldr	r2, [pc, #528]	@ (8006944 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	ee07 3a90 	vmov	s15, r3
 8006740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006752:	4b7b      	ldr	r3, [pc, #492]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	ed97 6a03 	vldr	s12, [r7, #12]
 8006766:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800676a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800676e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006782:	e087      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	ee07 3a90 	vmov	s15, r3
 800678a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800694c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006796:	4b6a      	ldr	r3, [pc, #424]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c6:	e065      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067da:	4b59      	ldr	r3, [pc, #356]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800680a:	e043      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006954 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800681a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681e:	4b48      	ldr	r3, [pc, #288]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800682e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006832:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800683e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800684e:	e021      	b.n	8006894 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006950 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800685e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006862:	4b37      	ldr	r3, [pc, #220]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006872:	ed97 6a03 	vldr	s12, [r7, #12]
 8006876:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006948 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800687a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800687e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006892:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006894:	4b2a      	ldr	r3, [pc, #168]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	0a5b      	lsrs	r3, r3, #9
 800689a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800689e:	ee07 3a90 	vmov	s15, r3
 80068a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ba:	ee17 2a90 	vmov	r2, s15
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80068c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e8:	ee17 2a90 	vmov	r2, s15
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068f0:	4b13      	ldr	r3, [pc, #76]	@ (8006940 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	0e1b      	lsrs	r3, r3, #24
 80068f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fa:	ee07 3a90 	vmov	s15, r3
 80068fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690a:	edd7 6a07 	vldr	s13, [r7, #28]
 800690e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006916:	ee17 2a90 	vmov	r2, s15
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800691e:	e008      	b.n	8006932 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
}
 8006932:	bf00      	nop
 8006934:	3724      	adds	r7, #36	@ 0x24
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	58024400 	.word	0x58024400
 8006944:	03d09000 	.word	0x03d09000
 8006948:	46000000 	.word	0x46000000
 800694c:	4c742400 	.word	0x4c742400
 8006950:	4a742400 	.word	0x4a742400
 8006954:	4bb71b00 	.word	0x4bb71b00

08006958 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006958:	b480      	push	{r7}
 800695a:	b089      	sub	sp, #36	@ 0x24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006960:	4ba0      	ldr	r3, [pc, #640]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800696a:	4b9e      	ldr	r3, [pc, #632]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006974:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006976:	4b9b      	ldr	r3, [pc, #620]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006980:	4b98      	ldr	r3, [pc, #608]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	fb02 f303 	mul.w	r3, r2, r3
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006998:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8111 	beq.w	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	f000 8083 	beq.w	8006ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	f200 80a1 	bhi.w	8006af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d056      	beq.n	8006a6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80069c0:	e099      	b.n	8006af6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c2:	4b88      	ldr	r3, [pc, #544]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d02d      	beq.n	8006a2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ce:	4b85      	ldr	r3, [pc, #532]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	08db      	lsrs	r3, r3, #3
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	4a83      	ldr	r2, [pc, #524]	@ (8006be8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f8:	4b7a      	ldr	r3, [pc, #488]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a00:	ee07 3a90 	vmov	s15, r3
 8006a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a08:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a28:	e087      	b.n	8006b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a34:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3c:	4b69      	ldr	r3, [pc, #420]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a50:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6c:	e065      	b.n	8006b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a78:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a80:	4b58      	ldr	r3, [pc, #352]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a90:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a94:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab0:	e043      	b.n	8006b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac4:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af4:	e021      	b.n	8006b3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b00:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b08:	4b36      	ldr	r3, [pc, #216]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006bec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3e:	0a5b      	lsrs	r3, r3, #9
 8006b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b60:	ee17 2a90 	vmov	r2, s15
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006b68:	4b1e      	ldr	r3, [pc, #120]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8e:	ee17 2a90 	vmov	r2, s15
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	0e1b      	lsrs	r3, r3, #24
 8006b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbc:	ee17 2a90 	vmov	r2, s15
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	3724      	adds	r7, #36	@ 0x24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	58024400 	.word	0x58024400
 8006be8:	03d09000 	.word	0x03d09000
 8006bec:	46000000 	.word	0x46000000
 8006bf0:	4c742400 	.word	0x4c742400
 8006bf4:	4a742400 	.word	0x4a742400
 8006bf8:	4bb71b00 	.word	0x4bb71b00

08006bfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c0a:	4b53      	ldr	r3, [pc, #332]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d101      	bne.n	8006c1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e099      	b.n	8006d4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c26:	f7fa fc67 	bl	80014f8 <HAL_GetTick>
 8006c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c2c:	e008      	b.n	8006c40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c2e:	f7fa fc63 	bl	80014f8 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e086      	b.n	8006d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c40:	4b45      	ldr	r3, [pc, #276]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f0      	bne.n	8006c2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c4c:	4b42      	ldr	r3, [pc, #264]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	031b      	lsls	r3, r3, #12
 8006c5a:	493f      	ldr	r1, [pc, #252]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	025b      	lsls	r3, r3, #9
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c90:	4931      	ldr	r1, [pc, #196]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c96:	4b30      	ldr	r3, [pc, #192]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	492d      	ldr	r1, [pc, #180]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cac:	f023 0220 	bic.w	r2, r3, #32
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	4928      	ldr	r1, [pc, #160]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006cba:	4b27      	ldr	r3, [pc, #156]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4a26      	ldr	r2, [pc, #152]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cc0:	f023 0310 	bic.w	r3, r3, #16
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cc6:	4b24      	ldr	r3, [pc, #144]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cca:	4b24      	ldr	r3, [pc, #144]	@ (8006d5c <RCCEx_PLL2_Config+0x160>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	69d2      	ldr	r2, [r2, #28]
 8006cd2:	00d2      	lsls	r2, r2, #3
 8006cd4:	4920      	ldr	r1, [pc, #128]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cda:	4b1f      	ldr	r3, [pc, #124]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	4a1e      	ldr	r2, [pc, #120]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006ce0:	f043 0310 	orr.w	r3, r3, #16
 8006ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d106      	bne.n	8006cfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cf8:	e00f      	b.n	8006d1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d106      	bne.n	8006d0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d00:	4b15      	ldr	r3, [pc, #84]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	4a14      	ldr	r2, [pc, #80]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d0c:	e005      	b.n	8006d1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d0e:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d12:	4a11      	ldr	r2, [pc, #68]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d26:	f7fa fbe7 	bl	80014f8 <HAL_GetTick>
 8006d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d2c:	e008      	b.n	8006d40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d2e:	f7fa fbe3 	bl	80014f8 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e006      	b.n	8006d4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	ffff0007 	.word	0xffff0007

08006d60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d6e:	4b53      	ldr	r3, [pc, #332]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d101      	bne.n	8006d7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e099      	b.n	8006eb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a4e      	ldr	r2, [pc, #312]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d8a:	f7fa fbb5 	bl	80014f8 <HAL_GetTick>
 8006d8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d90:	e008      	b.n	8006da4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d92:	f7fa fbb1 	bl	80014f8 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d901      	bls.n	8006da4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e086      	b.n	8006eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006da4:	4b45      	ldr	r3, [pc, #276]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f0      	bne.n	8006d92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006db0:	4b42      	ldr	r3, [pc, #264]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	051b      	lsls	r3, r3, #20
 8006dbe:	493f      	ldr	r1, [pc, #252]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	025b      	lsls	r3, r3, #9
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	061b      	lsls	r3, r3, #24
 8006df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006df4:	4931      	ldr	r1, [pc, #196]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dfa:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	492d      	ldr	r1, [pc, #180]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	4928      	ldr	r1, [pc, #160]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e1e:	4b27      	ldr	r3, [pc, #156]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	4a26      	ldr	r2, [pc, #152]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e2a:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e2e:	4b24      	ldr	r3, [pc, #144]	@ (8006ec0 <RCCEx_PLL3_Config+0x160>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	69d2      	ldr	r2, [r2, #28]
 8006e36:	00d2      	lsls	r2, r2, #3
 8006e38:	4920      	ldr	r1, [pc, #128]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e42:	4a1e      	ldr	r2, [pc, #120]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d106      	bne.n	8006e5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e50:	4b1a      	ldr	r3, [pc, #104]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	4a19      	ldr	r2, [pc, #100]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e5c:	e00f      	b.n	8006e7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d106      	bne.n	8006e72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e64:	4b15      	ldr	r3, [pc, #84]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	4a14      	ldr	r2, [pc, #80]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e70:	e005      	b.n	8006e7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e72:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e76:	4a11      	ldr	r2, [pc, #68]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a0e      	ldr	r2, [pc, #56]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fa fb35 	bl	80014f8 <HAL_GetTick>
 8006e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e90:	e008      	b.n	8006ea4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e92:	f7fa fb31 	bl	80014f8 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e006      	b.n	8006eb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0f0      	beq.n	8006e92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	ffff0007 	.word	0xffff0007

08006ec4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e02b      	b.n	8006f30 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7f9 fbdb 	bl	80006a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f000 f8eb 	bl	80070e0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	f000 f93f 	bl	8007198 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006f1a:	4b07      	ldr	r3, [pc, #28]	@ (8006f38 <HAL_SDRAM_Init+0x74>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a06      	ldr	r2, [pc, #24]	@ (8006f38 <HAL_SDRAM_Init+0x74>)
 8006f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f24:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	52004000 	.word	0x52004000

08006f3c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e05e      	b.n	800700c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fa f832 	bl	8000fcc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0203 	bic.w	r2, r2, #3
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4b22      	ldr	r3, [pc, #136]	@ (8007014 <HAL_SPDIFRX_Init+0xd8>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006f98:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8006f9e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006fa4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8006faa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8006fb0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8006fb6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006fbc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8006fc2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8006fc8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d103      	bne.n	8006fe2 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d103      	bne.n	8006ff4 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ff2:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	ffc88407 	.word	0xffc88407

08007018 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b10      	ldr	r3, [pc, #64]	@ (8007068 <FMC_NAND_Init+0x50>)
 8007028:	4013      	ands	r3, r2
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	6851      	ldr	r1, [r2, #4]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	6892      	ldr	r2, [r2, #8]
 8007032:	4311      	orrs	r1, r2
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	68d2      	ldr	r2, [r2, #12]
 8007038:	4311      	orrs	r1, r2
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	6912      	ldr	r2, [r2, #16]
 800703e:	4311      	orrs	r1, r2
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	6952      	ldr	r2, [r2, #20]
 8007044:	0252      	lsls	r2, r2, #9
 8007046:	4311      	orrs	r1, r2
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	6992      	ldr	r2, [r2, #24]
 800704c:	0352      	lsls	r2, r2, #13
 800704e:	430a      	orrs	r2, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	f043 0208 	orr.w	r2, r3, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	fff00189 	.word	0xfff00189

0800706c <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8007082:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 800708a:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8007092:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b085      	sub	sp, #20
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 80070bc:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 80070c4:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 80070cc:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d121      	bne.n	8007136 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b27      	ldr	r3, [pc, #156]	@ (8007194 <FMC_SDRAM_Init+0xb4>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	6851      	ldr	r1, [r2, #4]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	6892      	ldr	r2, [r2, #8]
 8007102:	4311      	orrs	r1, r2
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	68d2      	ldr	r2, [r2, #12]
 8007108:	4311      	orrs	r1, r2
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	6912      	ldr	r2, [r2, #16]
 800710e:	4311      	orrs	r1, r2
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	6952      	ldr	r2, [r2, #20]
 8007114:	4311      	orrs	r1, r2
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	6992      	ldr	r2, [r2, #24]
 800711a:	4311      	orrs	r1, r2
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	69d2      	ldr	r2, [r2, #28]
 8007120:	4311      	orrs	r1, r2
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	6a12      	ldr	r2, [r2, #32]
 8007126:	4311      	orrs	r1, r2
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800712c:	430a      	orrs	r2, r1
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	e026      	b.n	8007184 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	69d9      	ldr	r1, [r3, #28]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	4319      	orrs	r1, r3
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714c:	430b      	orrs	r3, r1
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b0e      	ldr	r3, [pc, #56]	@ (8007194 <FMC_SDRAM_Init+0xb4>)
 800715a:	4013      	ands	r3, r2
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	6851      	ldr	r1, [r2, #4]
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	6892      	ldr	r2, [r2, #8]
 8007164:	4311      	orrs	r1, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	68d2      	ldr	r2, [r2, #12]
 800716a:	4311      	orrs	r1, r2
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	6912      	ldr	r2, [r2, #16]
 8007170:	4311      	orrs	r1, r2
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	6952      	ldr	r2, [r2, #20]
 8007176:	4311      	orrs	r1, r2
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	6992      	ldr	r2, [r2, #24]
 800717c:	430a      	orrs	r2, r1
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	ffff8000 	.word	0xffff8000

08007198 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d128      	bne.n	80071fc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1e59      	subs	r1, r3, #1
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	3b01      	subs	r3, #1
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	4319      	orrs	r1, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	4319      	orrs	r1, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	031b      	lsls	r3, r3, #12
 80071d4:	4319      	orrs	r1, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	3b01      	subs	r3, #1
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	4319      	orrs	r1, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	051b      	lsls	r3, r3, #20
 80071e8:	4319      	orrs	r1, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	061b      	lsls	r3, r3, #24
 80071f2:	430b      	orrs	r3, r1
 80071f4:	431a      	orrs	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	e02d      	b.n	8007258 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	4b19      	ldr	r3, [pc, #100]	@ (8007268 <FMC_SDRAM_Timing_Init+0xd0>)
 8007202:	4013      	ands	r3, r2
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	68d2      	ldr	r2, [r2, #12]
 8007208:	3a01      	subs	r2, #1
 800720a:	0311      	lsls	r1, r2, #12
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	6952      	ldr	r2, [r2, #20]
 8007210:	3a01      	subs	r2, #1
 8007212:	0512      	lsls	r2, r2, #20
 8007214:	430a      	orrs	r2, r1
 8007216:	431a      	orrs	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	1e59      	subs	r1, r3, #1
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	3b01      	subs	r3, #1
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	4319      	orrs	r1, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	3b01      	subs	r3, #1
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	4319      	orrs	r1, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	3b01      	subs	r3, #1
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	4319      	orrs	r1, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	3b01      	subs	r3, #1
 800724e:	061b      	lsls	r3, r3, #24
 8007250:	430b      	orrs	r3, r1
 8007252:	431a      	orrs	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	ff0f0fff 	.word	0xff0f0fff

0800726c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800726c:	b084      	sub	sp, #16
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	f107 001c 	add.w	r0, r7, #28
 800727a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800727e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007282:	2b01      	cmp	r3, #1
 8007284:	d121      	bne.n	80072ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	4b2c      	ldr	r3, [pc, #176]	@ (8007348 <USB_CoreInit+0xdc>)
 8007298:	4013      	ands	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d105      	bne.n	80072be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 fafa 	bl	80088b8 <USB_CoreReset>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
 80072c8:	e01b      	b.n	8007302 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 faee 	bl	80088b8 <USB_CoreReset>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80072f4:	e005      	b.n	8007302 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007302:	7fbb      	ldrb	r3, [r7, #30]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d116      	bne.n	8007336 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730c:	b29a      	uxth	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <USB_CoreInit+0xe0>)
 8007318:	4313      	orrs	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f043 0206 	orr.w	r2, r3, #6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f043 0220 	orr.w	r2, r3, #32
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007342:	b004      	add	sp, #16
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	ffbdffbf 	.word	0xffbdffbf
 800734c:	03ee0000 	.word	0x03ee0000

08007350 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d165      	bne.n	8007430 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4a41      	ldr	r2, [pc, #260]	@ (800746c <USB_SetTurnaroundTime+0x11c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d906      	bls.n	800737a <USB_SetTurnaroundTime+0x2a>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4a40      	ldr	r2, [pc, #256]	@ (8007470 <USB_SetTurnaroundTime+0x120>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d202      	bcs.n	800737a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007374:	230f      	movs	r3, #15
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e062      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4a3c      	ldr	r2, [pc, #240]	@ (8007470 <USB_SetTurnaroundTime+0x120>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d306      	bcc.n	8007390 <USB_SetTurnaroundTime+0x40>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4a3b      	ldr	r2, [pc, #236]	@ (8007474 <USB_SetTurnaroundTime+0x124>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d202      	bcs.n	8007390 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800738a:	230e      	movs	r3, #14
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	e057      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4a38      	ldr	r2, [pc, #224]	@ (8007474 <USB_SetTurnaroundTime+0x124>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d306      	bcc.n	80073a6 <USB_SetTurnaroundTime+0x56>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4a37      	ldr	r2, [pc, #220]	@ (8007478 <USB_SetTurnaroundTime+0x128>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d202      	bcs.n	80073a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073a0:	230d      	movs	r3, #13
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e04c      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4a33      	ldr	r2, [pc, #204]	@ (8007478 <USB_SetTurnaroundTime+0x128>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d306      	bcc.n	80073bc <USB_SetTurnaroundTime+0x6c>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	4a32      	ldr	r2, [pc, #200]	@ (800747c <USB_SetTurnaroundTime+0x12c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d802      	bhi.n	80073bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80073b6:	230c      	movs	r3, #12
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e041      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4a2f      	ldr	r2, [pc, #188]	@ (800747c <USB_SetTurnaroundTime+0x12c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d906      	bls.n	80073d2 <USB_SetTurnaroundTime+0x82>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007480 <USB_SetTurnaroundTime+0x130>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d802      	bhi.n	80073d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80073cc:	230b      	movs	r3, #11
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e036      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007480 <USB_SetTurnaroundTime+0x130>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d906      	bls.n	80073e8 <USB_SetTurnaroundTime+0x98>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4a29      	ldr	r2, [pc, #164]	@ (8007484 <USB_SetTurnaroundTime+0x134>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d802      	bhi.n	80073e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80073e2:	230a      	movs	r3, #10
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e02b      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4a26      	ldr	r2, [pc, #152]	@ (8007484 <USB_SetTurnaroundTime+0x134>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d906      	bls.n	80073fe <USB_SetTurnaroundTime+0xae>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4a25      	ldr	r2, [pc, #148]	@ (8007488 <USB_SetTurnaroundTime+0x138>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d202      	bcs.n	80073fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80073f8:	2309      	movs	r3, #9
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e020      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4a21      	ldr	r2, [pc, #132]	@ (8007488 <USB_SetTurnaroundTime+0x138>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d306      	bcc.n	8007414 <USB_SetTurnaroundTime+0xc4>
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4a20      	ldr	r2, [pc, #128]	@ (800748c <USB_SetTurnaroundTime+0x13c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d802      	bhi.n	8007414 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800740e:	2308      	movs	r3, #8
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	e015      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4a1d      	ldr	r2, [pc, #116]	@ (800748c <USB_SetTurnaroundTime+0x13c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d906      	bls.n	800742a <USB_SetTurnaroundTime+0xda>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4a1c      	ldr	r2, [pc, #112]	@ (8007490 <USB_SetTurnaroundTime+0x140>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d202      	bcs.n	800742a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007424:	2307      	movs	r3, #7
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e00a      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800742a:	2306      	movs	r3, #6
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	e007      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007436:	2309      	movs	r3, #9
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e001      	b.n	8007440 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800743c:	2309      	movs	r3, #9
 800743e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	029b      	lsls	r3, r3, #10
 8007454:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007458:	431a      	orrs	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	00d8acbf 	.word	0x00d8acbf
 8007470:	00e4e1c0 	.word	0x00e4e1c0
 8007474:	00f42400 	.word	0x00f42400
 8007478:	01067380 	.word	0x01067380
 800747c:	011a499f 	.word	0x011a499f
 8007480:	01312cff 	.word	0x01312cff
 8007484:	014ca43f 	.word	0x014ca43f
 8007488:	016e3600 	.word	0x016e3600
 800748c:	01a6ab1f 	.word	0x01a6ab1f
 8007490:	01e84800 	.word	0x01e84800

08007494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f043 0201 	orr.w	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f023 0201 	bic.w	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d115      	bne.n	8007526 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007506:	200a      	movs	r0, #10
 8007508:	f7fa f802 	bl	8001510 <HAL_Delay>
      ms += 10U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	330a      	adds	r3, #10
 8007510:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 f93f 	bl	8008796 <USB_GetMode>
 8007518:	4603      	mov	r3, r0
 800751a:	2b01      	cmp	r3, #1
 800751c:	d01e      	beq.n	800755c <USB_SetCurrentMode+0x84>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2bc7      	cmp	r3, #199	@ 0xc7
 8007522:	d9f0      	bls.n	8007506 <USB_SetCurrentMode+0x2e>
 8007524:	e01a      	b.n	800755c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d115      	bne.n	8007558 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007538:	200a      	movs	r0, #10
 800753a:	f7f9 ffe9 	bl	8001510 <HAL_Delay>
      ms += 10U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	330a      	adds	r3, #10
 8007542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f926 	bl	8008796 <USB_GetMode>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <USB_SetCurrentMode+0x84>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2bc7      	cmp	r3, #199	@ 0xc7
 8007554:	d9f0      	bls.n	8007538 <USB_SetCurrentMode+0x60>
 8007556:	e001      	b.n	800755c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e005      	b.n	8007568 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007560:	d101      	bne.n	8007566 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007570:	b084      	sub	sp, #16
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800757e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800758a:	2300      	movs	r3, #0
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	e009      	b.n	80075a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	3340      	adds	r3, #64	@ 0x40
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3301      	adds	r3, #1
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b0e      	cmp	r3, #14
 80075a8:	d9f2      	bls.n	8007590 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d11c      	bne.n	80075ec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075c0:	f043 0302 	orr.w	r3, r3, #2
 80075c4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e005      	b.n	80075f8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075fe:	461a      	mov	r2, r3
 8007600:	2300      	movs	r3, #0
 8007602:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007604:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10d      	bne.n	8007628 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800760c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f968 	bl	80078ec <USB_SetDevSpeed>
 800761c:	e008      	b.n	8007630 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f963 	bl	80078ec <USB_SetDevSpeed>
 8007626:	e003      	b.n	8007630 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007628:	2103      	movs	r1, #3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f95e 	bl	80078ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007630:	2110      	movs	r1, #16
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f8fa 	bl	800782c <USB_FlushTxFifo>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f924 	bl	8007890 <USB_FlushRxFifo>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007658:	461a      	mov	r2, r3
 800765a:	2300      	movs	r3, #0
 800765c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007664:	461a      	mov	r2, r3
 8007666:	2300      	movs	r3, #0
 8007668:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007670:	461a      	mov	r2, r3
 8007672:	2300      	movs	r3, #0
 8007674:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	e043      	b.n	8007704 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800768e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007692:	d118      	bne.n	80076c6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a6:	461a      	mov	r2, r3
 80076a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e013      	b.n	80076d8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076bc:	461a      	mov	r2, r3
 80076be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	e008      	b.n	80076d8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d2:	461a      	mov	r2, r3
 80076d4:	2300      	movs	r3, #0
 80076d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e4:	461a      	mov	r2, r3
 80076e6:	2300      	movs	r3, #0
 80076e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f6:	461a      	mov	r2, r3
 80076f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3301      	adds	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007708:	461a      	mov	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4293      	cmp	r3, r2
 800770e:	d3b5      	bcc.n	800767c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e043      	b.n	800779e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772c:	d118      	bne.n	8007760 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007740:	461a      	mov	r2, r3
 8007742:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e013      	b.n	8007772 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007756:	461a      	mov	r2, r3
 8007758:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e008      	b.n	8007772 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776c:	461a      	mov	r2, r3
 800776e:	2300      	movs	r3, #0
 8007770:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777e:	461a      	mov	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007790:	461a      	mov	r2, r3
 8007792:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007796:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	3301      	adds	r3, #1
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077a2:	461a      	mov	r2, r3
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d3b5      	bcc.n	8007716 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80077ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f043 0210 	orr.w	r2, r3, #16
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <USB_DevInit+0x2b4>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f043 0208 	orr.w	r2, r3, #8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <USB_DevInit+0x2b8>)
 800780e:	4313      	orrs	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007814:	7dfb      	ldrb	r3, [r7, #23]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007820:	b004      	add	sp, #16
 8007822:	4770      	bx	lr
 8007824:	803c3800 	.word	0x803c3800
 8007828:	40000004 	.word	0x40000004

0800782c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007846:	d901      	bls.n	800784c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e01b      	b.n	8007884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	daf2      	bge.n	800783a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	019b      	lsls	r3, r3, #6
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007870:	d901      	bls.n	8007876 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e006      	b.n	8007884 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b20      	cmp	r3, #32
 8007880:	d0f0      	beq.n	8007864 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3301      	adds	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078a8:	d901      	bls.n	80078ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e018      	b.n	80078e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	daf2      	bge.n	800789c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2210      	movs	r2, #16
 80078be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3301      	adds	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078cc:	d901      	bls.n	80078d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e006      	b.n	80078e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d0f0      	beq.n	80078c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	68f9      	ldr	r1, [r7, #12]
 8007908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800790c:	4313      	orrs	r3, r2
 800790e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 0306 	and.w	r3, r3, #6
 8007936:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]
 8007942:	e00a      	b.n	800795a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d002      	beq.n	8007950 <USB_GetDevSpeed+0x32>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b06      	cmp	r3, #6
 800794e:	d102      	bne.n	8007956 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
 8007954:	e001      	b.n	800795a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007956:	230f      	movs	r3, #15
 8007958:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d139      	bne.n	80079f8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	2101      	movs	r1, #1
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	68f9      	ldr	r1, [r7, #12]
 800799e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079a2:	4313      	orrs	r3, r2
 80079a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d153      	bne.n	8007a64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	059b      	lsls	r3, r3, #22
 80079de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	0159      	lsls	r1, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	440b      	add	r3, r1
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	4619      	mov	r1, r3
 80079f0:	4b20      	ldr	r3, [pc, #128]	@ (8007a74 <USB_ActivateEndpoint+0x10c>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]
 80079f6:	e035      	b.n	8007a64 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079fe:	69da      	ldr	r2, [r3, #28]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	2101      	movs	r1, #1
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	68f9      	ldr	r1, [r7, #12]
 8007a12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a16:	4313      	orrs	r3, r2
 8007a18:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d119      	bne.n	8007a64 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	0159      	lsls	r1, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <USB_ActivateEndpoint+0x10c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	10008000 	.word	0x10008000

08007a78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d161      	bne.n	8007b58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aaa:	d11f      	bne.n	8007aec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ac6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007aca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ae6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	2101      	movs	r1, #1
 8007afe:	fa01 f303 	lsl.w	r3, r1, r3
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	2101      	movs	r1, #1
 8007b22:	fa01 f303 	lsl.w	r3, r1, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b30:	4013      	ands	r3, r2
 8007b32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	0159      	lsls	r1, r3, #5
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	440b      	add	r3, r1
 8007b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4b35      	ldr	r3, [pc, #212]	@ (8007c28 <USB_DeactivateEndpoint+0x1b0>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	600b      	str	r3, [r1, #0]
 8007b56:	e060      	b.n	8007c1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b6e:	d11f      	bne.n	8007bb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007baa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bda:	69da      	ldr	r2, [r3, #28]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	2101      	movs	r1, #1
 8007be6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	43db      	mvns	r3, r3
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	0159      	lsls	r1, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	440b      	add	r3, r1
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c12:	4619      	mov	r1, r3
 8007c14:	4b05      	ldr	r3, [pc, #20]	@ (8007c2c <USB_DeactivateEndpoint+0x1b4>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	ec337800 	.word	0xec337800
 8007c2c:	eff37800 	.word	0xeff37800

08007c30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	@ 0x28
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	f040 8185 	bne.w	8007f5c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d132      	bne.n	8007cc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	0159      	lsls	r1, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	440b      	add	r3, r1
 8007c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c74:	4619      	mov	r1, r3
 8007c76:	4ba7      	ldr	r3, [pc, #668]	@ (8007f14 <USB_EPStartXfer+0x2e4>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	0159      	lsls	r1, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	440b      	add	r3, r1
 8007cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4b97      	ldr	r3, [pc, #604]	@ (8007f18 <USB_EPStartXfer+0x2e8>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	610b      	str	r3, [r1, #16]
 8007cbe:	e097      	b.n	8007df0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ccc:	691a      	ldr	r2, [r3, #16]
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	0159      	lsls	r1, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	440b      	add	r3, r1
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8007f18 <USB_EPStartXfer+0x2e8>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	0159      	lsls	r1, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	440b      	add	r3, r1
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4b85      	ldr	r3, [pc, #532]	@ (8007f14 <USB_EPStartXfer+0x2e4>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d11a      	bne.n	8007d40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d903      	bls.n	8007d1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d3c:	6113      	str	r3, [r2, #16]
 8007d3e:	e044      	b.n	8007dca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	1e5a      	subs	r2, r3, #1
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	8afb      	ldrh	r3, [r7, #22]
 8007d66:	04d9      	lsls	r1, r3, #19
 8007d68:	4b6c      	ldr	r3, [pc, #432]	@ (8007f1c <USB_EPStartXfer+0x2ec>)
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	69b9      	ldr	r1, [r7, #24]
 8007d6e:	0148      	lsls	r0, r1, #5
 8007d70:	69f9      	ldr	r1, [r7, #28]
 8007d72:	4401      	add	r1, r0
 8007d74:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	791b      	ldrb	r3, [r3, #4]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d122      	bne.n	8007dca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d9e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007da2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	075b      	lsls	r3, r3, #29
 8007db6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	0148      	lsls	r0, r1, #5
 8007dbe:	69f9      	ldr	r1, [r7, #28]
 8007dc0:	4401      	add	r1, r0
 8007dc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007de0:	69b9      	ldr	r1, [r7, #24]
 8007de2:	0148      	lsls	r0, r1, #5
 8007de4:	69f9      	ldr	r1, [r7, #28]
 8007de6:	4401      	add	r1, r0
 8007de8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007dec:	4313      	orrs	r3, r2
 8007dee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d14b      	bne.n	8007e8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	791b      	ldrb	r3, [r3, #4]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d128      	bne.n	8007e6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d110      	bne.n	8007e4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	e00f      	b.n	8007e6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e169      	b.n	8008162 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ea8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007eac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d015      	beq.n	8007ee2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8151 	beq.w	8008162 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed6:	69f9      	ldr	r1, [r7, #28]
 8007ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007edc:	4313      	orrs	r3, r2
 8007ede:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ee0:	e13f      	b.n	8008162 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d116      	bne.n	8007f20 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e015      	b.n	8007f40 <USB_EPStartXfer+0x310>
 8007f14:	e007ffff 	.word	0xe007ffff
 8007f18:	fff80000 	.word	0xfff80000
 8007f1c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f3e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	68d9      	ldr	r1, [r3, #12]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	b298      	uxth	r0, r3
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4603      	mov	r3, r0
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f9b9 	bl	80082cc <USB_WritePacket>
 8007f5a:	e102      	b.n	8008162 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	0159      	lsls	r1, r3, #5
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	440b      	add	r3, r1
 8007f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f76:	4619      	mov	r1, r3
 8007f78:	4b7c      	ldr	r3, [pc, #496]	@ (800816c <USB_EPStartXfer+0x53c>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	0159      	lsls	r1, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	440b      	add	r3, r1
 8007f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4b75      	ldr	r3, [pc, #468]	@ (8008170 <USB_EPStartXfer+0x540>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d12f      	bne.n	8008006 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	0148      	lsls	r0, r1, #5
 8007fd8:	69f9      	ldr	r1, [r7, #28]
 8007fda:	4401      	add	r1, r0
 8007fdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	015a      	lsls	r2, r3, #5
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	4413      	add	r3, r2
 8007fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	0151      	lsls	r1, r2, #5
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	440a      	add	r2, r1
 8007ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ffe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008002:	6113      	str	r3, [r2, #16]
 8008004:	e05f      	b.n	80080c6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d123      	bne.n	8008056 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008024:	69b9      	ldr	r1, [r7, #24]
 8008026:	0148      	lsls	r0, r1, #5
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	4401      	add	r1, r0
 800802c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008030:	4313      	orrs	r3, r2
 8008032:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	0151      	lsls	r1, r2, #5
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	440a      	add	r2, r1
 800804a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800804e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008052:	6113      	str	r3, [r2, #16]
 8008054:	e037      	b.n	80080c6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	4413      	add	r3, r2
 8008060:	1e5a      	subs	r2, r3, #1
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	8afa      	ldrh	r2, [r7, #22]
 8008072:	fb03 f202 	mul.w	r2, r3, r2
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	8afb      	ldrh	r3, [r7, #22]
 800808a:	04d9      	lsls	r1, r3, #19
 800808c:	4b39      	ldr	r3, [pc, #228]	@ (8008174 <USB_EPStartXfer+0x544>)
 800808e:	400b      	ands	r3, r1
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	0148      	lsls	r0, r1, #5
 8008094:	69f9      	ldr	r1, [r7, #28]
 8008096:	4401      	add	r1, r0
 8008098:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800809c:	4313      	orrs	r3, r2
 800809e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b6:	69b9      	ldr	r1, [r7, #24]
 80080b8:	0148      	lsls	r0, r1, #5
 80080ba:	69f9      	ldr	r1, [r7, #28]
 80080bc:	4401      	add	r1, r0
 80080be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080c2:	4313      	orrs	r3, r2
 80080c4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10d      	bne.n	80080e8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d009      	beq.n	80080e8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	68d9      	ldr	r1, [r3, #12]
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e4:	460a      	mov	r2, r1
 80080e6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	791b      	ldrb	r3, [r3, #4]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d128      	bne.n	8008142 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d110      	bne.n	8008122 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800811a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	e00f      	b.n	8008142 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	4413      	add	r3, r2
 800812a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	0151      	lsls	r1, r2, #5
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	440a      	add	r2, r1
 8008138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008140:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	4413      	add	r3, r2
 800814a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	440a      	add	r2, r1
 8008158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800815c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008160:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	fff80000 	.word	0xfff80000
 8008170:	e007ffff 	.word	0xe007ffff
 8008174:	1ff80000 	.word	0x1ff80000

08008178 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d14a      	bne.n	800822c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ae:	f040 8086 	bne.w	80082be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	0151      	lsls	r1, r2, #5
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	440a      	add	r2, r1
 80081cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008206:	4293      	cmp	r3, r2
 8008208:	d902      	bls.n	8008210 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
          break;
 800820e:	e056      	b.n	80082be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008228:	d0e7      	beq.n	80081fa <USB_EPStopXfer+0x82>
 800822a:	e048      	b.n	80082be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008244:	d13b      	bne.n	80082be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	440a      	add	r2, r1
 8008260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008264:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008268:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008288:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800828c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f242 7210 	movw	r2, #10000	@ 0x2710
 800829a:	4293      	cmp	r3, r2
 800829c:	d902      	bls.n	80082a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
          break;
 80082a2:	e00c      	b.n	80082be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082bc:	d0e7      	beq.n	800828e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b089      	sub	sp, #36	@ 0x24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4611      	mov	r1, r2
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	71fb      	strb	r3, [r7, #7]
 80082de:	4613      	mov	r3, r2
 80082e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d123      	bne.n	800833a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082f2:	88bb      	ldrh	r3, [r7, #4]
 80082f4:	3303      	adds	r3, #3
 80082f6:	089b      	lsrs	r3, r3, #2
 80082f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	e018      	b.n	8008332 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	031a      	lsls	r2, r3, #12
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4413      	add	r3, r2
 8008308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800830c:	461a      	mov	r2, r3
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	3301      	adds	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	3301      	adds	r3, #1
 800831e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3301      	adds	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	3301      	adds	r3, #1
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3e2      	bcc.n	8008300 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3724      	adds	r7, #36	@ 0x24
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008348:	b480      	push	{r7}
 800834a:	b08b      	sub	sp, #44	@ 0x2c
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	b29b      	uxth	r3, r3
 8008364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800836e:	2300      	movs	r3, #0
 8008370:	623b      	str	r3, [r7, #32]
 8008372:	e014      	b.n	800839e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	3301      	adds	r3, #1
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008388:	3301      	adds	r3, #1
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	3301      	adds	r3, #1
 8008390:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	3301      	adds	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	3301      	adds	r3, #1
 800839c:	623b      	str	r3, [r7, #32]
 800839e:	6a3a      	ldr	r2, [r7, #32]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3e6      	bcc.n	8008374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083a6:	8bfb      	ldrh	r3, [r7, #30]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01e      	beq.n	80083ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083b6:	461a      	mov	r2, r3
 80083b8:	f107 0310 	add.w	r3, r7, #16
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	701a      	strb	r2, [r3, #0]
      i++;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	3301      	adds	r3, #1
 80083d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	3301      	adds	r3, #1
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80083de:	8bfb      	ldrh	r3, [r7, #30]
 80083e0:	3b01      	subs	r3, #1
 80083e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083e4:	8bfb      	ldrh	r3, [r7, #30]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1ea      	bne.n	80083c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	372c      	adds	r7, #44	@ 0x2c
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d12c      	bne.n	800846e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	db12      	blt.n	800844c <USB_EPSetStall+0x54>
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008446:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800844a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e02b      	b.n	80084c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	db12      	blt.n	80084a6 <USB_EPSetStall+0xae>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00f      	beq.n	80084a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d128      	bne.n	8008542 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800850a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800850e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	791b      	ldrb	r3, [r3, #4]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d003      	beq.n	8008520 <USB_EPClearStall+0x4c>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	791b      	ldrb	r3, [r3, #4]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d138      	bne.n	8008592 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800853a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	e027      	b.n	8008592 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800855c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008560:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	791b      	ldrb	r3, [r3, #4]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d003      	beq.n	8008572 <USB_EPClearStall+0x9e>
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d10f      	bne.n	8008592 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	440a      	add	r2, r1
 8008588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800858c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008590:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80085c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085da:	4313      	orrs	r3, r2
 80085dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800861a:	f023 0302 	bic.w	r3, r3, #2
 800861e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800865c:	f043 0302 	orr.w	r3, r3, #2
 8008660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4013      	ands	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008696:	b480      	push	{r7}
 8008698:	b085      	sub	sp, #20
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	4013      	ands	r3, r2
 80086b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	0c1b      	lsrs	r3, r3, #16
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4013      	ands	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	b29b      	uxth	r3, r3
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4013      	ands	r3, r2
 800872a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800872c:	68bb      	ldr	r3, [r7, #8]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800873a:	b480      	push	{r7}
 800873c:	b087      	sub	sp, #28
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800875a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	fa22 f303 	lsr.w	r3, r2, r3
 800876a:	01db      	lsls	r3, r3, #7
 800876c:	b2db      	uxtb	r3, r3
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	4413      	add	r3, r2
 800877c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4013      	ands	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008788:	68bb      	ldr	r3, [r7, #8]
}
 800878a:	4618      	mov	r0, r3
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0301 	and.w	r3, r3, #1
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
	...

080087b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ce:	4619      	mov	r1, r3
 80087d0:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <USB_ActivateSetup+0x44>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	fffff800 	.word	0xfffff800

080087fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	460b      	mov	r3, r1
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	333c      	adds	r3, #60	@ 0x3c
 8008812:	3304      	adds	r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4a26      	ldr	r2, [pc, #152]	@ (80088b4 <USB_EP0_OutStart+0xb8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d90a      	bls.n	8008836 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008830:	d101      	bne.n	8008836 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e037      	b.n	80088a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008850:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008864:	f043 0318 	orr.w	r3, r3, #24
 8008868:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008878:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800887c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800887e:	7afb      	ldrb	r3, [r7, #11]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d10f      	bne.n	80088a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800889e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80088a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	4f54300a 	.word	0x4f54300a

080088b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088d0:	d901      	bls.n	80088d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e01b      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	daf2      	bge.n	80088c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f043 0201 	orr.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088fa:	d901      	bls.n	8008900 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e006      	b.n	800890e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d0f0      	beq.n	80088ee <USB_CoreReset+0x36>

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008928:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800892c:	f002 fcd8 	bl	800b2e0 <USBD_static_malloc>
 8008930:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d109      	bne.n	800894c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	@ 0xb0
 8008942:	2100      	movs	r1, #0
 8008944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008948:	2302      	movs	r3, #2
 800894a:	e0d4      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800894c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f002 ff1a 	bl	800b78c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32b0      	adds	r2, #176	@ 0xb0
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32b0      	adds	r2, #176	@ 0xb0
 8008972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7c1b      	ldrb	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d138      	bne.n	80089f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008984:	4b5e      	ldr	r3, [pc, #376]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008986:	7819      	ldrb	r1, [r3, #0]
 8008988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800898c:	2202      	movs	r2, #2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f002 fb83 	bl	800b09a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008994:	4b5a      	ldr	r3, [pc, #360]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 020f 	and.w	r2, r3, #15
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	4613      	mov	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	440b      	add	r3, r1
 80089a8:	3324      	adds	r3, #36	@ 0x24
 80089aa:	2201      	movs	r2, #1
 80089ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089ae:	4b55      	ldr	r3, [pc, #340]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 80089b0:	7819      	ldrb	r1, [r3, #0]
 80089b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089b6:	2202      	movs	r2, #2
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f002 fb6e 	bl	800b09a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089be:	4b51      	ldr	r3, [pc, #324]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d6:	2201      	movs	r2, #1
 80089d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089da:	4b4b      	ldr	r3, [pc, #300]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 020f 	and.w	r2, r3, #15
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	3326      	adds	r3, #38	@ 0x26
 80089f0:	2210      	movs	r2, #16
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e035      	b.n	8008a62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089f6:	4b42      	ldr	r3, [pc, #264]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 80089f8:	7819      	ldrb	r1, [r3, #0]
 80089fa:	2340      	movs	r3, #64	@ 0x40
 80089fc:	2202      	movs	r2, #2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f002 fb4b 	bl	800b09a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a04:	4b3e      	ldr	r3, [pc, #248]	@ (8008b00 <USBD_CDC_Init+0x1e4>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 020f 	and.w	r2, r3, #15
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	3324      	adds	r3, #36	@ 0x24
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a1e:	4b39      	ldr	r3, [pc, #228]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a20:	7819      	ldrb	r1, [r3, #0]
 8008a22:	2340      	movs	r3, #64	@ 0x40
 8008a24:	2202      	movs	r2, #2
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f002 fb37 	bl	800b09a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a2c:	4b35      	ldr	r3, [pc, #212]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a44:	2201      	movs	r2, #1
 8008a46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a48:	4b2f      	ldr	r3, [pc, #188]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3326      	adds	r3, #38	@ 0x26
 8008a5e:	2210      	movs	r2, #16
 8008a60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a62:	4b29      	ldr	r3, [pc, #164]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a64:	7819      	ldrb	r1, [r3, #0]
 8008a66:	2308      	movs	r3, #8
 8008a68:	2203      	movs	r2, #3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 fb15 	bl	800b09a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a70:	4b25      	ldr	r3, [pc, #148]	@ (8008b08 <USBD_CDC_Init+0x1ec>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3324      	adds	r3, #36	@ 0x24
 8008a86:	2201      	movs	r2, #1
 8008a88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	33b0      	adds	r3, #176	@ 0xb0
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e018      	b.n	8008af6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7c1b      	ldrb	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008acc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f002 fbcc 	bl	800b278 <USBD_LL_PrepareReceive>
 8008ae0:	e008      	b.n	8008af4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ae2:	4b08      	ldr	r3, [pc, #32]	@ (8008b04 <USBD_CDC_Init+0x1e8>)
 8008ae4:	7819      	ldrb	r1, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008aec:	2340      	movs	r3, #64	@ 0x40
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f002 fbc2 	bl	800b278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	24000097 	.word	0x24000097
 8008b04:	24000098 	.word	0x24000098
 8008b08:	24000099 	.word	0x24000099

08008b0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b18:	4b3a      	ldr	r3, [pc, #232]	@ (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f002 fae1 	bl	800b0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b24:	4b37      	ldr	r3, [pc, #220]	@ (8008c04 <USBD_CDC_DeInit+0xf8>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 020f 	and.w	r2, r3, #15
 8008b2c:	6879      	ldr	r1, [r7, #4]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	440b      	add	r3, r1
 8008b38:	3324      	adds	r3, #36	@ 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b3e:	4b32      	ldr	r3, [pc, #200]	@ (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 face 	bl	800b0e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c08 <USBD_CDC_DeInit+0xfc>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b62:	2200      	movs	r2, #0
 8008b64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b66:	4b29      	ldr	r3, [pc, #164]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f002 faba 	bl	800b0e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b72:	4b26      	ldr	r3, [pc, #152]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3324      	adds	r3, #36	@ 0x24
 8008b88:	2200      	movs	r2, #0
 8008b8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008c0c <USBD_CDC_DeInit+0x100>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 020f 	and.w	r2, r3, #15
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3326      	adds	r3, #38	@ 0x26
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32b0      	adds	r2, #176	@ 0xb0
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01f      	beq.n	8008bf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	33b0      	adds	r3, #176	@ 0xb0
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32b0      	adds	r2, #176	@ 0xb0
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f002 fb8e 	bl	800b2fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	@ 0xb0
 8008bea:	2100      	movs	r1, #0
 8008bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	24000097 	.word	0x24000097
 8008c08:	24000098 	.word	0x24000098
 8008c0c:	24000099 	.word	0x24000099

08008c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	@ 0xb0
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e0bf      	b.n	8008dc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d050      	beq.n	8008cee <USBD_CDC_Setup+0xde>
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	f040 80af 	bne.w	8008db0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03a      	beq.n	8008cd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da1b      	bge.n	8008c9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	33b0      	adds	r3, #176	@ 0xb0
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	88d2      	ldrh	r2, [r2, #6]
 8008c80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b07      	cmp	r3, #7
 8008c88:	bf28      	it	cs
 8008c8a:	2307      	movcs	r3, #7
 8008c8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	89fa      	ldrh	r2, [r7, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fd99 	bl	800a7cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c9a:	e090      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	785a      	ldrb	r2, [r3, #1]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	88db      	ldrh	r3, [r3, #6]
 8008caa:	2b3f      	cmp	r3, #63	@ 0x3f
 8008cac:	d803      	bhi.n	8008cb6 <USBD_CDC_Setup+0xa6>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	e000      	b.n	8008cb8 <USBD_CDC_Setup+0xa8>
 8008cb6:	2240      	movs	r2, #64	@ 0x40
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cbe:	6939      	ldr	r1, [r7, #16]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fdab 	bl	800a824 <USBD_CtlPrepareRx>
      break;
 8008cce:	e076      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	33b0      	adds	r3, #176	@ 0xb0
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	7850      	ldrb	r0, [r2, #1]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	4798      	blx	r3
      break;
 8008cec:	e067      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	785b      	ldrb	r3, [r3, #1]
 8008cf2:	2b0b      	cmp	r3, #11
 8008cf4:	d851      	bhi.n	8008d9a <USBD_CDC_Setup+0x18a>
 8008cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <USBD_CDC_Setup+0xec>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d2d 	.word	0x08008d2d
 8008d00:	08008da9 	.word	0x08008da9
 8008d04:	08008d9b 	.word	0x08008d9b
 8008d08:	08008d9b 	.word	0x08008d9b
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008d9b 	.word	0x08008d9b
 8008d14:	08008d9b 	.word	0x08008d9b
 8008d18:	08008d9b 	.word	0x08008d9b
 8008d1c:	08008d9b 	.word	0x08008d9b
 8008d20:	08008d9b 	.word	0x08008d9b
 8008d24:	08008d57 	.word	0x08008d57
 8008d28:	08008d81 	.word	0x08008d81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d107      	bne.n	8008d48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d38:	f107 030a 	add.w	r3, r7, #10
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fd43 	bl	800a7cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d46:	e032      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fcc1 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	75fb      	strb	r3, [r7, #23]
          break;
 8008d54:	e02b      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d107      	bne.n	8008d72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d62:	f107 030d 	add.w	r3, r7, #13
 8008d66:	2201      	movs	r2, #1
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fd2e 	bl	800a7cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d70:	e01d      	b.n	8008dae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fcac 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e016      	b.n	8008dae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d00f      	beq.n	8008dac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fc9f 	bl	800a6d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d98:	e008      	b.n	8008dac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fc98 	bl	800a6d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008da2:	2303      	movs	r3, #3
 8008da4:	75fb      	strb	r3, [r7, #23]
          break;
 8008da6:	e002      	b.n	8008dae <USBD_CDC_Setup+0x19e>
          break;
 8008da8:	bf00      	nop
 8008daa:	e008      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>
          break;
 8008dac:	bf00      	nop
      }
      break;
 8008dae:	e006      	b.n	8008dbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc8d 	bl	800a6d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	75fb      	strb	r3, [r7, #23]
      break;
 8008dbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32b0      	adds	r2, #176	@ 0xb0
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e065      	b.n	8008ebe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	@ 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	3318      	adds	r3, #24
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d02f      	beq.n	8008e7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3318      	adds	r3, #24
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 010f 	and.w	r1, r3, #15
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4403      	add	r3, r0
 8008e44:	331c      	adds	r3, #28
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e4c:	fb01 f303 	mul.w	r3, r1, r3
 8008e50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d112      	bne.n	8008e7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	f003 020f 	and.w	r2, r3, #15
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	440b      	add	r3, r1
 8008e68:	3318      	adds	r3, #24
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e6e:	78f9      	ldrb	r1, [r7, #3]
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f002 f9de 	bl	800b236 <USBD_LL_Transmit>
 8008e7a:	e01f      	b.n	8008ebc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	33b0      	adds	r3, #176	@ 0xb0
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d010      	beq.n	8008ebc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	33b0      	adds	r3, #176	@ 0xb0
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	32b0      	adds	r2, #176	@ 0xb0
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	32b0      	adds	r2, #176	@ 0xb0
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e01a      	b.n	8008f2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f002 f9dc 	bl	800b2ba <USBD_LL_GetRxDataSize>
 8008f02:	4602      	mov	r2, r0
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	33b0      	adds	r3, #176	@ 0xb0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32b0      	adds	r2, #176	@ 0xb0
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e024      	b.n	8008fa2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	33b0      	adds	r3, #176	@ 0xb0
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <USBD_CDC_EP0_RxReady+0x6a>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f72:	2bff      	cmp	r3, #255	@ 0xff
 8008f74:	d014      	beq.n	8008fa0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	33b0      	adds	r3, #176	@ 0xb0
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	22ff      	movs	r2, #255	@ 0xff
 8008f9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fb4:	2182      	movs	r1, #130	@ 0x82
 8008fb6:	4818      	ldr	r0, [pc, #96]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fb8:	f000 fd2b 	bl	8009a12 <USBD_GetEpDesc>
 8008fbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4815      	ldr	r0, [pc, #84]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fc2:	f000 fd26 	bl	8009a12 <USBD_GetEpDesc>
 8008fc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fc8:	2181      	movs	r1, #129	@ 0x81
 8008fca:	4813      	ldr	r0, [pc, #76]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fcc:	f000 fd21 	bl	8009a12 <USBD_GetEpDesc>
 8008fd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fec:	711a      	strb	r2, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009000:	711a      	strb	r2, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2243      	movs	r2, #67	@ 0x43
 800900a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	24000054 	.word	0x24000054

0800901c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009024:	2182      	movs	r1, #130	@ 0x82
 8009026:	4818      	ldr	r0, [pc, #96]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009028:	f000 fcf3 	bl	8009a12 <USBD_GetEpDesc>
 800902c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800902e:	2101      	movs	r1, #1
 8009030:	4815      	ldr	r0, [pc, #84]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009032:	f000 fcee 	bl	8009a12 <USBD_GetEpDesc>
 8009036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009038:	2181      	movs	r1, #129	@ 0x81
 800903a:	4813      	ldr	r0, [pc, #76]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800903c:	f000 fce9 	bl	8009a12 <USBD_GetEpDesc>
 8009040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2210      	movs	r2, #16
 800904c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d006      	beq.n	8009062 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	2200      	movs	r2, #0
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f042 0202 	orr.w	r2, r2, #2
 8009060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d006      	beq.n	8009076 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	711a      	strb	r2, [r3, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f042 0202 	orr.w	r2, r2, #2
 8009074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2243      	movs	r2, #67	@ 0x43
 800907a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	@ (8009088 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	24000054 	.word	0x24000054

0800908c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009094:	2182      	movs	r1, #130	@ 0x82
 8009096:	4818      	ldr	r0, [pc, #96]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009098:	f000 fcbb 	bl	8009a12 <USBD_GetEpDesc>
 800909c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800909e:	2101      	movs	r1, #1
 80090a0:	4815      	ldr	r0, [pc, #84]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090a2:	f000 fcb6 	bl	8009a12 <USBD_GetEpDesc>
 80090a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090a8:	2181      	movs	r1, #129	@ 0x81
 80090aa:	4813      	ldr	r0, [pc, #76]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090ac:	f000 fcb1 	bl	8009a12 <USBD_GetEpDesc>
 80090b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2210      	movs	r2, #16
 80090bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090cc:	711a      	strb	r2, [r3, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090e0:	711a      	strb	r2, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2243      	movs	r2, #67	@ 0x43
 80090ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	24000054 	.word	0x24000054

080090fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	220a      	movs	r2, #10
 8009108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800910a:	4b03      	ldr	r3, [pc, #12]	@ (8009118 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	24000010 	.word	0x24000010

0800911c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e009      	b.n	8009144 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	33b0      	adds	r3, #176	@ 0xb0
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	32b0      	adds	r2, #176	@ 0xb0
 8009166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	e008      	b.n	8009188 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	32b0      	adds	r2, #176	@ 0xb0
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e004      	b.n	80091c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	32b0      	adds	r2, #176	@ 0xb0
 80091e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32b0      	adds	r2, #176	@ 0xb0
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e018      	b.n	8009230 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7c1b      	ldrb	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009206:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <USBD_CDC_ReceivePacket+0x68>)
 8009208:	7819      	ldrb	r1, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f002 f82f 	bl	800b278 <USBD_LL_PrepareReceive>
 800921a:	e008      	b.n	800922e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <USBD_CDC_ReceivePacket+0x68>)
 800921e:	7819      	ldrb	r1, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009226:	2340      	movs	r3, #64	@ 0x40
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f002 f825 	bl	800b278 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	24000098 	.word	0x24000098

0800923c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009250:	4817      	ldr	r0, [pc, #92]	@ (80092b0 <USBD_Init+0x74>)
 8009252:	f002 f94b 	bl	800b4ec <iprintf>
 8009256:	4817      	ldr	r0, [pc, #92]	@ (80092b4 <USBD_Init+0x78>)
 8009258:	f002 f948 	bl	800b4ec <iprintf>
 800925c:	200a      	movs	r0, #10
 800925e:	f002 f957 	bl	800b510 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009262:	2303      	movs	r3, #3
 8009264:	e01f      	b.n	80092a6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	79fa      	ldrb	r2, [r7, #7]
 8009298:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f001 fe90 	bl	800afc0 <USBD_LL_Init>
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3718      	adds	r7, #24
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	0800c31c 	.word	0x0800c31c
 80092b4:	0800c324 	.word	0x0800c324

080092b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80092cc:	481a      	ldr	r0, [pc, #104]	@ (8009338 <USBD_RegisterClass+0x80>)
 80092ce:	f002 f90d 	bl	800b4ec <iprintf>
 80092d2:	481a      	ldr	r0, [pc, #104]	@ (800933c <USBD_RegisterClass+0x84>)
 80092d4:	f002 f90a 	bl	800b4ec <iprintf>
 80092d8:	200a      	movs	r0, #10
 80092da:	f002 f919 	bl	800b510 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	e025      	b.n	800932e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	32ae      	adds	r2, #174	@ 0xae
 80092f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00f      	beq.n	800931e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	32ae      	adds	r2, #174	@ 0xae
 8009308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	f107 020e 	add.w	r2, r7, #14
 8009312:	4610      	mov	r0, r2
 8009314:	4798      	blx	r3
 8009316:	4602      	mov	r2, r0
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	0800c31c 	.word	0x0800c31c
 800933c:	0800c33c 	.word	0x0800c33c

08009340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fe8b 	bl	800b064 <USBD_LL_Start>
 800934e:	4603      	mov	r3, r0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f936 	bl	800a65e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b02      	cmp	r3, #2
 8009414:	d01a      	beq.n	800944c <USBD_LL_SetupStage+0x72>
 8009416:	2b02      	cmp	r3, #2
 8009418:	d822      	bhi.n	8009460 <USBD_LL_SetupStage+0x86>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <USBD_LL_SetupStage+0x4a>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <USBD_LL_SetupStage+0x5e>
 8009422:	e01d      	b.n	8009460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb63 	bl	8009af8 <USBD_StdDevReq>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
      break;
 8009436:	e020      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fbcb 	bl	8009bdc <USBD_StdItfReq>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
      break;
 800944a:	e016      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc2d 	bl	8009cb4 <USBD_StdEPReq>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
      break;
 800945e:	e00c      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009466:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fe58 	bl	800b124 <USBD_LL_StallEP>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
      break;
 8009478:	bf00      	nop
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	460b      	mov	r3, r1
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d16e      	bne.n	800957a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80094a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	f040 8098 	bne.w	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d913      	bls.n	80094e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	bf28      	it	cs
 80094d6:	4613      	movcs	r3, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f001 f9be 	bl	800a85e <USBD_CtlContinueRx>
 80094e2:	e07d      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d014      	beq.n	800951c <USBD_LL_DataOutStage+0x98>
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d81d      	bhi.n	8009532 <USBD_LL_DataOutStage+0xae>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <USBD_LL_DataOutStage+0x7c>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d003      	beq.n	8009506 <USBD_LL_DataOutStage+0x82>
 80094fe:	e018      	b.n	8009532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]
            break;
 8009504:	e018      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800950c:	b2db      	uxtb	r3, r3
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fa64 	bl	80099de <USBD_CoreFindIF>
 8009516:	4603      	mov	r3, r0
 8009518:	75bb      	strb	r3, [r7, #22]
            break;
 800951a:	e00d      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009522:	b2db      	uxtb	r3, r3
 8009524:	4619      	mov	r1, r3
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fa66 	bl	80099f8 <USBD_CoreFindEP>
 800952c:	4603      	mov	r3, r0
 800952e:	75bb      	strb	r3, [r7, #22]
            break;
 8009530:	e002      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]
            break;
 8009536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009538:	7dbb      	ldrb	r3, [r7, #22]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d119      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d113      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800954a:	7dba      	ldrb	r2, [r7, #22]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	32ae      	adds	r2, #174	@ 0xae
 8009550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800955a:	7dba      	ldrb	r2, [r7, #22]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009562:	7dba      	ldrb	r2, [r7, #22]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	@ 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 f984 	bl	800a880 <USBD_CtlSendStatus>
 8009578:	e032      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009580:	b2db      	uxtb	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fa37 	bl	80099f8 <USBD_CoreFindEP>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	2bff      	cmp	r3, #255	@ 0xff
 8009592:	d025      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
 8009594:	7dbb      	ldrb	r3, [r7, #22]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d122      	bne.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d117      	bne.n	80095d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095a6:	7dba      	ldrb	r2, [r7, #22]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	32ae      	adds	r2, #174	@ 0xae
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00f      	beq.n	80095d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80095b6:	7dba      	ldrb	r2, [r7, #22]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095be:	7dba      	ldrb	r2, [r7, #22]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	32ae      	adds	r2, #174	@ 0xae
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	7afa      	ldrb	r2, [r7, #11]
 80095cc:	4611      	mov	r1, r2
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	4798      	blx	r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	e000      	b.n	80095e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	460b      	mov	r3, r1
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d16f      	bne.n	80096de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3314      	adds	r3, #20
 8009602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800960a:	2b02      	cmp	r3, #2
 800960c:	d15a      	bne.n	80096c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d914      	bls.n	8009644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	1ad2      	subs	r2, r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	461a      	mov	r2, r3
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f001 f8e6 	bl	800a802 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 fe1b 	bl	800b278 <USBD_LL_PrepareReceive>
 8009642:	e03f      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	429a      	cmp	r2, r3
 800964e:	d11c      	bne.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009658:	429a      	cmp	r2, r3
 800965a:	d316      	bcc.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009666:	429a      	cmp	r2, r3
 8009668:	d20f      	bcs.n	800968a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f001 f8c7 	bl	800a802 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 fdf8 	bl	800b278 <USBD_LL_PrepareReceive>
 8009688:	e01c      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b03      	cmp	r3, #3
 8009694:	d10f      	bne.n	80096b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b6:	2180      	movs	r1, #128	@ 0x80
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f001 fd33 	bl	800b124 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f001 f8f1 	bl	800a8a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff fe42 	bl	8009358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80096dc:	e032      	b.n	8009744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	4619      	mov	r1, r3
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f985 	bl	80099f8 <USBD_CoreFindEP>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2bff      	cmp	r3, #255	@ 0xff
 80096f6:	d025      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d122      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b03      	cmp	r3, #3
 8009708:	d11c      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800970a:	7dfa      	ldrb	r2, [r7, #23]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	32ae      	adds	r2, #174	@ 0xae
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800971a:	7dfa      	ldrb	r2, [r7, #23]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009722:	7dfa      	ldrb	r2, [r7, #23]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	32ae      	adds	r2, #174	@ 0xae
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	7afa      	ldrb	r2, [r7, #11]
 8009730:	4611      	mov	r1, r2
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	4798      	blx	r3
 8009736:	4603      	mov	r3, r0
 8009738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800973a:	7dbb      	ldrb	r3, [r7, #22]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009740:	7dbb      	ldrb	r3, [r7, #22]
 8009742:	e000      	b.n	8009746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d014      	beq.n	80097b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00e      	beq.n	80097b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6852      	ldr	r2, [r2, #4]
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b4:	2340      	movs	r3, #64	@ 0x40
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fc6d 	bl	800b09a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2240      	movs	r2, #64	@ 0x40
 80097cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d0:	2340      	movs	r3, #64	@ 0x40
 80097d2:	2200      	movs	r2, #0
 80097d4:	2180      	movs	r1, #128	@ 0x80
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fc5f 	bl	800b09a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2240      	movs	r2, #64	@ 0x40
 80097e6:	621a      	str	r2, [r3, #32]

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b04      	cmp	r3, #4
 8009824:	d006      	beq.n	8009834 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800982c:	b2da      	uxtb	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b04      	cmp	r3, #4
 800985c:	d106      	bne.n	800986c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009864:	b2da      	uxtb	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d110      	bne.n	80098b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00b      	beq.n	80098b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	460b      	mov	r3, r1
 80098c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	32ae      	adds	r2, #174	@ 0xae
 80098d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098d8:	2303      	movs	r3, #3
 80098da:	e01c      	b.n	8009916 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d115      	bne.n	8009914 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	32ae      	adds	r2, #174	@ 0xae
 80098f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	32ae      	adds	r2, #174	@ 0xae
 8009906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	4611      	mov	r1, r2
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b082      	sub	sp, #8
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	32ae      	adds	r2, #174	@ 0xae
 8009934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800993c:	2303      	movs	r3, #3
 800993e:	e01c      	b.n	800997a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b03      	cmp	r3, #3
 800994a:	d115      	bne.n	8009978 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	32ae      	adds	r2, #174	@ 0xae
 8009956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	32ae      	adds	r2, #174	@ 0xae
 800996a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	4611      	mov	r1, r2
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00e      	beq.n	80099d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	6852      	ldr	r2, [r2, #4]
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	4611      	mov	r1, r2
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	4798      	blx	r3
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	460b      	mov	r3, r1
 80099e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b086      	sub	sp, #24
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	885b      	ldrh	r3, [r3, #2]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d91f      	bls.n	8009a78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a3e:	e013      	b.n	8009a68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a40:	f107 030a 	add.w	r3, r7, #10
 8009a44:	4619      	mov	r1, r3
 8009a46:	6978      	ldr	r0, [r7, #20]
 8009a48:	f000 f81b 	bl	8009a82 <USBD_GetNextDesc>
 8009a4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	785b      	ldrb	r3, [r3, #1]
 8009a52:	2b05      	cmp	r3, #5
 8009a54:	d108      	bne.n	8009a68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	789b      	ldrb	r3, [r3, #2]
 8009a5e:	78fa      	ldrb	r2, [r7, #3]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d008      	beq.n	8009a76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	885b      	ldrh	r3, [r3, #2]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	897b      	ldrh	r3, [r7, #10]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d8e5      	bhi.n	8009a40 <USBD_GetEpDesc+0x2e>
 8009a74:	e000      	b.n	8009a78 <USBD_GetEpDesc+0x66>
          break;
 8009a76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a78:	693b      	ldr	r3, [r7, #16]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	4413      	add	r3, r2
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b087      	sub	sp, #28
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ad8:	8a3b      	ldrh	r3, [r7, #16]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	b21a      	sxth	r2, r3
 8009ade:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	b21b      	sxth	r3, r3
 8009ae6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	371c      	adds	r7, #28
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b0e:	2b40      	cmp	r3, #64	@ 0x40
 8009b10:	d005      	beq.n	8009b1e <USBD_StdDevReq+0x26>
 8009b12:	2b40      	cmp	r3, #64	@ 0x40
 8009b14:	d857      	bhi.n	8009bc6 <USBD_StdDevReq+0xce>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <USBD_StdDevReq+0x42>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d153      	bne.n	8009bc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	32ae      	adds	r2, #174	@ 0xae
 8009b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
      break;
 8009b38:	e04a      	b.n	8009bd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	d83b      	bhi.n	8009bba <USBD_StdDevReq+0xc2>
 8009b42:	a201      	add	r2, pc, #4	@ (adr r2, 8009b48 <USBD_StdDevReq+0x50>)
 8009b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009bb1 	.word	0x08009bb1
 8009b50:	08009bbb 	.word	0x08009bbb
 8009b54:	08009ba7 	.word	0x08009ba7
 8009b58:	08009bbb 	.word	0x08009bbb
 8009b5c:	08009b7b 	.word	0x08009b7b
 8009b60:	08009b71 	.word	0x08009b71
 8009b64:	08009bbb 	.word	0x08009bbb
 8009b68:	08009b93 	.word	0x08009b93
 8009b6c:	08009b85 	.word	0x08009b85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa3c 	bl	8009ff0 <USBD_GetDescriptor>
          break;
 8009b78:	e024      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fbcb 	bl	800a318 <USBD_SetAddress>
          break;
 8009b82:	e01f      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fc0a 	bl	800a3a0 <USBD_SetConfig>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009b90:	e018      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fcad 	bl	800a4f4 <USBD_GetConfig>
          break;
 8009b9a:	e013      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fcde 	bl	800a560 <USBD_GetStatus>
          break;
 8009ba4:	e00e      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fd0d 	bl	800a5c8 <USBD_SetFeature>
          break;
 8009bae:	e009      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fd31 	bl	800a61a <USBD_ClrFeature>
          break;
 8009bb8:	e004      	b.n	8009bc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fd88 	bl	800a6d2 <USBD_CtlError>
          break;
 8009bc2:	bf00      	nop
      }
      break;
 8009bc4:	e004      	b.n	8009bd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fd82 	bl	800a6d2 <USBD_CtlError>
      break;
 8009bce:	bf00      	nop
  }

  return ret;
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop

08009bdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bf2:	2b40      	cmp	r3, #64	@ 0x40
 8009bf4:	d005      	beq.n	8009c02 <USBD_StdItfReq+0x26>
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d852      	bhi.n	8009ca0 <USBD_StdItfReq+0xc4>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <USBD_StdItfReq+0x26>
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d14e      	bne.n	8009ca0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d840      	bhi.n	8009c92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	889b      	ldrh	r3, [r3, #4]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d836      	bhi.n	8009c88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	889b      	ldrh	r3, [r3, #4]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff fedb 	bl	80099de <USBD_CoreFindIF>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2bff      	cmp	r3, #255	@ 0xff
 8009c30:	d01d      	beq.n	8009c6e <USBD_StdItfReq+0x92>
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d11a      	bne.n	8009c6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c38:	7bba      	ldrb	r2, [r7, #14]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32ae      	adds	r2, #174	@ 0xae
 8009c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00f      	beq.n	8009c68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c48:	7bba      	ldrb	r2, [r7, #14]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c50:	7bba      	ldrb	r2, [r7, #14]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	32ae      	adds	r2, #174	@ 0xae
 8009c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	4798      	blx	r3
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c66:	e004      	b.n	8009c72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c6c:	e001      	b.n	8009c72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	88db      	ldrh	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d110      	bne.n	8009c9c <USBD_StdItfReq+0xc0>
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fdfd 	bl	800a880 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c86:	e009      	b.n	8009c9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fd21 	bl	800a6d2 <USBD_CtlError>
          break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fd1c 	bl	800a6d2 <USBD_CtlError>
          break;
 8009c9a:	e000      	b.n	8009c9e <USBD_StdItfReq+0xc2>
          break;
 8009c9c:	bf00      	nop
      }
      break;
 8009c9e:	e004      	b.n	8009caa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fd15 	bl	800a6d2 <USBD_CtlError>
      break;
 8009ca8:	bf00      	nop
  }

  return ret;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	889b      	ldrh	r3, [r3, #4]
 8009cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cd0:	2b40      	cmp	r3, #64	@ 0x40
 8009cd2:	d007      	beq.n	8009ce4 <USBD_StdEPReq+0x30>
 8009cd4:	2b40      	cmp	r3, #64	@ 0x40
 8009cd6:	f200 817f 	bhi.w	8009fd8 <USBD_StdEPReq+0x324>
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d02a      	beq.n	8009d34 <USBD_StdEPReq+0x80>
 8009cde:	2b20      	cmp	r3, #32
 8009ce0:	f040 817a 	bne.w	8009fd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe85 	bl	80099f8 <USBD_CoreFindEP>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	2bff      	cmp	r3, #255	@ 0xff
 8009cf6:	f000 8174 	beq.w	8009fe2 <USBD_StdEPReq+0x32e>
 8009cfa:	7b7b      	ldrb	r3, [r7, #13]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 8170 	bne.w	8009fe2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009d02:	7b7a      	ldrb	r2, [r7, #13]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d0a:	7b7a      	ldrb	r2, [r7, #13]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	32ae      	adds	r2, #174	@ 0xae
 8009d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 8163 	beq.w	8009fe2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d1c:	7b7a      	ldrb	r2, [r7, #13]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32ae      	adds	r2, #174	@ 0xae
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d32:	e156      	b.n	8009fe2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d008      	beq.n	8009d4e <USBD_StdEPReq+0x9a>
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	f300 8145 	bgt.w	8009fcc <USBD_StdEPReq+0x318>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 809b 	beq.w	8009e7e <USBD_StdEPReq+0x1ca>
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d03c      	beq.n	8009dc6 <USBD_StdEPReq+0x112>
 8009d4c:	e13e      	b.n	8009fcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d002      	beq.n	8009d60 <USBD_StdEPReq+0xac>
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d016      	beq.n	8009d8c <USBD_StdEPReq+0xd8>
 8009d5e:	e02c      	b.n	8009dba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00d      	beq.n	8009d82 <USBD_StdEPReq+0xce>
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b80      	cmp	r3, #128	@ 0x80
 8009d6a:	d00a      	beq.n	8009d82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 f9d7 	bl	800b124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d76:	2180      	movs	r1, #128	@ 0x80
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 f9d3 	bl	800b124 <USBD_LL_StallEP>
 8009d7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d80:	e020      	b.n	8009dc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d82:	6839      	ldr	r1, [r7, #0]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fca4 	bl	800a6d2 <USBD_CtlError>
              break;
 8009d8a:	e01b      	b.n	8009dc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10e      	bne.n	8009db2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <USBD_StdEPReq+0xfe>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b80      	cmp	r3, #128	@ 0x80
 8009d9e:	d008      	beq.n	8009db2 <USBD_StdEPReq+0xfe>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	88db      	ldrh	r3, [r3, #6]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d104      	bne.n	8009db2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 f9b9 	bl	800b124 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fd64 	bl	800a880 <USBD_CtlSendStatus>

              break;
 8009db8:	e004      	b.n	8009dc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fc88 	bl	800a6d2 <USBD_CtlError>
              break;
 8009dc2:	bf00      	nop
          }
          break;
 8009dc4:	e107      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d002      	beq.n	8009dd8 <USBD_StdEPReq+0x124>
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d016      	beq.n	8009e04 <USBD_StdEPReq+0x150>
 8009dd6:	e04b      	b.n	8009e70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <USBD_StdEPReq+0x146>
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b80      	cmp	r3, #128	@ 0x80
 8009de2:	d00a      	beq.n	8009dfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	4619      	mov	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f99b 	bl	800b124 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dee:	2180      	movs	r1, #128	@ 0x80
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 f997 	bl	800b124 <USBD_LL_StallEP>
 8009df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df8:	e040      	b.n	8009e7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fc68 	bl	800a6d2 <USBD_CtlError>
              break;
 8009e02:	e03b      	b.n	8009e7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	885b      	ldrh	r3, [r3, #2]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d136      	bne.n	8009e7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 f9a1 	bl	800b162 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fd2d 	bl	800a880 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fde4 	bl	80099f8 <USBD_CoreFindEP>
 8009e30:	4603      	mov	r3, r0
 8009e32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e34:	7b7b      	ldrb	r3, [r7, #13]
 8009e36:	2bff      	cmp	r3, #255	@ 0xff
 8009e38:	d01f      	beq.n	8009e7a <USBD_StdEPReq+0x1c6>
 8009e3a:	7b7b      	ldrb	r3, [r7, #13]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d11c      	bne.n	8009e7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e40:	7b7a      	ldrb	r2, [r7, #13]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e48:	7b7a      	ldrb	r2, [r7, #13]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32ae      	adds	r2, #174	@ 0xae
 8009e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d010      	beq.n	8009e7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e58:	7b7a      	ldrb	r2, [r7, #13]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	32ae      	adds	r2, #174	@ 0xae
 8009e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e6e:	e004      	b.n	8009e7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fc2d 	bl	800a6d2 <USBD_CtlError>
              break;
 8009e78:	e000      	b.n	8009e7c <USBD_StdEPReq+0x1c8>
              break;
 8009e7a:	bf00      	nop
          }
          break;
 8009e7c:	e0ab      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d002      	beq.n	8009e90 <USBD_StdEPReq+0x1dc>
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d032      	beq.n	8009ef4 <USBD_StdEPReq+0x240>
 8009e8e:	e097      	b.n	8009fc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <USBD_StdEPReq+0x1f2>
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b80      	cmp	r3, #128	@ 0x80
 8009e9a:	d004      	beq.n	8009ea6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fc17 	bl	800a6d2 <USBD_CtlError>
                break;
 8009ea4:	e091      	b.n	8009fca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da0b      	bge.n	8009ec6 <USBD_StdEPReq+0x212>
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	3310      	adds	r3, #16
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	e00b      	b.n	8009ede <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	3304      	adds	r3, #4
 8009ede:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fc6d 	bl	800a7cc <USBD_CtlSendData>
              break;
 8009ef2:	e06a      	b.n	8009fca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da11      	bge.n	8009f20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	f003 020f 	and.w	r2, r3, #15
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	3324      	adds	r3, #36	@ 0x24
 8009f10:	881b      	ldrh	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d117      	bne.n	8009f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fbda 	bl	800a6d2 <USBD_CtlError>
                  break;
 8009f1e:	e054      	b.n	8009fca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f20:	7bbb      	ldrb	r3, [r7, #14]
 8009f22:	f003 020f 	and.w	r2, r3, #15
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	440b      	add	r3, r1
 8009f32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fbc7 	bl	800a6d2 <USBD_CtlError>
                  break;
 8009f44:	e041      	b.n	8009fca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da0b      	bge.n	8009f66 <USBD_StdEPReq+0x2b2>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	3304      	adds	r3, #4
 8009f64:	e00b      	b.n	8009f7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <USBD_StdEPReq+0x2d8>
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b80      	cmp	r3, #128	@ 0x80
 8009f8a:	d103      	bne.n	8009f94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e00e      	b.n	8009fb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f901 	bl	800b1a0 <USBD_LL_IsStallEP>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	e002      	b.n	8009fb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fc07 	bl	800a7cc <USBD_CtlSendData>
              break;
 8009fbe:	e004      	b.n	8009fca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fb85 	bl	800a6d2 <USBD_CtlError>
              break;
 8009fc8:	bf00      	nop
          }
          break;
 8009fca:	e004      	b.n	8009fd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fb7f 	bl	800a6d2 <USBD_CtlError>
          break;
 8009fd4:	bf00      	nop
      }
      break;
 8009fd6:	e005      	b.n	8009fe4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fb79 	bl	800a6d2 <USBD_CtlError>
      break;
 8009fe0:	e000      	b.n	8009fe4 <USBD_StdEPReq+0x330>
      break;
 8009fe2:	bf00      	nop
  }

  return ret;
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	885b      	ldrh	r3, [r3, #2]
 800a00a:	0a1b      	lsrs	r3, r3, #8
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	2b0e      	cmp	r3, #14
 800a012:	f200 8152 	bhi.w	800a2ba <USBD_GetDescriptor+0x2ca>
 800a016:	a201      	add	r2, pc, #4	@ (adr r2, 800a01c <USBD_GetDescriptor+0x2c>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a08d 	.word	0x0800a08d
 800a020:	0800a0a5 	.word	0x0800a0a5
 800a024:	0800a0e5 	.word	0x0800a0e5
 800a028:	0800a2bb 	.word	0x0800a2bb
 800a02c:	0800a2bb 	.word	0x0800a2bb
 800a030:	0800a25b 	.word	0x0800a25b
 800a034:	0800a287 	.word	0x0800a287
 800a038:	0800a2bb 	.word	0x0800a2bb
 800a03c:	0800a2bb 	.word	0x0800a2bb
 800a040:	0800a2bb 	.word	0x0800a2bb
 800a044:	0800a2bb 	.word	0x0800a2bb
 800a048:	0800a2bb 	.word	0x0800a2bb
 800a04c:	0800a2bb 	.word	0x0800a2bb
 800a050:	0800a2bb 	.word	0x0800a2bb
 800a054:	0800a059 	.word	0x0800a059
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a07a:	e126      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb27 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	3301      	adds	r3, #1
 800a088:	72fb      	strb	r3, [r7, #11]
      break;
 800a08a:	e11e      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
      break;
 800a0a2:	e112      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7c1b      	ldrb	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b4:	f107 0208 	add.w	r2, r7, #8
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4798      	blx	r3
 800a0bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0c6:	e100      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	f107 0208 	add.w	r2, r7, #8
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	4798      	blx	r3
 800a0d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	2202      	movs	r2, #2
 800a0e0:	701a      	strb	r2, [r3, #0]
      break;
 800a0e2:	e0f2      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	f200 80ac 	bhi.w	800a248 <USBD_GetDescriptor+0x258>
 800a0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <USBD_GetDescriptor+0x108>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a145 	.word	0x0800a145
 800a100:	0800a179 	.word	0x0800a179
 800a104:	0800a1ad 	.word	0x0800a1ad
 800a108:	0800a1e1 	.word	0x0800a1e1
 800a10c:	0800a215 	.word	0x0800a215
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	f107 0108 	add.w	r1, r7, #8
 800a12c:	4610      	mov	r0, r2
 800a12e:	4798      	blx	r3
 800a130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a132:	e091      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 facb 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
          break;
 800a142:	e089      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	7c12      	ldrb	r2, [r2, #16]
 800a15c:	f107 0108 	add.w	r1, r7, #8
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
 800a164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a166:	e077      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fab1 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	3301      	adds	r3, #1
 800a174:	72fb      	strb	r3, [r7, #11]
          break;
 800a176:	e06f      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19a:	e05d      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa97 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a1a4:	7afb      	ldrb	r3, [r7, #11]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1aa:	e055      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	7c12      	ldrb	r2, [r2, #16]
 800a1c4:	f107 0108 	add.w	r1, r7, #8
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ce:	e043      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa7d 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1de:	e03b      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	7c12      	ldrb	r2, [r2, #16]
 800a1f8:	f107 0108 	add.w	r1, r7, #8
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3
 800a200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a202:	e029      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa63 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	3301      	adds	r3, #1
 800a210:	72fb      	strb	r3, [r7, #11]
          break;
 800a212:	e021      	b.n	800a258 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	7c12      	ldrb	r2, [r2, #16]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
 800a234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a236:	e00f      	b.n	800a258 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa49 	bl	800a6d2 <USBD_CtlError>
            err++;
 800a240:	7afb      	ldrb	r3, [r7, #11]
 800a242:	3301      	adds	r3, #1
 800a244:	72fb      	strb	r3, [r7, #11]
          break;
 800a246:	e007      	b.n	800a258 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa41 	bl	800a6d2 <USBD_CtlError>
          err++;
 800a250:	7afb      	ldrb	r3, [r7, #11]
 800a252:	3301      	adds	r3, #1
 800a254:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a256:	bf00      	nop
      }
      break;
 800a258:	e037      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c1b      	ldrb	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a26a:	f107 0208 	add.w	r2, r7, #8
 800a26e:	4610      	mov	r0, r2
 800a270:	4798      	blx	r3
 800a272:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a274:	e029      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa2a 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	3301      	adds	r3, #1
 800a282:	72fb      	strb	r3, [r7, #11]
      break;
 800a284:	e021      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7c1b      	ldrb	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10d      	bne.n	800a2aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a296:	f107 0208 	add.w	r2, r7, #8
 800a29a:	4610      	mov	r0, r2
 800a29c:	4798      	blx	r3
 800a29e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	2207      	movs	r2, #7
 800a2a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2a8:	e00f      	b.n	800a2ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa10 	bl	800a6d2 <USBD_CtlError>
        err++;
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2b8:	e007      	b.n	800a2ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fa08 	bl	800a6d2 <USBD_CtlError>
      err++;
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c8:	bf00      	nop
  }

  if (err != 0U)
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d11e      	bne.n	800a30e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	88db      	ldrh	r3, [r3, #6]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d016      	beq.n	800a306 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a2d8:	893b      	ldrh	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88da      	ldrh	r2, [r3, #6]
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	bf28      	it	cs
 800a2e8:	4613      	movcs	r3, r2
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	68f9      	ldr	r1, [r7, #12]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fa69 	bl	800a7cc <USBD_CtlSendData>
 800a2fa:	e009      	b.n	800a310 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f9e7 	bl	800a6d2 <USBD_CtlError>
 800a304:	e004      	b.n	800a310 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 faba 	bl	800a880 <USBD_CtlSendStatus>
 800a30c:	e000      	b.n	800a310 <USBD_GetDescriptor+0x320>
    return;
 800a30e:	bf00      	nop
  }
}
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop

0800a318 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	889b      	ldrh	r3, [r3, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d131      	bne.n	800a38e <USBD_SetAddress+0x76>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	88db      	ldrh	r3, [r3, #6]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d12d      	bne.n	800a38e <USBD_SetAddress+0x76>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	885b      	ldrh	r3, [r3, #2]
 800a336:	2b7f      	cmp	r3, #127	@ 0x7f
 800a338:	d829      	bhi.n	800a38e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a344:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b03      	cmp	r3, #3
 800a350:	d104      	bne.n	800a35c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f9bc 	bl	800a6d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35a:	e01d      	b.n	800a398 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7bfa      	ldrb	r2, [r7, #15]
 800a360:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 ff45 	bl	800b1f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa86 	bl	800a880 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a382:	e009      	b.n	800a398 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38c:	e004      	b.n	800a398 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f99e 	bl	800a6d2 <USBD_CtlError>
  }
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	885b      	ldrh	r3, [r3, #2]
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	4b4e      	ldr	r3, [pc, #312]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a3b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3b8:	4b4d      	ldr	r3, [pc, #308]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d905      	bls.n	800a3cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f985 	bl	800a6d2 <USBD_CtlError>
    return USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e08c      	b.n	800a4e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d002      	beq.n	800a3de <USBD_SetConfig+0x3e>
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d029      	beq.n	800a430 <USBD_SetConfig+0x90>
 800a3dc:	e075      	b.n	800a4ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a3de:	4b44      	ldr	r3, [pc, #272]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d020      	beq.n	800a428 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a3e6:	4b42      	ldr	r3, [pc, #264]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3f0:	4b3f      	ldr	r3, [pc, #252]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7fe ffb9 	bl	800936e <USBD_SetClassConfig>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d008      	beq.n	800a418 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a406:	6839      	ldr	r1, [r7, #0]
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 f962 	bl	800a6d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2202      	movs	r2, #2
 800a412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a416:	e065      	b.n	800a4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fa31 	bl	800a880 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2203      	movs	r2, #3
 800a422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a426:	e05d      	b.n	800a4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa29 	bl	800a880 <USBD_CtlSendStatus>
      break;
 800a42e:	e059      	b.n	800a4e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a430:	4b2f      	ldr	r3, [pc, #188]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d112      	bne.n	800a45e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a440:	4b2b      	ldr	r3, [pc, #172]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a44a:	4b29      	ldr	r3, [pc, #164]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7fe ffa8 	bl	80093a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa12 	bl	800a880 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a45c:	e042      	b.n	800a4e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a45e:	4b24      	ldr	r3, [pc, #144]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d02a      	beq.n	800a4c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7fe ff96 	bl	80093a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a47a:	4b1d      	ldr	r3, [pc, #116]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a484:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe ff6f 	bl	800936e <USBD_SetClassConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00f      	beq.n	800a4ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f918 	bl	800a6d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7fe ff7b 	bl	80093a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4b8:	e014      	b.n	800a4e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f9e0 	bl	800a880 <USBD_CtlSendStatus>
      break;
 800a4c0:	e010      	b.n	800a4e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f9dc 	bl	800a880 <USBD_CtlSendStatus>
      break;
 800a4c8:	e00c      	b.n	800a4e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f900 	bl	800a6d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4d2:	4b07      	ldr	r3, [pc, #28]	@ (800a4f0 <USBD_SetConfig+0x150>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7fe ff64 	bl	80093a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4e2:	bf00      	nop
  }

  return ret;
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	2400039c 	.word	0x2400039c

0800a4f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	88db      	ldrh	r3, [r3, #6]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d004      	beq.n	800a510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8e2 	bl	800a6d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a50e:	e023      	b.n	800a558 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	dc02      	bgt.n	800a522 <USBD_GetConfig+0x2e>
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dc03      	bgt.n	800a528 <USBD_GetConfig+0x34>
 800a520:	e015      	b.n	800a54e <USBD_GetConfig+0x5a>
 800a522:	2b03      	cmp	r3, #3
 800a524:	d00b      	beq.n	800a53e <USBD_GetConfig+0x4a>
 800a526:	e012      	b.n	800a54e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3308      	adds	r3, #8
 800a532:	2201      	movs	r2, #1
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f948 	bl	800a7cc <USBD_CtlSendData>
        break;
 800a53c:	e00c      	b.n	800a558 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3304      	adds	r3, #4
 800a542:	2201      	movs	r2, #1
 800a544:	4619      	mov	r1, r3
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f940 	bl	800a7cc <USBD_CtlSendData>
        break;
 800a54c:	e004      	b.n	800a558 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f8be 	bl	800a6d2 <USBD_CtlError>
        break;
 800a556:	bf00      	nop
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a570:	b2db      	uxtb	r3, r3
 800a572:	3b01      	subs	r3, #1
 800a574:	2b02      	cmp	r3, #2
 800a576:	d81e      	bhi.n	800a5b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	88db      	ldrh	r3, [r3, #6]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d004      	beq.n	800a58a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f8a5 	bl	800a6d2 <USBD_CtlError>
        break;
 800a588:	e01a      	b.n	800a5c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f043 0202 	orr.w	r2, r3, #2
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f90c 	bl	800a7cc <USBD_CtlSendData>
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f88a 	bl	800a6d2 <USBD_CtlError>
      break;
 800a5be:	bf00      	nop
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	885b      	ldrh	r3, [r3, #2]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d107      	bne.n	800a5ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f94c 	bl	800a880 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a5e8:	e013      	b.n	800a612 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	885b      	ldrh	r3, [r3, #2]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d10b      	bne.n	800a60a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	889b      	ldrh	r3, [r3, #4]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f93c 	bl	800a880 <USBD_CtlSendStatus>
}
 800a608:	e003      	b.n	800a612 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f860 	bl	800a6d2 <USBD_CtlError>
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	3b01      	subs	r3, #1
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d80b      	bhi.n	800a64a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d10c      	bne.n	800a654 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f91c 	bl	800a880 <USBD_CtlSendStatus>
      }
      break;
 800a648:	e004      	b.n	800a654 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f840 	bl	800a6d2 <USBD_CtlError>
      break;
 800a652:	e000      	b.n	800a656 <USBD_ClrFeature+0x3c>
      break;
 800a654:	bf00      	nop
  }
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	781a      	ldrb	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	781a      	ldrb	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3301      	adds	r3, #1
 800a686:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f7ff fa16 	bl	8009aba <SWAPBYTE>
 800a68e:	4603      	mov	r3, r0
 800a690:	461a      	mov	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3301      	adds	r3, #1
 800a69a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff fa09 	bl	8009aba <SWAPBYTE>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff f9fc 	bl	8009aba <SWAPBYTE>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	80da      	strh	r2, [r3, #6]
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6dc:	2180      	movs	r1, #128	@ 0x80
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fd20 	bl	800b124 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fd1c 	bl	800b124 <USBD_LL_StallEP>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d042      	beq.n	800a790 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f000 f842 	bl	800a798 <USBD_GetLen>
 800a714:	4603      	mov	r3, r0
 800a716:	3301      	adds	r3, #1
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a71e:	d808      	bhi.n	800a732 <USBD_GetString+0x3e>
 800a720:	6938      	ldr	r0, [r7, #16]
 800a722:	f000 f839 	bl	800a798 <USBD_GetLen>
 800a726:	4603      	mov	r3, r0
 800a728:	3301      	adds	r3, #1
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	b29a      	uxth	r2, r3
 800a730:	e001      	b.n	800a736 <USBD_GetString+0x42>
 800a732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	4413      	add	r3, r2
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7812      	ldrb	r2, [r2, #0]
 800a744:	701a      	strb	r2, [r3, #0]
  idx++;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	3301      	adds	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	4413      	add	r3, r2
 800a752:	2203      	movs	r2, #3
 800a754:	701a      	strb	r2, [r3, #0]
  idx++;
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	3301      	adds	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a75c:	e013      	b.n	800a786 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	4413      	add	r3, r2
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	7812      	ldrb	r2, [r2, #0]
 800a768:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3301      	adds	r3, #1
 800a76e:	613b      	str	r3, [r7, #16]
    idx++;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	3301      	adds	r3, #1
 800a774:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4413      	add	r3, r2
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
 800a782:	3301      	adds	r3, #1
 800a784:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e7      	bne.n	800a75e <USBD_GetString+0x6a>
 800a78e:	e000      	b.n	800a792 <USBD_GetString+0x9e>
    return;
 800a790:	bf00      	nop
  }
}
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7a8:	e005      	b.n	800a7b6 <USBD_GetLen+0x1e>
  {
    len++;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1f5      	bne.n	800a7aa <USBD_GetLen+0x12>
  }

  return len;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f000 fd1f 	bl	800b236 <USBD_LL_Transmit>

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	2100      	movs	r1, #0
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fd0e 	bl	800b236 <USBD_LL_Transmit>

  return USBD_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2203      	movs	r2, #3
 800a834:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	2100      	movs	r1, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 fd12 	bl	800b278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	2100      	movs	r1, #0
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fd01 	bl	800b278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2204      	movs	r2, #4
 800a88c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	2100      	movs	r1, #0
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fccd 	bl	800b236 <USBD_LL_Transmit>

  return USBD_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fcdb 	bl	800b278 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	4913      	ldr	r1, [pc, #76]	@ (800a920 <MX_USB_DEVICE_Init+0x54>)
 800a8d4:	4813      	ldr	r0, [pc, #76]	@ (800a924 <MX_USB_DEVICE_Init+0x58>)
 800a8d6:	f7fe fcb1 	bl	800923c <USBD_Init>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a8e0:	f7f6 fb36 	bl	8000f50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a8e4:	4910      	ldr	r1, [pc, #64]	@ (800a928 <MX_USB_DEVICE_Init+0x5c>)
 800a8e6:	480f      	ldr	r0, [pc, #60]	@ (800a924 <MX_USB_DEVICE_Init+0x58>)
 800a8e8:	f7fe fce6 	bl	80092b8 <USBD_RegisterClass>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8f2:	f7f6 fb2d 	bl	8000f50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a8f6:	490d      	ldr	r1, [pc, #52]	@ (800a92c <MX_USB_DEVICE_Init+0x60>)
 800a8f8:	480a      	ldr	r0, [pc, #40]	@ (800a924 <MX_USB_DEVICE_Init+0x58>)
 800a8fa:	f7fe fc0f 	bl	800911c <USBD_CDC_RegisterInterface>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d001      	beq.n	800a908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a904:	f7f6 fb24 	bl	8000f50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a908:	4806      	ldr	r0, [pc, #24]	@ (800a924 <MX_USB_DEVICE_Init+0x58>)
 800a90a:	f7fe fd19 	bl	8009340 <USBD_Start>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a914:	f7f6 fb1c 	bl	8000f50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800a918:	f7f8 ff12 	bl	8003740 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a91c:	bf00      	nop
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	240000b0 	.word	0x240000b0
 800a924:	240003a0 	.word	0x240003a0
 800a928:	2400001c 	.word	0x2400001c
 800a92c:	2400009c 	.word	0x2400009c

0800a930 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a934:	2200      	movs	r2, #0
 800a936:	4905      	ldr	r1, [pc, #20]	@ (800a94c <CDC_Init_HS+0x1c>)
 800a938:	4805      	ldr	r0, [pc, #20]	@ (800a950 <CDC_Init_HS+0x20>)
 800a93a:	f7fe fc09 	bl	8009150 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a93e:	4905      	ldr	r1, [pc, #20]	@ (800a954 <CDC_Init_HS+0x24>)
 800a940:	4803      	ldr	r0, [pc, #12]	@ (800a950 <CDC_Init_HS+0x20>)
 800a942:	f7fe fc27 	bl	8009194 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a946:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a948:	4618      	mov	r0, r3
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	24000e7c 	.word	0x24000e7c
 800a950:	240003a0 	.word	0x240003a0
 800a954:	2400067c 	.word	0x2400067c

0800a958 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a95c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a95e:	4618      	mov	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	71fb      	strb	r3, [r7, #7]
 800a974:	4613      	mov	r3, r2
 800a976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	2b23      	cmp	r3, #35	@ 0x23
 800a97c:	d84a      	bhi.n	800aa14 <CDC_Control_HS+0xac>
 800a97e:	a201      	add	r2, pc, #4	@ (adr r2, 800a984 <CDC_Control_HS+0x1c>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800aa15 	.word	0x0800aa15
 800a988:	0800aa15 	.word	0x0800aa15
 800a98c:	0800aa15 	.word	0x0800aa15
 800a990:	0800aa15 	.word	0x0800aa15
 800a994:	0800aa15 	.word	0x0800aa15
 800a998:	0800aa15 	.word	0x0800aa15
 800a99c:	0800aa15 	.word	0x0800aa15
 800a9a0:	0800aa15 	.word	0x0800aa15
 800a9a4:	0800aa15 	.word	0x0800aa15
 800a9a8:	0800aa15 	.word	0x0800aa15
 800a9ac:	0800aa15 	.word	0x0800aa15
 800a9b0:	0800aa15 	.word	0x0800aa15
 800a9b4:	0800aa15 	.word	0x0800aa15
 800a9b8:	0800aa15 	.word	0x0800aa15
 800a9bc:	0800aa15 	.word	0x0800aa15
 800a9c0:	0800aa15 	.word	0x0800aa15
 800a9c4:	0800aa15 	.word	0x0800aa15
 800a9c8:	0800aa15 	.word	0x0800aa15
 800a9cc:	0800aa15 	.word	0x0800aa15
 800a9d0:	0800aa15 	.word	0x0800aa15
 800a9d4:	0800aa15 	.word	0x0800aa15
 800a9d8:	0800aa15 	.word	0x0800aa15
 800a9dc:	0800aa15 	.word	0x0800aa15
 800a9e0:	0800aa15 	.word	0x0800aa15
 800a9e4:	0800aa15 	.word	0x0800aa15
 800a9e8:	0800aa15 	.word	0x0800aa15
 800a9ec:	0800aa15 	.word	0x0800aa15
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa15 	.word	0x0800aa15
 800a9f8:	0800aa15 	.word	0x0800aa15
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa15 	.word	0x0800aa15
 800aa04:	0800aa15 	.word	0x0800aa15
 800aa08:	0800aa15 	.word	0x0800aa15
 800aa0c:	0800aa15 	.word	0x0800aa15
 800aa10:	0800aa15 	.word	0x0800aa15
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aa14:	bf00      	nop
  }

  return (USBD_OK);
 800aa16:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	4805      	ldr	r0, [pc, #20]	@ (800aa48 <CDC_Receive_HS+0x24>)
 800aa32:	f7fe fbaf 	bl	8009194 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800aa36:	4804      	ldr	r0, [pc, #16]	@ (800aa48 <CDC_Receive_HS+0x24>)
 800aa38:	f7fe fbca 	bl	80091d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aa3c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	240003a0 	.word	0x240003a0

0800aa4c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800aa5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
	...

0800aa70 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	6039      	str	r1, [r7, #0]
 800aa7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2212      	movs	r2, #18
 800aa80:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800aa82:	4b03      	ldr	r3, [pc, #12]	@ (800aa90 <USBD_HS_DeviceDescriptor+0x20>)
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	240000d0 	.word	0x240000d0

0800aa94 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	6039      	str	r1, [r7, #0]
 800aa9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaa6:	4b03      	ldr	r3, [pc, #12]	@ (800aab4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	240000e4 	.word	0x240000e4

0800aab8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	4907      	ldr	r1, [pc, #28]	@ (800aaec <USBD_HS_ProductStrDescriptor+0x34>)
 800aace:	4808      	ldr	r0, [pc, #32]	@ (800aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aad0:	f7ff fe10 	bl	800a6f4 <USBD_GetString>
 800aad4:	e004      	b.n	800aae0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800aad6:	683a      	ldr	r2, [r7, #0]
 800aad8:	4904      	ldr	r1, [pc, #16]	@ (800aaec <USBD_HS_ProductStrDescriptor+0x34>)
 800aada:	4805      	ldr	r0, [pc, #20]	@ (800aaf0 <USBD_HS_ProductStrDescriptor+0x38>)
 800aadc:	f7ff fe0a 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aae0:	4b02      	ldr	r3, [pc, #8]	@ (800aaec <USBD_HS_ProductStrDescriptor+0x34>)
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	2400167c 	.word	0x2400167c
 800aaf0:	0800c354 	.word	0x0800c354

0800aaf4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	4603      	mov	r3, r0
 800aafc:	6039      	str	r1, [r7, #0]
 800aafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	4904      	ldr	r1, [pc, #16]	@ (800ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ab04:	4804      	ldr	r0, [pc, #16]	@ (800ab18 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ab06:	f7ff fdf5 	bl	800a6f4 <USBD_GetString>
  return USBD_StrDesc;
 800ab0a:	4b02      	ldr	r3, [pc, #8]	@ (800ab14 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	2400167c 	.word	0x2400167c
 800ab18:	0800c36c 	.word	0x0800c36c

0800ab1c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	6039      	str	r1, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	221a      	movs	r2, #26
 800ab2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab2e:	f000 f843 	bl	800abb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab32:	4b02      	ldr	r3, [pc, #8]	@ (800ab3c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	240000e8 	.word	0x240000e8

0800ab40 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	6039      	str	r1, [r7, #0]
 800ab4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	4907      	ldr	r1, [pc, #28]	@ (800ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab56:	4808      	ldr	r0, [pc, #32]	@ (800ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab58:	f7ff fdcc 	bl	800a6f4 <USBD_GetString>
 800ab5c:	e004      	b.n	800ab68 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	4904      	ldr	r1, [pc, #16]	@ (800ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ab62:	4805      	ldr	r0, [pc, #20]	@ (800ab78 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ab64:	f7ff fdc6 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab68:	4b02      	ldr	r3, [pc, #8]	@ (800ab74 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2400167c 	.word	0x2400167c
 800ab78:	0800c380 	.word	0x0800c380

0800ab7c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4907      	ldr	r1, [pc, #28]	@ (800abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab92:	4808      	ldr	r0, [pc, #32]	@ (800abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ab94:	f7ff fdae 	bl	800a6f4 <USBD_GetString>
 800ab98:	e004      	b.n	800aba4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ab9a:	683a      	ldr	r2, [r7, #0]
 800ab9c:	4904      	ldr	r1, [pc, #16]	@ (800abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ab9e:	4805      	ldr	r0, [pc, #20]	@ (800abb4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800aba0:	f7ff fda8 	bl	800a6f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aba4:	4b02      	ldr	r3, [pc, #8]	@ (800abb0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	2400167c 	.word	0x2400167c
 800abb4:	0800c38c 	.word	0x0800c38c

0800abb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abbe:	4b0f      	ldr	r3, [pc, #60]	@ (800abfc <Get_SerialNum+0x44>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac00 <Get_SerialNum+0x48>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abca:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <Get_SerialNum+0x4c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4413      	add	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abde:	2208      	movs	r2, #8
 800abe0:	4909      	ldr	r1, [pc, #36]	@ (800ac08 <Get_SerialNum+0x50>)
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f814 	bl	800ac10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abe8:	2204      	movs	r2, #4
 800abea:	4908      	ldr	r1, [pc, #32]	@ (800ac0c <Get_SerialNum+0x54>)
 800abec:	68b8      	ldr	r0, [r7, #8]
 800abee:	f000 f80f 	bl	800ac10 <IntToUnicode>
  }
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	08fff800 	.word	0x08fff800
 800ac00:	08fff804 	.word	0x08fff804
 800ac04:	08fff808 	.word	0x08fff808
 800ac08:	240000ea 	.word	0x240000ea
 800ac0c:	240000fa 	.word	0x240000fa

0800ac10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac22:	2300      	movs	r3, #0
 800ac24:	75fb      	strb	r3, [r7, #23]
 800ac26:	e027      	b.n	800ac78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	2b09      	cmp	r3, #9
 800ac2e:	d80b      	bhi.n	800ac48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	0f1b      	lsrs	r3, r3, #28
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	440b      	add	r3, r1
 800ac40:	3230      	adds	r2, #48	@ 0x30
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	701a      	strb	r2, [r3, #0]
 800ac46:	e00a      	b.n	800ac5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	0f1b      	lsrs	r3, r3, #28
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4619      	mov	r1, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	440b      	add	r3, r1
 800ac58:	3237      	adds	r2, #55	@ 0x37
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	011b      	lsls	r3, r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac64:	7dfb      	ldrb	r3, [r7, #23]
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	3301      	adds	r3, #1
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac72:	7dfb      	ldrb	r3, [r7, #23]
 800ac74:	3301      	adds	r3, #1
 800ac76:	75fb      	strb	r3, [r7, #23]
 800ac78:	7dfa      	ldrb	r2, [r7, #23]
 800ac7a:	79fb      	ldrb	r3, [r7, #7]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d3d3      	bcc.n	800ac28 <IntToUnicode+0x18>
  }
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
	...

0800ac90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b0ba      	sub	sp, #232	@ 0xe8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	605a      	str	r2, [r3, #4]
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	60da      	str	r2, [r3, #12]
 800aca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aca8:	f107 0310 	add.w	r3, r7, #16
 800acac:	22c0      	movs	r2, #192	@ 0xc0
 800acae:	2100      	movs	r1, #0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fd6b 	bl	800b78c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a45      	ldr	r2, [pc, #276]	@ (800add0 <HAL_PCD_MspInit+0x140>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	f040 8082 	bne.w	800adc6 <HAL_PCD_MspInit+0x136>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800acc2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800acce:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800acd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acd6:	f107 0310 	add.w	r3, r7, #16
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f9 fce8 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d001      	beq.n	800acea <HAL_PCD_MspInit+0x5a>
    {
      Error_Handler();
 800ace6:	f7f6 f933 	bl	8000f50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800acea:	f7f8 fd29 	bl	8003740 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acee:	4b39      	ldr	r3, [pc, #228]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800acf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800acf4:	4a37      	ldr	r2, [pc, #220]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800acfe:	4b35      	ldr	r3, [pc, #212]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800ad00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ad0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad14:	2300      	movs	r3, #0
 800ad16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ad24:	4619      	mov	r1, r3
 800ad26:	482c      	ldr	r0, [pc, #176]	@ (800add8 <HAL_PCD_MspInit+0x148>)
 800ad28:	f7f6 fd9e 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800ad2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad34:	2302      	movs	r3, #2
 800ad36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4822      	ldr	r0, [pc, #136]	@ (800add8 <HAL_PCD_MspInit+0x148>)
 800ad4e:	f7f6 fd8b 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800ad52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad66:	2300      	movs	r3, #0
 800ad68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4819      	ldr	r0, [pc, #100]	@ (800add8 <HAL_PCD_MspInit+0x148>)
 800ad74:	f7f6 fd78 	bl	8001868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ad78:	4b16      	ldr	r3, [pc, #88]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800ad7a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800ad7e:	4a15      	ldr	r2, [pc, #84]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800ad80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad84:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800ad88:	4b12      	ldr	r3, [pc, #72]	@ (800add4 <HAL_PCD_MspInit+0x144>)
 800ad8a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800ad8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad92:	60bb      	str	r3, [r7, #8]
 800ad94:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	204a      	movs	r0, #74	@ 0x4a
 800ad9c:	f7f6 fcb7 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800ada0:	204a      	movs	r0, #74	@ 0x4a
 800ada2:	f7f6 fcce 	bl	8001742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800ada6:	2200      	movs	r2, #0
 800ada8:	2100      	movs	r1, #0
 800adaa:	204b      	movs	r0, #75	@ 0x4b
 800adac:	f7f6 fcaf 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800adb0:	204b      	movs	r0, #75	@ 0x4b
 800adb2:	f7f6 fcc6 	bl	8001742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	204d      	movs	r0, #77	@ 0x4d
 800adbc:	f7f6 fca7 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800adc0:	204d      	movs	r0, #77	@ 0x4d
 800adc2:	f7f6 fcbe 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800adc6:	bf00      	nop
 800adc8:	37e8      	adds	r7, #232	@ 0xe8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	40040000 	.word	0x40040000
 800add4:	58024400 	.word	0x58024400
 800add8:	58020000 	.word	0x58020000

0800addc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7fe faf1 	bl	80093da <USBD_LL_SetupStage>
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae12:	78fa      	ldrb	r2, [r7, #3]
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f7fe fb2b 	bl	8009484 <USBD_LL_DataOutStage>
}
 800ae2e:	bf00      	nop
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae48:	78fa      	ldrb	r2, [r7, #3]
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	3320      	adds	r3, #32
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	78fb      	ldrb	r3, [r7, #3]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	f7fe fbc4 	bl	80095ea <USBD_LL_DataInStage>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe fcfe 	bl	800987a <USBD_LL_SOF>
}
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	79db      	ldrb	r3, [r3, #7]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d102      	bne.n	800aea0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
 800ae9e:	e008      	b.n	800aeb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	79db      	ldrb	r3, [r3, #7]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d102      	bne.n	800aeae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
 800aeac:	e001      	b.n	800aeb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aeae:	f7f6 f84f 	bl	8000f50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aeb8:	7bfa      	ldrb	r2, [r7, #15]
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fe fc98 	bl	80097f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe fc40 	bl	800974e <USBD_LL_Reset>
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fc93 	bl	8009812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	6812      	ldr	r2, [r2, #0]
 800aefa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aefe:	f043 0301 	orr.w	r3, r3, #1
 800af02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	7adb      	ldrb	r3, [r3, #11]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d005      	beq.n	800af18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af0c:	4b04      	ldr	r3, [pc, #16]	@ (800af20 <HAL_PCD_SuspendCallback+0x48>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	4a03      	ldr	r2, [pc, #12]	@ (800af20 <HAL_PCD_SuspendCallback+0x48>)
 800af12:	f043 0306 	orr.w	r3, r3, #6
 800af16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	e000ed00 	.word	0xe000ed00

0800af24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fc89 	bl	800984a <USBD_LL_Resume>
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe fce1 	bl	800991e <USBD_LL_IsoOUTIncomplete>
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af76:	78fa      	ldrb	r2, [r7, #3]
 800af78:	4611      	mov	r1, r2
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fc9d 	bl	80098ba <USBD_LL_IsoINIncomplete>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fcf3 	bl	8009982 <USBD_LL_DevConnected>
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fcf0 	bl	8009998 <USBD_LL_DevDisconnected>
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d140      	bne.n	800b052 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800afd0:	4a22      	ldr	r2, [pc, #136]	@ (800b05c <USBD_LL_Init+0x9c>)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a20      	ldr	r2, [pc, #128]	@ (800b05c <USBD_LL_Init+0x9c>)
 800afdc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800afe0:	4b1e      	ldr	r3, [pc, #120]	@ (800b05c <USBD_LL_Init+0x9c>)
 800afe2:	4a1f      	ldr	r2, [pc, #124]	@ (800b060 <USBD_LL_Init+0xa0>)
 800afe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800afe6:	4b1d      	ldr	r3, [pc, #116]	@ (800b05c <USBD_LL_Init+0x9c>)
 800afe8:	2209      	movs	r2, #9
 800afea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800afec:	4b1b      	ldr	r3, [pc, #108]	@ (800b05c <USBD_LL_Init+0x9c>)
 800afee:	2202      	movs	r2, #2
 800aff0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800aff2:	4b1a      	ldr	r3, [pc, #104]	@ (800b05c <USBD_LL_Init+0x9c>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800aff8:	4b18      	ldr	r3, [pc, #96]	@ (800b05c <USBD_LL_Init+0x9c>)
 800affa:	2202      	movs	r2, #2
 800affc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800affe:	4b17      	ldr	r3, [pc, #92]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b000:	2200      	movs	r2, #0
 800b002:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b004:	4b15      	ldr	r3, [pc, #84]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b006:	2200      	movs	r2, #0
 800b008:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b00a:	4b14      	ldr	r3, [pc, #80]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b010:	4b12      	ldr	r3, [pc, #72]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b012:	2201      	movs	r2, #1
 800b014:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b016:	4b11      	ldr	r3, [pc, #68]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b018:	2200      	movs	r2, #0
 800b01a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b01c:	4b0f      	ldr	r3, [pc, #60]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b01e:	2200      	movs	r2, #0
 800b020:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b022:	480e      	ldr	r0, [pc, #56]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b024:	f7f7 f8b2 	bl	800218c <HAL_PCD_Init>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b02e:	f7f5 ff8f 	bl	8000f50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b036:	4809      	ldr	r0, [pc, #36]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b038:	f7f8 fb07 	bl	800364a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b03c:	2280      	movs	r2, #128	@ 0x80
 800b03e:	2100      	movs	r1, #0
 800b040:	4806      	ldr	r0, [pc, #24]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b042:	f7f8 fabb 	bl	80035bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b046:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b04a:	2101      	movs	r1, #1
 800b04c:	4803      	ldr	r0, [pc, #12]	@ (800b05c <USBD_LL_Init+0x9c>)
 800b04e:	f7f8 fab5 	bl	80035bc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	2400187c 	.word	0x2400187c
 800b060:	40040000 	.word	0x40040000

0800b064 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7f7 f992 	bl	80023a4 <HAL_PCD_Start>
 800b080:	4603      	mov	r3, r0
 800b082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	4618      	mov	r0, r3
 800b088:	f000 f942 	bl	800b310 <USBD_Get_USB_Status>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b090:	7bbb      	ldrb	r3, [r7, #14]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b084      	sub	sp, #16
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	4608      	mov	r0, r1
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	70fb      	strb	r3, [r7, #3]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70bb      	strb	r3, [r7, #2]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b0c2:	78bb      	ldrb	r3, [r7, #2]
 800b0c4:	883a      	ldrh	r2, [r7, #0]
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	f7f7 fe93 	bl	8002df2 <HAL_PCD_EP_Open>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f91c 	bl	800b310 <USBD_Get_USB_Status>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b100:	78fa      	ldrb	r2, [r7, #3]
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f7f7 fede 	bl	8002ec6 <HAL_PCD_EP_Close>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	4618      	mov	r0, r3
 800b112:	f000 f8fd 	bl	800b310 <USBD_Get_USB_Status>
 800b116:	4603      	mov	r3, r0
 800b118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f7f7 ff96 	bl	8003074 <HAL_PCD_EP_SetStall>
 800b148:	4603      	mov	r3, r0
 800b14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 f8de 	bl	800b310 <USBD_Get_USB_Status>
 800b154:	4603      	mov	r3, r0
 800b156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b158:	7bbb      	ldrb	r3, [r7, #14]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b17c:	78fa      	ldrb	r2, [r7, #3]
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f7f7 ffda 	bl	800313a <HAL_PCD_EP_ClrStall>
 800b186:	4603      	mov	r3, r0
 800b188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 f8bf 	bl	800b310 <USBD_Get_USB_Status>
 800b192:	4603      	mov	r3, r0
 800b194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b196:	7bbb      	ldrb	r3, [r7, #14]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da0b      	bge.n	800b1d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1c2:	68f9      	ldr	r1, [r7, #12]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3316      	adds	r3, #22
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	e00b      	b.n	800b1ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b1ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b212:	78fa      	ldrb	r2, [r7, #3]
 800b214:	4611      	mov	r1, r2
 800b216:	4618      	mov	r0, r3
 800b218:	f7f7 fdc7 	bl	8002daa <HAL_PCD_SetAddress>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b220:	7bfb      	ldrb	r3, [r7, #15]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 f874 	bl	800b310 <USBD_Get_USB_Status>
 800b228:	4603      	mov	r3, r0
 800b22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	460b      	mov	r3, r1
 800b244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b254:	7af9      	ldrb	r1, [r7, #11]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	f7f7 fed1 	bl	8003000 <HAL_PCD_EP_Transmit>
 800b25e:	4603      	mov	r3, r0
 800b260:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f853 	bl	800b310 <USBD_Get_USB_Status>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b26e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	460b      	mov	r3, r1
 800b286:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b296:	7af9      	ldrb	r1, [r7, #11]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	f7f7 fe5d 	bl	8002f5a <HAL_PCD_EP_Receive>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f832 	bl	800b310 <USBD_Get_USB_Status>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b082      	sub	sp, #8
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2cc:	78fa      	ldrb	r2, [r7, #3]
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f7 fe7d 	bl	8002fd0 <HAL_PCD_EP_GetRxCount>
 800b2d6:	4603      	mov	r3, r0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b2e8:	4b03      	ldr	r3, [pc, #12]	@ (800b2f8 <USBD_static_malloc+0x18>)
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	24001d60 	.word	0x24001d60

0800b2fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800b304:	bf00      	nop
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	2b03      	cmp	r3, #3
 800b322:	d817      	bhi.n	800b354 <USBD_Get_USB_Status+0x44>
 800b324:	a201      	add	r2, pc, #4	@ (adr r2, 800b32c <USBD_Get_USB_Status+0x1c>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b33d 	.word	0x0800b33d
 800b330:	0800b343 	.word	0x0800b343
 800b334:	0800b349 	.word	0x0800b349
 800b338:	0800b34f 	.word	0x0800b34f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
    break;
 800b340:	e00b      	b.n	800b35a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b342:	2303      	movs	r3, #3
 800b344:	73fb      	strb	r3, [r7, #15]
    break;
 800b346:	e008      	b.n	800b35a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
    break;
 800b34c:	e005      	b.n	800b35a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b34e:	2303      	movs	r3, #3
 800b350:	73fb      	strb	r3, [r7, #15]
    break;
 800b352:	e002      	b.n	800b35a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b354:	2303      	movs	r3, #3
 800b356:	73fb      	strb	r3, [r7, #15]
    break;
 800b358:	bf00      	nop
  }
  return usb_status;
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <std>:
 800b368:	2300      	movs	r3, #0
 800b36a:	b510      	push	{r4, lr}
 800b36c:	4604      	mov	r4, r0
 800b36e:	e9c0 3300 	strd	r3, r3, [r0]
 800b372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b376:	6083      	str	r3, [r0, #8]
 800b378:	8181      	strh	r1, [r0, #12]
 800b37a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b37c:	81c2      	strh	r2, [r0, #14]
 800b37e:	6183      	str	r3, [r0, #24]
 800b380:	4619      	mov	r1, r3
 800b382:	2208      	movs	r2, #8
 800b384:	305c      	adds	r0, #92	@ 0x5c
 800b386:	f000 fa01 	bl	800b78c <memset>
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <std+0x58>)
 800b38c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <std+0x5c>)
 800b390:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x60>)
 800b394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x64>)
 800b398:	6323      	str	r3, [r4, #48]	@ 0x30
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <std+0x68>)
 800b39c:	6224      	str	r4, [r4, #32]
 800b39e:	429c      	cmp	r4, r3
 800b3a0:	d006      	beq.n	800b3b0 <std+0x48>
 800b3a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3a6:	4294      	cmp	r4, r2
 800b3a8:	d002      	beq.n	800b3b0 <std+0x48>
 800b3aa:	33d0      	adds	r3, #208	@ 0xd0
 800b3ac:	429c      	cmp	r4, r3
 800b3ae:	d105      	bne.n	800b3bc <std+0x54>
 800b3b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b8:	f000 ba60 	b.w	800b87c <__retarget_lock_init_recursive>
 800b3bc:	bd10      	pop	{r4, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800b5dd 	.word	0x0800b5dd
 800b3c4:	0800b5ff 	.word	0x0800b5ff
 800b3c8:	0800b637 	.word	0x0800b637
 800b3cc:	0800b65b 	.word	0x0800b65b
 800b3d0:	24001f80 	.word	0x24001f80

0800b3d4 <stdio_exit_handler>:
 800b3d4:	4a02      	ldr	r2, [pc, #8]	@ (800b3e0 <stdio_exit_handler+0xc>)
 800b3d6:	4903      	ldr	r1, [pc, #12]	@ (800b3e4 <stdio_exit_handler+0x10>)
 800b3d8:	4803      	ldr	r0, [pc, #12]	@ (800b3e8 <stdio_exit_handler+0x14>)
 800b3da:	f000 b869 	b.w	800b4b0 <_fwalk_sglue>
 800b3de:	bf00      	nop
 800b3e0:	24000104 	.word	0x24000104
 800b3e4:	0800c11d 	.word	0x0800c11d
 800b3e8:	24000114 	.word	0x24000114

0800b3ec <cleanup_stdio>:
 800b3ec:	6841      	ldr	r1, [r0, #4]
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b420 <cleanup_stdio+0x34>)
 800b3f0:	4299      	cmp	r1, r3
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	d001      	beq.n	800b3fc <cleanup_stdio+0x10>
 800b3f8:	f000 fe90 	bl	800c11c <_fflush_r>
 800b3fc:	68a1      	ldr	r1, [r4, #8]
 800b3fe:	4b09      	ldr	r3, [pc, #36]	@ (800b424 <cleanup_stdio+0x38>)
 800b400:	4299      	cmp	r1, r3
 800b402:	d002      	beq.n	800b40a <cleanup_stdio+0x1e>
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fe89 	bl	800c11c <_fflush_r>
 800b40a:	68e1      	ldr	r1, [r4, #12]
 800b40c:	4b06      	ldr	r3, [pc, #24]	@ (800b428 <cleanup_stdio+0x3c>)
 800b40e:	4299      	cmp	r1, r3
 800b410:	d004      	beq.n	800b41c <cleanup_stdio+0x30>
 800b412:	4620      	mov	r0, r4
 800b414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b418:	f000 be80 	b.w	800c11c <_fflush_r>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	bf00      	nop
 800b420:	24001f80 	.word	0x24001f80
 800b424:	24001fe8 	.word	0x24001fe8
 800b428:	24002050 	.word	0x24002050

0800b42c <global_stdio_init.part.0>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	4b0b      	ldr	r3, [pc, #44]	@ (800b45c <global_stdio_init.part.0+0x30>)
 800b430:	4c0b      	ldr	r4, [pc, #44]	@ (800b460 <global_stdio_init.part.0+0x34>)
 800b432:	4a0c      	ldr	r2, [pc, #48]	@ (800b464 <global_stdio_init.part.0+0x38>)
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	4620      	mov	r0, r4
 800b438:	2200      	movs	r2, #0
 800b43a:	2104      	movs	r1, #4
 800b43c:	f7ff ff94 	bl	800b368 <std>
 800b440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b444:	2201      	movs	r2, #1
 800b446:	2109      	movs	r1, #9
 800b448:	f7ff ff8e 	bl	800b368 <std>
 800b44c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b450:	2202      	movs	r2, #2
 800b452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b456:	2112      	movs	r1, #18
 800b458:	f7ff bf86 	b.w	800b368 <std>
 800b45c:	240020b8 	.word	0x240020b8
 800b460:	24001f80 	.word	0x24001f80
 800b464:	0800b3d5 	.word	0x0800b3d5

0800b468 <__sfp_lock_acquire>:
 800b468:	4801      	ldr	r0, [pc, #4]	@ (800b470 <__sfp_lock_acquire+0x8>)
 800b46a:	f000 ba08 	b.w	800b87e <__retarget_lock_acquire_recursive>
 800b46e:	bf00      	nop
 800b470:	240020c1 	.word	0x240020c1

0800b474 <__sfp_lock_release>:
 800b474:	4801      	ldr	r0, [pc, #4]	@ (800b47c <__sfp_lock_release+0x8>)
 800b476:	f000 ba03 	b.w	800b880 <__retarget_lock_release_recursive>
 800b47a:	bf00      	nop
 800b47c:	240020c1 	.word	0x240020c1

0800b480 <__sinit>:
 800b480:	b510      	push	{r4, lr}
 800b482:	4604      	mov	r4, r0
 800b484:	f7ff fff0 	bl	800b468 <__sfp_lock_acquire>
 800b488:	6a23      	ldr	r3, [r4, #32]
 800b48a:	b11b      	cbz	r3, 800b494 <__sinit+0x14>
 800b48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b490:	f7ff bff0 	b.w	800b474 <__sfp_lock_release>
 800b494:	4b04      	ldr	r3, [pc, #16]	@ (800b4a8 <__sinit+0x28>)
 800b496:	6223      	str	r3, [r4, #32]
 800b498:	4b04      	ldr	r3, [pc, #16]	@ (800b4ac <__sinit+0x2c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1f5      	bne.n	800b48c <__sinit+0xc>
 800b4a0:	f7ff ffc4 	bl	800b42c <global_stdio_init.part.0>
 800b4a4:	e7f2      	b.n	800b48c <__sinit+0xc>
 800b4a6:	bf00      	nop
 800b4a8:	0800b3ed 	.word	0x0800b3ed
 800b4ac:	240020b8 	.word	0x240020b8

0800b4b0 <_fwalk_sglue>:
 800b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	4688      	mov	r8, r1
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	2600      	movs	r6, #0
 800b4bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c4:	d505      	bpl.n	800b4d2 <_fwalk_sglue+0x22>
 800b4c6:	6824      	ldr	r4, [r4, #0]
 800b4c8:	2c00      	cmp	r4, #0
 800b4ca:	d1f7      	bne.n	800b4bc <_fwalk_sglue+0xc>
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	89ab      	ldrh	r3, [r5, #12]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d907      	bls.n	800b4e8 <_fwalk_sglue+0x38>
 800b4d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	d003      	beq.n	800b4e8 <_fwalk_sglue+0x38>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	47c0      	blx	r8
 800b4e6:	4306      	orrs	r6, r0
 800b4e8:	3568      	adds	r5, #104	@ 0x68
 800b4ea:	e7e9      	b.n	800b4c0 <_fwalk_sglue+0x10>

0800b4ec <iprintf>:
 800b4ec:	b40f      	push	{r0, r1, r2, r3}
 800b4ee:	b507      	push	{r0, r1, r2, lr}
 800b4f0:	4906      	ldr	r1, [pc, #24]	@ (800b50c <iprintf+0x20>)
 800b4f2:	ab04      	add	r3, sp, #16
 800b4f4:	6808      	ldr	r0, [r1, #0]
 800b4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fa:	6881      	ldr	r1, [r0, #8]
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	f000 fae3 	bl	800bac8 <_vfiprintf_r>
 800b502:	b003      	add	sp, #12
 800b504:	f85d eb04 	ldr.w	lr, [sp], #4
 800b508:	b004      	add	sp, #16
 800b50a:	4770      	bx	lr
 800b50c:	24000110 	.word	0x24000110

0800b510 <putchar>:
 800b510:	4b02      	ldr	r3, [pc, #8]	@ (800b51c <putchar+0xc>)
 800b512:	4601      	mov	r1, r0
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	6882      	ldr	r2, [r0, #8]
 800b518:	f000 be8a 	b.w	800c230 <_putc_r>
 800b51c:	24000110 	.word	0x24000110

0800b520 <_puts_r>:
 800b520:	6a03      	ldr	r3, [r0, #32]
 800b522:	b570      	push	{r4, r5, r6, lr}
 800b524:	6884      	ldr	r4, [r0, #8]
 800b526:	4605      	mov	r5, r0
 800b528:	460e      	mov	r6, r1
 800b52a:	b90b      	cbnz	r3, 800b530 <_puts_r+0x10>
 800b52c:	f7ff ffa8 	bl	800b480 <__sinit>
 800b530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b532:	07db      	lsls	r3, r3, #31
 800b534:	d405      	bmi.n	800b542 <_puts_r+0x22>
 800b536:	89a3      	ldrh	r3, [r4, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d402      	bmi.n	800b542 <_puts_r+0x22>
 800b53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b53e:	f000 f99e 	bl	800b87e <__retarget_lock_acquire_recursive>
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	0719      	lsls	r1, r3, #28
 800b546:	d502      	bpl.n	800b54e <_puts_r+0x2e>
 800b548:	6923      	ldr	r3, [r4, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d135      	bne.n	800b5ba <_puts_r+0x9a>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 f8c5 	bl	800b6e0 <__swsetup_r>
 800b556:	b380      	cbz	r0, 800b5ba <_puts_r+0x9a>
 800b558:	f04f 35ff 	mov.w	r5, #4294967295
 800b55c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b55e:	07da      	lsls	r2, r3, #31
 800b560:	d405      	bmi.n	800b56e <_puts_r+0x4e>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	059b      	lsls	r3, r3, #22
 800b566:	d402      	bmi.n	800b56e <_puts_r+0x4e>
 800b568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b56a:	f000 f989 	bl	800b880 <__retarget_lock_release_recursive>
 800b56e:	4628      	mov	r0, r5
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	2b00      	cmp	r3, #0
 800b574:	da04      	bge.n	800b580 <_puts_r+0x60>
 800b576:	69a2      	ldr	r2, [r4, #24]
 800b578:	429a      	cmp	r2, r3
 800b57a:	dc17      	bgt.n	800b5ac <_puts_r+0x8c>
 800b57c:	290a      	cmp	r1, #10
 800b57e:	d015      	beq.n	800b5ac <_puts_r+0x8c>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	6022      	str	r2, [r4, #0]
 800b586:	7019      	strb	r1, [r3, #0]
 800b588:	68a3      	ldr	r3, [r4, #8]
 800b58a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b58e:	3b01      	subs	r3, #1
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	2900      	cmp	r1, #0
 800b594:	d1ed      	bne.n	800b572 <_puts_r+0x52>
 800b596:	2b00      	cmp	r3, #0
 800b598:	da11      	bge.n	800b5be <_puts_r+0x9e>
 800b59a:	4622      	mov	r2, r4
 800b59c:	210a      	movs	r1, #10
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f000 f85f 	bl	800b662 <__swbuf_r>
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d0d7      	beq.n	800b558 <_puts_r+0x38>
 800b5a8:	250a      	movs	r5, #10
 800b5aa:	e7d7      	b.n	800b55c <_puts_r+0x3c>
 800b5ac:	4622      	mov	r2, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 f857 	bl	800b662 <__swbuf_r>
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1e7      	bne.n	800b588 <_puts_r+0x68>
 800b5b8:	e7ce      	b.n	800b558 <_puts_r+0x38>
 800b5ba:	3e01      	subs	r6, #1
 800b5bc:	e7e4      	b.n	800b588 <_puts_r+0x68>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	220a      	movs	r2, #10
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	e7ee      	b.n	800b5a8 <_puts_r+0x88>
	...

0800b5cc <puts>:
 800b5cc:	4b02      	ldr	r3, [pc, #8]	@ (800b5d8 <puts+0xc>)
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	f7ff bfa5 	b.w	800b520 <_puts_r>
 800b5d6:	bf00      	nop
 800b5d8:	24000110 	.word	0x24000110

0800b5dc <__sread>:
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e4:	f000 f8fc 	bl	800b7e0 <_read_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	bfab      	itete	ge
 800b5ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f0:	181b      	addge	r3, r3, r0
 800b5f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5f6:	bfac      	ite	ge
 800b5f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5fa:	81a3      	strhlt	r3, [r4, #12]
 800b5fc:	bd10      	pop	{r4, pc}

0800b5fe <__swrite>:
 800b5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	461f      	mov	r7, r3
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	05db      	lsls	r3, r3, #23
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	4616      	mov	r6, r2
 800b60e:	d505      	bpl.n	800b61c <__swrite+0x1e>
 800b610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b614:	2302      	movs	r3, #2
 800b616:	2200      	movs	r2, #0
 800b618:	f000 f8d0 	bl	800b7bc <_lseek_r>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	4632      	mov	r2, r6
 800b62a:	463b      	mov	r3, r7
 800b62c:	4628      	mov	r0, r5
 800b62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b632:	f000 b8e7 	b.w	800b804 <_write_r>

0800b636 <__sseek>:
 800b636:	b510      	push	{r4, lr}
 800b638:	460c      	mov	r4, r1
 800b63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63e:	f000 f8bd 	bl	800b7bc <_lseek_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	bf15      	itete	ne
 800b648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b64a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b64e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b652:	81a3      	strheq	r3, [r4, #12]
 800b654:	bf18      	it	ne
 800b656:	81a3      	strhne	r3, [r4, #12]
 800b658:	bd10      	pop	{r4, pc}

0800b65a <__sclose>:
 800b65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65e:	f000 b89d 	b.w	800b79c <_close_r>

0800b662 <__swbuf_r>:
 800b662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b664:	460e      	mov	r6, r1
 800b666:	4614      	mov	r4, r2
 800b668:	4605      	mov	r5, r0
 800b66a:	b118      	cbz	r0, 800b674 <__swbuf_r+0x12>
 800b66c:	6a03      	ldr	r3, [r0, #32]
 800b66e:	b90b      	cbnz	r3, 800b674 <__swbuf_r+0x12>
 800b670:	f7ff ff06 	bl	800b480 <__sinit>
 800b674:	69a3      	ldr	r3, [r4, #24]
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	071a      	lsls	r2, r3, #28
 800b67c:	d501      	bpl.n	800b682 <__swbuf_r+0x20>
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	b943      	cbnz	r3, 800b694 <__swbuf_r+0x32>
 800b682:	4621      	mov	r1, r4
 800b684:	4628      	mov	r0, r5
 800b686:	f000 f82b 	bl	800b6e0 <__swsetup_r>
 800b68a:	b118      	cbz	r0, 800b694 <__swbuf_r+0x32>
 800b68c:	f04f 37ff 	mov.w	r7, #4294967295
 800b690:	4638      	mov	r0, r7
 800b692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	6922      	ldr	r2, [r4, #16]
 800b698:	1a98      	subs	r0, r3, r2
 800b69a:	6963      	ldr	r3, [r4, #20]
 800b69c:	b2f6      	uxtb	r6, r6
 800b69e:	4283      	cmp	r3, r0
 800b6a0:	4637      	mov	r7, r6
 800b6a2:	dc05      	bgt.n	800b6b0 <__swbuf_r+0x4e>
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 fd38 	bl	800c11c <_fflush_r>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d1ed      	bne.n	800b68c <__swbuf_r+0x2a>
 800b6b0:	68a3      	ldr	r3, [r4, #8]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	60a3      	str	r3, [r4, #8]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	701e      	strb	r6, [r3, #0]
 800b6be:	6962      	ldr	r2, [r4, #20]
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d004      	beq.n	800b6d0 <__swbuf_r+0x6e>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	07db      	lsls	r3, r3, #31
 800b6ca:	d5e1      	bpl.n	800b690 <__swbuf_r+0x2e>
 800b6cc:	2e0a      	cmp	r6, #10
 800b6ce:	d1df      	bne.n	800b690 <__swbuf_r+0x2e>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 fd22 	bl	800c11c <_fflush_r>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d0d9      	beq.n	800b690 <__swbuf_r+0x2e>
 800b6dc:	e7d6      	b.n	800b68c <__swbuf_r+0x2a>
	...

0800b6e0 <__swsetup_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4b29      	ldr	r3, [pc, #164]	@ (800b788 <__swsetup_r+0xa8>)
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	b118      	cbz	r0, 800b6f4 <__swsetup_r+0x14>
 800b6ec:	6a03      	ldr	r3, [r0, #32]
 800b6ee:	b90b      	cbnz	r3, 800b6f4 <__swsetup_r+0x14>
 800b6f0:	f7ff fec6 	bl	800b480 <__sinit>
 800b6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f8:	0719      	lsls	r1, r3, #28
 800b6fa:	d422      	bmi.n	800b742 <__swsetup_r+0x62>
 800b6fc:	06da      	lsls	r2, r3, #27
 800b6fe:	d407      	bmi.n	800b710 <__swsetup_r+0x30>
 800b700:	2209      	movs	r2, #9
 800b702:	602a      	str	r2, [r5, #0]
 800b704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	f04f 30ff 	mov.w	r0, #4294967295
 800b70e:	e033      	b.n	800b778 <__swsetup_r+0x98>
 800b710:	0758      	lsls	r0, r3, #29
 800b712:	d512      	bpl.n	800b73a <__swsetup_r+0x5a>
 800b714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b716:	b141      	cbz	r1, 800b72a <__swsetup_r+0x4a>
 800b718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b71c:	4299      	cmp	r1, r3
 800b71e:	d002      	beq.n	800b726 <__swsetup_r+0x46>
 800b720:	4628      	mov	r0, r5
 800b722:	f000 f8af 	bl	800b884 <_free_r>
 800b726:	2300      	movs	r3, #0
 800b728:	6363      	str	r3, [r4, #52]	@ 0x34
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	2300      	movs	r3, #0
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	f043 0308 	orr.w	r3, r3, #8
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	b94b      	cbnz	r3, 800b75a <__swsetup_r+0x7a>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b74c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b750:	d003      	beq.n	800b75a <__swsetup_r+0x7a>
 800b752:	4621      	mov	r1, r4
 800b754:	4628      	mov	r0, r5
 800b756:	f000 fd2f 	bl	800c1b8 <__smakebuf_r>
 800b75a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b75e:	f013 0201 	ands.w	r2, r3, #1
 800b762:	d00a      	beq.n	800b77a <__swsetup_r+0x9a>
 800b764:	2200      	movs	r2, #0
 800b766:	60a2      	str	r2, [r4, #8]
 800b768:	6962      	ldr	r2, [r4, #20]
 800b76a:	4252      	negs	r2, r2
 800b76c:	61a2      	str	r2, [r4, #24]
 800b76e:	6922      	ldr	r2, [r4, #16]
 800b770:	b942      	cbnz	r2, 800b784 <__swsetup_r+0xa4>
 800b772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b776:	d1c5      	bne.n	800b704 <__swsetup_r+0x24>
 800b778:	bd38      	pop	{r3, r4, r5, pc}
 800b77a:	0799      	lsls	r1, r3, #30
 800b77c:	bf58      	it	pl
 800b77e:	6962      	ldrpl	r2, [r4, #20]
 800b780:	60a2      	str	r2, [r4, #8]
 800b782:	e7f4      	b.n	800b76e <__swsetup_r+0x8e>
 800b784:	2000      	movs	r0, #0
 800b786:	e7f7      	b.n	800b778 <__swsetup_r+0x98>
 800b788:	24000110 	.word	0x24000110

0800b78c <memset>:
 800b78c:	4402      	add	r2, r0
 800b78e:	4603      	mov	r3, r0
 800b790:	4293      	cmp	r3, r2
 800b792:	d100      	bne.n	800b796 <memset+0xa>
 800b794:	4770      	bx	lr
 800b796:	f803 1b01 	strb.w	r1, [r3], #1
 800b79a:	e7f9      	b.n	800b790 <memset+0x4>

0800b79c <_close_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d06      	ldr	r5, [pc, #24]	@ (800b7b8 <_close_r+0x1c>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f5 fd13 	bl	80011d2 <_close>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_close_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_close_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	240020bc 	.word	0x240020bc

0800b7bc <_lseek_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d07      	ldr	r5, [pc, #28]	@ (800b7dc <_lseek_r+0x20>)
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	602a      	str	r2, [r5, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f7f5 fd28 	bl	8001220 <_lseek>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_lseek_r+0x1e>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_lseek_r+0x1e>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	240020bc 	.word	0x240020bc

0800b7e0 <_read_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d07      	ldr	r5, [pc, #28]	@ (800b800 <_read_r+0x20>)
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	4608      	mov	r0, r1
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	602a      	str	r2, [r5, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f7f5 fcb6 	bl	8001160 <_read>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_read_r+0x1e>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_read_r+0x1e>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	240020bc 	.word	0x240020bc

0800b804 <_write_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d07      	ldr	r5, [pc, #28]	@ (800b824 <_write_r+0x20>)
 800b808:	4604      	mov	r4, r0
 800b80a:	4608      	mov	r0, r1
 800b80c:	4611      	mov	r1, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	602a      	str	r2, [r5, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	f7f5 fcc1 	bl	800119a <_write>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_write_r+0x1e>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_write_r+0x1e>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	240020bc 	.word	0x240020bc

0800b828 <__errno>:
 800b828:	4b01      	ldr	r3, [pc, #4]	@ (800b830 <__errno+0x8>)
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	24000110 	.word	0x24000110

0800b834 <__libc_init_array>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4d0d      	ldr	r5, [pc, #52]	@ (800b86c <__libc_init_array+0x38>)
 800b838:	4c0d      	ldr	r4, [pc, #52]	@ (800b870 <__libc_init_array+0x3c>)
 800b83a:	1b64      	subs	r4, r4, r5
 800b83c:	10a4      	asrs	r4, r4, #2
 800b83e:	2600      	movs	r6, #0
 800b840:	42a6      	cmp	r6, r4
 800b842:	d109      	bne.n	800b858 <__libc_init_array+0x24>
 800b844:	4d0b      	ldr	r5, [pc, #44]	@ (800b874 <__libc_init_array+0x40>)
 800b846:	4c0c      	ldr	r4, [pc, #48]	@ (800b878 <__libc_init_array+0x44>)
 800b848:	f000 fd58 	bl	800c2fc <_init>
 800b84c:	1b64      	subs	r4, r4, r5
 800b84e:	10a4      	asrs	r4, r4, #2
 800b850:	2600      	movs	r6, #0
 800b852:	42a6      	cmp	r6, r4
 800b854:	d105      	bne.n	800b862 <__libc_init_array+0x2e>
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	f855 3b04 	ldr.w	r3, [r5], #4
 800b85c:	4798      	blx	r3
 800b85e:	3601      	adds	r6, #1
 800b860:	e7ee      	b.n	800b840 <__libc_init_array+0xc>
 800b862:	f855 3b04 	ldr.w	r3, [r5], #4
 800b866:	4798      	blx	r3
 800b868:	3601      	adds	r6, #1
 800b86a:	e7f2      	b.n	800b852 <__libc_init_array+0x1e>
 800b86c:	0800c3e8 	.word	0x0800c3e8
 800b870:	0800c3e8 	.word	0x0800c3e8
 800b874:	0800c3e8 	.word	0x0800c3e8
 800b878:	0800c3ec 	.word	0x0800c3ec

0800b87c <__retarget_lock_init_recursive>:
 800b87c:	4770      	bx	lr

0800b87e <__retarget_lock_acquire_recursive>:
 800b87e:	4770      	bx	lr

0800b880 <__retarget_lock_release_recursive>:
 800b880:	4770      	bx	lr
	...

0800b884 <_free_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4605      	mov	r5, r0
 800b888:	2900      	cmp	r1, #0
 800b88a:	d041      	beq.n	800b910 <_free_r+0x8c>
 800b88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b890:	1f0c      	subs	r4, r1, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfb8      	it	lt
 800b896:	18e4      	addlt	r4, r4, r3
 800b898:	f000 f8e0 	bl	800ba5c <__malloc_lock>
 800b89c:	4a1d      	ldr	r2, [pc, #116]	@ (800b914 <_free_r+0x90>)
 800b89e:	6813      	ldr	r3, [r2, #0]
 800b8a0:	b933      	cbnz	r3, 800b8b0 <_free_r+0x2c>
 800b8a2:	6063      	str	r3, [r4, #4]
 800b8a4:	6014      	str	r4, [r2, #0]
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ac:	f000 b8dc 	b.w	800ba68 <__malloc_unlock>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d908      	bls.n	800b8c6 <_free_r+0x42>
 800b8b4:	6820      	ldr	r0, [r4, #0]
 800b8b6:	1821      	adds	r1, r4, r0
 800b8b8:	428b      	cmp	r3, r1
 800b8ba:	bf01      	itttt	eq
 800b8bc:	6819      	ldreq	r1, [r3, #0]
 800b8be:	685b      	ldreq	r3, [r3, #4]
 800b8c0:	1809      	addeq	r1, r1, r0
 800b8c2:	6021      	streq	r1, [r4, #0]
 800b8c4:	e7ed      	b.n	800b8a2 <_free_r+0x1e>
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	b10b      	cbz	r3, 800b8d0 <_free_r+0x4c>
 800b8cc:	42a3      	cmp	r3, r4
 800b8ce:	d9fa      	bls.n	800b8c6 <_free_r+0x42>
 800b8d0:	6811      	ldr	r1, [r2, #0]
 800b8d2:	1850      	adds	r0, r2, r1
 800b8d4:	42a0      	cmp	r0, r4
 800b8d6:	d10b      	bne.n	800b8f0 <_free_r+0x6c>
 800b8d8:	6820      	ldr	r0, [r4, #0]
 800b8da:	4401      	add	r1, r0
 800b8dc:	1850      	adds	r0, r2, r1
 800b8de:	4283      	cmp	r3, r0
 800b8e0:	6011      	str	r1, [r2, #0]
 800b8e2:	d1e0      	bne.n	800b8a6 <_free_r+0x22>
 800b8e4:	6818      	ldr	r0, [r3, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	6053      	str	r3, [r2, #4]
 800b8ea:	4408      	add	r0, r1
 800b8ec:	6010      	str	r0, [r2, #0]
 800b8ee:	e7da      	b.n	800b8a6 <_free_r+0x22>
 800b8f0:	d902      	bls.n	800b8f8 <_free_r+0x74>
 800b8f2:	230c      	movs	r3, #12
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	e7d6      	b.n	800b8a6 <_free_r+0x22>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	1821      	adds	r1, r4, r0
 800b8fc:	428b      	cmp	r3, r1
 800b8fe:	bf04      	itt	eq
 800b900:	6819      	ldreq	r1, [r3, #0]
 800b902:	685b      	ldreq	r3, [r3, #4]
 800b904:	6063      	str	r3, [r4, #4]
 800b906:	bf04      	itt	eq
 800b908:	1809      	addeq	r1, r1, r0
 800b90a:	6021      	streq	r1, [r4, #0]
 800b90c:	6054      	str	r4, [r2, #4]
 800b90e:	e7ca      	b.n	800b8a6 <_free_r+0x22>
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	240020c8 	.word	0x240020c8

0800b918 <sbrk_aligned>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	4e0f      	ldr	r6, [pc, #60]	@ (800b958 <sbrk_aligned+0x40>)
 800b91c:	460c      	mov	r4, r1
 800b91e:	6831      	ldr	r1, [r6, #0]
 800b920:	4605      	mov	r5, r0
 800b922:	b911      	cbnz	r1, 800b92a <sbrk_aligned+0x12>
 800b924:	f000 fcda 	bl	800c2dc <_sbrk_r>
 800b928:	6030      	str	r0, [r6, #0]
 800b92a:	4621      	mov	r1, r4
 800b92c:	4628      	mov	r0, r5
 800b92e:	f000 fcd5 	bl	800c2dc <_sbrk_r>
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d103      	bne.n	800b93e <sbrk_aligned+0x26>
 800b936:	f04f 34ff 	mov.w	r4, #4294967295
 800b93a:	4620      	mov	r0, r4
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	1cc4      	adds	r4, r0, #3
 800b940:	f024 0403 	bic.w	r4, r4, #3
 800b944:	42a0      	cmp	r0, r4
 800b946:	d0f8      	beq.n	800b93a <sbrk_aligned+0x22>
 800b948:	1a21      	subs	r1, r4, r0
 800b94a:	4628      	mov	r0, r5
 800b94c:	f000 fcc6 	bl	800c2dc <_sbrk_r>
 800b950:	3001      	adds	r0, #1
 800b952:	d1f2      	bne.n	800b93a <sbrk_aligned+0x22>
 800b954:	e7ef      	b.n	800b936 <sbrk_aligned+0x1e>
 800b956:	bf00      	nop
 800b958:	240020c4 	.word	0x240020c4

0800b95c <_malloc_r>:
 800b95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b960:	1ccd      	adds	r5, r1, #3
 800b962:	f025 0503 	bic.w	r5, r5, #3
 800b966:	3508      	adds	r5, #8
 800b968:	2d0c      	cmp	r5, #12
 800b96a:	bf38      	it	cc
 800b96c:	250c      	movcc	r5, #12
 800b96e:	2d00      	cmp	r5, #0
 800b970:	4606      	mov	r6, r0
 800b972:	db01      	blt.n	800b978 <_malloc_r+0x1c>
 800b974:	42a9      	cmp	r1, r5
 800b976:	d904      	bls.n	800b982 <_malloc_r+0x26>
 800b978:	230c      	movs	r3, #12
 800b97a:	6033      	str	r3, [r6, #0]
 800b97c:	2000      	movs	r0, #0
 800b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba58 <_malloc_r+0xfc>
 800b986:	f000 f869 	bl	800ba5c <__malloc_lock>
 800b98a:	f8d8 3000 	ldr.w	r3, [r8]
 800b98e:	461c      	mov	r4, r3
 800b990:	bb44      	cbnz	r4, 800b9e4 <_malloc_r+0x88>
 800b992:	4629      	mov	r1, r5
 800b994:	4630      	mov	r0, r6
 800b996:	f7ff ffbf 	bl	800b918 <sbrk_aligned>
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	4604      	mov	r4, r0
 800b99e:	d158      	bne.n	800ba52 <_malloc_r+0xf6>
 800b9a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b9a4:	4627      	mov	r7, r4
 800b9a6:	2f00      	cmp	r7, #0
 800b9a8:	d143      	bne.n	800ba32 <_malloc_r+0xd6>
 800b9aa:	2c00      	cmp	r4, #0
 800b9ac:	d04b      	beq.n	800ba46 <_malloc_r+0xea>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	eb04 0903 	add.w	r9, r4, r3
 800b9b8:	f000 fc90 	bl	800c2dc <_sbrk_r>
 800b9bc:	4581      	cmp	r9, r0
 800b9be:	d142      	bne.n	800ba46 <_malloc_r+0xea>
 800b9c0:	6821      	ldr	r1, [r4, #0]
 800b9c2:	1a6d      	subs	r5, r5, r1
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	f7ff ffa6 	bl	800b918 <sbrk_aligned>
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d03a      	beq.n	800ba46 <_malloc_r+0xea>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	442b      	add	r3, r5
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	bb62      	cbnz	r2, 800ba38 <_malloc_r+0xdc>
 800b9de:	f8c8 7000 	str.w	r7, [r8]
 800b9e2:	e00f      	b.n	800ba04 <_malloc_r+0xa8>
 800b9e4:	6822      	ldr	r2, [r4, #0]
 800b9e6:	1b52      	subs	r2, r2, r5
 800b9e8:	d420      	bmi.n	800ba2c <_malloc_r+0xd0>
 800b9ea:	2a0b      	cmp	r2, #11
 800b9ec:	d917      	bls.n	800ba1e <_malloc_r+0xc2>
 800b9ee:	1961      	adds	r1, r4, r5
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	6025      	str	r5, [r4, #0]
 800b9f4:	bf18      	it	ne
 800b9f6:	6059      	strne	r1, [r3, #4]
 800b9f8:	6863      	ldr	r3, [r4, #4]
 800b9fa:	bf08      	it	eq
 800b9fc:	f8c8 1000 	streq.w	r1, [r8]
 800ba00:	5162      	str	r2, [r4, r5]
 800ba02:	604b      	str	r3, [r1, #4]
 800ba04:	4630      	mov	r0, r6
 800ba06:	f000 f82f 	bl	800ba68 <__malloc_unlock>
 800ba0a:	f104 000b 	add.w	r0, r4, #11
 800ba0e:	1d23      	adds	r3, r4, #4
 800ba10:	f020 0007 	bic.w	r0, r0, #7
 800ba14:	1ac2      	subs	r2, r0, r3
 800ba16:	bf1c      	itt	ne
 800ba18:	1a1b      	subne	r3, r3, r0
 800ba1a:	50a3      	strne	r3, [r4, r2]
 800ba1c:	e7af      	b.n	800b97e <_malloc_r+0x22>
 800ba1e:	6862      	ldr	r2, [r4, #4]
 800ba20:	42a3      	cmp	r3, r4
 800ba22:	bf0c      	ite	eq
 800ba24:	f8c8 2000 	streq.w	r2, [r8]
 800ba28:	605a      	strne	r2, [r3, #4]
 800ba2a:	e7eb      	b.n	800ba04 <_malloc_r+0xa8>
 800ba2c:	4623      	mov	r3, r4
 800ba2e:	6864      	ldr	r4, [r4, #4]
 800ba30:	e7ae      	b.n	800b990 <_malloc_r+0x34>
 800ba32:	463c      	mov	r4, r7
 800ba34:	687f      	ldr	r7, [r7, #4]
 800ba36:	e7b6      	b.n	800b9a6 <_malloc_r+0x4a>
 800ba38:	461a      	mov	r2, r3
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	42a3      	cmp	r3, r4
 800ba3e:	d1fb      	bne.n	800ba38 <_malloc_r+0xdc>
 800ba40:	2300      	movs	r3, #0
 800ba42:	6053      	str	r3, [r2, #4]
 800ba44:	e7de      	b.n	800ba04 <_malloc_r+0xa8>
 800ba46:	230c      	movs	r3, #12
 800ba48:	6033      	str	r3, [r6, #0]
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f000 f80c 	bl	800ba68 <__malloc_unlock>
 800ba50:	e794      	b.n	800b97c <_malloc_r+0x20>
 800ba52:	6005      	str	r5, [r0, #0]
 800ba54:	e7d6      	b.n	800ba04 <_malloc_r+0xa8>
 800ba56:	bf00      	nop
 800ba58:	240020c8 	.word	0x240020c8

0800ba5c <__malloc_lock>:
 800ba5c:	4801      	ldr	r0, [pc, #4]	@ (800ba64 <__malloc_lock+0x8>)
 800ba5e:	f7ff bf0e 	b.w	800b87e <__retarget_lock_acquire_recursive>
 800ba62:	bf00      	nop
 800ba64:	240020c0 	.word	0x240020c0

0800ba68 <__malloc_unlock>:
 800ba68:	4801      	ldr	r0, [pc, #4]	@ (800ba70 <__malloc_unlock+0x8>)
 800ba6a:	f7ff bf09 	b.w	800b880 <__retarget_lock_release_recursive>
 800ba6e:	bf00      	nop
 800ba70:	240020c0 	.word	0x240020c0

0800ba74 <__sfputc_r>:
 800ba74:	6893      	ldr	r3, [r2, #8]
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	b410      	push	{r4}
 800ba7c:	6093      	str	r3, [r2, #8]
 800ba7e:	da08      	bge.n	800ba92 <__sfputc_r+0x1e>
 800ba80:	6994      	ldr	r4, [r2, #24]
 800ba82:	42a3      	cmp	r3, r4
 800ba84:	db01      	blt.n	800ba8a <__sfputc_r+0x16>
 800ba86:	290a      	cmp	r1, #10
 800ba88:	d103      	bne.n	800ba92 <__sfputc_r+0x1e>
 800ba8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba8e:	f7ff bde8 	b.w	800b662 <__swbuf_r>
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	1c58      	adds	r0, r3, #1
 800ba96:	6010      	str	r0, [r2, #0]
 800ba98:	7019      	strb	r1, [r3, #0]
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <__sfputs_r>:
 800baa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	4614      	mov	r4, r2
 800baaa:	18d5      	adds	r5, r2, r3
 800baac:	42ac      	cmp	r4, r5
 800baae:	d101      	bne.n	800bab4 <__sfputs_r+0x12>
 800bab0:	2000      	movs	r0, #0
 800bab2:	e007      	b.n	800bac4 <__sfputs_r+0x22>
 800bab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab8:	463a      	mov	r2, r7
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff ffda 	bl	800ba74 <__sfputc_r>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d1f3      	bne.n	800baac <__sfputs_r+0xa>
 800bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bac8 <_vfiprintf_r>:
 800bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bacc:	460d      	mov	r5, r1
 800bace:	b09d      	sub	sp, #116	@ 0x74
 800bad0:	4614      	mov	r4, r2
 800bad2:	4698      	mov	r8, r3
 800bad4:	4606      	mov	r6, r0
 800bad6:	b118      	cbz	r0, 800bae0 <_vfiprintf_r+0x18>
 800bad8:	6a03      	ldr	r3, [r0, #32]
 800bada:	b90b      	cbnz	r3, 800bae0 <_vfiprintf_r+0x18>
 800badc:	f7ff fcd0 	bl	800b480 <__sinit>
 800bae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae2:	07d9      	lsls	r1, r3, #31
 800bae4:	d405      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	059a      	lsls	r2, r3, #22
 800baea:	d402      	bmi.n	800baf2 <_vfiprintf_r+0x2a>
 800baec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baee:	f7ff fec6 	bl	800b87e <__retarget_lock_acquire_recursive>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	071b      	lsls	r3, r3, #28
 800baf6:	d501      	bpl.n	800bafc <_vfiprintf_r+0x34>
 800baf8:	692b      	ldr	r3, [r5, #16]
 800bafa:	b99b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x5c>
 800bafc:	4629      	mov	r1, r5
 800bafe:	4630      	mov	r0, r6
 800bb00:	f7ff fdee 	bl	800b6e0 <__swsetup_r>
 800bb04:	b170      	cbz	r0, 800bb24 <_vfiprintf_r+0x5c>
 800bb06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb08:	07dc      	lsls	r4, r3, #31
 800bb0a:	d504      	bpl.n	800bb16 <_vfiprintf_r+0x4e>
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	b01d      	add	sp, #116	@ 0x74
 800bb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb16:	89ab      	ldrh	r3, [r5, #12]
 800bb18:	0598      	lsls	r0, r3, #22
 800bb1a:	d4f7      	bmi.n	800bb0c <_vfiprintf_r+0x44>
 800bb1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb1e:	f7ff feaf 	bl	800b880 <__retarget_lock_release_recursive>
 800bb22:	e7f3      	b.n	800bb0c <_vfiprintf_r+0x44>
 800bb24:	2300      	movs	r3, #0
 800bb26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb28:	2320      	movs	r3, #32
 800bb2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb32:	2330      	movs	r3, #48	@ 0x30
 800bb34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bce4 <_vfiprintf_r+0x21c>
 800bb38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3c:	f04f 0901 	mov.w	r9, #1
 800bb40:	4623      	mov	r3, r4
 800bb42:	469a      	mov	sl, r3
 800bb44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb48:	b10a      	cbz	r2, 800bb4e <_vfiprintf_r+0x86>
 800bb4a:	2a25      	cmp	r2, #37	@ 0x25
 800bb4c:	d1f9      	bne.n	800bb42 <_vfiprintf_r+0x7a>
 800bb4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bb52:	d00b      	beq.n	800bb6c <_vfiprintf_r+0xa4>
 800bb54:	465b      	mov	r3, fp
 800bb56:	4622      	mov	r2, r4
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f7ff ffa1 	bl	800baa2 <__sfputs_r>
 800bb60:	3001      	adds	r0, #1
 800bb62:	f000 80a7 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb68:	445a      	add	r2, fp
 800bb6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 809f 	beq.w	800bcb4 <_vfiprintf_r+0x1ec>
 800bb76:	2300      	movs	r3, #0
 800bb78:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb80:	f10a 0a01 	add.w	sl, sl, #1
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	9307      	str	r3, [sp, #28]
 800bb88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb8e:	4654      	mov	r4, sl
 800bb90:	2205      	movs	r2, #5
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4853      	ldr	r0, [pc, #332]	@ (800bce4 <_vfiprintf_r+0x21c>)
 800bb98:	f7f4 fbaa 	bl	80002f0 <memchr>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	b9d8      	cbnz	r0, 800bbd8 <_vfiprintf_r+0x110>
 800bba0:	06d1      	lsls	r1, r2, #27
 800bba2:	bf44      	itt	mi
 800bba4:	2320      	movmi	r3, #32
 800bba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbaa:	0713      	lsls	r3, r2, #28
 800bbac:	bf44      	itt	mi
 800bbae:	232b      	movmi	r3, #43	@ 0x2b
 800bbb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbba:	d015      	beq.n	800bbe8 <_vfiprintf_r+0x120>
 800bbbc:	9a07      	ldr	r2, [sp, #28]
 800bbbe:	4654      	mov	r4, sl
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f04f 0c0a 	mov.w	ip, #10
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbcc:	3b30      	subs	r3, #48	@ 0x30
 800bbce:	2b09      	cmp	r3, #9
 800bbd0:	d94b      	bls.n	800bc6a <_vfiprintf_r+0x1a2>
 800bbd2:	b1b0      	cbz	r0, 800bc02 <_vfiprintf_r+0x13a>
 800bbd4:	9207      	str	r2, [sp, #28]
 800bbd6:	e014      	b.n	800bc02 <_vfiprintf_r+0x13a>
 800bbd8:	eba0 0308 	sub.w	r3, r0, r8
 800bbdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	46a2      	mov	sl, r4
 800bbe6:	e7d2      	b.n	800bb8e <_vfiprintf_r+0xc6>
 800bbe8:	9b03      	ldr	r3, [sp, #12]
 800bbea:	1d19      	adds	r1, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	9103      	str	r1, [sp, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bfbb      	ittet	lt
 800bbf4:	425b      	neglt	r3, r3
 800bbf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bbfa:	9307      	strge	r3, [sp, #28]
 800bbfc:	9307      	strlt	r3, [sp, #28]
 800bbfe:	bfb8      	it	lt
 800bc00:	9204      	strlt	r2, [sp, #16]
 800bc02:	7823      	ldrb	r3, [r4, #0]
 800bc04:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc06:	d10a      	bne.n	800bc1e <_vfiprintf_r+0x156>
 800bc08:	7863      	ldrb	r3, [r4, #1]
 800bc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0c:	d132      	bne.n	800bc74 <_vfiprintf_r+0x1ac>
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	9203      	str	r2, [sp, #12]
 800bc16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc1a:	3402      	adds	r4, #2
 800bc1c:	9305      	str	r3, [sp, #20]
 800bc1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcf4 <_vfiprintf_r+0x22c>
 800bc22:	7821      	ldrb	r1, [r4, #0]
 800bc24:	2203      	movs	r2, #3
 800bc26:	4650      	mov	r0, sl
 800bc28:	f7f4 fb62 	bl	80002f0 <memchr>
 800bc2c:	b138      	cbz	r0, 800bc3e <_vfiprintf_r+0x176>
 800bc2e:	9b04      	ldr	r3, [sp, #16]
 800bc30:	eba0 000a 	sub.w	r0, r0, sl
 800bc34:	2240      	movs	r2, #64	@ 0x40
 800bc36:	4082      	lsls	r2, r0
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	3401      	adds	r4, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc42:	4829      	ldr	r0, [pc, #164]	@ (800bce8 <_vfiprintf_r+0x220>)
 800bc44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc48:	2206      	movs	r2, #6
 800bc4a:	f7f4 fb51 	bl	80002f0 <memchr>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d03f      	beq.n	800bcd2 <_vfiprintf_r+0x20a>
 800bc52:	4b26      	ldr	r3, [pc, #152]	@ (800bcec <_vfiprintf_r+0x224>)
 800bc54:	bb1b      	cbnz	r3, 800bc9e <_vfiprintf_r+0x1d6>
 800bc56:	9b03      	ldr	r3, [sp, #12]
 800bc58:	3307      	adds	r3, #7
 800bc5a:	f023 0307 	bic.w	r3, r3, #7
 800bc5e:	3308      	adds	r3, #8
 800bc60:	9303      	str	r3, [sp, #12]
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	443b      	add	r3, r7
 800bc66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc68:	e76a      	b.n	800bb40 <_vfiprintf_r+0x78>
 800bc6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6e:	460c      	mov	r4, r1
 800bc70:	2001      	movs	r0, #1
 800bc72:	e7a8      	b.n	800bbc6 <_vfiprintf_r+0xfe>
 800bc74:	2300      	movs	r3, #0
 800bc76:	3401      	adds	r4, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f04f 0c0a 	mov.w	ip, #10
 800bc80:	4620      	mov	r0, r4
 800bc82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc86:	3a30      	subs	r2, #48	@ 0x30
 800bc88:	2a09      	cmp	r2, #9
 800bc8a:	d903      	bls.n	800bc94 <_vfiprintf_r+0x1cc>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d0c6      	beq.n	800bc1e <_vfiprintf_r+0x156>
 800bc90:	9105      	str	r1, [sp, #20]
 800bc92:	e7c4      	b.n	800bc1e <_vfiprintf_r+0x156>
 800bc94:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc98:	4604      	mov	r4, r0
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e7f0      	b.n	800bc80 <_vfiprintf_r+0x1b8>
 800bc9e:	ab03      	add	r3, sp, #12
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	462a      	mov	r2, r5
 800bca4:	4b12      	ldr	r3, [pc, #72]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bca6:	a904      	add	r1, sp, #16
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f3af 8000 	nop.w
 800bcae:	4607      	mov	r7, r0
 800bcb0:	1c78      	adds	r0, r7, #1
 800bcb2:	d1d6      	bne.n	800bc62 <_vfiprintf_r+0x19a>
 800bcb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcb6:	07d9      	lsls	r1, r3, #31
 800bcb8:	d405      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	059a      	lsls	r2, r3, #22
 800bcbe:	d402      	bmi.n	800bcc6 <_vfiprintf_r+0x1fe>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcc2:	f7ff fddd 	bl	800b880 <__retarget_lock_release_recursive>
 800bcc6:	89ab      	ldrh	r3, [r5, #12]
 800bcc8:	065b      	lsls	r3, r3, #25
 800bcca:	f53f af1f 	bmi.w	800bb0c <_vfiprintf_r+0x44>
 800bcce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd0:	e71e      	b.n	800bb10 <_vfiprintf_r+0x48>
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <_vfiprintf_r+0x228>)
 800bcda:	a904      	add	r1, sp, #16
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f000 f879 	bl	800bdd4 <_printf_i>
 800bce2:	e7e4      	b.n	800bcae <_vfiprintf_r+0x1e6>
 800bce4:	0800c3ac 	.word	0x0800c3ac
 800bce8:	0800c3b6 	.word	0x0800c3b6
 800bcec:	00000000 	.word	0x00000000
 800bcf0:	0800baa3 	.word	0x0800baa3
 800bcf4:	0800c3b2 	.word	0x0800c3b2

0800bcf8 <_printf_common>:
 800bcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfc:	4616      	mov	r6, r2
 800bcfe:	4698      	mov	r8, r3
 800bd00:	688a      	ldr	r2, [r1, #8]
 800bd02:	690b      	ldr	r3, [r1, #16]
 800bd04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	bfb8      	it	lt
 800bd0c:	4613      	movlt	r3, r2
 800bd0e:	6033      	str	r3, [r6, #0]
 800bd10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd14:	4607      	mov	r7, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	b10a      	cbz	r2, 800bd1e <_printf_common+0x26>
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	6033      	str	r3, [r6, #0]
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	0699      	lsls	r1, r3, #26
 800bd22:	bf42      	ittt	mi
 800bd24:	6833      	ldrmi	r3, [r6, #0]
 800bd26:	3302      	addmi	r3, #2
 800bd28:	6033      	strmi	r3, [r6, #0]
 800bd2a:	6825      	ldr	r5, [r4, #0]
 800bd2c:	f015 0506 	ands.w	r5, r5, #6
 800bd30:	d106      	bne.n	800bd40 <_printf_common+0x48>
 800bd32:	f104 0a19 	add.w	sl, r4, #25
 800bd36:	68e3      	ldr	r3, [r4, #12]
 800bd38:	6832      	ldr	r2, [r6, #0]
 800bd3a:	1a9b      	subs	r3, r3, r2
 800bd3c:	42ab      	cmp	r3, r5
 800bd3e:	dc26      	bgt.n	800bd8e <_printf_common+0x96>
 800bd40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd44:	6822      	ldr	r2, [r4, #0]
 800bd46:	3b00      	subs	r3, #0
 800bd48:	bf18      	it	ne
 800bd4a:	2301      	movne	r3, #1
 800bd4c:	0692      	lsls	r2, r2, #26
 800bd4e:	d42b      	bmi.n	800bda8 <_printf_common+0xb0>
 800bd50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd54:	4641      	mov	r1, r8
 800bd56:	4638      	mov	r0, r7
 800bd58:	47c8      	blx	r9
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d01e      	beq.n	800bd9c <_printf_common+0xa4>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	6922      	ldr	r2, [r4, #16]
 800bd62:	f003 0306 	and.w	r3, r3, #6
 800bd66:	2b04      	cmp	r3, #4
 800bd68:	bf02      	ittt	eq
 800bd6a:	68e5      	ldreq	r5, [r4, #12]
 800bd6c:	6833      	ldreq	r3, [r6, #0]
 800bd6e:	1aed      	subeq	r5, r5, r3
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	bf0c      	ite	eq
 800bd74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd78:	2500      	movne	r5, #0
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	bfc4      	itt	gt
 800bd7e:	1a9b      	subgt	r3, r3, r2
 800bd80:	18ed      	addgt	r5, r5, r3
 800bd82:	2600      	movs	r6, #0
 800bd84:	341a      	adds	r4, #26
 800bd86:	42b5      	cmp	r5, r6
 800bd88:	d11a      	bne.n	800bdc0 <_printf_common+0xc8>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	e008      	b.n	800bda0 <_printf_common+0xa8>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	4652      	mov	r2, sl
 800bd92:	4641      	mov	r1, r8
 800bd94:	4638      	mov	r0, r7
 800bd96:	47c8      	blx	r9
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d103      	bne.n	800bda4 <_printf_common+0xac>
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda4:	3501      	adds	r5, #1
 800bda6:	e7c6      	b.n	800bd36 <_printf_common+0x3e>
 800bda8:	18e1      	adds	r1, r4, r3
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	2030      	movs	r0, #48	@ 0x30
 800bdae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdb2:	4422      	add	r2, r4
 800bdb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	e7c7      	b.n	800bd50 <_printf_common+0x58>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	47c8      	blx	r9
 800bdca:	3001      	adds	r0, #1
 800bdcc:	d0e6      	beq.n	800bd9c <_printf_common+0xa4>
 800bdce:	3601      	adds	r6, #1
 800bdd0:	e7d9      	b.n	800bd86 <_printf_common+0x8e>
	...

0800bdd4 <_printf_i>:
 800bdd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd8:	7e0f      	ldrb	r7, [r1, #24]
 800bdda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bddc:	2f78      	cmp	r7, #120	@ 0x78
 800bdde:	4691      	mov	r9, r2
 800bde0:	4680      	mov	r8, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	469a      	mov	sl, r3
 800bde6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdea:	d807      	bhi.n	800bdfc <_printf_i+0x28>
 800bdec:	2f62      	cmp	r7, #98	@ 0x62
 800bdee:	d80a      	bhi.n	800be06 <_printf_i+0x32>
 800bdf0:	2f00      	cmp	r7, #0
 800bdf2:	f000 80d2 	beq.w	800bf9a <_printf_i+0x1c6>
 800bdf6:	2f58      	cmp	r7, #88	@ 0x58
 800bdf8:	f000 80b9 	beq.w	800bf6e <_printf_i+0x19a>
 800bdfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be04:	e03a      	b.n	800be7c <_printf_i+0xa8>
 800be06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be0a:	2b15      	cmp	r3, #21
 800be0c:	d8f6      	bhi.n	800bdfc <_printf_i+0x28>
 800be0e:	a101      	add	r1, pc, #4	@ (adr r1, 800be14 <_printf_i+0x40>)
 800be10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be14:	0800be6d 	.word	0x0800be6d
 800be18:	0800be81 	.word	0x0800be81
 800be1c:	0800bdfd 	.word	0x0800bdfd
 800be20:	0800bdfd 	.word	0x0800bdfd
 800be24:	0800bdfd 	.word	0x0800bdfd
 800be28:	0800bdfd 	.word	0x0800bdfd
 800be2c:	0800be81 	.word	0x0800be81
 800be30:	0800bdfd 	.word	0x0800bdfd
 800be34:	0800bdfd 	.word	0x0800bdfd
 800be38:	0800bdfd 	.word	0x0800bdfd
 800be3c:	0800bdfd 	.word	0x0800bdfd
 800be40:	0800bf81 	.word	0x0800bf81
 800be44:	0800beab 	.word	0x0800beab
 800be48:	0800bf3b 	.word	0x0800bf3b
 800be4c:	0800bdfd 	.word	0x0800bdfd
 800be50:	0800bdfd 	.word	0x0800bdfd
 800be54:	0800bfa3 	.word	0x0800bfa3
 800be58:	0800bdfd 	.word	0x0800bdfd
 800be5c:	0800beab 	.word	0x0800beab
 800be60:	0800bdfd 	.word	0x0800bdfd
 800be64:	0800bdfd 	.word	0x0800bdfd
 800be68:	0800bf43 	.word	0x0800bf43
 800be6c:	6833      	ldr	r3, [r6, #0]
 800be6e:	1d1a      	adds	r2, r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6032      	str	r2, [r6, #0]
 800be74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be7c:	2301      	movs	r3, #1
 800be7e:	e09d      	b.n	800bfbc <_printf_i+0x1e8>
 800be80:	6833      	ldr	r3, [r6, #0]
 800be82:	6820      	ldr	r0, [r4, #0]
 800be84:	1d19      	adds	r1, r3, #4
 800be86:	6031      	str	r1, [r6, #0]
 800be88:	0606      	lsls	r6, r0, #24
 800be8a:	d501      	bpl.n	800be90 <_printf_i+0xbc>
 800be8c:	681d      	ldr	r5, [r3, #0]
 800be8e:	e003      	b.n	800be98 <_printf_i+0xc4>
 800be90:	0645      	lsls	r5, r0, #25
 800be92:	d5fb      	bpl.n	800be8c <_printf_i+0xb8>
 800be94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be98:	2d00      	cmp	r5, #0
 800be9a:	da03      	bge.n	800bea4 <_printf_i+0xd0>
 800be9c:	232d      	movs	r3, #45	@ 0x2d
 800be9e:	426d      	negs	r5, r5
 800bea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bea4:	4859      	ldr	r0, [pc, #356]	@ (800c00c <_printf_i+0x238>)
 800bea6:	230a      	movs	r3, #10
 800bea8:	e011      	b.n	800bece <_printf_i+0xfa>
 800beaa:	6821      	ldr	r1, [r4, #0]
 800beac:	6833      	ldr	r3, [r6, #0]
 800beae:	0608      	lsls	r0, r1, #24
 800beb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800beb4:	d402      	bmi.n	800bebc <_printf_i+0xe8>
 800beb6:	0649      	lsls	r1, r1, #25
 800beb8:	bf48      	it	mi
 800beba:	b2ad      	uxthmi	r5, r5
 800bebc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bebe:	4853      	ldr	r0, [pc, #332]	@ (800c00c <_printf_i+0x238>)
 800bec0:	6033      	str	r3, [r6, #0]
 800bec2:	bf14      	ite	ne
 800bec4:	230a      	movne	r3, #10
 800bec6:	2308      	moveq	r3, #8
 800bec8:	2100      	movs	r1, #0
 800beca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bece:	6866      	ldr	r6, [r4, #4]
 800bed0:	60a6      	str	r6, [r4, #8]
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	bfa2      	ittt	ge
 800bed6:	6821      	ldrge	r1, [r4, #0]
 800bed8:	f021 0104 	bicge.w	r1, r1, #4
 800bedc:	6021      	strge	r1, [r4, #0]
 800bede:	b90d      	cbnz	r5, 800bee4 <_printf_i+0x110>
 800bee0:	2e00      	cmp	r6, #0
 800bee2:	d04b      	beq.n	800bf7c <_printf_i+0x1a8>
 800bee4:	4616      	mov	r6, r2
 800bee6:	fbb5 f1f3 	udiv	r1, r5, r3
 800beea:	fb03 5711 	mls	r7, r3, r1, r5
 800beee:	5dc7      	ldrb	r7, [r0, r7]
 800bef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bef4:	462f      	mov	r7, r5
 800bef6:	42bb      	cmp	r3, r7
 800bef8:	460d      	mov	r5, r1
 800befa:	d9f4      	bls.n	800bee6 <_printf_i+0x112>
 800befc:	2b08      	cmp	r3, #8
 800befe:	d10b      	bne.n	800bf18 <_printf_i+0x144>
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	07df      	lsls	r7, r3, #31
 800bf04:	d508      	bpl.n	800bf18 <_printf_i+0x144>
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	6861      	ldr	r1, [r4, #4]
 800bf0a:	4299      	cmp	r1, r3
 800bf0c:	bfde      	ittt	le
 800bf0e:	2330      	movle	r3, #48	@ 0x30
 800bf10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf18:	1b92      	subs	r2, r2, r6
 800bf1a:	6122      	str	r2, [r4, #16]
 800bf1c:	f8cd a000 	str.w	sl, [sp]
 800bf20:	464b      	mov	r3, r9
 800bf22:	aa03      	add	r2, sp, #12
 800bf24:	4621      	mov	r1, r4
 800bf26:	4640      	mov	r0, r8
 800bf28:	f7ff fee6 	bl	800bcf8 <_printf_common>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d14a      	bne.n	800bfc6 <_printf_i+0x1f2>
 800bf30:	f04f 30ff 	mov.w	r0, #4294967295
 800bf34:	b004      	add	sp, #16
 800bf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	f043 0320 	orr.w	r3, r3, #32
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	4833      	ldr	r0, [pc, #204]	@ (800c010 <_printf_i+0x23c>)
 800bf44:	2778      	movs	r7, #120	@ 0x78
 800bf46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	6831      	ldr	r1, [r6, #0]
 800bf4e:	061f      	lsls	r7, r3, #24
 800bf50:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf54:	d402      	bmi.n	800bf5c <_printf_i+0x188>
 800bf56:	065f      	lsls	r7, r3, #25
 800bf58:	bf48      	it	mi
 800bf5a:	b2ad      	uxthmi	r5, r5
 800bf5c:	6031      	str	r1, [r6, #0]
 800bf5e:	07d9      	lsls	r1, r3, #31
 800bf60:	bf44      	itt	mi
 800bf62:	f043 0320 	orrmi.w	r3, r3, #32
 800bf66:	6023      	strmi	r3, [r4, #0]
 800bf68:	b11d      	cbz	r5, 800bf72 <_printf_i+0x19e>
 800bf6a:	2310      	movs	r3, #16
 800bf6c:	e7ac      	b.n	800bec8 <_printf_i+0xf4>
 800bf6e:	4827      	ldr	r0, [pc, #156]	@ (800c00c <_printf_i+0x238>)
 800bf70:	e7e9      	b.n	800bf46 <_printf_i+0x172>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	f023 0320 	bic.w	r3, r3, #32
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	e7f6      	b.n	800bf6a <_printf_i+0x196>
 800bf7c:	4616      	mov	r6, r2
 800bf7e:	e7bd      	b.n	800befc <_printf_i+0x128>
 800bf80:	6833      	ldr	r3, [r6, #0]
 800bf82:	6825      	ldr	r5, [r4, #0]
 800bf84:	6961      	ldr	r1, [r4, #20]
 800bf86:	1d18      	adds	r0, r3, #4
 800bf88:	6030      	str	r0, [r6, #0]
 800bf8a:	062e      	lsls	r6, r5, #24
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	d501      	bpl.n	800bf94 <_printf_i+0x1c0>
 800bf90:	6019      	str	r1, [r3, #0]
 800bf92:	e002      	b.n	800bf9a <_printf_i+0x1c6>
 800bf94:	0668      	lsls	r0, r5, #25
 800bf96:	d5fb      	bpl.n	800bf90 <_printf_i+0x1bc>
 800bf98:	8019      	strh	r1, [r3, #0]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	6123      	str	r3, [r4, #16]
 800bf9e:	4616      	mov	r6, r2
 800bfa0:	e7bc      	b.n	800bf1c <_printf_i+0x148>
 800bfa2:	6833      	ldr	r3, [r6, #0]
 800bfa4:	1d1a      	adds	r2, r3, #4
 800bfa6:	6032      	str	r2, [r6, #0]
 800bfa8:	681e      	ldr	r6, [r3, #0]
 800bfaa:	6862      	ldr	r2, [r4, #4]
 800bfac:	2100      	movs	r1, #0
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f7f4 f99e 	bl	80002f0 <memchr>
 800bfb4:	b108      	cbz	r0, 800bfba <_printf_i+0x1e6>
 800bfb6:	1b80      	subs	r0, r0, r6
 800bfb8:	6060      	str	r0, [r4, #4]
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	6123      	str	r3, [r4, #16]
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfc4:	e7aa      	b.n	800bf1c <_printf_i+0x148>
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	4632      	mov	r2, r6
 800bfca:	4649      	mov	r1, r9
 800bfcc:	4640      	mov	r0, r8
 800bfce:	47d0      	blx	sl
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	d0ad      	beq.n	800bf30 <_printf_i+0x15c>
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	079b      	lsls	r3, r3, #30
 800bfd8:	d413      	bmi.n	800c002 <_printf_i+0x22e>
 800bfda:	68e0      	ldr	r0, [r4, #12]
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	4298      	cmp	r0, r3
 800bfe0:	bfb8      	it	lt
 800bfe2:	4618      	movlt	r0, r3
 800bfe4:	e7a6      	b.n	800bf34 <_printf_i+0x160>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4632      	mov	r2, r6
 800bfea:	4649      	mov	r1, r9
 800bfec:	4640      	mov	r0, r8
 800bfee:	47d0      	blx	sl
 800bff0:	3001      	adds	r0, #1
 800bff2:	d09d      	beq.n	800bf30 <_printf_i+0x15c>
 800bff4:	3501      	adds	r5, #1
 800bff6:	68e3      	ldr	r3, [r4, #12]
 800bff8:	9903      	ldr	r1, [sp, #12]
 800bffa:	1a5b      	subs	r3, r3, r1
 800bffc:	42ab      	cmp	r3, r5
 800bffe:	dcf2      	bgt.n	800bfe6 <_printf_i+0x212>
 800c000:	e7eb      	b.n	800bfda <_printf_i+0x206>
 800c002:	2500      	movs	r5, #0
 800c004:	f104 0619 	add.w	r6, r4, #25
 800c008:	e7f5      	b.n	800bff6 <_printf_i+0x222>
 800c00a:	bf00      	nop
 800c00c:	0800c3bd 	.word	0x0800c3bd
 800c010:	0800c3ce 	.word	0x0800c3ce

0800c014 <__sflush_r>:
 800c014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01c:	0716      	lsls	r6, r2, #28
 800c01e:	4605      	mov	r5, r0
 800c020:	460c      	mov	r4, r1
 800c022:	d454      	bmi.n	800c0ce <__sflush_r+0xba>
 800c024:	684b      	ldr	r3, [r1, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	dc02      	bgt.n	800c030 <__sflush_r+0x1c>
 800c02a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd48      	ble.n	800c0c2 <__sflush_r+0xae>
 800c030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c032:	2e00      	cmp	r6, #0
 800c034:	d045      	beq.n	800c0c2 <__sflush_r+0xae>
 800c036:	2300      	movs	r3, #0
 800c038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c03c:	682f      	ldr	r7, [r5, #0]
 800c03e:	6a21      	ldr	r1, [r4, #32]
 800c040:	602b      	str	r3, [r5, #0]
 800c042:	d030      	beq.n	800c0a6 <__sflush_r+0x92>
 800c044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	0759      	lsls	r1, r3, #29
 800c04a:	d505      	bpl.n	800c058 <__sflush_r+0x44>
 800c04c:	6863      	ldr	r3, [r4, #4]
 800c04e:	1ad2      	subs	r2, r2, r3
 800c050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c052:	b10b      	cbz	r3, 800c058 <__sflush_r+0x44>
 800c054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c056:	1ad2      	subs	r2, r2, r3
 800c058:	2300      	movs	r3, #0
 800c05a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c05c:	6a21      	ldr	r1, [r4, #32]
 800c05e:	4628      	mov	r0, r5
 800c060:	47b0      	blx	r6
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	d106      	bne.n	800c076 <__sflush_r+0x62>
 800c068:	6829      	ldr	r1, [r5, #0]
 800c06a:	291d      	cmp	r1, #29
 800c06c:	d82b      	bhi.n	800c0c6 <__sflush_r+0xb2>
 800c06e:	4a2a      	ldr	r2, [pc, #168]	@ (800c118 <__sflush_r+0x104>)
 800c070:	410a      	asrs	r2, r1
 800c072:	07d6      	lsls	r6, r2, #31
 800c074:	d427      	bmi.n	800c0c6 <__sflush_r+0xb2>
 800c076:	2200      	movs	r2, #0
 800c078:	6062      	str	r2, [r4, #4]
 800c07a:	04d9      	lsls	r1, r3, #19
 800c07c:	6922      	ldr	r2, [r4, #16]
 800c07e:	6022      	str	r2, [r4, #0]
 800c080:	d504      	bpl.n	800c08c <__sflush_r+0x78>
 800c082:	1c42      	adds	r2, r0, #1
 800c084:	d101      	bne.n	800c08a <__sflush_r+0x76>
 800c086:	682b      	ldr	r3, [r5, #0]
 800c088:	b903      	cbnz	r3, 800c08c <__sflush_r+0x78>
 800c08a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c08c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c08e:	602f      	str	r7, [r5, #0]
 800c090:	b1b9      	cbz	r1, 800c0c2 <__sflush_r+0xae>
 800c092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c096:	4299      	cmp	r1, r3
 800c098:	d002      	beq.n	800c0a0 <__sflush_r+0x8c>
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7ff fbf2 	bl	800b884 <_free_r>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0a4:	e00d      	b.n	800c0c2 <__sflush_r+0xae>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b0      	blx	r6
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	1c50      	adds	r0, r2, #1
 800c0b0:	d1c9      	bne.n	800c046 <__sflush_r+0x32>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0c6      	beq.n	800c046 <__sflush_r+0x32>
 800c0b8:	2b1d      	cmp	r3, #29
 800c0ba:	d001      	beq.n	800c0c0 <__sflush_r+0xac>
 800c0bc:	2b16      	cmp	r3, #22
 800c0be:	d11e      	bne.n	800c0fe <__sflush_r+0xea>
 800c0c0:	602f      	str	r7, [r5, #0]
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e022      	b.n	800c10c <__sflush_r+0xf8>
 800c0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ca:	b21b      	sxth	r3, r3
 800c0cc:	e01b      	b.n	800c106 <__sflush_r+0xf2>
 800c0ce:	690f      	ldr	r7, [r1, #16]
 800c0d0:	2f00      	cmp	r7, #0
 800c0d2:	d0f6      	beq.n	800c0c2 <__sflush_r+0xae>
 800c0d4:	0793      	lsls	r3, r2, #30
 800c0d6:	680e      	ldr	r6, [r1, #0]
 800c0d8:	bf08      	it	eq
 800c0da:	694b      	ldreq	r3, [r1, #20]
 800c0dc:	600f      	str	r7, [r1, #0]
 800c0de:	bf18      	it	ne
 800c0e0:	2300      	movne	r3, #0
 800c0e2:	eba6 0807 	sub.w	r8, r6, r7
 800c0e6:	608b      	str	r3, [r1, #8]
 800c0e8:	f1b8 0f00 	cmp.w	r8, #0
 800c0ec:	dde9      	ble.n	800c0c2 <__sflush_r+0xae>
 800c0ee:	6a21      	ldr	r1, [r4, #32]
 800c0f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0f2:	4643      	mov	r3, r8
 800c0f4:	463a      	mov	r2, r7
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	47b0      	blx	r6
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	dc08      	bgt.n	800c110 <__sflush_r+0xfc>
 800c0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	f04f 30ff 	mov.w	r0, #4294967295
 800c10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c110:	4407      	add	r7, r0
 800c112:	eba8 0800 	sub.w	r8, r8, r0
 800c116:	e7e7      	b.n	800c0e8 <__sflush_r+0xd4>
 800c118:	dfbffffe 	.word	0xdfbffffe

0800c11c <_fflush_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	690b      	ldr	r3, [r1, #16]
 800c120:	4605      	mov	r5, r0
 800c122:	460c      	mov	r4, r1
 800c124:	b913      	cbnz	r3, 800c12c <_fflush_r+0x10>
 800c126:	2500      	movs	r5, #0
 800c128:	4628      	mov	r0, r5
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	b118      	cbz	r0, 800c136 <_fflush_r+0x1a>
 800c12e:	6a03      	ldr	r3, [r0, #32]
 800c130:	b90b      	cbnz	r3, 800c136 <_fflush_r+0x1a>
 800c132:	f7ff f9a5 	bl	800b480 <__sinit>
 800c136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0f3      	beq.n	800c126 <_fflush_r+0xa>
 800c13e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c140:	07d0      	lsls	r0, r2, #31
 800c142:	d404      	bmi.n	800c14e <_fflush_r+0x32>
 800c144:	0599      	lsls	r1, r3, #22
 800c146:	d402      	bmi.n	800c14e <_fflush_r+0x32>
 800c148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c14a:	f7ff fb98 	bl	800b87e <__retarget_lock_acquire_recursive>
 800c14e:	4628      	mov	r0, r5
 800c150:	4621      	mov	r1, r4
 800c152:	f7ff ff5f 	bl	800c014 <__sflush_r>
 800c156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c158:	07da      	lsls	r2, r3, #31
 800c15a:	4605      	mov	r5, r0
 800c15c:	d4e4      	bmi.n	800c128 <_fflush_r+0xc>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	059b      	lsls	r3, r3, #22
 800c162:	d4e1      	bmi.n	800c128 <_fflush_r+0xc>
 800c164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c166:	f7ff fb8b 	bl	800b880 <__retarget_lock_release_recursive>
 800c16a:	e7dd      	b.n	800c128 <_fflush_r+0xc>

0800c16c <__swhatbuf_r>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	460c      	mov	r4, r1
 800c170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c174:	2900      	cmp	r1, #0
 800c176:	b096      	sub	sp, #88	@ 0x58
 800c178:	4615      	mov	r5, r2
 800c17a:	461e      	mov	r6, r3
 800c17c:	da0d      	bge.n	800c19a <__swhatbuf_r+0x2e>
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c184:	f04f 0100 	mov.w	r1, #0
 800c188:	bf14      	ite	ne
 800c18a:	2340      	movne	r3, #64	@ 0x40
 800c18c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c190:	2000      	movs	r0, #0
 800c192:	6031      	str	r1, [r6, #0]
 800c194:	602b      	str	r3, [r5, #0]
 800c196:	b016      	add	sp, #88	@ 0x58
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	466a      	mov	r2, sp
 800c19c:	f000 f87c 	bl	800c298 <_fstat_r>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	dbec      	blt.n	800c17e <__swhatbuf_r+0x12>
 800c1a4:	9901      	ldr	r1, [sp, #4]
 800c1a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1ae:	4259      	negs	r1, r3
 800c1b0:	4159      	adcs	r1, r3
 800c1b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1b6:	e7eb      	b.n	800c190 <__swhatbuf_r+0x24>

0800c1b8 <__smakebuf_r>:
 800c1b8:	898b      	ldrh	r3, [r1, #12]
 800c1ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1bc:	079d      	lsls	r5, r3, #30
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	d507      	bpl.n	800c1d4 <__smakebuf_r+0x1c>
 800c1c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	6163      	str	r3, [r4, #20]
 800c1d0:	b003      	add	sp, #12
 800c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1d4:	ab01      	add	r3, sp, #4
 800c1d6:	466a      	mov	r2, sp
 800c1d8:	f7ff ffc8 	bl	800c16c <__swhatbuf_r>
 800c1dc:	9f00      	ldr	r7, [sp, #0]
 800c1de:	4605      	mov	r5, r0
 800c1e0:	4639      	mov	r1, r7
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f7ff fbba 	bl	800b95c <_malloc_r>
 800c1e8:	b948      	cbnz	r0, 800c1fe <__smakebuf_r+0x46>
 800c1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ee:	059a      	lsls	r2, r3, #22
 800c1f0:	d4ee      	bmi.n	800c1d0 <__smakebuf_r+0x18>
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	f043 0302 	orr.w	r3, r3, #2
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	e7e2      	b.n	800c1c4 <__smakebuf_r+0xc>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	6020      	str	r0, [r4, #0]
 800c202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c20e:	b15b      	cbz	r3, 800c228 <__smakebuf_r+0x70>
 800c210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c214:	4630      	mov	r0, r6
 800c216:	f000 f851 	bl	800c2bc <_isatty_r>
 800c21a:	b128      	cbz	r0, 800c228 <__smakebuf_r+0x70>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	f023 0303 	bic.w	r3, r3, #3
 800c222:	f043 0301 	orr.w	r3, r3, #1
 800c226:	81a3      	strh	r3, [r4, #12]
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	431d      	orrs	r5, r3
 800c22c:	81a5      	strh	r5, [r4, #12]
 800c22e:	e7cf      	b.n	800c1d0 <__smakebuf_r+0x18>

0800c230 <_putc_r>:
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	460d      	mov	r5, r1
 800c234:	4614      	mov	r4, r2
 800c236:	4606      	mov	r6, r0
 800c238:	b118      	cbz	r0, 800c242 <_putc_r+0x12>
 800c23a:	6a03      	ldr	r3, [r0, #32]
 800c23c:	b90b      	cbnz	r3, 800c242 <_putc_r+0x12>
 800c23e:	f7ff f91f 	bl	800b480 <__sinit>
 800c242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c244:	07d8      	lsls	r0, r3, #31
 800c246:	d405      	bmi.n	800c254 <_putc_r+0x24>
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	0599      	lsls	r1, r3, #22
 800c24c:	d402      	bmi.n	800c254 <_putc_r+0x24>
 800c24e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c250:	f7ff fb15 	bl	800b87e <__retarget_lock_acquire_recursive>
 800c254:	68a3      	ldr	r3, [r4, #8]
 800c256:	3b01      	subs	r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	60a3      	str	r3, [r4, #8]
 800c25c:	da05      	bge.n	800c26a <_putc_r+0x3a>
 800c25e:	69a2      	ldr	r2, [r4, #24]
 800c260:	4293      	cmp	r3, r2
 800c262:	db12      	blt.n	800c28a <_putc_r+0x5a>
 800c264:	b2eb      	uxtb	r3, r5
 800c266:	2b0a      	cmp	r3, #10
 800c268:	d00f      	beq.n	800c28a <_putc_r+0x5a>
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	6022      	str	r2, [r4, #0]
 800c270:	701d      	strb	r5, [r3, #0]
 800c272:	b2ed      	uxtb	r5, r5
 800c274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c276:	07da      	lsls	r2, r3, #31
 800c278:	d405      	bmi.n	800c286 <_putc_r+0x56>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	059b      	lsls	r3, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_putc_r+0x56>
 800c280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c282:	f7ff fafd 	bl	800b880 <__retarget_lock_release_recursive>
 800c286:	4628      	mov	r0, r5
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	4629      	mov	r1, r5
 800c28c:	4622      	mov	r2, r4
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff f9e7 	bl	800b662 <__swbuf_r>
 800c294:	4605      	mov	r5, r0
 800c296:	e7ed      	b.n	800c274 <_putc_r+0x44>

0800c298 <_fstat_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d07      	ldr	r5, [pc, #28]	@ (800c2b8 <_fstat_r+0x20>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	602b      	str	r3, [r5, #0]
 800c2a6:	f7f4 ffa0 	bl	80011ea <_fstat>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d102      	bne.n	800c2b4 <_fstat_r+0x1c>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	b103      	cbz	r3, 800c2b4 <_fstat_r+0x1c>
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	bd38      	pop	{r3, r4, r5, pc}
 800c2b6:	bf00      	nop
 800c2b8:	240020bc 	.word	0x240020bc

0800c2bc <_isatty_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4d06      	ldr	r5, [pc, #24]	@ (800c2d8 <_isatty_r+0x1c>)
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	4608      	mov	r0, r1
 800c2c6:	602b      	str	r3, [r5, #0]
 800c2c8:	f7f4 ff9f 	bl	800120a <_isatty>
 800c2cc:	1c43      	adds	r3, r0, #1
 800c2ce:	d102      	bne.n	800c2d6 <_isatty_r+0x1a>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	b103      	cbz	r3, 800c2d6 <_isatty_r+0x1a>
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	bd38      	pop	{r3, r4, r5, pc}
 800c2d8:	240020bc 	.word	0x240020bc

0800c2dc <_sbrk_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d06      	ldr	r5, [pc, #24]	@ (800c2f8 <_sbrk_r+0x1c>)
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	602b      	str	r3, [r5, #0]
 800c2e8:	f7f4 ffa8 	bl	800123c <_sbrk>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_sbrk_r+0x1a>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_sbrk_r+0x1a>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	240020bc 	.word	0x240020bc

0800c2fc <_init>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	bf00      	nop
 800c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c302:	bc08      	pop	{r3}
 800c304:	469e      	mov	lr, r3
 800c306:	4770      	bx	lr

0800c308 <_fini>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	bf00      	nop
 800c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30e:	bc08      	pop	{r3}
 800c310:	469e      	mov	lr, r3
 800c312:	4770      	bx	lr
