/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "i2s.h"
#include "memorymap.h"
#include "spdifrx.h"
#include "tim.h"
#include "usb_device.h"
#include "gpio.h"
#include "fmc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
#include "sdram_init.h"

#include "lcdhandler.h"
#include "keypad.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */



/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define TEST_END 4194304
#define TEST_BEGIN (TEST_END - 500000)
#define BUFFER_SIZE 2112
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
void testRAM(void);
int testFlash(uint8_t addr, uint8_t data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern NAND_HandleTypeDef hnand1;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	//volatile uint16_t buffer[TEST_END - TEST_BEGIN];
	//__IO uint32_t *pointer = (__IO uint32_t*) 0xC4000000;
	//extern FMC_SDRAM_CommandTypeDef command;
	//extern SDRAM_HandleTypeDef hsdram1;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FMC_Init();
  MX_I2S1_Init();
  MX_I2S2_Init();
  MX_SPDIFRX_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_USB_DEVICE_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  flashBoot();

  //NAND_AddressTypedef Address;
  //uint8_t txBuf[BUFFER_SIZE];
  //uint8_t rxBuf[BUFFER_SIZE];
  //int memtest = 1;
  //NAND_IDTypeDef NAND_ID;
//  LCD_Init();
//  int Success1 = HAL_I2C_IsDeviceReady(&hi2c2, (0x3c << 1), 2, 25);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
/*  while (1) {
	  int cols[] = {0, 0, 0, 0, 0};
	  int col, result;
	  uint8_t str[100];
	  int TheFlag = 0;
	  for (col = 0; col < 5; col++) {
		  DriveAllRowPins(0);
		  HAL_Delay(10);
		  cols[col] = ReadOneColPin(col);
		  if (!cols[col]) TheFlag = 1;
	  }
	  if (TheFlag) {
		  result = GetKey();
		  sprintf(str, "%d\r\n", result);
		  CDC_Transmit_HS(str, sizeof(str));
		  HAL_Delay(60);
	  }
  }*/
  __IO uint8_t fart = 0;
  __IO uint32_t status = 0;
  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_COMMAND_OFFSET) = NAND_CMD_WRITE0;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_DATA_OFFSET) = 144;
  	  	*(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_COMMAND_OFFSET) = NAND_CMD_READ1;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_ADDRESS_OFFSET) = 0x00;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_COMMAND_OFFSET) = NAND_CMD_READ2;
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_COMMAND_OFFSET) = NAND_CMD_STATUS;
  	  		  	  status =  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_DATA_OFFSET);
  	  		  if ((status & NAND_ERROR) == NAND_ERROR) {
  	  		  	  		uint8_t str[] = "NAND Error\r\n";
  	  		  	  		CDC_Transmit_HS(str, sizeof(str));
  	  		  	  	  } else if ((status & NAND_READY) == NAND_READY) {
  	  		  	  		uint8_t str[] = "NAND Ready\r\n";
  	  		  	  		CDC_Transmit_HS(str, sizeof(str));
  	  		  	  	  } else {
  	  		  	  		uint8_t str[] = "NAND Busy\r\n";
  	  		  	  		CDC_Transmit_HS(str, sizeof(str));
  	  		  	  	  }
  	  		  	  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_COMMAND_OFFSET) = NAND_CMD_READ2;
  	  		  	  fart =  *(__IO uint8_t*) (FLASH_COMMON_BANK_ADDR | FLASH_DATA_OFFSET);
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  	  HAL_Delay(1000);



	  	  // cribbed from hal_status_read function

	  	  /*
	  	  if ((status & NAND_ERROR) == NAND_ERROR) {
	  		uint8_t str[] = "NAND Error\r\n";
	  		CDC_Transmit_HS(str, sizeof(str));
	  	  } else if ((status & NAND_READY) == NAND_READY) {
	  		uint8_t str[] = "NAND Ready\r\n";
	  		CDC_Transmit_HS(str, sizeof(str));
	  	  } else {
	  		uint8_t str[] = "NAND Busy\r\n";
	  		CDC_Transmit_HS(str, sizeof(str));
	  	  }
	  	  */
	  	  if (fart == 57) {
	  		  uint8_t joker[] = "Yes\r\n";
	  		  CDC_Transmit_HS(joker, sizeof(joker));
	  	  } else {
	  		  uint8_t joker[] = "No\r\n";
	  		  CDC_Transmit_HS(joker, sizeof(joker));
	  	  }
	  	  //HAL_NAND_Write_Page_8b
	  	  //HAL_NAND_Read_Page_8b

	   //uint8_t str[] = "Hello World\r\n";
	   //CDC_Transmit_HS(str, sizeof(str));
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 64;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 35;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
int testFlash(uint8_t addr, uint8_t data) {
	int ret = 1;
	//NAND_AddressTypeDef Address;
	//Address.Page = 0;
	//Address.Plane = 1;
	//Address.Block = 5;
	//HAL_NAND_Read_Page();
	*(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_ADDRESS_OFFSET) = addr;
	*(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = data;
	ret = *(uint8_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET);
	return ret;
}

void testRAM(void) {
		  int memtest = 1;
		  volatile uint16_t buffer[TEST_END - TEST_BEGIN];
		  for (volatile int i = TEST_BEGIN; i < TEST_END; i++) {
			  *(__IO uint16_t*) (0xC0000000 + 4*i) = 0xAAAA; // write to a bunch of memory in the ram
		  }
		  for (volatile int i = TEST_BEGIN; i < TEST_END; i++) {
		  	 buffer[i - TEST_BEGIN] = *(__IO uint32_t*) (0xC0000000 + 4*i); // read from the same memory
		  	 if (buffer[i - TEST_BEGIN] == 0xAAAA) { // check if its good data

		  		   } else {
		  			   memtest = 0;
		  		   }
		  }
		  if(memtest) { //printfs
			  uint8_t str[] = "Total RAM Success\r\n";
			  CDC_Transmit_HS(str, sizeof(str));
		  } else {
			  uint8_t str[] = "Partial RAM Failure\r\n";
			  CDC_Transmit_HS(str, sizeof(str));
		  }
}
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0x80000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
