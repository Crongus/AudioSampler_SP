
Liamsfmctest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  08005d20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  2400002c  08005d4c  0000702c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000190  08005d4c  00007190  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015a36  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027c7  00000000  00000000  0001ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f70  00000000  00000000  0001f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bfb  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000307f8  00000000  00000000  00020dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016e23  00000000  00000000  000515bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139b1c  00000000  00000000  000683de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a1efa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040e0  00000000  00000000  001a1f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001a6020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400002c 	.word	0x2400002c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005cc4 	.word	0x08005cc4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000030 	.word	0x24000030
 80002e8:	08005cc4 	.word	0x08005cc4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fa36 	bl	8000a50 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fe3a 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f834 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f94a 	bl	8000884 <MX_GPIO_Init>
  MX_I2C4_Init();
 80005f0:	f000 f8a4 	bl	800073c <MX_I2C4_Init>
  MX_FMC_Init();
 80005f4:	f000 f8e2 	bl	80007bc <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fc67 	bl	8000ecc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fc64 	bl	8000ecc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fc61 	bl	8000ecc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800060a:	2101      	movs	r1, #1
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fcd3 	bl	8000fb8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <main+0x74>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000618:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <main+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000620:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <main+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <main+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <main+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000632:	4907      	ldr	r1, [pc, #28]	@ (8000650 <main+0x74>)
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fd4f 	bl	80010d8 <BSP_COM_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <main+0x68>
  {
    Error_Handler();
 8000640:	f000 fa32 	bl	8000aa8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  *(__IO uint32_t*) (FLASH_COMMON_BANK_ADDR + FLASH_DATA_OFFSET) = 42;
 8000644:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000648:	222a      	movs	r2, #42	@ 0x2a
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e7fa      	b.n	8000644 <main+0x68>
 800064e:	bf00      	nop
 8000650:	24000048 	.word	0x24000048

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065e:	224c      	movs	r2, #76	@ 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fb02 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fafc 	bl	8005c6c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <SystemClock_Config+0xe0>)
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800067e:	2004      	movs	r0, #4
 8000680:	f001 fbb2 	bl	8001de8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <SystemClock_Config+0xe4>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <SystemClock_Config+0xe4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xe4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <SystemClock_Config+0xe4>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006b8:	2340      	movs	r3, #64	@ 0x40
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d8:	230c      	movs	r3, #12
 80006da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006dc:	2300      	movs	r3, #0
 80006de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fbd7 	bl	8001e9c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f4:	f000 f9d8 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	233f      	movs	r3, #63	@ 0x3f
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2101      	movs	r1, #1
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ffef 	bl	8002700 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000728:	f000 f9be 	bl	8000aa8 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	@ 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58024400 	.word	0x58024400
 8000738:	58024800 	.word	0x58024800

0800073c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_I2C4_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <MX_I2C4_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_I2C4_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_I2C4_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C4_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <MX_I2C4_Init+0x74>)
 8000778:	f001 f9b8 	bl	8001aec <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f991 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_I2C4_Init+0x74>)
 800078a:	f001 fa4b 	bl	8001c24 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f988 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2C4_Init+0x74>)
 800079c:	f001 fa8d 	bl	8001cba <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f97f 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24000058 	.word	0x24000058
 80007b4:	58001c00 	.word	0x58001c00
 80007b8:	10707dbc 	.word	0x10707dbc

080007bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  FMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FMC_NAND_DEVICE;
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_FMC_Init+0xc0>)
 80007de:	4a28      	ldr	r2, [pc, #160]	@ (8000880 <MX_FMC_Init+0xc4>)
 80007e0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FMC_NAND_BANK3;
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_FMC_Init+0xc0>)
 80007e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e8:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FMC_NAND_WAIT_FEATURE_ENABLE;
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <MX_FMC_Init+0xc0>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FMC_NAND_MEM_BUS_WIDTH_8;
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <MX_FMC_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FMC_NAND_ECC_DISABLE;
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_FMC_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_FMC_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_FMC_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_FMC_Init+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <MX_FMC_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	@ 0x24
  hnand1.Config.SpareAreaSize = 0;
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_FMC_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hnand1.Config.BlockSize = 0;
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_FMC_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hnand1.Config.BlockNbr = 0;
 8000820:	4b16      	ldr	r3, [pc, #88]	@ (800087c <MX_FMC_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
  hnand1.Config.PlaneNbr = 0;
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_FMC_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
  hnand1.Config.PlaneSize = 0;
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_FMC_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	639a      	str	r2, [r3, #56]	@ 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_FMC_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800083a:	23fc      	movs	r3, #252	@ 0xfc
 800083c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 800083e:	23fc      	movs	r3, #252	@ 0xfc
 8000840:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8000842:	23fc      	movs	r3, #252	@ 0xfc
 8000844:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8000846:	23fc      	movs	r3, #252	@ 0xfc
 8000848:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 800084a:	23fc      	movs	r3, #252	@ 0xfc
 800084c:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 800084e:	23fc      	movs	r3, #252	@ 0xfc
 8000850:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8000852:	23fc      	movs	r3, #252	@ 0xfc
 8000854:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8000856:	23fc      	movs	r3, #252	@ 0xfc
 8000858:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800085a:	463a      	mov	r2, r7
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_FMC_Init+0xc0>)
 8000864:	f001 fa76 	bl	8001d54 <HAL_NAND_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_FMC_Init+0xb6>
  {
    Error_Handler( );
 800086e:	f000 f91b 	bl	8000aa8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	240000ac 	.word	0x240000ac
 8000880:	52004080 	.word	0x52004080

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b67      	ldr	r3, [pc, #412]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 800089c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008a0:	4a65      	ldr	r2, [pc, #404]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008aa:	4b63      	ldr	r3, [pc, #396]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008be:	4a5e      	ldr	r2, [pc, #376]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008c8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b58      	ldr	r3, [pc, #352]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008dc:	4a56      	ldr	r2, [pc, #344]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008de:	f043 0302 	orr.w	r3, r3, #2
 80008e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008e6:	4b54      	ldr	r3, [pc, #336]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f4:	4b50      	ldr	r3, [pc, #320]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000904:	4b4c      	ldr	r3, [pc, #304]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	4b49      	ldr	r3, [pc, #292]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000914:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000918:	4a47      	ldr	r2, [pc, #284]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000922:	4b45      	ldr	r3, [pc, #276]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000924:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000930:	4b41      	ldr	r3, [pc, #260]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000932:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000936:	4a40      	ldr	r2, [pc, #256]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000940:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000942:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000954:	4a38      	ldr	r2, [pc, #224]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800095a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <MX_GPIO_Init+0x1b4>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000972:	4832      	ldr	r0, [pc, #200]	@ (8000a3c <MX_GPIO_Init+0x1b8>)
 8000974:	f001 f8a0 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800097e:	4830      	ldr	r0, [pc, #192]	@ (8000a40 <MX_GPIO_Init+0x1bc>)
 8000980:	f001 f89a 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	482e      	ldr	r0, [pc, #184]	@ (8000a44 <MX_GPIO_Init+0x1c0>)
 800098a:	f001 f895 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800098e:	230d      	movs	r3, #13
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000996:	2301      	movs	r3, #1
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0x1c4>)
 80009a2:	f000 fed9 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4822      	ldr	r0, [pc, #136]	@ (8000a44 <MX_GPIO_Init+0x1c0>)
 80009ba:	f000 fecd 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_GPIO_Init+0x1c8>)
 80009d4:	f000 fec0 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80009d8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_GPIO_Init+0x1b8>)
 80009f2:	f000 feb1 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_GPIO_Init+0x1bc>)
 8000a10:	f000 fea2 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_GPIO_Init+0x1c0>)
 8000a2c:	f000 fe94 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3730      	adds	r7, #48	@ 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58021000 	.word	0x58021000
 8000a40:	58021800 	.word	0x58021800
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58020800 	.word	0x58020800
 8000a4c:	58021400 	.word	0x58021400

08000a50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a62:	f000 fd9d 	bl	80015a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a72:	231f      	movs	r3, #31
 8000a74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a76:	2387      	movs	r3, #135	@ 0x87
 8000a78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a86:	2301      	movs	r3, #1
 8000a88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a92:	463b      	mov	r3, r7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fdbb 	bl	8001610 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a9a:	2004      	movs	r0, #4
 8000a9c:	f000 fd98 	bl	80015d0 <HAL_MPU_Enable>

}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <HAL_MspInit+0x30>)
 8000abc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x30>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ba      	sub	sp, #232	@ 0xe8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	22c0      	movs	r2, #192	@ 0xc0
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 f8af 	bl	8005c6c <memset>
  if(hi2c->Instance==I2C4)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a27      	ldr	r2, [pc, #156]	@ (8000bb0 <HAL_I2C_MspInit+0xc8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d146      	bne.n	8000ba6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000b18:	f04f 0210 	mov.w	r2, #16
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 f972 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b3a:	f7ff ffb5 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b54:	f003 0320 	and.w	r3, r3, #32
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b5c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <HAL_I2C_MspInit+0xd0>)
 8000b84:	f000 fde8 	bl	8001758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b8e:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_I2C_MspInit+0xcc>)
 8000b9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	37e8      	adds	r7, #232	@ 0xe8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	58001c00 	.word	0x58001c00
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58021400 	.word	0x58021400

08000bbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0b8      	sub	sp, #224	@ 0xe0
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000bc2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <HAL_FMC_MspInit+0x104>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d16d      	bne.n	8000cb6 <HAL_FMC_MspInit+0xfa>
    return;
  }
  FMC_Initialized = 1;
 8000bda:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <HAL_FMC_MspInit+0x104>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	22c0      	movs	r2, #192	@ 0xc0
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f005 f83f 	bl	8005c6c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000bee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4618      	mov	r0, r3
 8000c04:	f002 f908 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_FMC_MspInit+0x56>
    {
      Error_Handler();
 8000c0e:	f7ff ff4b 	bl	8000aa8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c12:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc4 <HAL_FMC_MspInit+0x108>)
 8000c14:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c18:	4a2a      	ldr	r2, [pc, #168]	@ (8000cc4 <HAL_FMC_MspInit+0x108>)
 8000c1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c1e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000c22:	4b28      	ldr	r3, [pc, #160]	@ (8000cc4 <HAL_FMC_MspInit+0x108>)
 8000c24:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c30:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8000c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c50:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c54:	4619      	mov	r1, r3
 8000c56:	481c      	ldr	r0, [pc, #112]	@ (8000cc8 <HAL_FMC_MspInit+0x10c>)
 8000c58:	f000 fd7e 	bl	8001758 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000c5c:	f64d 0333 	movw	r3, #55347	@ 0xd833
 8000c60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c76:	230c      	movs	r3, #12
 8000c78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c80:	4619      	mov	r1, r3
 8000c82:	4812      	ldr	r0, [pc, #72]	@ (8000ccc <HAL_FMC_MspInit+0x110>)
 8000c84:	f000 fd68 	bl	8001758 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000c88:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000ca2:	2309      	movs	r3, #9
 8000ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cac:	4619      	mov	r1, r3
 8000cae:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <HAL_FMC_MspInit+0x114>)
 8000cb0:	f000 fd52 	bl	8001758 <HAL_GPIO_Init>
 8000cb4:	e000      	b.n	8000cb8 <HAL_FMC_MspInit+0xfc>
    return;
 8000cb6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cb8:	37e0      	adds	r7, #224	@ 0xe0
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	240000ec 	.word	0x240000ec
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58021000 	.word	0x58021000
 8000ccc:	58020c00 	.word	0x58020c00
 8000cd0:	58020800 	.word	0x58020800

08000cd4 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FMC_MspInit();
 8000cdc:	f7ff ff6e 	bl	8000bbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 faff 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f9a6 	bl	800109c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d58:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <SystemInit+0xd0>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <SystemInit+0xd0>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d68:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <SystemInit+0xd4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d807      	bhi.n	8000d84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d74:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <SystemInit+0xd4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 030f 	bic.w	r3, r3, #15
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <SystemInit+0xd4>)
 8000d7e:	f043 0303 	orr.w	r3, r3, #3
 8000d82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <SystemInit+0xd8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a28      	ldr	r2, [pc, #160]	@ (8000e2c <SystemInit+0xd8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d90:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <SystemInit+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d96:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <SystemInit+0xd8>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4924      	ldr	r1, [pc, #144]	@ (8000e2c <SystemInit+0xd8>)
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <SystemInit+0xdc>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <SystemInit+0xd4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <SystemInit+0xd4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 030f 	bic.w	r3, r3, #15
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <SystemInit+0xd4>)
 8000db8:	f043 0303 	orr.w	r3, r3, #3
 8000dbc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <SystemInit+0xd8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <SystemInit+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <SystemInit+0xd8>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	@ (8000e34 <SystemInit+0xe0>)
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <SystemInit+0xd8>)
 8000dd8:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <SystemInit+0xe4>)
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <SystemInit+0xd8>)
 8000dde:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <SystemInit+0xe8>)
 8000de0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000de2:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <SystemInit+0xd8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <SystemInit+0xd8>)
 8000dea:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <SystemInit+0xe8>)
 8000dec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <SystemInit+0xd8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <SystemInit+0xd8>)
 8000df6:	4a11      	ldr	r2, [pc, #68]	@ (8000e3c <SystemInit+0xe8>)
 8000df8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <SystemInit+0xd8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <SystemInit+0xd8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <SystemInit+0xd8>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <SystemInit+0xd8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <SystemInit+0xec>)
 8000e14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	52002000 	.word	0x52002000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e34:	02020200 	.word	0x02020200
 8000e38:	01ff0000 	.word	0x01ff0000
 8000e3c:	01010280 	.word	0x01010280
 8000e40:	52004000 	.word	0x52004000

08000e44 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000e48:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <ExitRun0Mode+0x2c>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <ExitRun0Mode+0x2c>)
 8000e4e:	f023 0302 	bic.w	r3, r3, #2
 8000e52:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e54:	bf00      	nop
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <ExitRun0Mode+0x2c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f9      	beq.n	8000e56 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	58024800 	.word	0x58024800

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000eb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e78:	f7ff ffe4 	bl	8000e44 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e7c:	f7ff ff6a 	bl	8000d54 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f004 fee9 	bl	8005c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fb97 	bl	80005dc <main>
  bx  lr
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000eb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000eb8:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000ebc:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 8000ec0:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000ec4:	24000190 	.word	0x24000190

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	@ 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d009      	beq.n	8000ef4 <BSP_LED_Init+0x28>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d006      	beq.n	8000ef4 <BSP_LED_Init+0x28>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d003      	beq.n	8000ef4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000eec:	f06f 0301 	mvn.w	r3, #1
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef2:	e055      	b.n	8000fa0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000efa:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	e021      	b.n	8000f5e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10f      	bne.n	8000f40 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f26:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	e00e      	b.n	8000f5e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f46:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f50:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <BSP_LED_Init+0xe0>)
 8000f52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <BSP_LED_Init+0xe4>)
 8000f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f66:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4a0f      	ldr	r2, [pc, #60]	@ (8000fb4 <BSP_LED_Init+0xe8>)
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	f107 0218 	add.w	r2, r7, #24
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fbe8 	bl	8001758 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <BSP_LED_Init+0xe8>)
 8000f8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <BSP_LED_Init+0xe4>)
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f000 fd8c 	bl	8001ab8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	08005cec 	.word	0x08005cec
 8000fb4:	2400000c 	.word	0x2400000c

08000fb8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <BSP_PB_Init+0xcc>)
 8000fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fce:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <BSP_PB_Init+0xcc>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <BSP_PB_Init+0xcc>)
 8000fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000fe6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4a21      	ldr	r2, [pc, #132]	@ (8001088 <BSP_PB_Init+0xd0>)
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fba3 	bl	8001758 <HAL_GPIO_Init>
 8001012:	e031      	b.n	8001078 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001014:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001018:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4a1a      	ldr	r2, [pc, #104]	@ (8001088 <BSP_PB_Init+0xd0>)
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fb95 	bl	8001758 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4a16      	ldr	r2, [pc, #88]	@ (800108c <BSP_PB_Init+0xd4>)
 8001034:	441a      	add	r2, r3
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4915      	ldr	r1, [pc, #84]	@ (8001090 <BSP_PB_Init+0xd8>)
 800103a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f000 fb44 	bl	80016ce <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4a10      	ldr	r2, [pc, #64]	@ (800108c <BSP_PB_Init+0xd4>)
 800104c:	1898      	adds	r0, r3, r2
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <BSP_PB_Init+0xdc>)
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	461a      	mov	r2, r3
 8001058:	2100      	movs	r1, #0
 800105a:	f000 fb19 	bl	8001690 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800105e:	2028      	movs	r0, #40	@ 0x28
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <BSP_PB_Init+0xe0>)
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	f000 fa63 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001070:	2328      	movs	r3, #40	@ 0x28
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fa79 	bl	800156a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	58024400 	.word	0x58024400
 8001088:	24000018 	.word	0x24000018
 800108c:	240000f0 	.word	0x240000f0
 8001090:	08005cf4 	.word	0x08005cf4
 8001094:	2400001c 	.word	0x2400001c
 8001098:	24000020 	.word	0x24000020

0800109c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <BSP_PB_IRQHandler+0x20>)
 80010ac:	4413      	add	r3, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fb22 	bl	80016f8 <HAL_EXTI_IRQHandler>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	240000f0 	.word	0x240000f0

080010c0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010ee:	f06f 0301 	mvn.w	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e018      	b.n	8001128 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2294      	movs	r2, #148	@ 0x94
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <BSP_COM_Init+0x5c>)
 8001100:	4413      	add	r3, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f852 	bl	80011ac <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2294      	movs	r2, #148	@ 0x94
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <BSP_COM_Init+0x5c>)
 8001112:	4413      	add	r3, r2
 8001114:	6839      	ldr	r1, [r7, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f80e 	bl	8001138 <MX_USART3_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001122:	f06f 0303 	mvn.w	r3, #3
 8001126:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001128:	68fb      	ldr	r3, [r7, #12]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240000f8 	.word	0x240000f8

08001138 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_USART3_Init+0x60>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	220c      	movs	r2, #12
 8001156:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	895b      	ldrh	r3, [r3, #10]
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	891b      	ldrh	r3, [r3, #8]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	899b      	ldrh	r3, [r3, #12]
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001184:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f003 fc26 	bl	80049d8 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000008 	.word	0x24000008

0800119c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff8d 	bl	80010c0 <BSP_PB_Callback>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <COM1_MspInit+0xa8>)
 80011b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011ba:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <COM1_MspInit+0xa8>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <COM1_MspInit+0xa8>)
 80011c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <COM1_MspInit+0xa8>)
 80011d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <COM1_MspInit+0xa8>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <COM1_MspInit+0xa8>)
 80011e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <COM1_MspInit+0xa8>)
 80011f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <COM1_MspInit+0xa8>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011fc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <COM1_MspInit+0xa8>)
 8001202:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800120e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001212:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001220:	2307      	movs	r3, #7
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	480b      	ldr	r0, [pc, #44]	@ (8001258 <COM1_MspInit+0xac>)
 800122c:	f000 fa94 	bl	8001758 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001230:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001234:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800123a:	2307      	movs	r3, #7
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <COM1_MspInit+0xac>)
 8001246:	f000 fa87 	bl	8001758 <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	@ 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	58024400 	.word	0x58024400
 8001258:	58020c00 	.word	0x58020c00

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001262:	2003      	movs	r0, #3
 8001264:	f000 f95c 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001268:	f001 fc00 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_Init+0x68>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	4913      	ldr	r1, [pc, #76]	@ (80012c8 <HAL_Init+0x6c>)
 800127a:	5ccb      	ldrb	r3, [r1, r3]
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_Init+0x68>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	4a0e      	ldr	r2, [pc, #56]	@ (80012c8 <HAL_Init+0x6c>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	f003 031f 	and.w	r3, r3, #31
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_Init+0x70>)
 800129e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012a0:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <HAL_Init+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f814 	bl	80012d4 <HAL_InitTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e002      	b.n	80012bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b6:	f7ff fbfd 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	58024400 	.word	0x58024400
 80012c8:	08005cdc 	.word	0x08005cdc
 80012cc:	24000004 	.word	0x24000004
 80012d0:	24000000 	.word	0x24000000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_InitTick+0x60>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e021      	b.n	800132c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <HAL_InitTick+0x64>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_InitTick+0x60>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f941 	bl	8001586 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f90b 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x68>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000028 	.word	0x24000028
 8001338:	24000000 	.word	0x24000000
 800133c:	24000024 	.word	0x24000024

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	24000028 	.word	0x24000028
 8001364:	2400018c 	.word	0x2400018c

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2400018c 	.word	0x2400018c

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <__NVIC_SetPriorityGrouping+0x40>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00
 80013c4:	05fa0000 	.word	0x05fa0000

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	@ (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	@ (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	@ (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff40 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff90 	bl	8001474 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5f 	bl	8001420 <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001574:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff33 	bl	80013e4 <__NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffa4 	bl	80014dc <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015a4:	f3bf 8f5f 	dmb	sy
}
 80015a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015aa:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <HAL_MPU_Disable+0x28>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_MPU_Disable+0x28>)
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_MPU_Disable+0x2c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00
 80015cc:	e000ed90 	.word	0xe000ed90

080015d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_MPU_Enable+0x38>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_MPU_Enable+0x3c>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_MPU_Enable+0x3c>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed90 	.word	0xe000ed90
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	785a      	ldrb	r2, [r3, #1]
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_MPU_ConfigRegion+0x7c>)
 800161e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_MPU_ConfigRegion+0x7c>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_MPU_ConfigRegion+0x7c>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800162c:	4a17      	ldr	r2, [pc, #92]	@ (800168c <HAL_MPU_ConfigRegion+0x7c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7b1b      	ldrb	r3, [r3, #12]
 8001638:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7adb      	ldrb	r3, [r3, #11]
 800163e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a9b      	ldrb	r3, [r3, #10]
 8001646:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7b5b      	ldrb	r3, [r3, #13]
 800164e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001650:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7b9b      	ldrb	r3, [r3, #14]
 8001656:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7bdb      	ldrb	r3, [r3, #15]
 800165e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a5b      	ldrb	r3, [r3, #9]
 8001666:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a1b      	ldrb	r3, [r3, #8]
 800166e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001670:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800167a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800167c:	6113      	str	r3, [r2, #16]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed90 	.word	0xe000ed90

08001690 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	460b      	mov	r3, r1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00a      	b.n	80016c2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
      break;
 80016b8:	e002      	b.n	80016c0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
      break;
 80016be:	bf00      	nop
  }

  return status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e003      	b.n	80016ea <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016e8:	2300      	movs	r3, #0
  }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	0c1b      	lsrs	r3, r3, #16
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	2201      	movs	r2, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	011a      	lsls	r2, r3, #4
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_EXTI_IRQHandler+0x5c>)
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4798      	blx	r3
    }
  }
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	58000088 	.word	0x58000088

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001766:	4b89      	ldr	r3, [pc, #548]	@ (800198c <HAL_GPIO_Init+0x234>)
 8001768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800176a:	e194      	b.n	8001a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8186 	beq.w	8001a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <HAL_GPIO_Init+0x44>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b03      	cmp	r3, #3
 8001808:	d017      	beq.n	800183a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d123      	bne.n	800188e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	69b9      	ldr	r1, [r7, #24]
 800188a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0203 	and.w	r2, r3, #3
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80e0 	beq.w	8001a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_GPIO_Init+0x238>)
 80018d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001990 <HAL_GPIO_Init+0x238>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_GPIO_Init+0x238>)
 80018e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ee:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <HAL_GPIO_Init+0x23c>)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a20      	ldr	r2, [pc, #128]	@ (8001998 <HAL_GPIO_Init+0x240>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d052      	beq.n	80019c0 <HAL_GPIO_Init+0x268>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1f      	ldr	r2, [pc, #124]	@ (800199c <HAL_GPIO_Init+0x244>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d031      	beq.n	8001986 <HAL_GPIO_Init+0x22e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a1e      	ldr	r2, [pc, #120]	@ (80019a0 <HAL_GPIO_Init+0x248>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d02b      	beq.n	8001982 <HAL_GPIO_Init+0x22a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_GPIO_Init+0x24c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d025      	beq.n	800197e <HAL_GPIO_Init+0x226>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <HAL_GPIO_Init+0x250>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01f      	beq.n	800197a <HAL_GPIO_Init+0x222>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_GPIO_Init+0x254>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x21e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_GPIO_Init+0x258>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a19      	ldr	r2, [pc, #100]	@ (80019b4 <HAL_GPIO_Init+0x25c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <HAL_GPIO_Init+0x260>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_GPIO_Init+0x264>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x20e>
 8001962:	2309      	movs	r3, #9
 8001964:	e02d      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 8001966:	230a      	movs	r3, #10
 8001968:	e02b      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 800196a:	2308      	movs	r3, #8
 800196c:	e029      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 800196e:	2307      	movs	r3, #7
 8001970:	e027      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 8001972:	2306      	movs	r3, #6
 8001974:	e025      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 8001976:	2305      	movs	r3, #5
 8001978:	e023      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 800197a:	2304      	movs	r3, #4
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 800197e:	2303      	movs	r3, #3
 8001980:	e01f      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 8001982:	2302      	movs	r3, #2
 8001984:	e01d      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 8001986:	2301      	movs	r3, #1
 8001988:	e01b      	b.n	80019c2 <HAL_GPIO_Init+0x26a>
 800198a:	bf00      	nop
 800198c:	58000080 	.word	0x58000080
 8001990:	58024400 	.word	0x58024400
 8001994:	58000400 	.word	0x58000400
 8001998:	58020000 	.word	0x58020000
 800199c:	58020400 	.word	0x58020400
 80019a0:	58020800 	.word	0x58020800
 80019a4:	58020c00 	.word	0x58020c00
 80019a8:	58021000 	.word	0x58021000
 80019ac:	58021400 	.word	0x58021400
 80019b0:	58021800 	.word	0x58021800
 80019b4:	58021c00 	.word	0x58021c00
 80019b8:	58022000 	.word	0x58022000
 80019bc:	58022400 	.word	0x58022400
 80019c0:	2300      	movs	r3, #0
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	f002 0203 	and.w	r2, r2, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4093      	lsls	r3, r2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d2:	4938      	ldr	r1, [pc, #224]	@ (8001ab4 <HAL_GPIO_Init+0x35c>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f ae63 	bne.w	800176c <HAL_GPIO_Init+0x14>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3724      	adds	r7, #36	@ 0x24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	58000400 	.word	0x58000400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e08b      	b.n	8001c16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7fe ffe8 	bl	8000ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2224      	movs	r2, #36	@ 0x24
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d108      	bne.n	8001b8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	e007      	b.n	8001b9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_I2C_Init+0x134>)
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69d9      	ldr	r1, [r3, #28]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1a      	ldr	r2, [r3, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	02008000 	.word	0x02008000

08001c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d138      	bne.n	8001cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e032      	b.n	8001cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	@ 0x24
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6819      	ldr	r1, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d139      	bne.n	8001d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e033      	b.n	8001d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2224      	movs	r2, #36	@ 0x24
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e037      	b.n	8001dda <HAL_NAND_Init+0x86>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7fe ffa8 	bl	8000cd4 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f003 ff08 	bl	8005ba4 <FMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	f003 ff2a 	bl	8005bf8 <FMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	461a      	mov	r2, r3
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f003 ff3f 	bl	8005c32 <FMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0204 	orr.w	r2, r2, #4
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <HAL_NAND_Init+0x90>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a06      	ldr	r2, [pc, #24]	@ (8001de4 <HAL_NAND_Init+0x90>)
 8001dca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001dce:	6013      	str	r3, [r2, #0]
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	52004000 	.word	0x52004000

08001de8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d00a      	beq.n	8001e12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dfc:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e040      	b.n	8001e90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e03e      	b.n	8001e90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e12:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001e1a:	491f      	ldr	r1, [pc, #124]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e22:	f7ff faa1 	bl	8001368 <HAL_GetTick>
 8001e26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e28:	e009      	b.n	8001e3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e2a:	f7ff fa9d 	bl	8001368 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e38:	d901      	bls.n	8001e3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e028      	b.n	8001e90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b1e      	cmp	r3, #30
 8001e50:	d008      	beq.n	8001e64 <HAL_PWREx_ConfigSupply+0x7c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e56:	d005      	beq.n	8001e64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b1d      	cmp	r3, #29
 8001e5c:	d002      	beq.n	8001e64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b2d      	cmp	r3, #45	@ 0x2d
 8001e62:	d114      	bne.n	8001e8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001e64:	f7ff fa80 	bl	8001368 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e6a:	e009      	b.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e6c:	f7ff fa7c 	bl	8001368 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e7a:	d901      	bls.n	8001e80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8c:	d1ee      	bne.n	8001e6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024800 	.word	0x58024800

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	@ 0x30
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f000 bc1f 	b.w	80026ee <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80b3 	beq.w	8002024 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b95      	ldr	r3, [pc, #596]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec8:	4b92      	ldr	r3, [pc, #584]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d007      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x48>
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	d112      	bne.n	8001f00 <HAL_RCC_OscConfig+0x64>
 8001eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b8b      	ldr	r3, [pc, #556]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 8098 	beq.w	8002022 <HAL_RCC_OscConfig+0x186>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 8093 	bne.w	8002022 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e3f6      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x7c>
 8001f0a:	4b82      	ldr	r3, [pc, #520]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a81      	ldr	r2, [pc, #516]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e058      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d112      	bne.n	8001f46 <HAL_RCC_OscConfig+0xaa>
 8001f20:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7b      	ldr	r2, [pc, #492]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b79      	ldr	r3, [pc, #484]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a78      	ldr	r2, [pc, #480]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f32:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b76      	ldr	r3, [pc, #472]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a75      	ldr	r2, [pc, #468]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e041      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0xda>
 8001f50:	4b70      	ldr	r3, [pc, #448]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6f      	ldr	r2, [pc, #444]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a6c      	ldr	r2, [pc, #432]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b6a      	ldr	r3, [pc, #424]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	e029      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
 8001f80:	4b64      	ldr	r3, [pc, #400]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a63      	ldr	r2, [pc, #396]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a60      	ldr	r2, [pc, #384]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b5e      	ldr	r3, [pc, #376]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e011      	b.n	8001fca <HAL_RCC_OscConfig+0x12e>
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5a      	ldr	r2, [pc, #360]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b58      	ldr	r3, [pc, #352]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b55      	ldr	r3, [pc, #340]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a54      	ldr	r2, [pc, #336]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d013      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f9c9 	bl	8001368 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fda:	f7ff f9c5 	bl	8001368 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b64      	cmp	r3, #100	@ 0x64
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e380      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fec:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x13e>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f9b5 	bl	8001368 <HAL_GetTick>
 8001ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002002:	f7ff f9b1 	bl	8001368 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	@ 0x64
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e36c      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002014:	4b3f      	ldr	r3, [pc, #252]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x166>
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 808c 	beq.w	800214a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800203a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800203c:	4b35      	ldr	r3, [pc, #212]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_RCC_OscConfig+0x1bc>
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b18      	cmp	r3, #24
 800204c:	d137      	bne.n	80020be <HAL_RCC_OscConfig+0x222>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d132      	bne.n	80020be <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x1d4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e33e      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0219 	bic.w	r2, r3, #25
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4925      	ldr	r1, [pc, #148]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7ff f971 	bl	8001368 <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff f96d 	bl	8001368 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e328      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800209c:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	4917      	ldr	r1, [pc, #92]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020bc:	e045      	b.n	800214a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020c6:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0219 	bic.w	r2, r3, #25
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4910      	ldr	r1, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f946 	bl	8001368 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e0:	f7ff f942 	bl	8001368 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e2fd      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	4901      	ldr	r1, [pc, #4]	@ (8002114 <HAL_RCC_OscConfig+0x278>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
 8002112:	e01a      	b.n	800214a <HAL_RCC_OscConfig+0x2ae>
 8002114:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a96      	ldr	r2, [pc, #600]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f920 	bl	8001368 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff f91c 	bl	8001368 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e2d7      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800213e:	4b8e      	ldr	r3, [pc, #568]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06a      	beq.n	800222c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800215e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002160:	4b85      	ldr	r3, [pc, #532]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d007      	beq.n	800217c <HAL_RCC_OscConfig+0x2e0>
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b18      	cmp	r3, #24
 8002170:	d11b      	bne.n	80021aa <HAL_RCC_OscConfig+0x30e>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d116      	bne.n	80021aa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800217c:	4b7e      	ldr	r3, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x2f8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b80      	cmp	r3, #128	@ 0x80
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e2ac      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002194:	4b78      	ldr	r3, [pc, #480]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4975      	ldr	r1, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021a8:	e040      	b.n	800222c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d023      	beq.n	80021fa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021b2:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f8d3 	bl	8001368 <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021c6:	f7ff f8cf 	bl	8001368 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e28a      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d8:	4b67      	ldr	r3, [pc, #412]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	4961      	ldr	r1, [pc, #388]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
 80021f8:	e018      	b.n	800222c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff f8af 	bl	8001368 <HAL_GetTick>
 800220a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800220e:	f7ff f8ab 	bl	8001368 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e266      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002220:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d036      	beq.n	80022a6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d019      	beq.n	8002274 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002240:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	4a4c      	ldr	r2, [pc, #304]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff f88c 	bl	8001368 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002254:	f7ff f888 	bl	8001368 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e243      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x3b8>
 8002272:	e018      	b.n	80022a6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002278:	4a3f      	ldr	r2, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7ff f872 	bl	8001368 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff f86e 	bl	8001368 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e229      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d036      	beq.n	8002320 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2e      	ldr	r2, [pc, #184]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f84f 	bl	8001368 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ce:	f7ff f84b 	bl	8001368 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e206      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022e0:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x432>
 80022ec:	e018      	b.n	8002320 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a21      	ldr	r2, [pc, #132]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022fa:	f7ff f835 	bl	8001368 <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002302:	f7ff f831 	bl	8001368 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1ec      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80af 	beq.w	800248c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800232e:	4b13      	ldr	r3, [pc, #76]	@ (800237c <HAL_RCC_OscConfig+0x4e0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <HAL_RCC_OscConfig+0x4e0>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800233a:	f7ff f815 	bl	8001368 <HAL_GetTick>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7ff f811 	bl	8001368 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	@ 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1cc      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_OscConfig+0x4e0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x4e4>
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	4a02      	ldr	r2, [pc, #8]	@ (8002378 <HAL_RCC_OscConfig+0x4dc>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	@ 0x70
 8002374:	e05b      	b.n	800242e <HAL_RCC_OscConfig+0x592>
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400
 800237c:	58024800 	.word	0x58024800
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x512>
 8002388:	4b9d      	ldr	r3, [pc, #628]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a9c      	ldr	r2, [pc, #624]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
 8002394:	4b9a      	ldr	r3, [pc, #616]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	4a99      	ldr	r2, [pc, #612]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800239a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800239e:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a0:	4b97      	ldr	r3, [pc, #604]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a96      	ldr	r2, [pc, #600]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	e03f      	b.n	800242e <HAL_RCC_OscConfig+0x592>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x540>
 80023b6:	4b92      	ldr	r3, [pc, #584]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a91      	ldr	r2, [pc, #580]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a8e      	ldr	r2, [pc, #568]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d2:	4a8b      	ldr	r2, [pc, #556]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023da:	e028      	b.n	800242e <HAL_RCC_OscConfig+0x592>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b85      	cmp	r3, #133	@ 0x85
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x56e>
 80023e4:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a85      	ldr	r2, [pc, #532]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f0:	4b83      	ldr	r3, [pc, #524]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	4a82      	ldr	r2, [pc, #520]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fc:	4b80      	ldr	r3, [pc, #512]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	4a7f      	ldr	r2, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	@ 0x70
 8002408:	e011      	b.n	800242e <HAL_RCC_OscConfig+0x592>
 800240a:	4b7d      	ldr	r3, [pc, #500]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	4a7c      	ldr	r2, [pc, #496]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	@ 0x70
 8002416:	4b7a      	ldr	r3, [pc, #488]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241a:	4a79      	ldr	r2, [pc, #484]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70
 8002422:	4b77      	ldr	r3, [pc, #476]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	4a76      	ldr	r2, [pc, #472]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe ff97 	bl	8001368 <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe ff93 	bl	8001368 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e14c      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x5a2>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe ff81 	bl	8001368 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe ff7d 	bl	8001368 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e136      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002480:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 812b 	beq.w	80026ec <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002496:	4b5a      	ldr	r3, [pc, #360]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800249e:	2b18      	cmp	r3, #24
 80024a0:	f000 80bb 	beq.w	800261a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	f040 8095 	bne.w	80025d8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b54      	ldr	r3, [pc, #336]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a53      	ldr	r2, [pc, #332]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80024b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe ff55 	bl	8001368 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe ff51 	bl	8001368 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e10c      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80024e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024e4:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_OscConfig+0x768>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	430a      	orrs	r2, r1
 80024f4:	4942      	ldr	r1, [pc, #264]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	3b01      	subs	r3, #1
 8002500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002508:	3b01      	subs	r3, #1
 800250a:	025b      	lsls	r3, r3, #9
 800250c:	b29b      	uxth	r3, r3
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002514:	3b01      	subs	r3, #1
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002522:	3b01      	subs	r3, #1
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800252a:	4935      	ldr	r1, [pc, #212]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800252c:	4313      	orrs	r3, r2
 800252e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002530:	4b33      	ldr	r3, [pc, #204]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	4a32      	ldr	r2, [pc, #200]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800253c:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800253e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_OscConfig+0x76c>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002548:	00d2      	lsls	r2, r2, #3
 800254a:	492d      	ldr	r1, [pc, #180]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800254c:	4313      	orrs	r3, r2
 800254e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	f023 020c 	bic.w	r2, r3, #12
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4928      	ldr	r1, [pc, #160]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800255e:	4313      	orrs	r3, r2
 8002560:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002562:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	f023 0202 	bic.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4924      	ldr	r1, [pc, #144]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002570:	4313      	orrs	r3, r2
 8002572:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002574:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002580:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	4a1e      	ldr	r2, [pc, #120]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800258c:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	4a1b      	ldr	r2, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 8002592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a15      	ldr	r2, [pc, #84]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80025aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe feda 	bl	8001368 <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fed6 	bl	8001368 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e091      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x71c>
 80025d6:	e089      	b.n	80026ec <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a08      	ldr	r2, [pc, #32]	@ (8002600 <HAL_RCC_OscConfig+0x764>)
 80025de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fec0 	bl	8001368 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ea:	e00f      	b.n	800260c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe febc 	bl	8001368 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d908      	bls.n	800260c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e077      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	fffffc0c 	.word	0xfffffc0c
 8002608:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800260c:	4b3a      	ldr	r3, [pc, #232]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e9      	bne.n	80025ec <HAL_RCC_OscConfig+0x750>
 8002618:	e068      	b.n	80026ec <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800261a:	4b37      	ldr	r3, [pc, #220]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002620:	4b35      	ldr	r3, [pc, #212]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	2b01      	cmp	r3, #1
 800262c:	d031      	beq.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d12a      	bne.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d122      	bne.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d11a      	bne.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d111      	bne.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d108      	bne.n	8002692 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0e1b      	lsrs	r3, r3, #24
 8002684:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e02b      	b.n	80026ee <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026a0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d01f      	beq.n	80026ec <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	4a11      	ldr	r2, [pc, #68]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b8:	f7fe fe56 	bl	8001368 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026be:	bf00      	nop
 80026c0:	f7fe fe52 	bl	8001368 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d0f9      	beq.n	80026c0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_RCC_OscConfig+0x860>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	4907      	ldr	r1, [pc, #28]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <HAL_RCC_OscConfig+0x85c>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3730      	adds	r7, #48	@ 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	58024400 	.word	0x58024400
 80026fc:	ffff0007 	.word	0xffff0007

08002700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e19c      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b8a      	ldr	r3, [pc, #552]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b87      	ldr	r3, [pc, #540]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 020f 	bic.w	r2, r3, #15
 800272a:	4985      	ldr	r1, [pc, #532]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b83      	ldr	r3, [pc, #524]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e184      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	4b7b      	ldr	r3, [pc, #492]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800275c:	429a      	cmp	r2, r3
 800275e:	d908      	bls.n	8002772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002760:	4b78      	ldr	r3, [pc, #480]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	4975      	ldr	r1, [pc, #468]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800276e:	4313      	orrs	r3, r2
 8002770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	4b70      	ldr	r3, [pc, #448]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800278a:	429a      	cmp	r2, r3
 800278c:	d908      	bls.n	80027a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800278e:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	496a      	ldr	r1, [pc, #424]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800279c:	4313      	orrs	r3, r2
 800279e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	4b64      	ldr	r3, [pc, #400]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d908      	bls.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027bc:	4b61      	ldr	r3, [pc, #388]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	495e      	ldr	r1, [pc, #376]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027ea:	4b56      	ldr	r3, [pc, #344]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4953      	ldr	r1, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b4d      	ldr	r3, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	429a      	cmp	r2, r3
 8002816:	d908      	bls.n	800282a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b4a      	ldr	r3, [pc, #296]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f023 020f 	bic.w	r2, r3, #15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4947      	ldr	r1, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002826:	4313      	orrs	r3, r2
 8002828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d055      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002836:	4b43      	ldr	r3, [pc, #268]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4940      	ldr	r1, [pc, #256]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002844:	4313      	orrs	r3, r2
 8002846:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d107      	bne.n	8002860 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002850:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d121      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0f6      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002868:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d115      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0ea      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002880:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0de      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002890:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0d6      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a0:	4b28      	ldr	r3, [pc, #160]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f023 0207 	bic.w	r2, r3, #7
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4925      	ldr	r1, [pc, #148]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b2:	f7fe fd59 	bl	8001368 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ba:	f7fe fd55 	bl	8001368 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0be      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	429a      	cmp	r2, r3
 80028e0:	d1eb      	bne.n	80028ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d208      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f023 020f 	bic.w	r2, r3, #15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x244>)
 800290c:	4313      	orrs	r3, r2
 800290e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d214      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 020f 	bic.w	r2, r3, #15
 8002926:	4906      	ldr	r1, [pc, #24]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <HAL_RCC_ClockConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e086      	b.n	8002a4e <HAL_RCC_ClockConfig+0x34e>
 8002940:	52002000 	.word	0x52002000
 8002944:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d010      	beq.n	8002976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	4b3f      	ldr	r3, [pc, #252]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002960:	429a      	cmp	r2, r3
 8002962:	d208      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002964:	4b3c      	ldr	r3, [pc, #240]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4939      	ldr	r1, [pc, #228]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002972:	4313      	orrs	r3, r2
 8002974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800298e:	429a      	cmp	r2, r3
 8002990:	d208      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002992:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	492e      	ldr	r1, [pc, #184]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	4b28      	ldr	r3, [pc, #160]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029bc:	429a      	cmp	r2, r3
 80029be:	d208      	bcs.n	80029d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4922      	ldr	r1, [pc, #136]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d010      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d208      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4917      	ldr	r1, [pc, #92]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002a00:	f000 f834 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	4912      	ldr	r1, [pc, #72]	@ (8002a5c <HAL_RCC_ClockConfig+0x35c>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_RCC_ClockConfig+0x358>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4a0d      	ldr	r2, [pc, #52]	@ (8002a5c <HAL_RCC_ClockConfig+0x35c>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x360>)
 8002a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a38:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <HAL_RCC_ClockConfig+0x364>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x368>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fc46 	bl	80012d4 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	08005cdc 	.word	0x08005cdc
 8002a60:	24000004 	.word	0x24000004
 8002a64:	24000000 	.word	0x24000000
 8002a68:	24000024 	.word	0x24000024

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a72:	4bb3      	ldr	r3, [pc, #716]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7a:	2b18      	cmp	r3, #24
 8002a7c:	f200 8155 	bhi.w	8002d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002aed 	.word	0x08002aed
 8002a8c:	08002d2b 	.word	0x08002d2b
 8002a90:	08002d2b 	.word	0x08002d2b
 8002a94:	08002d2b 	.word	0x08002d2b
 8002a98:	08002d2b 	.word	0x08002d2b
 8002a9c:	08002d2b 	.word	0x08002d2b
 8002aa0:	08002d2b 	.word	0x08002d2b
 8002aa4:	08002d2b 	.word	0x08002d2b
 8002aa8:	08002b13 	.word	0x08002b13
 8002aac:	08002d2b 	.word	0x08002d2b
 8002ab0:	08002d2b 	.word	0x08002d2b
 8002ab4:	08002d2b 	.word	0x08002d2b
 8002ab8:	08002d2b 	.word	0x08002d2b
 8002abc:	08002d2b 	.word	0x08002d2b
 8002ac0:	08002d2b 	.word	0x08002d2b
 8002ac4:	08002d2b 	.word	0x08002d2b
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002d2b 	.word	0x08002d2b
 8002ad0:	08002d2b 	.word	0x08002d2b
 8002ad4:	08002d2b 	.word	0x08002d2b
 8002ad8:	08002d2b 	.word	0x08002d2b
 8002adc:	08002d2b 	.word	0x08002d2b
 8002ae0:	08002d2b 	.word	0x08002d2b
 8002ae4:	08002d2b 	.word	0x08002d2b
 8002ae8:	08002b1f 	.word	0x08002b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aec:	4b94      	ldr	r3, [pc, #592]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002af8:	4b91      	ldr	r3, [pc, #580]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	4a90      	ldr	r2, [pc, #576]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
 8002b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b0a:	e111      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b0e:	61bb      	str	r3, [r7, #24]
      break;
 8002b10:	e10e      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b12:	4b8d      	ldr	r3, [pc, #564]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b14:	61bb      	str	r3, [r7, #24]
      break;
 8002b16:	e10b      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b18:	4b8c      	ldr	r3, [pc, #560]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b1a:	61bb      	str	r3, [r7, #24]
      break;
 8002b1c:	e108      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b1e:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b28:	4b85      	ldr	r3, [pc, #532]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b34:	4b82      	ldr	r3, [pc, #520]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b3e:	4b80      	ldr	r3, [pc, #512]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80e1 	beq.w	8002d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f000 8083 	beq.w	8002c70 <HAL_RCC_GetSysClockFreq+0x204>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f200 80a1 	bhi.w	8002cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x114>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d056      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b7e:	e099      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b80:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	4a6b      	ldr	r2, [pc, #428]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb6:	4b62      	ldr	r3, [pc, #392]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002be6:	e087      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bfa:	4b51      	ldr	r3, [pc, #324]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c2a:	e065      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c3e:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c6e:	e043      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c82:	4b2f      	ldr	r3, [pc, #188]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cb2:	e021      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	0a5b      	lsrs	r3, r3, #9
 8002cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d02:	3301      	adds	r3, #1
 8002d04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1c:	ee17 3a90 	vmov	r3, s15
 8002d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d22:	e005      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
      break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d2c:	61bb      	str	r3, [r7, #24]
      break;
 8002d2e:	bf00      	nop
  }

  return sysclockfreq;
 8002d30:	69bb      	ldr	r3, [r7, #24]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	03d09000 	.word	0x03d09000
 8002d48:	003d0900 	.word	0x003d0900
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	46000000 	.word	0x46000000
 8002d54:	4c742400 	.word	0x4c742400
 8002d58:	4a742400 	.word	0x4a742400
 8002d5c:	4af42400 	.word	0x4af42400

08002d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002d66:	f7ff fe81 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490f      	ldr	r1, [pc, #60]	@ (8002db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d82:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	4a09      	ldr	r2, [pc, #36]	@ (8002db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d9e:	4a07      	ldr	r2, [pc, #28]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	58024400 	.word	0x58024400
 8002db4:	08005cdc 	.word	0x08005cdc
 8002db8:	24000004 	.word	0x24000004
 8002dbc:	24000000 	.word	0x24000000

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002dc4:	f7ff ffcc 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4904      	ldr	r1, [pc, #16]	@ (8002de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	58024400 	.word	0x58024400
 8002de8:	08005cdc 	.word	0x08005cdc

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002df0:	f7ff ffb6 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4904      	ldr	r1, [pc, #16]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58024400 	.word	0x58024400
 8002e14:	08005cdc 	.word	0x08005cdc

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b0c8      	sub	sp, #288	@ 0x120
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e3c:	2500      	movs	r5, #0
 8002e3e:	ea54 0305 	orrs.w	r3, r4, r5
 8002e42:	d049      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e4e:	d02f      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e54:	d828      	bhi.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e5a:	d01a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e60:	d822      	bhi.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e6a:	d007      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e6c:	e01c      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e6e:	4ba7      	ldr	r3, [pc, #668]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	4aa6      	ldr	r2, [pc, #664]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e7a:	e01a      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e80:	3308      	adds	r3, #8
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fc43 	bl	8004710 <RCCEx_PLL2_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e96:	3328      	adds	r3, #40	@ 0x28
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 fcea 	bl	8004874 <RCCEx_PLL3_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002eba:	4b94      	ldr	r3, [pc, #592]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec8:	4a90      	ldr	r2, [pc, #576]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ece:	e003      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ed4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ee4:	f04f 0900 	mov.w	r9, #0
 8002ee8:	ea58 0309 	orrs.w	r3, r8, r9
 8002eec:	d047      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d82a      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f15 	.word	0x08002f15
 8002f04:	08002f23 	.word	0x08002f23
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f57 	.word	0x08002f57
 8002f10:	08002f57 	.word	0x08002f57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f14:	4b7d      	ldr	r3, [pc, #500]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	4a7c      	ldr	r2, [pc, #496]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f20:	e01a      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f26:	3308      	adds	r3, #8
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fbf0 	bl	8004710 <RCCEx_PLL2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f36:	e00f      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f3c:	3328      	adds	r3, #40	@ 0x28
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fc97 	bl	8004874 <RCCEx_PLL3_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e004      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f60:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f64:	f023 0107 	bic.w	r1, r3, #7
 8002f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	4a67      	ldr	r2, [pc, #412]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f8a:	f04f 0b00 	mov.w	fp, #0
 8002f8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f92:	d054      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f9e:	d036      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002fa0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002fa4:	d82f      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002faa:	d032      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb0:	d829      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb4:	d02f      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fb8:	d825      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002fba:	2b80      	cmp	r3, #128	@ 0x80
 8002fbc:	d018      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d821      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d007      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002fca:	e01c      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002fd8:	e01e      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fde:	3308      	adds	r3, #8
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 fb94 	bl	8004710 <RCCEx_PLL2_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002fee:	e013      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ff4:	3328      	adds	r3, #40	@ 0x28
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fc3b 	bl	8004874 <RCCEx_PLL3_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003004:	e008      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800300c:	e004      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003018:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003020:	4b3a      	ldr	r3, [pc, #232]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003024:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	4a37      	ldr	r2, [pc, #220]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003030:	430b      	orrs	r3, r1
 8003032:	6513      	str	r3, [r2, #80]	@ 0x50
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003036:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800303a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800304a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800304e:	2300      	movs	r3, #0
 8003050:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003054:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003058:	460b      	mov	r3, r1
 800305a:	4313      	orrs	r3, r2
 800305c:	d05c      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800305e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003064:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003068:	d03b      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800306a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800306e:	d834      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003074:	d037      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307a:	d82e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800307c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003080:	d033      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003082:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003086:	d828      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308c:	d01a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003092:	d822      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309c:	d007      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800309e:	e01c      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80030ac:	e01e      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030b2:	3308      	adds	r3, #8
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fb2a 	bl	8004710 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80030c2:	e013      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030c8:	3328      	adds	r3, #40	@ 0x28
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fbd1 	bl	8004874 <RCCEx_PLL3_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80030ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80030fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003102:	4a02      	ldr	r2, [pc, #8]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003104:	430b      	orrs	r3, r1
 8003106:	6513      	str	r3, [r2, #80]	@ 0x50
 8003108:	e006      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800310a:	bf00      	nop
 800310c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003114:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800312e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003132:	460b      	mov	r3, r1
 8003134:	4313      	orrs	r3, r2
 8003136:	d03a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	2b30      	cmp	r3, #48	@ 0x30
 8003140:	d01f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003142:	2b30      	cmp	r3, #48	@ 0x30
 8003144:	d819      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003146:	2b20      	cmp	r3, #32
 8003148:	d00c      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800314a:	2b20      	cmp	r3, #32
 800314c:	d815      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003152:	2b10      	cmp	r3, #16
 8003154:	d111      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003156:	4bae      	ldr	r3, [pc, #696]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	4aad      	ldr	r2, [pc, #692]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800315c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003162:	e011      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003168:	3308      	adds	r3, #8
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f001 facf 	bl	8004710 <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003180:	e002      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003190:	4b9f      	ldr	r3, [pc, #636]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003194:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	4a9c      	ldr	r2, [pc, #624]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80031c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d051      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80031ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031d8:	d035      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031de:	d82e      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031e4:	d031      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80031e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031ea:	d828      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f0:	d01a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f6:	d822      	bhi.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003200:	d007      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003202:	e01c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003204:	4b82      	ldr	r3, [pc, #520]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	4a81      	ldr	r2, [pc, #516]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800320a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003210:	e01c      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003216:	3308      	adds	r3, #8
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f001 fa78 	bl	8004710 <RCCEx_PLL2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003226:	e011      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800322c:	3328      	adds	r3, #40	@ 0x28
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f001 fb1f 	bl	8004874 <RCCEx_PLL3_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800323c:	e006      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003244:	e002      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800324a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003254:	4b6e      	ldr	r3, [pc, #440]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003258:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800325c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003262:	4a6b      	ldr	r2, [pc, #428]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003264:	430b      	orrs	r3, r1
 8003266:	6513      	str	r3, [r2, #80]	@ 0x50
 8003268:	e003      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800326e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800327e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003288:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800328c:	460b      	mov	r3, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	d053      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800329c:	d033      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800329e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a2:	d82c      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80032a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032a8:	d02f      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80032aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ae:	d826      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80032b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032b4:	d02b      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80032b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032ba:	d820      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80032bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c0:	d012      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80032c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032c6:	d81a      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d022      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d0:	d115      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032d6:	3308      	adds	r3, #8
 80032d8:	2101      	movs	r1, #1
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 fa18 	bl	8004710 <RCCEx_PLL2_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032e6:	e015      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032ec:	3328      	adds	r3, #40	@ 0x28
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 fabf 	bl	8004874 <RCCEx_PLL3_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032fc:	e00a      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003304:	e006      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003306:	bf00      	nop
 8003308:	e004      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800330a:	bf00      	nop
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800331c:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332a:	4a39      	ldr	r2, [pc, #228]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800332c:	430b      	orrs	r3, r1
 800332e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003330:	e003      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003336:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003346:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003350:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d060      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800335e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003362:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003366:	d039      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003368:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800336c:	d832      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800336e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003372:	d035      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003378:	d82c      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337e:	d031      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d826      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800338a:	d02d      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800338c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003390:	d820      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003396:	d012      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339c:	d81a      	bhi.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a6:	d115      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ac:	3308      	adds	r3, #8
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 f9ad 	bl	8004710 <RCCEx_PLL2_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033bc:	e017      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033c2:	3328      	adds	r3, #40	@ 0x28
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 fa54 	bl	8004874 <RCCEx_PLL3_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033d2:	e00c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033da:	e008      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033dc:	bf00      	nop
 80033de:	e006      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033e0:	bf00      	nop
 80033e2:	e004      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033e4:	bf00      	nop
 80033e6:	e002      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80033ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033f6:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003406:	4a02      	ldr	r2, [pc, #8]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003408:	430b      	orrs	r3, r1
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800340e:	bf00      	nop
 8003410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003418:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800341c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d037      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003446:	d00e      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800344c:	d816      	bhi.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003456:	d111      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003458:	4bc4      	ldr	r3, [pc, #784]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	4ac3      	ldr	r2, [pc, #780]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003464:	e00f      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800346a:	3308      	adds	r3, #8
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f94e 	bl	8004710 <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800348e:	4bb7      	ldr	r3, [pc, #732]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003492:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800349a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800349c:	4ab3      	ldr	r2, [pc, #716]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80034a2:	e003      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80034b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4313      	orrs	r3, r2
 80034ca:	d039      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d81c      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80034d6:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003519 	.word	0x08003519
 80034e0:	080034ed 	.word	0x080034ed
 80034e4:	080034fb 	.word	0x080034fb
 80034e8:	08003519 	.word	0x08003519
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ec:	4b9f      	ldr	r3, [pc, #636]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	4a9e      	ldr	r2, [pc, #632]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034f8:	e00f      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034fe:	3308      	adds	r3, #8
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f001 f904 	bl	8004710 <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003522:	4b92      	ldr	r3, [pc, #584]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	f023 0103 	bic.w	r1, r3, #3
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800352e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003530:	4a8e      	ldr	r2, [pc, #568]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003532:	430b      	orrs	r3, r1
 8003534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003536:	e003      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800353c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800354c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003556:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800355a:	460b      	mov	r3, r1
 800355c:	4313      	orrs	r3, r2
 800355e:	f000 8099 	beq.w	8003694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003562:	4b83      	ldr	r3, [pc, #524]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a82      	ldr	r2, [pc, #520]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800356c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800356e:	f7fd fefb 	bl	8001368 <HAL_GetTick>
 8003572:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003576:	e00b      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fd fef6 	bl	8001368 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	@ 0x64
 8003586:	d903      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800358e:	e005      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003590:	4b77      	ldr	r3, [pc, #476]	@ (8003770 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ed      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800359c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d173      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035a4:	4b71      	ldr	r3, [pc, #452]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035b0:	4053      	eors	r3, r2
 80035b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ba:	4b6c      	ldr	r3, [pc, #432]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035c6:	4b69      	ldr	r3, [pc, #420]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	4a68      	ldr	r2, [pc, #416]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035d2:	4b66      	ldr	r3, [pc, #408]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d6:	4a65      	ldr	r2, [pc, #404]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80035de:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f2:	d118      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd feb8 	bl	8001368 <HAL_GetTick>
 80035f8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fc:	e00d      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fe:	f7fd feb3 	bl	8001368 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003608:	1ad2      	subs	r2, r2, r3
 800360a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800360e:	429a      	cmp	r2, r3
 8003610:	d903      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003618:	e005      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0eb      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800362a:	2b00      	cmp	r3, #0
 800362c:	d129      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003632:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363e:	d10e      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003640:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800364c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003650:	091a      	lsrs	r2, r3, #4
 8003652:	4b48      	ldr	r3, [pc, #288]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003654:	4013      	ands	r3, r2
 8003656:	4a45      	ldr	r2, [pc, #276]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6113      	str	r3, [r2, #16]
 800365c:	e005      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800365e:	4b43      	ldr	r3, [pc, #268]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4a42      	ldr	r2, [pc, #264]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003664:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003668:	6113      	str	r3, [r2, #16]
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800366c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800366e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003672:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367a:	4a3c      	ldr	r2, [pc, #240]	@ (800376c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367c:	430b      	orrs	r3, r1
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003682:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003686:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003690:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 0301 	and.w	r3, r2, #1
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f000 8090 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	2b28      	cmp	r3, #40	@ 0x28
 80036c0:	d870      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80036c2:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080037ad 	.word	0x080037ad
 80036cc:	080037a5 	.word	0x080037a5
 80036d0:	080037a5 	.word	0x080037a5
 80036d4:	080037a5 	.word	0x080037a5
 80036d8:	080037a5 	.word	0x080037a5
 80036dc:	080037a5 	.word	0x080037a5
 80036e0:	080037a5 	.word	0x080037a5
 80036e4:	080037a5 	.word	0x080037a5
 80036e8:	08003779 	.word	0x08003779
 80036ec:	080037a5 	.word	0x080037a5
 80036f0:	080037a5 	.word	0x080037a5
 80036f4:	080037a5 	.word	0x080037a5
 80036f8:	080037a5 	.word	0x080037a5
 80036fc:	080037a5 	.word	0x080037a5
 8003700:	080037a5 	.word	0x080037a5
 8003704:	080037a5 	.word	0x080037a5
 8003708:	0800378f 	.word	0x0800378f
 800370c:	080037a5 	.word	0x080037a5
 8003710:	080037a5 	.word	0x080037a5
 8003714:	080037a5 	.word	0x080037a5
 8003718:	080037a5 	.word	0x080037a5
 800371c:	080037a5 	.word	0x080037a5
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080037a5 	.word	0x080037a5
 8003728:	080037ad 	.word	0x080037ad
 800372c:	080037a5 	.word	0x080037a5
 8003730:	080037a5 	.word	0x080037a5
 8003734:	080037a5 	.word	0x080037a5
 8003738:	080037a5 	.word	0x080037a5
 800373c:	080037a5 	.word	0x080037a5
 8003740:	080037a5 	.word	0x080037a5
 8003744:	080037a5 	.word	0x080037a5
 8003748:	080037ad 	.word	0x080037ad
 800374c:	080037a5 	.word	0x080037a5
 8003750:	080037a5 	.word	0x080037a5
 8003754:	080037a5 	.word	0x080037a5
 8003758:	080037a5 	.word	0x080037a5
 800375c:	080037a5 	.word	0x080037a5
 8003760:	080037a5 	.word	0x080037a5
 8003764:	080037a5 	.word	0x080037a5
 8003768:	080037ad 	.word	0x080037ad
 800376c:	58024400 	.word	0x58024400
 8003770:	58024800 	.word	0x58024800
 8003774:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800377c:	3308      	adds	r3, #8
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f000 ffc5 	bl	8004710 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f001 f86c 	bl	8004874 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10b      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037b6:	4bc0      	ldr	r3, [pc, #768]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c6:	4abc      	ldr	r2, [pc, #752]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f002 0302 	and.w	r3, r2, #2
 80037e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037ec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d043      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d824      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003802:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	08003855 	.word	0x08003855
 800380c:	08003821 	.word	0x08003821
 8003810:	08003837 	.word	0x08003837
 8003814:	08003855 	.word	0x08003855
 8003818:	08003855 	.word	0x08003855
 800381c:	08003855 	.word	0x08003855
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003824:	3308      	adds	r3, #8
 8003826:	2101      	movs	r1, #1
 8003828:	4618      	mov	r0, r3
 800382a:	f000 ff71 	bl	8004710 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003834:	e00f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383a:	3328      	adds	r3, #40	@ 0x28
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f001 f818 	bl	8004874 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800384a:	e004      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003856:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800385e:	4b96      	ldr	r3, [pc, #600]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	f023 0107 	bic.w	r1, r3, #7
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4a92      	ldr	r2, [pc, #584]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003870:	430b      	orrs	r3, r1
 8003872:	6553      	str	r3, [r2, #84]	@ 0x54
 8003874:	e003      	b.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800387a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f002 0304 	and.w	r3, r2, #4
 800388a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003894:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003898:	460b      	mov	r3, r1
 800389a:	4313      	orrs	r3, r2
 800389c:	d043      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d824      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80038aa:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	080038c9 	.word	0x080038c9
 80038b8:	080038df 	.word	0x080038df
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038cc:	3308      	adds	r3, #8
 80038ce:	2101      	movs	r1, #1
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ff1d 	bl	8004710 <RCCEx_PLL2_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e2:	3328      	adds	r3, #40	@ 0x28
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 ffc4 	bl	8004874 <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003906:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	f023 0107 	bic.w	r1, r3, #7
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003916:	4a68      	ldr	r2, [pc, #416]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003918:	430b      	orrs	r3, r1
 800391a:	6593      	str	r3, [r2, #88]	@ 0x58
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003922:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f002 0320 	and.w	r3, r2, #32
 8003932:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800393c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d055      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800394a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003952:	d033      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003954:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003958:	d82c      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395e:	d02f      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003964:	d826      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003966:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800396a:	d02b      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800396c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003970:	d820      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003976:	d012      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800397c:	d81a      	bhi.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d022      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003986:	d115      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800398c:	3308      	adds	r3, #8
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f000 febd 	bl	8004710 <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800399c:	e015      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a2:	3328      	adds	r3, #40	@ 0x28
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 ff64 	bl	8004874 <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039b2:	e00a      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d2:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e2:	4a35      	ldr	r2, [pc, #212]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d058      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a1e:	d033      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a24:	d82c      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2a:	d02f      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a30:	d826      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a36:	d02b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a3c:	d820      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a42:	d012      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a48:	d81a      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d022      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d115      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a58:	3308      	adds	r3, #8
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fe57 	bl	8004710 <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a68:	e015      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a6e:	3328      	adds	r3, #40	@ 0x28
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fefe 	bl	8004874 <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a86:	e006      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a88:	bf00      	nop
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9e:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003aae:	4a02      	ldr	r2, [pc, #8]	@ (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003ab6:	bf00      	nop
 8003ab8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003acc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ada:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	d055      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003af0:	d033      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003af2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003af6:	d82c      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afc:	d02f      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b02:	d826      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b08:	d02b      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b0e:	d820      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b14:	d012      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b1a:	d81a      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b24:	d115      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fdee 	bl	8004710 <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e015      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b40:	3328      	adds	r3, #40	@ 0x28
 8003b42:	2102      	movs	r1, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fe95 	bl	8004874 <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b50:	e00a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b70:	4ba1      	ldr	r3, [pc, #644]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b80:	4a9d      	ldr	r2, [pc, #628]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f002 0308 	and.w	r3, r2, #8
 8003b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ba6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d01e      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc2:	3328      	adds	r3, #40	@ 0x28
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fe54 	bl	8004874 <RCCEx_PLL3_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bd8:	4b87      	ldr	r3, [pc, #540]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be8:	4a83      	ldr	r2, [pc, #524]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f002 0310 	and.w	r3, r2, #16
 8003bfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d01e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c20:	3328      	adds	r3, #40	@ 0x28
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fe25 	bl	8004874 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c36:	4b70      	ldr	r3, [pc, #448]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c46:	4a6c      	ldr	r2, [pc, #432]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d03e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c78:	d022      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c7e:	d81b      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c88:	d00b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003c8a:	e015      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c90:	3308      	adds	r3, #8
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fd3b 	bl	8004710 <RCCEx_PLL2_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca6:	3328      	adds	r3, #40	@ 0x28
 8003ca8:	2102      	movs	r1, #2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fde2 	bl	8004874 <RCCEx_PLL3_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cca:	4b4b      	ldr	r3, [pc, #300]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cda:	4a47      	ldr	r2, [pc, #284]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ce6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cfc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d12:	d01f      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003d14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d18:	d818      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d1e:	d003      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003d20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d24:	d007      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003d26:	e011      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b33      	ldr	r3, [pc, #204]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd98 	bl	8004874 <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	4a22      	ldr	r2, [pc, #136]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d90:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d034      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da8:	d007      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003daa:	e011      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dac:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003db8:	e00e      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fca4 	bl	8004710 <RCCEx_PLL2_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10d      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003de0:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dee:	4a02      	ldr	r2, [pc, #8]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e12:	2300      	movs	r3, #0
 8003e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e16:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d00c      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e24:	3328      	adds	r3, #40	@ 0x28
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fd23 	bl	8004874 <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e46:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e48:	2300      	movs	r3, #0
 8003e4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e4c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e50:	460b      	mov	r3, r1
 8003e52:	4313      	orrs	r3, r2
 8003e54:	d038      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e62:	d018      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e68:	d811      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e6e:	d014      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e74:	d80b      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d011      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e80:	4bc3      	ldr	r3, [pc, #780]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	4ac2      	ldr	r2, [pc, #776]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e94:	e004      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea8:	4bb9      	ldr	r3, [pc, #740]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb8:	4ab5      	ldr	r2, [pc, #724]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ec4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eda:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ee4:	4baa      	ldr	r3, [pc, #680]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef2:	4aa7      	ldr	r2, [pc, #668]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f04:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f06:	2300      	movs	r3, #0
 8003f08:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f14:	4b9e      	ldr	r3, [pc, #632]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f22:	4a9b      	ldr	r2, [pc, #620]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f36:	2300      	movs	r3, #0
 8003f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003f44:	4b92      	ldr	r3, [pc, #584]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f48:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	4a8f      	ldr	r2, [pc, #572]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f66:	2300      	movs	r3, #0
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4313      	orrs	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f74:	4b86      	ldr	r3, [pc, #536]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	4a85      	ldr	r2, [pc, #532]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f7e:	6113      	str	r3, [r2, #16]
 8003f80:	4b83      	ldr	r3, [pc, #524]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f82:	6919      	ldr	r1, [r3, #16]
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f8c:	4a80      	ldr	r2, [pc, #512]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fae:	4b78      	ldr	r3, [pc, #480]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	4a74      	ldr	r2, [pc, #464]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fde:	4b6c      	ldr	r3, [pc, #432]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fee:	4a68      	ldr	r2, [pc, #416]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004006:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	d011      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	3308      	adds	r3, #8
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fb79 	bl	8004710 <RCCEx_PLL2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004024:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004030:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	2100      	movs	r1, #0
 800403e:	6239      	str	r1, [r7, #32]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
 8004046:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d011      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004054:	3308      	adds	r3, #8
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fb59 	bl	8004710 <RCCEx_PLL2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004070:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	2100      	movs	r1, #0
 800407e:	61b9      	str	r1, [r7, #24]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d011      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004094:	3308      	adds	r3, #8
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb39 	bl	8004710 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80040a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	2100      	movs	r1, #0
 80040be:	6139      	str	r1, [r7, #16]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040ca:	460b      	mov	r3, r1
 80040cc:	4313      	orrs	r3, r2
 80040ce:	d011      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d4:	3328      	adds	r3, #40	@ 0x28
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fbcb 	bl	8004874 <RCCEx_PLL3_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80040e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	2100      	movs	r1, #0
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800410a:	460b      	mov	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	d011      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004114:	3328      	adds	r3, #40	@ 0x28
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fbab 	bl	8004874 <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004124:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004130:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	2100      	movs	r1, #0
 800413e:	6039      	str	r1, [r7, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e9d7 1200 	ldrd	r1, r2, [r7]
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d011      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004154:	3328      	adds	r3, #40	@ 0x28
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fb8b 	bl	8004874 <RCCEx_PLL3_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004170:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004174:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
}
 8004182:	4618      	mov	r0, r3
 8004184:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400

08004194 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004198:	f7fe fde2 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	4904      	ldr	r1, [pc, #16]	@ (80041bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	58024400 	.word	0x58024400
 80041bc:	08005cdc 	.word	0x08005cdc

080041c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b089      	sub	sp, #36	@ 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80041d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	0b1b      	lsrs	r3, r3, #12
 80041d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041de:	4b9c      	ldr	r3, [pc, #624]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80041ea:	4b99      	ldr	r3, [pc, #612]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	08db      	lsrs	r3, r3, #3
 80041f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8111 	beq.w	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b02      	cmp	r3, #2
 8004212:	f000 8083 	beq.w	800431c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b02      	cmp	r3, #2
 800421a:	f200 80a1 	bhi.w	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d056      	beq.n	80042d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800422a:	e099      	b.n	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800422c:	4b88      	ldr	r3, [pc, #544]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02d      	beq.n	8004294 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004238:	4b85      	ldr	r3, [pc, #532]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	4a84      	ldr	r2, [pc, #528]	@ (8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b7b      	ldr	r3, [pc, #492]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a03 	vldr	s12, [r7, #12]
 8004276:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004292:	e087      	b.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800445c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d6:	e065      	b.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b59      	ldr	r3, [pc, #356]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800431a:	e043      	b.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004342:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435e:	e021      	b.n	80043a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	4b37      	ldr	r3, [pc, #220]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004382:	ed97 6a03 	vldr	s12, [r7, #12]
 8004386:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80043a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	0a5b      	lsrs	r3, r3, #9
 80043aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043be:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 2a90 	vmov	r2, s15
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80043d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	ee17 2a90 	vmov	r2, s15
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004400:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441a:	edd7 6a07 	vldr	s13, [r7, #28]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004426:	ee17 2a90 	vmov	r2, s15
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800442e:	e008      	b.n	8004442 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	3724      	adds	r7, #36	@ 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	58024400 	.word	0x58024400
 8004454:	03d09000 	.word	0x03d09000
 8004458:	46000000 	.word	0x46000000
 800445c:	4c742400 	.word	0x4c742400
 8004460:	4a742400 	.word	0x4a742400
 8004464:	4af42400 	.word	0x4af42400

08004468 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	@ 0x24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004470:	4ba1      	ldr	r3, [pc, #644]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800447a:	4b9f      	ldr	r3, [pc, #636]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	0d1b      	lsrs	r3, r3, #20
 8004480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004484:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004486:	4b9c      	ldr	r3, [pc, #624]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004492:	4b99      	ldr	r3, [pc, #612]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	08db      	lsrs	r3, r3, #3
 8004498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8111 	beq.w	80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f000 8083 	beq.w	80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	f200 80a1 	bhi.w	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d056      	beq.n	8004580 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044d2:	e099      	b.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d4:	4b88      	ldr	r3, [pc, #544]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02d      	beq.n	800453c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044e0:	4b85      	ldr	r3, [pc, #532]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	4a84      	ldr	r2, [pc, #528]	@ (80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
 80044f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450a:	4b7b      	ldr	r3, [pc, #492]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451a:	ed97 6a03 	vldr	s12, [r7, #12]
 800451e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800452e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800453a:	e087      	b.n	800464c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800454a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454e:	4b6a      	ldr	r3, [pc, #424]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004562:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800457e:	e065      	b.n	800464c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	ee07 3a90 	vmov	s15, r3
 8004586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800458e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004592:	4b59      	ldr	r3, [pc, #356]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c2:	e043      	b.n	800464c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800470c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d6:	4b48      	ldr	r3, [pc, #288]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004606:	e021      	b.n	800464c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004612:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b37      	ldr	r3, [pc, #220]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a03 	vldr	s12, [r7, #12]
 800462e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800464c:	4b2a      	ldr	r3, [pc, #168]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	0a5b      	lsrs	r3, r3, #9
 8004652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004666:	edd7 6a07 	vldr	s13, [r7, #28]
 800466a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800466e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004672:	ee17 2a90 	vmov	r2, s15
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800467a:	4b1f      	ldr	r3, [pc, #124]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004694:	edd7 6a07 	vldr	s13, [r7, #28]
 8004698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a0:	ee17 2a90 	vmov	r2, s15
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80046a8:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	0e1b      	lsrs	r3, r3, #24
 80046ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ce:	ee17 2a90 	vmov	r2, s15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	609a      	str	r2, [r3, #8]
}
 80046ea:	bf00      	nop
 80046ec:	3724      	adds	r7, #36	@ 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	58024400 	.word	0x58024400
 80046fc:	03d09000 	.word	0x03d09000
 8004700:	46000000 	.word	0x46000000
 8004704:	4c742400 	.word	0x4c742400
 8004708:	4a742400 	.word	0x4a742400
 800470c:	4af42400 	.word	0x4af42400

08004710 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800471e:	4b53      	ldr	r3, [pc, #332]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d101      	bne.n	800472e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e099      	b.n	8004862 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800472e:	4b4f      	ldr	r3, [pc, #316]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a4e      	ldr	r2, [pc, #312]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004734:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473a:	f7fc fe15 	bl	8001368 <HAL_GetTick>
 800473e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004740:	e008      	b.n	8004754 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004742:	f7fc fe11 	bl	8001368 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e086      	b.n	8004862 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004760:	4b42      	ldr	r3, [pc, #264]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	493f      	ldr	r1, [pc, #252]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	628b      	str	r3, [r1, #40]	@ 0x28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	025b      	lsls	r3, r3, #9
 8004786:	b29b      	uxth	r3, r3
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	041b      	lsls	r3, r3, #16
 8004792:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	3b01      	subs	r3, #1
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047a4:	4931      	ldr	r1, [pc, #196]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047aa:	4b30      	ldr	r3, [pc, #192]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	492d      	ldr	r1, [pc, #180]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	f023 0220 	bic.w	r2, r3, #32
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	4928      	ldr	r1, [pc, #160]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047ce:	4b27      	ldr	r3, [pc, #156]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	4a26      	ldr	r2, [pc, #152]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f023 0310 	bic.w	r3, r3, #16
 80047d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047da:	4b24      	ldr	r3, [pc, #144]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <RCCEx_PLL2_Config+0x160>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	69d2      	ldr	r2, [r2, #28]
 80047e6:	00d2      	lsls	r2, r2, #3
 80047e8:	4920      	ldr	r1, [pc, #128]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047ee:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	4a1e      	ldr	r2, [pc, #120]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 80047f4:	f043 0310 	orr.w	r3, r3, #16
 80047f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004800:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	4a19      	ldr	r2, [pc, #100]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004806:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800480a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800480c:	e00f      	b.n	800482e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004814:	4b15      	ldr	r3, [pc, #84]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	4a14      	ldr	r2, [pc, #80]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004820:	e005      	b.n	800482e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	4a11      	ldr	r2, [pc, #68]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800482c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0e      	ldr	r2, [pc, #56]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004834:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483a:	f7fc fd95 	bl	8001368 <HAL_GetTick>
 800483e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004840:	e008      	b.n	8004854 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004842:	f7fc fd91 	bl	8001368 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e006      	b.n	8004862 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <RCCEx_PLL2_Config+0x15c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	58024400 	.word	0x58024400
 8004870:	ffff0007 	.word	0xffff0007

08004874 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004882:	4b53      	ldr	r3, [pc, #332]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b03      	cmp	r3, #3
 800488c:	d101      	bne.n	8004892 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e099      	b.n	80049c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004892:	4b4f      	ldr	r3, [pc, #316]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a4e      	ldr	r2, [pc, #312]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800489c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489e:	f7fc fd63 	bl	8001368 <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048a6:	f7fc fd5f 	bl	8001368 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e086      	b.n	80049c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048b8:	4b45      	ldr	r3, [pc, #276]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048c4:	4b42      	ldr	r3, [pc, #264]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	051b      	lsls	r3, r3, #20
 80048d2:	493f      	ldr	r1, [pc, #252]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	3b01      	subs	r3, #1
 80048de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	025b      	lsls	r3, r3, #9
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	3b01      	subs	r3, #1
 8004902:	061b      	lsls	r3, r3, #24
 8004904:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004908:	4931      	ldr	r1, [pc, #196]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800490a:	4313      	orrs	r3, r2
 800490c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800490e:	4b30      	ldr	r3, [pc, #192]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	492d      	ldr	r1, [pc, #180]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004920:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	4928      	ldr	r1, [pc, #160]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004932:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800493c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800493e:	4b24      	ldr	r3, [pc, #144]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <RCCEx_PLL3_Config+0x160>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	69d2      	ldr	r2, [r2, #28]
 800494a:	00d2      	lsls	r2, r2, #3
 800494c:	4920      	ldr	r1, [pc, #128]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800494e:	4313      	orrs	r3, r2
 8004950:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004952:	4b1f      	ldr	r3, [pc, #124]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	4a1e      	ldr	r2, [pc, #120]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800496a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800496e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004970:	e00f      	b.n	8004992 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4a14      	ldr	r2, [pc, #80]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800497e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004982:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004984:	e005      	b.n	8004992 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004986:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	4a11      	ldr	r2, [pc, #68]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 800498c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004990:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004992:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a0e      	ldr	r2, [pc, #56]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fc fce3 	bl	8001368 <HAL_GetTick>
 80049a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049a4:	e008      	b.n	80049b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049a6:	f7fc fcdf 	bl	8001368 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e006      	b.n	80049c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049b8:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <RCCEx_PLL3_Config+0x15c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	58024400 	.word	0x58024400
 80049d4:	ffff0007 	.word	0xffff0007

080049d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e042      	b.n	8004a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f83b 	bl	8004a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2224      	movs	r2, #36	@ 0x24
 8004a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fe9e 	bl	8005764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f82f 	bl	8004a8c <UART_SetConfig>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01b      	b.n	8004a70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 ff1d 	bl	80058a8 <UART_CheckIdleState>
 8004a6e:	4603      	mov	r3, r0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a90:	b092      	sub	sp, #72	@ 0x48
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4bbe      	ldr	r3, [pc, #760]	@ (8004db4 <UART_SetConfig+0x328>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4ab3      	ldr	r2, [pc, #716]	@ (8004db8 <UART_SetConfig+0x32c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af4:	4313      	orrs	r3, r2
 8004af6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4baf      	ldr	r3, [pc, #700]	@ (8004dbc <UART_SetConfig+0x330>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	f023 010f 	bic.w	r1, r3, #15
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4aa6      	ldr	r2, [pc, #664]	@ (8004dc0 <UART_SetConfig+0x334>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d177      	bne.n	8004c1c <UART_SetConfig+0x190>
 8004b2c:	4ba5      	ldr	r3, [pc, #660]	@ (8004dc4 <UART_SetConfig+0x338>)
 8004b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b34:	2b28      	cmp	r3, #40	@ 0x28
 8004b36:	d86d      	bhi.n	8004c14 <UART_SetConfig+0x188>
 8004b38:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0xb4>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004be5 	.word	0x08004be5
 8004b44:	08004c15 	.word	0x08004c15
 8004b48:	08004c15 	.word	0x08004c15
 8004b4c:	08004c15 	.word	0x08004c15
 8004b50:	08004c15 	.word	0x08004c15
 8004b54:	08004c15 	.word	0x08004c15
 8004b58:	08004c15 	.word	0x08004c15
 8004b5c:	08004c15 	.word	0x08004c15
 8004b60:	08004bed 	.word	0x08004bed
 8004b64:	08004c15 	.word	0x08004c15
 8004b68:	08004c15 	.word	0x08004c15
 8004b6c:	08004c15 	.word	0x08004c15
 8004b70:	08004c15 	.word	0x08004c15
 8004b74:	08004c15 	.word	0x08004c15
 8004b78:	08004c15 	.word	0x08004c15
 8004b7c:	08004c15 	.word	0x08004c15
 8004b80:	08004bf5 	.word	0x08004bf5
 8004b84:	08004c15 	.word	0x08004c15
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c15 	.word	0x08004c15
 8004b90:	08004c15 	.word	0x08004c15
 8004b94:	08004c15 	.word	0x08004c15
 8004b98:	08004c15 	.word	0x08004c15
 8004b9c:	08004c15 	.word	0x08004c15
 8004ba0:	08004bfd 	.word	0x08004bfd
 8004ba4:	08004c15 	.word	0x08004c15
 8004ba8:	08004c15 	.word	0x08004c15
 8004bac:	08004c15 	.word	0x08004c15
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004c15 	.word	0x08004c15
 8004bb8:	08004c15 	.word	0x08004c15
 8004bbc:	08004c15 	.word	0x08004c15
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c15 	.word	0x08004c15
 8004bd0:	08004c15 	.word	0x08004c15
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c15 	.word	0x08004c15
 8004bdc:	08004c15 	.word	0x08004c15
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bea:	e326      	b.n	800523a <UART_SetConfig+0x7ae>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf2:	e322      	b.n	800523a <UART_SetConfig+0x7ae>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfa:	e31e      	b.n	800523a <UART_SetConfig+0x7ae>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c02:	e31a      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c04:	2320      	movs	r3, #32
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0a:	e316      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c0c:	2340      	movs	r3, #64	@ 0x40
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e312      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e30e      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a69      	ldr	r2, [pc, #420]	@ (8004dc8 <UART_SetConfig+0x33c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d130      	bne.n	8004c88 <UART_SetConfig+0x1fc>
 8004c26:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <UART_SetConfig+0x338>)
 8004c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d826      	bhi.n	8004c80 <UART_SetConfig+0x1f4>
 8004c32:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <UART_SetConfig+0x1ac>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c51 	.word	0x08004c51
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c61 	.word	0x08004c61
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c71 	.word	0x08004c71
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c56:	e2f0      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5e:	e2ec      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c66:	e2e8      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e2e4      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c70:	2320      	movs	r3, #32
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e2e0      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c78:	2340      	movs	r3, #64	@ 0x40
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e2dc      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c80:	2380      	movs	r3, #128	@ 0x80
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e2d8      	b.n	800523a <UART_SetConfig+0x7ae>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004dcc <UART_SetConfig+0x340>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d130      	bne.n	8004cf4 <UART_SetConfig+0x268>
 8004c92:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc4 <UART_SetConfig+0x338>)
 8004c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d826      	bhi.n	8004cec <UART_SetConfig+0x260>
 8004c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca4 <UART_SetConfig+0x218>)
 8004ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca4:	08004cbd 	.word	0x08004cbd
 8004ca8:	08004cc5 	.word	0x08004cc5
 8004cac:	08004ccd 	.word	0x08004ccd
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004cdd 	.word	0x08004cdd
 8004cb8:	08004ce5 	.word	0x08004ce5
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e2ba      	b.n	800523a <UART_SetConfig+0x7ae>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cca:	e2b6      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd2:	e2b2      	b.n	800523a <UART_SetConfig+0x7ae>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e2ae      	b.n	800523a <UART_SetConfig+0x7ae>
 8004cdc:	2320      	movs	r3, #32
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e2aa      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ce4:	2340      	movs	r3, #64	@ 0x40
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e2a6      	b.n	800523a <UART_SetConfig+0x7ae>
 8004cec:	2380      	movs	r3, #128	@ 0x80
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e2a2      	b.n	800523a <UART_SetConfig+0x7ae>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <UART_SetConfig+0x344>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d130      	bne.n	8004d60 <UART_SetConfig+0x2d4>
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <UART_SetConfig+0x338>)
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d826      	bhi.n	8004d58 <UART_SetConfig+0x2cc>
 8004d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <UART_SetConfig+0x284>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d29 	.word	0x08004d29
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d39 	.word	0x08004d39
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d49 	.word	0x08004d49
 8004d24:	08004d51 	.word	0x08004d51
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e284      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d30:	2304      	movs	r3, #4
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d36:	e280      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d38:	2308      	movs	r3, #8
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3e:	e27c      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d46:	e278      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4e:	e274      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d50:	2340      	movs	r3, #64	@ 0x40
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e270      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d58:	2380      	movs	r3, #128	@ 0x80
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e26c      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <UART_SetConfig+0x348>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d142      	bne.n	8004df0 <UART_SetConfig+0x364>
 8004d6a:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <UART_SetConfig+0x338>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d838      	bhi.n	8004de8 <UART_SetConfig+0x35c>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <UART_SetConfig+0x2f0>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004d95 	.word	0x08004d95
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	08004da5 	.word	0x08004da5
 8004d88:	08004dad 	.word	0x08004dad
 8004d8c:	08004dd9 	.word	0x08004dd9
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e24e      	b.n	800523a <UART_SetConfig+0x7ae>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da2:	e24a      	b.n	800523a <UART_SetConfig+0x7ae>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004daa:	e246      	b.n	800523a <UART_SetConfig+0x7ae>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e242      	b.n	800523a <UART_SetConfig+0x7ae>
 8004db4:	cfff69f3 	.word	0xcfff69f3
 8004db8:	58000c00 	.word	0x58000c00
 8004dbc:	11fff4ff 	.word	0x11fff4ff
 8004dc0:	40011000 	.word	0x40011000
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	40004400 	.word	0x40004400
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	40004c00 	.word	0x40004c00
 8004dd4:	40005000 	.word	0x40005000
 8004dd8:	2320      	movs	r3, #32
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e22c      	b.n	800523a <UART_SetConfig+0x7ae>
 8004de0:	2340      	movs	r3, #64	@ 0x40
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e228      	b.n	800523a <UART_SetConfig+0x7ae>
 8004de8:	2380      	movs	r3, #128	@ 0x80
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e224      	b.n	800523a <UART_SetConfig+0x7ae>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4ab1      	ldr	r2, [pc, #708]	@ (80050bc <UART_SetConfig+0x630>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d176      	bne.n	8004ee8 <UART_SetConfig+0x45c>
 8004dfa:	4bb1      	ldr	r3, [pc, #708]	@ (80050c0 <UART_SetConfig+0x634>)
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e02:	2b28      	cmp	r3, #40	@ 0x28
 8004e04:	d86c      	bhi.n	8004ee0 <UART_SetConfig+0x454>
 8004e06:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <UART_SetConfig+0x380>)
 8004e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0c:	08004eb1 	.word	0x08004eb1
 8004e10:	08004ee1 	.word	0x08004ee1
 8004e14:	08004ee1 	.word	0x08004ee1
 8004e18:	08004ee1 	.word	0x08004ee1
 8004e1c:	08004ee1 	.word	0x08004ee1
 8004e20:	08004ee1 	.word	0x08004ee1
 8004e24:	08004ee1 	.word	0x08004ee1
 8004e28:	08004ee1 	.word	0x08004ee1
 8004e2c:	08004eb9 	.word	0x08004eb9
 8004e30:	08004ee1 	.word	0x08004ee1
 8004e34:	08004ee1 	.word	0x08004ee1
 8004e38:	08004ee1 	.word	0x08004ee1
 8004e3c:	08004ee1 	.word	0x08004ee1
 8004e40:	08004ee1 	.word	0x08004ee1
 8004e44:	08004ee1 	.word	0x08004ee1
 8004e48:	08004ee1 	.word	0x08004ee1
 8004e4c:	08004ec1 	.word	0x08004ec1
 8004e50:	08004ee1 	.word	0x08004ee1
 8004e54:	08004ee1 	.word	0x08004ee1
 8004e58:	08004ee1 	.word	0x08004ee1
 8004e5c:	08004ee1 	.word	0x08004ee1
 8004e60:	08004ee1 	.word	0x08004ee1
 8004e64:	08004ee1 	.word	0x08004ee1
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004ec9 	.word	0x08004ec9
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004ee1 	.word	0x08004ee1
 8004e80:	08004ee1 	.word	0x08004ee1
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ed1 	.word	0x08004ed1
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ee1 	.word	0x08004ee1
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb6:	e1c0      	b.n	800523a <UART_SetConfig+0x7ae>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ebe:	e1bc      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec6:	e1b8      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ece:	e1b4      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed6:	e1b0      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ed8:	2340      	movs	r3, #64	@ 0x40
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ede:	e1ac      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ee0:	2380      	movs	r3, #128	@ 0x80
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee6:	e1a8      	b.n	800523a <UART_SetConfig+0x7ae>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a75      	ldr	r2, [pc, #468]	@ (80050c4 <UART_SetConfig+0x638>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d130      	bne.n	8004f54 <UART_SetConfig+0x4c8>
 8004ef2:	4b73      	ldr	r3, [pc, #460]	@ (80050c0 <UART_SetConfig+0x634>)
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d826      	bhi.n	8004f4c <UART_SetConfig+0x4c0>
 8004efe:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <UART_SetConfig+0x478>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	08004f2d 	.word	0x08004f2d
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f22:	e18a      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f24:	2304      	movs	r3, #4
 8004f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2a:	e186      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f2c:	2308      	movs	r3, #8
 8004f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f32:	e182      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f34:	2310      	movs	r3, #16
 8004f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3a:	e17e      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f3c:	2320      	movs	r3, #32
 8004f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f42:	e17a      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f44:	2340      	movs	r3, #64	@ 0x40
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e176      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f4c:	2380      	movs	r3, #128	@ 0x80
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e172      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a5b      	ldr	r2, [pc, #364]	@ (80050c8 <UART_SetConfig+0x63c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d130      	bne.n	8004fc0 <UART_SetConfig+0x534>
 8004f5e:	4b58      	ldr	r3, [pc, #352]	@ (80050c0 <UART_SetConfig+0x634>)
 8004f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d826      	bhi.n	8004fb8 <UART_SetConfig+0x52c>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x4e4>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004f99 	.word	0x08004f99
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e154      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f90:	2304      	movs	r3, #4
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e150      	b.n	800523a <UART_SetConfig+0x7ae>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e14c      	b.n	800523a <UART_SetConfig+0x7ae>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa6:	e148      	b.n	800523a <UART_SetConfig+0x7ae>
 8004fa8:	2320      	movs	r3, #32
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fae:	e144      	b.n	800523a <UART_SetConfig+0x7ae>
 8004fb0:	2340      	movs	r3, #64	@ 0x40
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb6:	e140      	b.n	800523a <UART_SetConfig+0x7ae>
 8004fb8:	2380      	movs	r3, #128	@ 0x80
 8004fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fbe:	e13c      	b.n	800523a <UART_SetConfig+0x7ae>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a41      	ldr	r2, [pc, #260]	@ (80050cc <UART_SetConfig+0x640>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f040 8082 	bne.w	80050d0 <UART_SetConfig+0x644>
 8004fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80050c0 <UART_SetConfig+0x634>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd4:	2b28      	cmp	r3, #40	@ 0x28
 8004fd6:	d86d      	bhi.n	80050b4 <UART_SetConfig+0x628>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <UART_SetConfig+0x554>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005085 	.word	0x08005085
 8004fe4:	080050b5 	.word	0x080050b5
 8004fe8:	080050b5 	.word	0x080050b5
 8004fec:	080050b5 	.word	0x080050b5
 8004ff0:	080050b5 	.word	0x080050b5
 8004ff4:	080050b5 	.word	0x080050b5
 8004ff8:	080050b5 	.word	0x080050b5
 8004ffc:	080050b5 	.word	0x080050b5
 8005000:	0800508d 	.word	0x0800508d
 8005004:	080050b5 	.word	0x080050b5
 8005008:	080050b5 	.word	0x080050b5
 800500c:	080050b5 	.word	0x080050b5
 8005010:	080050b5 	.word	0x080050b5
 8005014:	080050b5 	.word	0x080050b5
 8005018:	080050b5 	.word	0x080050b5
 800501c:	080050b5 	.word	0x080050b5
 8005020:	08005095 	.word	0x08005095
 8005024:	080050b5 	.word	0x080050b5
 8005028:	080050b5 	.word	0x080050b5
 800502c:	080050b5 	.word	0x080050b5
 8005030:	080050b5 	.word	0x080050b5
 8005034:	080050b5 	.word	0x080050b5
 8005038:	080050b5 	.word	0x080050b5
 800503c:	080050b5 	.word	0x080050b5
 8005040:	0800509d 	.word	0x0800509d
 8005044:	080050b5 	.word	0x080050b5
 8005048:	080050b5 	.word	0x080050b5
 800504c:	080050b5 	.word	0x080050b5
 8005050:	080050b5 	.word	0x080050b5
 8005054:	080050b5 	.word	0x080050b5
 8005058:	080050b5 	.word	0x080050b5
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050b5 	.word	0x080050b5
 800506c:	080050b5 	.word	0x080050b5
 8005070:	080050b5 	.word	0x080050b5
 8005074:	080050b5 	.word	0x080050b5
 8005078:	080050b5 	.word	0x080050b5
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	2301      	movs	r3, #1
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e0d6      	b.n	800523a <UART_SetConfig+0x7ae>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e0d2      	b.n	800523a <UART_SetConfig+0x7ae>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e0ce      	b.n	800523a <UART_SetConfig+0x7ae>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e0ca      	b.n	800523a <UART_SetConfig+0x7ae>
 80050a4:	2320      	movs	r3, #32
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e0c6      	b.n	800523a <UART_SetConfig+0x7ae>
 80050ac:	2340      	movs	r3, #64	@ 0x40
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e0c2      	b.n	800523a <UART_SetConfig+0x7ae>
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e0be      	b.n	800523a <UART_SetConfig+0x7ae>
 80050bc:	40011400 	.word	0x40011400
 80050c0:	58024400 	.word	0x58024400
 80050c4:	40007800 	.word	0x40007800
 80050c8:	40007c00 	.word	0x40007c00
 80050cc:	40011800 	.word	0x40011800
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4aad      	ldr	r2, [pc, #692]	@ (800538c <UART_SetConfig+0x900>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d176      	bne.n	80051c8 <UART_SetConfig+0x73c>
 80050da:	4bad      	ldr	r3, [pc, #692]	@ (8005390 <UART_SetConfig+0x904>)
 80050dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050e2:	2b28      	cmp	r3, #40	@ 0x28
 80050e4:	d86c      	bhi.n	80051c0 <UART_SetConfig+0x734>
 80050e6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x660>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005191 	.word	0x08005191
 80050f0:	080051c1 	.word	0x080051c1
 80050f4:	080051c1 	.word	0x080051c1
 80050f8:	080051c1 	.word	0x080051c1
 80050fc:	080051c1 	.word	0x080051c1
 8005100:	080051c1 	.word	0x080051c1
 8005104:	080051c1 	.word	0x080051c1
 8005108:	080051c1 	.word	0x080051c1
 800510c:	08005199 	.word	0x08005199
 8005110:	080051c1 	.word	0x080051c1
 8005114:	080051c1 	.word	0x080051c1
 8005118:	080051c1 	.word	0x080051c1
 800511c:	080051c1 	.word	0x080051c1
 8005120:	080051c1 	.word	0x080051c1
 8005124:	080051c1 	.word	0x080051c1
 8005128:	080051c1 	.word	0x080051c1
 800512c:	080051a1 	.word	0x080051a1
 8005130:	080051c1 	.word	0x080051c1
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051c1 	.word	0x080051c1
 800513c:	080051c1 	.word	0x080051c1
 8005140:	080051c1 	.word	0x080051c1
 8005144:	080051c1 	.word	0x080051c1
 8005148:	080051c1 	.word	0x080051c1
 800514c:	080051a9 	.word	0x080051a9
 8005150:	080051c1 	.word	0x080051c1
 8005154:	080051c1 	.word	0x080051c1
 8005158:	080051c1 	.word	0x080051c1
 800515c:	080051c1 	.word	0x080051c1
 8005160:	080051c1 	.word	0x080051c1
 8005164:	080051c1 	.word	0x080051c1
 8005168:	080051c1 	.word	0x080051c1
 800516c:	080051b1 	.word	0x080051b1
 8005170:	080051c1 	.word	0x080051c1
 8005174:	080051c1 	.word	0x080051c1
 8005178:	080051c1 	.word	0x080051c1
 800517c:	080051c1 	.word	0x080051c1
 8005180:	080051c1 	.word	0x080051c1
 8005184:	080051c1 	.word	0x080051c1
 8005188:	080051c1 	.word	0x080051c1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e050      	b.n	800523a <UART_SetConfig+0x7ae>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e04c      	b.n	800523a <UART_SetConfig+0x7ae>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e048      	b.n	800523a <UART_SetConfig+0x7ae>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e044      	b.n	800523a <UART_SetConfig+0x7ae>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e040      	b.n	800523a <UART_SetConfig+0x7ae>
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e03c      	b.n	800523a <UART_SetConfig+0x7ae>
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e038      	b.n	800523a <UART_SetConfig+0x7ae>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a71      	ldr	r2, [pc, #452]	@ (8005394 <UART_SetConfig+0x908>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d130      	bne.n	8005234 <UART_SetConfig+0x7a8>
 80051d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005390 <UART_SetConfig+0x904>)
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d826      	bhi.n	800522c <UART_SetConfig+0x7a0>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x758>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800520d 	.word	0x0800520d
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	2302      	movs	r3, #2
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e01a      	b.n	800523a <UART_SetConfig+0x7ae>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e016      	b.n	800523a <UART_SetConfig+0x7ae>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e012      	b.n	800523a <UART_SetConfig+0x7ae>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e00e      	b.n	800523a <UART_SetConfig+0x7ae>
 800521c:	2320      	movs	r3, #32
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e00a      	b.n	800523a <UART_SetConfig+0x7ae>
 8005224:	2340      	movs	r3, #64	@ 0x40
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e006      	b.n	800523a <UART_SetConfig+0x7ae>
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e002      	b.n	800523a <UART_SetConfig+0x7ae>
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a55      	ldr	r2, [pc, #340]	@ (8005394 <UART_SetConfig+0x908>)
 8005240:	4293      	cmp	r3, r2
 8005242:	f040 80f8 	bne.w	8005436 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005246:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800524a:	2b20      	cmp	r3, #32
 800524c:	dc46      	bgt.n	80052dc <UART_SetConfig+0x850>
 800524e:	2b02      	cmp	r3, #2
 8005250:	db75      	blt.n	800533e <UART_SetConfig+0x8b2>
 8005252:	3b02      	subs	r3, #2
 8005254:	2b1e      	cmp	r3, #30
 8005256:	d872      	bhi.n	800533e <UART_SetConfig+0x8b2>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x7d4>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	080052e3 	.word	0x080052e3
 8005264:	0800533f 	.word	0x0800533f
 8005268:	080052eb 	.word	0x080052eb
 800526c:	0800533f 	.word	0x0800533f
 8005270:	0800533f 	.word	0x0800533f
 8005274:	0800533f 	.word	0x0800533f
 8005278:	080052fb 	.word	0x080052fb
 800527c:	0800533f 	.word	0x0800533f
 8005280:	0800533f 	.word	0x0800533f
 8005284:	0800533f 	.word	0x0800533f
 8005288:	0800533f 	.word	0x0800533f
 800528c:	0800533f 	.word	0x0800533f
 8005290:	0800533f 	.word	0x0800533f
 8005294:	0800533f 	.word	0x0800533f
 8005298:	0800530b 	.word	0x0800530b
 800529c:	0800533f 	.word	0x0800533f
 80052a0:	0800533f 	.word	0x0800533f
 80052a4:	0800533f 	.word	0x0800533f
 80052a8:	0800533f 	.word	0x0800533f
 80052ac:	0800533f 	.word	0x0800533f
 80052b0:	0800533f 	.word	0x0800533f
 80052b4:	0800533f 	.word	0x0800533f
 80052b8:	0800533f 	.word	0x0800533f
 80052bc:	0800533f 	.word	0x0800533f
 80052c0:	0800533f 	.word	0x0800533f
 80052c4:	0800533f 	.word	0x0800533f
 80052c8:	0800533f 	.word	0x0800533f
 80052cc:	0800533f 	.word	0x0800533f
 80052d0:	0800533f 	.word	0x0800533f
 80052d4:	0800533f 	.word	0x0800533f
 80052d8:	08005331 	.word	0x08005331
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d02a      	beq.n	8005336 <UART_SetConfig+0x8aa>
 80052e0:	e02d      	b.n	800533e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052e2:	f7fe ff57 	bl	8004194 <HAL_RCCEx_GetD3PCLK1Freq>
 80052e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052e8:	e02f      	b.n	800534a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe ff66 	bl	80041c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052f8:	e027      	b.n	800534a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052fa:	f107 0318 	add.w	r3, r7, #24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f8b2 	bl	8004468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005308:	e01f      	b.n	800534a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530a:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <UART_SetConfig+0x904>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005316:	4b1e      	ldr	r3, [pc, #120]	@ (8005390 <UART_SetConfig+0x904>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	08db      	lsrs	r3, r3, #3
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <UART_SetConfig+0x90c>)
 8005322:	fa22 f303 	lsr.w	r3, r2, r3
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005328:	e00f      	b.n	800534a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800532a:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <UART_SetConfig+0x90c>)
 800532c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800532e:	e00c      	b.n	800534a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005330:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <UART_SetConfig+0x910>)
 8005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800533c:	e005      	b.n	800534a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005348:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800534a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 81ee 	beq.w	800572e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	4a12      	ldr	r2, [pc, #72]	@ (80053a0 <UART_SetConfig+0x914>)
 8005358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535c:	461a      	mov	r2, r3
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	fbb3 f3f2 	udiv	r3, r3, r2
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005372:	429a      	cmp	r2, r3
 8005374:	d305      	bcc.n	8005382 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800537c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537e:	429a      	cmp	r2, r3
 8005380:	d910      	bls.n	80053a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005388:	e1d1      	b.n	800572e <UART_SetConfig+0xca2>
 800538a:	bf00      	nop
 800538c:	40011c00 	.word	0x40011c00
 8005390:	58024400 	.word	0x58024400
 8005394:	58000c00 	.word	0x58000c00
 8005398:	03d09000 	.word	0x03d09000
 800539c:	003d0900 	.word	0x003d0900
 80053a0:	08005cf8 	.word	0x08005cf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2200      	movs	r2, #0
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	60fa      	str	r2, [r7, #12]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	4ac0      	ldr	r2, [pc, #768]	@ (80056b4 <UART_SetConfig+0xc28>)
 80053b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2200      	movs	r2, #0
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053c6:	f7fa ff91 	bl	80002ec <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	020b      	lsls	r3, r1, #8
 80053dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053e0:	0202      	lsls	r2, r0, #8
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	6849      	ldr	r1, [r1, #4]
 80053e6:	0849      	lsrs	r1, r1, #1
 80053e8:	2000      	movs	r0, #0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4605      	mov	r5, r0
 80053ee:	eb12 0804 	adds.w	r8, r2, r4
 80053f2:	eb43 0905 	adc.w	r9, r3, r5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	469a      	mov	sl, r3
 80053fe:	4693      	mov	fp, r2
 8005400:	4652      	mov	r2, sl
 8005402:	465b      	mov	r3, fp
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fa ff70 	bl	80002ec <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541a:	d308      	bcc.n	800542e <UART_SetConfig+0x9a2>
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005422:	d204      	bcs.n	800542e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e17f      	b.n	800572e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005434:	e17b      	b.n	800572e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800543e:	f040 80bd 	bne.w	80055bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005442:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005446:	2b20      	cmp	r3, #32
 8005448:	dc48      	bgt.n	80054dc <UART_SetConfig+0xa50>
 800544a:	2b00      	cmp	r3, #0
 800544c:	db7b      	blt.n	8005546 <UART_SetConfig+0xaba>
 800544e:	2b20      	cmp	r3, #32
 8005450:	d879      	bhi.n	8005546 <UART_SetConfig+0xaba>
 8005452:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <UART_SetConfig+0x9cc>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	080054e3 	.word	0x080054e3
 800545c:	080054eb 	.word	0x080054eb
 8005460:	08005547 	.word	0x08005547
 8005464:	08005547 	.word	0x08005547
 8005468:	080054f3 	.word	0x080054f3
 800546c:	08005547 	.word	0x08005547
 8005470:	08005547 	.word	0x08005547
 8005474:	08005547 	.word	0x08005547
 8005478:	08005503 	.word	0x08005503
 800547c:	08005547 	.word	0x08005547
 8005480:	08005547 	.word	0x08005547
 8005484:	08005547 	.word	0x08005547
 8005488:	08005547 	.word	0x08005547
 800548c:	08005547 	.word	0x08005547
 8005490:	08005547 	.word	0x08005547
 8005494:	08005547 	.word	0x08005547
 8005498:	08005513 	.word	0x08005513
 800549c:	08005547 	.word	0x08005547
 80054a0:	08005547 	.word	0x08005547
 80054a4:	08005547 	.word	0x08005547
 80054a8:	08005547 	.word	0x08005547
 80054ac:	08005547 	.word	0x08005547
 80054b0:	08005547 	.word	0x08005547
 80054b4:	08005547 	.word	0x08005547
 80054b8:	08005547 	.word	0x08005547
 80054bc:	08005547 	.word	0x08005547
 80054c0:	08005547 	.word	0x08005547
 80054c4:	08005547 	.word	0x08005547
 80054c8:	08005547 	.word	0x08005547
 80054cc:	08005547 	.word	0x08005547
 80054d0:	08005547 	.word	0x08005547
 80054d4:	08005547 	.word	0x08005547
 80054d8:	08005539 	.word	0x08005539
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d02e      	beq.n	800553e <UART_SetConfig+0xab2>
 80054e0:	e031      	b.n	8005546 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e2:	f7fd fc6d 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 80054e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054e8:	e033      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ea:	f7fd fc7f 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 80054ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054f0:	e02f      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fe62 	bl	80041c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005500:	e027      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005502:	f107 0318 	add.w	r3, r7, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe ffae 	bl	8004468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005510:	e01f      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005512:	4b69      	ldr	r3, [pc, #420]	@ (80056b8 <UART_SetConfig+0xc2c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551e:	4b66      	ldr	r3, [pc, #408]	@ (80056b8 <UART_SetConfig+0xc2c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	08db      	lsrs	r3, r3, #3
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	4a64      	ldr	r2, [pc, #400]	@ (80056bc <UART_SetConfig+0xc30>)
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005530:	e00f      	b.n	8005552 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005532:	4b62      	ldr	r3, [pc, #392]	@ (80056bc <UART_SetConfig+0xc30>)
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005536:	e00c      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005538:	4b61      	ldr	r3, [pc, #388]	@ (80056c0 <UART_SetConfig+0xc34>)
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80ea 	beq.w	800572e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	4a55      	ldr	r2, [pc, #340]	@ (80056b4 <UART_SetConfig+0xc28>)
 8005560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005564:	461a      	mov	r2, r3
 8005566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005568:	fbb3 f3f2 	udiv	r3, r3, r2
 800556c:	005a      	lsls	r2, r3, #1
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	441a      	add	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d916      	bls.n	80055b4 <UART_SetConfig+0xb28>
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d212      	bcs.n	80055b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	b29b      	uxth	r3, r3
 8005592:	f023 030f 	bic.w	r3, r3, #15
 8005596:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	b29b      	uxth	r3, r3
 800559e:	f003 0307 	and.w	r3, r3, #7
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80055a6:	4313      	orrs	r3, r2
 80055a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	e0bc      	b.n	800572e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055ba:	e0b8      	b.n	800572e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	dc4b      	bgt.n	800565c <UART_SetConfig+0xbd0>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f2c0 8087 	blt.w	80056d8 <UART_SetConfig+0xc4c>
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	f200 8084 	bhi.w	80056d8 <UART_SetConfig+0xc4c>
 80055d0:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0xb4c>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	08005663 	.word	0x08005663
 80055dc:	0800566b 	.word	0x0800566b
 80055e0:	080056d9 	.word	0x080056d9
 80055e4:	080056d9 	.word	0x080056d9
 80055e8:	08005673 	.word	0x08005673
 80055ec:	080056d9 	.word	0x080056d9
 80055f0:	080056d9 	.word	0x080056d9
 80055f4:	080056d9 	.word	0x080056d9
 80055f8:	08005683 	.word	0x08005683
 80055fc:	080056d9 	.word	0x080056d9
 8005600:	080056d9 	.word	0x080056d9
 8005604:	080056d9 	.word	0x080056d9
 8005608:	080056d9 	.word	0x080056d9
 800560c:	080056d9 	.word	0x080056d9
 8005610:	080056d9 	.word	0x080056d9
 8005614:	080056d9 	.word	0x080056d9
 8005618:	08005693 	.word	0x08005693
 800561c:	080056d9 	.word	0x080056d9
 8005620:	080056d9 	.word	0x080056d9
 8005624:	080056d9 	.word	0x080056d9
 8005628:	080056d9 	.word	0x080056d9
 800562c:	080056d9 	.word	0x080056d9
 8005630:	080056d9 	.word	0x080056d9
 8005634:	080056d9 	.word	0x080056d9
 8005638:	080056d9 	.word	0x080056d9
 800563c:	080056d9 	.word	0x080056d9
 8005640:	080056d9 	.word	0x080056d9
 8005644:	080056d9 	.word	0x080056d9
 8005648:	080056d9 	.word	0x080056d9
 800564c:	080056d9 	.word	0x080056d9
 8005650:	080056d9 	.word	0x080056d9
 8005654:	080056d9 	.word	0x080056d9
 8005658:	080056cb 	.word	0x080056cb
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d037      	beq.n	80056d0 <UART_SetConfig+0xc44>
 8005660:	e03a      	b.n	80056d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7fd fbad 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8005666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005668:	e03c      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566a:	f7fd fbbf 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 800566e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005670:	e038      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fda2 	bl	80041c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800567c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005680:	e030      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005682:	f107 0318 	add.w	r3, r7, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe feee 	bl	8004468 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005690:	e028      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <UART_SetConfig+0xc2c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d012      	beq.n	80056c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800569e:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <UART_SetConfig+0xc2c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	08db      	lsrs	r3, r3, #3
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <UART_SetConfig+0xc30>)
 80056aa:	fa22 f303 	lsr.w	r3, r2, r3
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056b0:	e018      	b.n	80056e4 <UART_SetConfig+0xc58>
 80056b2:	bf00      	nop
 80056b4:	08005cf8 	.word	0x08005cf8
 80056b8:	58024400 	.word	0x58024400
 80056bc:	03d09000 	.word	0x03d09000
 80056c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80056c4:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <UART_SetConfig+0xccc>)
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c8:	e00c      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056ca:	4b24      	ldr	r3, [pc, #144]	@ (800575c <UART_SetConfig+0xcd0>)
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ce:	e009      	b.n	80056e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d6:	e005      	b.n	80056e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056e2:	bf00      	nop
    }

    if (pclk != 0U)
 80056e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d021      	beq.n	800572e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <UART_SetConfig+0xcd4>)
 80056f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	441a      	add	r2, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2b0f      	cmp	r3, #15
 8005712:	d909      	bls.n	8005728 <UART_SetConfig+0xc9c>
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571a:	d205      	bcs.n	8005728 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	b29a      	uxth	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e002      	b.n	800572e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2201      	movs	r2, #1
 8005732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2201      	movs	r2, #1
 800573a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2200      	movs	r2, #0
 8005742:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2200      	movs	r2, #0
 8005748:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800574a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800574e:	4618      	mov	r0, r3
 8005750:	3748      	adds	r7, #72	@ 0x48
 8005752:	46bd      	mov	sp, r7
 8005754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005758:	03d09000 	.word	0x03d09000
 800575c:	003d0900 	.word	0x003d0900
 8005760:	08005cf8 	.word	0x08005cf8

08005764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005862:	d10a      	bne.n	800587a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b098      	sub	sp, #96	@ 0x60
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058b8:	f7fb fd56 	bl	8001368 <HAL_GetTick>
 80058bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d12f      	bne.n	800592c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d4:	2200      	movs	r2, #0
 80058d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f88e 	bl	80059fc <UART_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d022      	beq.n	800592c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	e853 3f00 	ldrex	r3, [r3]
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005904:	647b      	str	r3, [r7, #68]	@ 0x44
 8005906:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800590a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e6      	bne.n	80058e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e063      	b.n	80059f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b04      	cmp	r3, #4
 8005938:	d149      	bne.n	80059ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f857 	bl	80059fc <UART_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d03c      	beq.n	80059ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	623b      	str	r3, [r7, #32]
   return(result);
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
 8005974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e6      	bne.n	8005954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	60fb      	str	r3, [r7, #12]
   return(result);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059a6:	61fa      	str	r2, [r7, #28]
 80059a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	617b      	str	r3, [r7, #20]
   return(result);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e5      	bne.n	8005986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e012      	b.n	80059f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3758      	adds	r7, #88	@ 0x58
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a0c:	e04f      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d04b      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fb fca7 	bl	8001368 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e04e      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d037      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b80      	cmp	r3, #128	@ 0x80
 8005a42:	d034      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b40      	cmp	r3, #64	@ 0x40
 8005a48:	d031      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d110      	bne.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f839 	bl	8005ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e029      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a88:	d111      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f81f 	bl	8005ad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e00f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d0a0      	beq.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b095      	sub	sp, #84	@ 0x54
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba0 <UART_EndRxTransfer+0xc8>)
 8005b26:	4013      	ands	r3, r2
 8005b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e5      	bne.n	8005b12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d118      	bne.n	8005b80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b94:	bf00      	nop
 8005b96:	3754      	adds	r7, #84	@ 0x54
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	effffffe 	.word	0xeffffffe

08005ba4 <FMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_Init(FMC_NAND_TypeDef *Device, const FMC_NAND_InitTypeDef *Init)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FMC_TAR_TIME(Init->TARSetupTime));

  /* NAND bank 3 registers configuration */
  MODIFY_REG(Device->PCR, PCR_CLEAR_MASK, (Init->Waitfeature                            |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <FMC_NAND_Init+0x50>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	6851      	ldr	r1, [r2, #4]
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	4311      	orrs	r1, r2
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	68d2      	ldr	r2, [r2, #12]
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	6912      	ldr	r2, [r2, #16]
 8005bca:	4311      	orrs	r1, r2
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	6952      	ldr	r2, [r2, #20]
 8005bd0:	0252      	lsls	r2, r2, #9
 8005bd2:	4311      	orrs	r1, r2
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	6992      	ldr	r2, [r2, #24]
 8005bd8:	0352      	lsls	r2, r2, #13
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f043 0208 	orr.w	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
                                           Init->EccComputation                         |
                                           Init->ECCPageSize                            |
                                           ((Init->TCLRSetupTime) << FMC_PCR_TCLR_Pos)  |
                                           ((Init->TARSetupTime)  << FMC_PCR_TAR_Pos)));

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	fff00189 	.word	0xfff00189

08005bf8 <FMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_CommonSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                   const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PMEM = (Timing->SetupTime |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	021b      	lsls	r3, r3, #8
  Device->PMEM = (Timing->SetupTime |
 8005c0e:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PMEM_MEMWAIT_Pos) |
 8005c16:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime) << FMC_PMEM_MEMHIZ_Pos));
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PMEM_MEMHOLD_Pos) |
 8005c1e:	431a      	orrs	r2, r3
  Device->PMEM = (Timing->SetupTime |
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <FMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NAND_AttributeSpace_Timing_Init(FMC_NAND_TypeDef *Device,
                                                      const FMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b085      	sub	sp, #20
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(Bank);

  /* NAND bank 3 registers configuration */
  Device->PATT = (Timing->SetupTime |
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	681a      	ldr	r2, [r3, #0]
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	021b      	lsls	r3, r3, #8
  Device->PATT = (Timing->SetupTime |
 8005c48:	431a      	orrs	r2, r3
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	041b      	lsls	r3, r3, #16
                  ((Timing->WaitSetupTime) << FMC_PATT_ATTWAIT_Pos) |
 8005c50:	431a      	orrs	r2, r3
                  ((Timing->HiZSetupTime)  << FMC_PATT_ATTHIZ_Pos));
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	061b      	lsls	r3, r3, #24
                  ((Timing->HoldSetupTime) << FMC_PATT_ATTHOLD_Pos) |
 8005c58:	431a      	orrs	r2, r3
  Device->PATT = (Timing->SetupTime |
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <__libc_init_array>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb4 <__libc_init_array+0x38>)
 8005c80:	4c0d      	ldr	r4, [pc, #52]	@ (8005cb8 <__libc_init_array+0x3c>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	2600      	movs	r6, #0
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	d109      	bne.n	8005ca0 <__libc_init_array+0x24>
 8005c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005cbc <__libc_init_array+0x40>)
 8005c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005cc0 <__libc_init_array+0x44>)
 8005c90:	f000 f818 	bl	8005cc4 <_init>
 8005c94:	1b64      	subs	r4, r4, r5
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	2600      	movs	r6, #0
 8005c9a:	42a6      	cmp	r6, r4
 8005c9c:	d105      	bne.n	8005caa <__libc_init_array+0x2e>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca4:	4798      	blx	r3
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7ee      	b.n	8005c88 <__libc_init_array+0xc>
 8005caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cae:	4798      	blx	r3
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	e7f2      	b.n	8005c9a <__libc_init_array+0x1e>
 8005cb4:	08005d18 	.word	0x08005d18
 8005cb8:	08005d18 	.word	0x08005d18
 8005cbc:	08005d18 	.word	0x08005d18
 8005cc0:	08005d1c 	.word	0x08005d1c

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
