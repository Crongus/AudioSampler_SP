
keypad_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008654  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005410  08008908  08008908  00009908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dd18  0800dd18  0000ed18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dd20  0800dd20  0000ed20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800dd28  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000674  2400007c  0800dda4  0000f07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240006f0  0800dda4  0000f6f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014d1d  00000000  00000000  0000f0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b08  00000000  00000000  00023dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f50  00000000  00000000  000268d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bcc  00000000  00000000  00027820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030a6b  00000000  00000000  000283ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001639a  00000000  00000000  00058e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136584  00000000  00000000  0006f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a5775  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004660  00000000  00000000  001a57b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009d  00000000  00000000  001a9e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080088ec 	.word	0x080088ec

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	080088ec 	.word	0x080088ec

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t rows[4] = {0, 0, 0, 0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
	uint16_t cols[5] = {0, 0, 0, 0, 0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	811a      	strh	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a12:	f000 f9e7 	bl	8000de4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f002 f8f1 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f857 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f909 	bl	8000c34 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000a22:	f000 f8c7 	bl	8000bb4 <MX_I2C4_Init>
  ssd1306_Init();
 8000a26:	f000 fa49 	bl	8000ebc <ssd1306_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 ff1e 	bl	800286c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f001 ff1b 	bl	800286c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f001 ff18 	bl	800286c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 ff8a 	bl	8002958 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <main+0xc0>)
 8000a46:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <main+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <main+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <main+0xc0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <main+0xc0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a64:	4914      	ldr	r1, [pc, #80]	@ (8000ab8 <main+0xc0>)
 8000a66:	2000      	movs	r0, #0
 8000a68:	f002 f806 	bl	8002a78 <BSP_COM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <main+0x7e>
  {
    Error_Handler();
 8000a72:	f000 f9e3 	bl	8000e3c <Error_Handler>
  }

  ssd1306_TestAll();
 8000a76:	f001 fcef 	bl	8002458 <ssd1306_TestAll>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	@ 0x40
 8000a7e:	480f      	ldr	r0, [pc, #60]	@ (8000abc <main+0xc4>)
 8000a80:	f002 fd26 	bl	80034d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8a:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <main+0xc8>)
 8000a8c:	f002 fd20 	bl	80034d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <main+0xcc>)
 8000a98:	f002 fd1a 	bl	80034d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <main+0xcc>)
 8000aa4:	f002 fd14 	bl	80034d0 <HAL_GPIO_WritePin>
	  //Drive all kp rows LO before we go into the keypad reading loop
	  cols[0] = HAL_GPIO_ReadPin(C1GPIOBANK, C1GPIOPIN);
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <main+0xd0>)
 8000aac:	f002 fcf8 	bl	80034a0 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	80bb      	strh	r3, [r7, #4]
	  HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 8000ab4:	bf00      	nop
 8000ab6:	e7e0      	b.n	8000a7a <main+0x82>
 8000ab8:	24000098 	.word	0x24000098
 8000abc:	58020400 	.word	0x58020400
 8000ac0:	58021800 	.word	0x58021800
 8000ac4:	58021000 	.word	0x58021000
 8000ac8:	58020800 	.word	0x58020800

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	@ 0x70
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	224c      	movs	r2, #76	@ 0x4c
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 f8f4 	bl	8007cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f007 f8ee 	bl	8007cc8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <SystemClock_Config+0xe0>)
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000af6:	2004      	movs	r0, #4
 8000af8:	f003 f9ba 	bl	8003e70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <SystemClock_Config+0xe4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb0 <SystemClock_Config+0xe4>)
 8000b06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <SystemClock_Config+0xe4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b18:	bf00      	nop
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <SystemClock_Config+0xe4>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b26:	d1f8      	bne.n	8000b1a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000b30:	2340      	movs	r3, #64	@ 0x40
 8000b32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b40:	2308      	movs	r3, #8
 8000b42:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b50:	230c      	movs	r3, #12
 8000b52:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 f9df 	bl	8003f24 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b6c:	f000 f966 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	233f      	movs	r3, #63	@ 0x3f
 8000b72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2303      	movs	r3, #3
 8000b76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fdf7 	bl	8004788 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ba0:	f000 f94c 	bl	8000e3c <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3770      	adds	r7, #112	@ 0x70
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58024800 	.word	0x58024800

08000bb4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bba:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <MX_I2C4_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <MX_I2C4_Init+0x7c>)
 8000bc2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000bee:	480e      	ldr	r0, [pc, #56]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000bf0:	f002 fc88 	bl	8003504 <HAL_I2C_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000bfa:	f000 f91f 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4809      	ldr	r0, [pc, #36]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000c02:	f003 f89d 	bl	8003d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c0c:	f000 f916 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_I2C4_Init+0x74>)
 8000c14:	f003 f8df 	bl	8003dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c1e:	f000 f90d 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	240000a8 	.word	0x240000a8
 8000c2c:	58001c00 	.word	0x58001c00
 8000c30:	10707dbc 	.word	0x10707dbc

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	@ 0x30
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b60      	ldr	r3, [pc, #384]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c50:	4a5e      	ldr	r2, [pc, #376]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c60:	f003 0304 	and.w	r3, r3, #4
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c68:	4b58      	ldr	r3, [pc, #352]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c6e:	4a57      	ldr	r2, [pc, #348]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c78:	4b54      	ldr	r3, [pc, #336]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b51      	ldr	r3, [pc, #324]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c96:	4b4d      	ldr	r3, [pc, #308]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca4:	4b49      	ldr	r3, [pc, #292]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000caa:	4a48      	ldr	r2, [pc, #288]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cb4:	4b45      	ldr	r3, [pc, #276]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cc8:	4a40      	ldr	r2, [pc, #256]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000ce2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ce6:	4a39      	ldr	r2, [pc, #228]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cf0:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <MX_GPIO_Init+0x198>)
 8000cf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d04:	4832      	ldr	r0, [pc, #200]	@ (8000dd0 <MX_GPIO_Init+0x19c>)
 8000d06:	f002 fbe3 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d10:	4830      	ldr	r0, [pc, #192]	@ (8000dd4 <MX_GPIO_Init+0x1a0>)
 8000d12:	f002 fbdd 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	@ 0x40
 8000d1a:	482f      	ldr	r0, [pc, #188]	@ (8000dd8 <MX_GPIO_Init+0x1a4>)
 8000d1c:	f002 fbd8 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d20:	230d      	movs	r3, #13
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	482a      	ldr	r0, [pc, #168]	@ (8000ddc <MX_GPIO_Init+0x1a8>)
 8000d34:	f002 fa04 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4823      	ldr	r0, [pc, #140]	@ (8000dd8 <MX_GPIO_Init+0x1a4>)
 8000d4c:	f002 f9f8 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0x1ac>)
 8000d66:	f002 f9eb 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d6a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <MX_GPIO_Init+0x19c>)
 8000d84:	f002 f9dc 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <MX_GPIO_Init+0x1a0>)
 8000da2:	f002 f9cd 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da6:	2340      	movs	r3, #64	@ 0x40
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_GPIO_Init+0x1a4>)
 8000dbe:	f002 f9bf 	bl	8003140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	@ 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58021000 	.word	0x58021000
 8000dd4:	58021800 	.word	0x58021800
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58020800 	.word	0x58020800
 8000de0:	58021400 	.word	0x58021400

08000de4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000df6:	f002 f8c7 	bl	8002f88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e06:	231f      	movs	r3, #31
 8000e08:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e0a:	2387      	movs	r3, #135	@ 0x87
 8000e0c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e12:	2300      	movs	r3, #0
 8000e14:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e26:	463b      	mov	r3, r7
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 f8e5 	bl	8002ff8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e2e:	2004      	movs	r0, #4
 8000e30:	f002 f8c2 	bl	8002fb8 <HAL_MPU_Enable>

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af04      	add	r7, sp, #16
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	2200      	movs	r2, #0
 8000e74:	2178      	movs	r1, #120	@ 0x78
 8000e76:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <ssd1306_WriteCommand+0x2c>)
 8000e78:	f002 fbe0 	bl	800363c <HAL_I2C_Mem_Write>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	240000a8 	.word	0x240000a8

08000e88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	9202      	str	r2, [sp, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2240      	movs	r2, #64	@ 0x40
 8000ea6:	2178      	movs	r1, #120	@ 0x78
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <ssd1306_WriteData+0x30>)
 8000eaa:	f002 fbc7 	bl	800363c <HAL_I2C_Mem_Write>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240000a8 	.word	0x240000a8

08000ebc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ec0:	f7ff ffc2 	bl	8000e48 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	@ 0x64
 8000ec6:	f001 ff2b 	bl	8002d20 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 ff78 	bl	8001dc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	f7ff ffc1 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff ffbe 	bl	8000e58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000edc:	20b0      	movs	r0, #176	@ 0xb0
 8000ede:	f7ff ffbb 	bl	8000e58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ee2:	20c8      	movs	r0, #200	@ 0xc8
 8000ee4:	f7ff ffb8 	bl	8000e58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffb5 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f7ff ffb2 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ef4:	2040      	movs	r0, #64	@ 0x40
 8000ef6:	f7ff ffaf 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000efa:	20ff      	movs	r0, #255	@ 0xff
 8000efc:	f000 ff4d 	bl	8001d9a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f00:	20a1      	movs	r0, #161	@ 0xa1
 8000f02:	f7ff ffa9 	bl	8000e58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f06:	20a6      	movs	r0, #166	@ 0xa6
 8000f08:	f7ff ffa6 	bl	8000e58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f0c:	20a8      	movs	r0, #168	@ 0xa8
 8000f0e:	f7ff ffa3 	bl	8000e58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f12:	203f      	movs	r0, #63	@ 0x3f
 8000f14:	f7ff ffa0 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f18:	20a4      	movs	r0, #164	@ 0xa4
 8000f1a:	f7ff ff9d 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f1e:	20d3      	movs	r0, #211	@ 0xd3
 8000f20:	f7ff ff9a 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff97 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f2a:	20d5      	movs	r0, #213	@ 0xd5
 8000f2c:	f7ff ff94 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f30:	20f0      	movs	r0, #240	@ 0xf0
 8000f32:	f7ff ff91 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000f36:	20d9      	movs	r0, #217	@ 0xd9
 8000f38:	f7ff ff8e 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000f3c:	2022      	movs	r0, #34	@ 0x22
 8000f3e:	f7ff ff8b 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000f42:	20da      	movs	r0, #218	@ 0xda
 8000f44:	f7ff ff88 	bl	8000e58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000f48:	2012      	movs	r0, #18
 8000f4a:	f7ff ff85 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000f4e:	20db      	movs	r0, #219	@ 0xdb
 8000f50:	f7ff ff82 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000f54:	2020      	movs	r0, #32
 8000f56:	f7ff ff7f 	bl	8000e58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000f5a:	208d      	movs	r0, #141	@ 0x8d
 8000f5c:	f7ff ff7c 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000f60:	2014      	movs	r0, #20
 8000f62:	f7ff ff79 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 ff2a 	bl	8001dc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f80f 	bl	8000f90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000f72:	f000 f825 	bl	8000fc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <ssd1306_Init+0xd0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <ssd1306_Init+0xd0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f82:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <ssd1306_Init+0xd0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	711a      	strb	r2, [r3, #4]
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	240004fc 	.word	0x240004fc

08000f90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <ssd1306_Fill+0x14>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e000      	b.n	8000fa6 <ssd1306_Fill+0x16>
 8000fa4:	23ff      	movs	r3, #255	@ 0xff
 8000fa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000faa:	4619      	mov	r1, r3
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <ssd1306_Fill+0x2c>)
 8000fae:	f006 fe8b 	bl	8007cc8 <memset>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	240000fc 	.word	0x240000fc

08000fc0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	e016      	b.n	8000ffa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3b50      	subs	r3, #80	@ 0x50
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff40 	bl	8000e58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ff3d 	bl	8000e58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f7ff ff3a 	bl	8000e58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	01db      	lsls	r3, r3, #7
 8000fe8:	4a08      	ldr	r2, [pc, #32]	@ (800100c <ssd1306_UpdateScreen+0x4c>)
 8000fea:	4413      	add	r3, r2
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff4a 	bl	8000e88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b07      	cmp	r3, #7
 8000ffe:	d9e5      	bls.n	8000fcc <ssd1306_UpdateScreen+0xc>
    }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	240000fc 	.word	0x240000fc

08001010 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	460b      	mov	r3, r1
 800101c:	71bb      	strb	r3, [r7, #6]
 800101e:	4613      	mov	r3, r2
 8001020:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db3d      	blt.n	80010a6 <ssd1306_DrawPixel+0x96>
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	2b3f      	cmp	r3, #63	@ 0x3f
 800102e:	d83a      	bhi.n	80010a6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d11a      	bne.n	800106c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	b2d8      	uxtb	r0, r3
 800103e:	4603      	mov	r3, r0
 8001040:	01db      	lsls	r3, r3, #7
 8001042:	4413      	add	r3, r2
 8001044:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <ssd1306_DrawPixel+0xa4>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	b25a      	sxtb	r2, r3
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	b25b      	sxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b259      	sxtb	r1, r3
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	4603      	mov	r3, r0
 8001060:	01db      	lsls	r3, r3, #7
 8001062:	4413      	add	r3, r2
 8001064:	b2c9      	uxtb	r1, r1
 8001066:	4a13      	ldr	r2, [pc, #76]	@ (80010b4 <ssd1306_DrawPixel+0xa4>)
 8001068:	54d1      	strb	r1, [r2, r3]
 800106a:	e01d      	b.n	80010a8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	4603      	mov	r3, r0
 8001076:	01db      	lsls	r3, r3, #7
 8001078:	4413      	add	r3, r2
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <ssd1306_DrawPixel+0xa4>)
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	b25a      	sxtb	r2, r3
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	b25b      	sxtb	r3, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4013      	ands	r3, r2
 8001094:	b259      	sxtb	r1, r3
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	4603      	mov	r3, r0
 800109a:	01db      	lsls	r3, r3, #7
 800109c:	4413      	add	r3, r2
 800109e:	b2c9      	uxtb	r1, r1
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <ssd1306_DrawPixel+0xa4>)
 80010a2:	54d1      	strb	r1, [r2, r3]
 80010a4:	e000      	b.n	80010a8 <ssd1306_DrawPixel+0x98>
        return;
 80010a6:	bf00      	nop
    }
}
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	240000fc 	.word	0x240000fc

080010b8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4638      	mov	r0, r7
 80010c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010c6:	4623      	mov	r3, r4
 80010c8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b1f      	cmp	r3, #31
 80010ce:	d902      	bls.n	80010d6 <ssd1306_WriteChar+0x1e>
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80010d4:	d901      	bls.n	80010da <ssd1306_WriteChar+0x22>
        return 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e077      	b.n	80011ca <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80010da:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	783b      	ldrb	r3, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	2b80      	cmp	r3, #128	@ 0x80
 80010e6:	dc06      	bgt.n	80010f6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80010e8:	4b3a      	ldr	r3, [pc, #232]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	461a      	mov	r2, r3
 80010ee:	787b      	ldrb	r3, [r7, #1]
 80010f0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80010f2:	2b40      	cmp	r3, #64	@ 0x40
 80010f4:	dd01      	ble.n	80010fa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e067      	b.n	80011ca <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e04e      	b.n	800119e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	3b20      	subs	r3, #32
 8001106:	7879      	ldrb	r1, [r7, #1]
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4619      	mov	r1, r3
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	440b      	add	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	e036      	b.n	800118e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b2d8      	uxtb	r0, r3
 800113e:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 8001140:	885b      	ldrh	r3, [r3, #2]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff ff5d 	bl	8001010 <ssd1306_DrawPixel>
 8001156:	e017      	b.n	8001188 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b2d8      	uxtb	r0, r3
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 8001168:	885b      	ldrh	r3, [r3, #2]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4413      	add	r3, r2
 8001172:	b2d9      	uxtb	r1, r3
 8001174:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f7ff ff44 	bl	8001010 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	3301      	adds	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	783b      	ldrb	r3, [r7, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4293      	cmp	r3, r2
 8001196:	d3c3      	bcc.n	8001120 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	3301      	adds	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	787b      	ldrb	r3, [r7, #1]
 80011a0:	461a      	mov	r2, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d3ab      	bcc.n	8001100 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d005      	beq.n	80011be <ssd1306_WriteChar+0x106>
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	3a20      	subs	r2, #32
 80011b8:	440a      	add	r2, r1
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	e000      	b.n	80011c0 <ssd1306_WriteChar+0x108>
 80011be:	783a      	ldrb	r2, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <ssd1306_WriteChar+0x11c>)
 80011c6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	240004fc 	.word	0x240004fc

080011d8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	4638      	mov	r0, r7
 80011e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80011e6:	e013      	b.n	8001210 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7818      	ldrb	r0, [r3, #0]
 80011ec:	7e3b      	ldrb	r3, [r7, #24]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	463b      	mov	r3, r7
 80011f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f4:	f7ff ff60 	bl	80010b8 <ssd1306_WriteChar>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d002      	beq.n	800120a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	e008      	b.n	800121c <ssd1306_WriteString+0x44>
        }
        str++;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3301      	adds	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e7      	bne.n	80011e8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	781b      	ldrb	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <ssd1306_SetCursor+0x2c>)
 800123a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <ssd1306_SetCursor+0x2c>)
 8001242:	805a      	strh	r2, [r3, #2]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	240004fc 	.word	0x240004fc

08001254 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001272:	797a      	ldrb	r2, [r7, #5]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	bfb8      	it	lt
 800127c:	425b      	neglt	r3, r3
 800127e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001280:	793a      	ldrb	r2, [r7, #4]
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	bfb8      	it	lt
 800128a:	425b      	neglt	r3, r3
 800128c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	797b      	ldrb	r3, [r7, #5]
 8001292:	429a      	cmp	r2, r3
 8001294:	d201      	bcs.n	800129a <ssd1306_Line+0x46>
 8001296:	2301      	movs	r3, #1
 8001298:	e001      	b.n	800129e <ssd1306_Line+0x4a>
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80012a0:	79ba      	ldrb	r2, [r7, #6]
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d201      	bcs.n	80012ac <ssd1306_Line+0x58>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e001      	b.n	80012b0 <ssd1306_Line+0x5c>
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80012ba:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80012be:	7939      	ldrb	r1, [r7, #4]
 80012c0:	797b      	ldrb	r3, [r7, #5]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fea4 	bl	8001010 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80012c8:	e024      	b.n	8001314 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80012ca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80012ce:	79b9      	ldrb	r1, [r7, #6]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe9c 	bl	8001010 <ssd1306_DrawPixel>
        error2 = error * 2;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	425b      	negs	r3, r3
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dd08      	ble.n	80012fa <ssd1306_Line+0xa6>
            error -= deltaY;
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4413      	add	r3, r2
 80012f8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	429a      	cmp	r2, r3
 8001300:	da08      	bge.n	8001314 <ssd1306_Line+0xc0>
            error += deltaX;
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4413      	add	r3, r2
 8001308:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	4413      	add	r3, r2
 8001312:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	797b      	ldrb	r3, [r7, #5]
 8001318:	429a      	cmp	r2, r3
 800131a:	d1d6      	bne.n	80012ca <ssd1306_Line+0x76>
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	793b      	ldrb	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	d1d2      	bne.n	80012ca <ssd1306_Line+0x76>
        }
    }
    return;
 8001324:	bf00      	nop
}
 8001326:	3724      	adds	r7, #36	@ 0x24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b087      	sub	sp, #28
 8001330:	af02      	add	r7, sp, #8
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d02a      	beq.n	8001398 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001342:	2301      	movs	r3, #1
 8001344:	81fb      	strh	r3, [r7, #14]
 8001346:	e022      	b.n	800138e <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001348:	89fa      	ldrh	r2, [r7, #14]
 800134a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	7818      	ldrb	r0, [r3, #0]
 8001358:	89fa      	ldrh	r2, [r7, #14]
 800135a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	7859      	ldrb	r1, [r3, #1]
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781c      	ldrb	r4, [r3, #0]
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	785a      	ldrb	r2, [r3, #1]
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	4622      	mov	r2, r4
 8001384:	f7ff ff66 	bl	8001254 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	3301      	adds	r3, #1
 800138c:	81fb      	strh	r3, [r7, #14]
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	429a      	cmp	r2, r3
 8001394:	d3d8      	bcc.n	8001348 <ssd1306_Polyline+0x1c>
    }

    return;
 8001396:	e000      	b.n	800139a <ssd1306_Polyline+0x6e>
        return;
 8001398:	bf00      	nop
}
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}

080013a0 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 80013aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ae:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80013c4 <ssd1306_DegToRad+0x24>
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	3c8ee7a7 	.word	0x3c8ee7a7

080013c8 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80013d8:	d802      	bhi.n	80013e0 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	81fb      	strh	r3, [r7, #14]
 80013de:	e013      	b.n	8001408 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	490c      	ldr	r1, [pc, #48]	@ (8001418 <ssd1306_NormalizeTo0_360+0x50>)
 80013e6:	fba1 1202 	umull	r1, r2, r1, r2
 80013ea:	0892      	lsrs	r2, r2, #2
 80013ec:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80013f0:	fb01 f202 	mul.w	r2, r1, r2
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <ssd1306_NormalizeTo0_360+0x3a>
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	e001      	b.n	8001406 <ssd1306_NormalizeTo0_360+0x3e>
 8001402:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001406:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001408:	89fb      	ldrh	r3, [r7, #14]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	16c16c17 	.word	0x16c16c17

0800141c <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	@ 0x34
 8001420:	af02      	add	r7, sp, #8
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	4603      	mov	r3, r0
 8001430:	73bb      	strb	r3, [r7, #14]
 8001432:	460b      	mov	r3, r1
 8001434:	737b      	strb	r3, [r7, #13]
 8001436:	4613      	mov	r3, r2
 8001438:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800143a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffc3 	bl	80013c8 <ssd1306_NormalizeTo0_360>
 8001442:	4603      	mov	r3, r0
 8001444:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ffbd 	bl	80013c8 <ssd1306_NormalizeTo0_360>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <ssd1306_DrawArc+0x1c4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4a62      	ldr	r2, [pc, #392]	@ (80015e4 <ssd1306_DrawArc+0x1c8>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	441a      	add	r2, r3
 8001462:	1212      	asrs	r2, r2, #8
 8001464:	17db      	asrs	r3, r3, #31
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800146a:	4b5d      	ldr	r3, [pc, #372]	@ (80015e0 <ssd1306_DrawArc+0x1c4>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	08db      	lsrs	r3, r3, #3
 8001478:	4a5b      	ldr	r2, [pc, #364]	@ (80015e8 <ssd1306_DrawArc+0x1cc>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800149e:	e096      	b.n	80015ce <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	f7ff ff73 	bl	80013a0 <ssd1306_DegToRad>
 80014ba:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80014be:	ed97 0a08 	vldr	s0, [r7, #32]
 80014c2:	f007 f891 	bl	80085e8 <sinf>
 80014c6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ca:	7b7b      	ldrb	r3, [r7, #13]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4413      	add	r3, r2
 80014ea:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80014ec:	ed97 0a08 	vldr	s0, [r7, #32]
 80014f0:	f007 f93e 	bl	8008770 <cosf>
 80014f4:	eeb0 7a40 	vmov.f32	s14, s0
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	edc7 7a01 	vstr	s15, [r7, #4]
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2da      	uxtb	r2, r3
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	4413      	add	r3, r2
 8001518:	74bb      	strb	r3, [r7, #18]
        count++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 8001520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	429a      	cmp	r2, r3
 8001526:	d00f      	beq.n	8001548 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001532:	edd7 7a05 	vldr	s15, [r7, #20]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	f7ff ff2f 	bl	80013a0 <ssd1306_DegToRad>
 8001542:	ed87 0a08 	vstr	s0, [r7, #32]
 8001546:	e00a      	b.n	800155e <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f7ff ff23 	bl	80013a0 <ssd1306_DegToRad>
 800155a:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 800155e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001562:	f007 f841 	bl	80085e8 <sinf>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800157c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001580:	793b      	ldrb	r3, [r7, #4]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4413      	add	r3, r2
 800158a:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 800158c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001590:	f007 f8ee 	bl	8008770 <cosf>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	4413      	add	r3, r2
 80015b8:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80015ba:	7c3c      	ldrb	r4, [r7, #16]
 80015bc:	7c7a      	ldrb	r2, [r7, #17]
 80015be:	7cb9      	ldrb	r1, [r7, #18]
 80015c0:	7cf8      	ldrb	r0, [r7, #19]
 80015c2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4623      	mov	r3, r4
 80015ca:	f7ff fe43 	bl	8001254 <ssd1306_Line>
    while(count < approx_segments)
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	f4ff af64 	bcc.w	80014a0 <ssd1306_DrawArc+0x84>
    }
    
    return;
 80015d8:	bf00      	nop
}
 80015da:	372c      	adds	r7, #44	@ 0x2c
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	080089ce 	.word	0x080089ce
 80015e4:	b60b60b7 	.word	0xb60b60b7
 80015e8:	16c16c17 	.word	0x16c16c17

080015ec <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08f      	sub	sp, #60	@ 0x3c
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	4603      	mov	r3, r0
 8001600:	73bb      	strb	r3, [r7, #14]
 8001602:	460b      	mov	r3, r1
 8001604:	737b      	strb	r3, [r7, #13]
 8001606:	4613      	mov	r3, r2
 8001608:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 800160a:	2324      	movs	r3, #36	@ 0x24
 800160c:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800161a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fed2 	bl	80013c8 <ssd1306_NormalizeTo0_360>
 8001624:	4603      	mov	r3, r0
 8001626:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001628:	897b      	ldrh	r3, [r7, #10]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fecc 	bl	80013c8 <ssd1306_NormalizeTo0_360>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	4a8a      	ldr	r2, [pc, #552]	@ (8001868 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	08db      	lsrs	r3, r3, #3
 8001650:	4a85      	ldr	r2, [pc, #532]	@ (8001868 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800166e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001672:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001680:	edd7 7a05 	vldr	s15, [r7, #20]
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f7ff fe88 	bl	80013a0 <ssd1306_DegToRad>
 8001690:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8001694:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001698:	f006 ffa6 	bl	80085e8 <sinf>
 800169c:	eeb0 7a40 	vmov.f32	s14, s0
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80016b6:	793b      	ldrb	r3, [r7, #4]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4413      	add	r3, r2
 80016c0:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 80016c2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80016c6:	f007 f853 	bl	8008770 <cosf>
 80016ca:	eeb0 7a40 	vmov.f32	s14, s0
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80016e4:	793b      	ldrb	r3, [r7, #4]
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	4413      	add	r3, r2
 80016ee:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 80016f0:	e09a      	b.n	8001828 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 80016f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	f7ff fe4a 	bl	80013a0 <ssd1306_DegToRad>
 800170c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001710:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001714:	f006 ff68 	bl	80085e8 <sinf>
 8001718:	eeb0 7a40 	vmov.f32	s14, s0
 800171c:	7b7b      	ldrb	r3, [r7, #13]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001732:	793b      	ldrb	r3, [r7, #4]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	4413      	add	r3, r2
 800173c:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 800173e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001742:	f007 f815 	bl	8008770 <cosf>
 8001746:	eeb0 7a40 	vmov.f32	s14, s0
 800174a:	7b7b      	ldrb	r3, [r7, #13]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001760:	793b      	ldrb	r3, [r7, #4]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	7bbb      	ldrb	r3, [r7, #14]
 8001768:	4413      	add	r3, r2
 800176a:	743b      	strb	r3, [r7, #16]
        count++;
 800176c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800176e:	3301      	adds	r3, #1
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 8001772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	429a      	cmp	r2, r3
 8001778:	d00f      	beq.n	800179a <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f7ff fe06 	bl	80013a0 <ssd1306_DegToRad>
 8001794:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001798:	e00a      	b.n	80017b0 <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f7ff fdfa 	bl	80013a0 <ssd1306_DegToRad>
 80017ac:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80017b0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80017b4:	f006 ff18 	bl	80085e8 <sinf>
 80017b8:	eeb0 7a40 	vmov.f32	s14, s0
 80017bc:	7b7b      	ldrb	r3, [r7, #13]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80017d2:	793b      	ldrb	r3, [r7, #4]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	4413      	add	r3, r2
 80017dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 80017e0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80017e4:	f006 ffc4 	bl	8008770 <cosf>
 80017e8:	eeb0 7a40 	vmov.f32	s14, s0
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001802:	793b      	ldrb	r3, [r7, #4]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	b2da      	uxtb	r2, r3
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	4413      	add	r3, r2
 800180c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001810:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001814:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001818:	7c39      	ldrb	r1, [r7, #16]
 800181a:	7c78      	ldrb	r0, [r7, #17]
 800181c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4623      	mov	r3, r4
 8001824:	f7ff fd16 	bl	8001254 <ssd1306_Line>
    while (count < approx_segments) {
 8001828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	429a      	cmp	r2, r3
 800182e:	f4ff af60 	bcc.w	80016f2 <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8001832:	7cbc      	ldrb	r4, [r7, #18]
 8001834:	7cfa      	ldrb	r2, [r7, #19]
 8001836:	7bb9      	ldrb	r1, [r7, #14]
 8001838:	7bf8      	ldrb	r0, [r7, #15]
 800183a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4623      	mov	r3, r4
 8001842:	f7ff fd07 	bl	8001254 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001846:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800184a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800184e:	7bb9      	ldrb	r1, [r7, #14]
 8001850:	7bf8      	ldrb	r0, [r7, #15]
 8001852:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4623      	mov	r3, r4
 800185a:	f7ff fcfb 	bl	8001254 <ssd1306_Line>
    return;
 800185e:	bf00      	nop
}
 8001860:	3734      	adds	r7, #52	@ 0x34
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	16c16c17 	.word	0x16c16c17

0800186c <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	4604      	mov	r4, r0
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4623      	mov	r3, r4
 800187c:	71fb      	strb	r3, [r7, #7]
 800187e:	4603      	mov	r3, r0
 8001880:	71bb      	strb	r3, [r7, #6]
 8001882:	460b      	mov	r3, r1
 8001884:	717b      	strb	r3, [r7, #5]
 8001886:	4613      	mov	r3, r2
 8001888:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800188a:	797b      	ldrb	r3, [r7, #5]
 800188c:	425b      	negs	r3, r3
 800188e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001894:	797b      	ldrb	r3, [r7, #5]
 8001896:	f1c3 0301 	rsb	r3, r3, #1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db65      	blt.n	8001972 <ssd1306_DrawCircle+0x106>
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80018aa:	d862      	bhi.n	8001972 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	4413      	add	r3, r2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	793a      	ldrb	r2, [r7, #4]
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff fba4 	bl	8001010 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2d8      	uxtb	r0, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	79bb      	ldrb	r3, [r7, #6]
 80018d8:	4413      	add	r3, r2
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	793a      	ldrb	r2, [r7, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff fb96 	bl	8001010 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4413      	add	r3, r2
 80018ec:	b2d8      	uxtb	r0, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	793a      	ldrb	r2, [r7, #4]
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff fb88 	bl	8001010 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	b2d8      	uxtb	r0, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	793a      	ldrb	r2, [r7, #4]
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff fb7a 	bl	8001010 <ssd1306_DrawPixel>
        e2 = err;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	dc13      	bgt.n	8001950 <ssd1306_DrawCircle+0xe4>
            y++;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	3301      	adds	r3, #1
 800192c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	3301      	adds	r3, #1
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	425b      	negs	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d105      	bne.n	8001950 <ssd1306_DrawCircle+0xe4>
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	429a      	cmp	r2, r3
 800194a:	dc01      	bgt.n	8001950 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	dd08      	ble.n	800196a <ssd1306_DrawCircle+0xfe>
            x++;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	3301      	adds	r3, #1
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd9d      	ble.n	80018ac <ssd1306_DrawCircle+0x40>

    return;
 8001970:	e000      	b.n	8001974 <ssd1306_DrawCircle+0x108>
        return;
 8001972:	bf00      	nop
}
 8001974:	371c      	adds	r7, #28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}

0800197a <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b089      	sub	sp, #36	@ 0x24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4604      	mov	r4, r0
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4623      	mov	r3, r4
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4603      	mov	r3, r0
 800198e:	71bb      	strb	r3, [r7, #6]
 8001990:	460b      	mov	r3, r1
 8001992:	717b      	strb	r3, [r7, #5]
 8001994:	4613      	mov	r3, r2
 8001996:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	425b      	negs	r3, r3
 800199c:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 80019a2:	797b      	ldrb	r3, [r7, #5]
 80019a4:	f1c3 0301 	rsb	r3, r3, #1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db51      	blt.n	8001a58 <ssd1306_FillCircle+0xde>
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019b8:	d84e      	bhi.n	8001a58 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	4413      	add	r3, r2
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e017      	b.n	80019f6 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	73bb      	strb	r3, [r7, #14]
 80019d0:	e008      	b.n	80019e4 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 80019d2:	793a      	ldrb	r2, [r7, #4]
 80019d4:	7bf9      	ldrb	r1, [r7, #15]
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb19 	bl	8001010 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	73bb      	strb	r3, [r7, #14]
 80019e4:	7bba      	ldrb	r2, [r7, #14]
 80019e6:	79f9      	ldrb	r1, [r7, #7]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	440b      	add	r3, r1
 80019ec:	429a      	cmp	r2, r3
 80019ee:	daf0      	bge.n	80019d2 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	79b9      	ldrb	r1, [r7, #6]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	1acb      	subs	r3, r1, r3
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dae1      	bge.n	80019c6 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dc13      	bgt.n	8001a36 <ssd1306_FillCircle+0xbc>
            y++;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3301      	adds	r3, #1
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	425b      	negs	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d105      	bne.n	8001a36 <ssd1306_FillCircle+0xbc>
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dc01      	bgt.n	8001a36 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dd08      	ble.n	8001a50 <ssd1306_FillCircle+0xd6>
            x++;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	3301      	adds	r3, #1
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	ddb1      	ble.n	80019ba <ssd1306_FillCircle+0x40>

    return;
 8001a56:	e000      	b.n	8001a5a <ssd1306_FillCircle+0xe0>
        return;
 8001a58:	bf00      	nop
}
 8001a5a:	3724      	adds	r7, #36	@ 0x24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}

08001a60 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	4604      	mov	r4, r0
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	4603      	mov	r3, r0
 8001a74:	71bb      	strb	r3, [r7, #6]
 8001a76:	460b      	mov	r3, r1
 8001a78:	717b      	strb	r3, [r7, #5]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001a7e:	79bc      	ldrb	r4, [r7, #6]
 8001a80:	797a      	ldrb	r2, [r7, #5]
 8001a82:	79b9      	ldrb	r1, [r7, #6]
 8001a84:	79f8      	ldrb	r0, [r7, #7]
 8001a86:	7e3b      	ldrb	r3, [r7, #24]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f7ff fbe2 	bl	8001254 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001a90:	793c      	ldrb	r4, [r7, #4]
 8001a92:	797a      	ldrb	r2, [r7, #5]
 8001a94:	79b9      	ldrb	r1, [r7, #6]
 8001a96:	7978      	ldrb	r0, [r7, #5]
 8001a98:	7e3b      	ldrb	r3, [r7, #24]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	f7ff fbd9 	bl	8001254 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001aa2:	793c      	ldrb	r4, [r7, #4]
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	7939      	ldrb	r1, [r7, #4]
 8001aa8:	7978      	ldrb	r0, [r7, #5]
 8001aaa:	7e3b      	ldrb	r3, [r7, #24]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4623      	mov	r3, r4
 8001ab0:	f7ff fbd0 	bl	8001254 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001ab4:	79bc      	ldrb	r4, [r7, #6]
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	7939      	ldrb	r1, [r7, #4]
 8001aba:	79f8      	ldrb	r0, [r7, #7]
 8001abc:	7e3b      	ldrb	r3, [r7, #24]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	f7ff fbc7 	bl	8001254 <ssd1306_Line>

    return;
 8001ac6:	bf00      	nop
}
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}

08001ace <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001ace:	b590      	push	{r4, r7, lr}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	4611      	mov	r1, r2
 8001ada:	461a      	mov	r2, r3
 8001adc:	4623      	mov	r3, r4
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71bb      	strb	r3, [r7, #6]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	717b      	strb	r3, [r7, #5]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf28      	it	cs
 8001af4:	4613      	movcs	r3, r2
 8001af6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001af8:	797a      	ldrb	r2, [r7, #5]
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf38      	it	cc
 8001b00:	4613      	movcc	r3, r2
 8001b02:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001b04:	79ba      	ldrb	r2, [r7, #6]
 8001b06:	793b      	ldrb	r3, [r7, #4]
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf28      	it	cs
 8001b0c:	4613      	movcs	r3, r2
 8001b0e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001b10:	793a      	ldrb	r2, [r7, #4]
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bf38      	it	cc
 8001b18:	4613      	movcc	r3, r2
 8001b1a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e017      	b.n	8001b52 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b22:	7b7b      	ldrb	r3, [r7, #13]
 8001b24:	73bb      	strb	r3, [r7, #14]
 8001b26:	e009      	b.n	8001b3c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001b28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b2c:	7bf9      	ldrb	r1, [r7, #15]
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fa6d 	bl	8001010 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73bb      	strb	r3, [r7, #14]
 8001b3c:	7bba      	ldrb	r2, [r7, #14]
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d803      	bhi.n	8001b4c <ssd1306_FillRectangle+0x7e>
 8001b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	daed      	bge.n	8001b28 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	7abb      	ldrb	r3, [r7, #10]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d803      	bhi.n	8001b62 <ssd1306_FillRectangle+0x94>
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b5e:	d9e0      	bls.n	8001b22 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
}
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
	...

08001b6c <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001b6c:	b490      	push	{r4, r7}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4604      	mov	r4, r0
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	460b      	mov	r3, r1
 8001b84:	717b      	strb	r3, [r7, #5]
 8001b86:	4613      	mov	r3, r2
 8001b88:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8001b8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db02      	blt.n	8001b98 <ssd1306_InvertRectangle+0x2c>
 8001b92:	793b      	ldrb	r3, [r7, #4]
 8001b94:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b96:	d901      	bls.n	8001b9c <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e09c      	b.n	8001cd6 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8001b9c:	79fa      	ldrb	r2, [r7, #7]
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d803      	bhi.n	8001bac <ssd1306_InvertRectangle+0x40>
 8001ba4:	79ba      	ldrb	r2, [r7, #6]
 8001ba6:	793b      	ldrb	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d901      	bls.n	8001bb0 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e092      	b.n	8001cd6 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	08db      	lsrs	r3, r3, #3
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	793b      	ldrb	r3, [r7, #4]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d057      	beq.n	8001c70 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	e04f      	b.n	8001c66 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	01db      	lsls	r3, r3, #7
 8001bce:	461a      	mov	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8001bd6:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	21ff      	movs	r1, #255	@ 0xff
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4053      	eors	r3, r2
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2d9      	uxtb	r1, r3
 8001bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	460a      	mov	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3380      	adds	r3, #128	@ 0x80
 8001c02:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001c04:	e00d      	b.n	8001c22 <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8001c06:	4a36      	ldr	r2, [pc, #216]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	4a33      	ldr	r2, [pc, #204]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	460a      	mov	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3380      	adds	r3, #128	@ 0x80
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	793b      	ldrb	r3, [r7, #4]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	01db      	lsls	r3, r3, #7
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3e7      	bcc.n	8001c06 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b25a      	sxtb	r2, r3
 8001c40:	793b      	ldrb	r3, [r7, #4]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	21ff      	movs	r1, #255	@ 0xff
 8001c4a:	fa41 f303 	asr.w	r3, r1, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4053      	eors	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	b2d9      	uxtb	r1, r3
 8001c56:	4a22      	ldr	r2, [pc, #136]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3301      	adds	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	797b      	ldrb	r3, [r7, #5]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d9ab      	bls.n	8001bc6 <ssd1306_InvertRectangle+0x5a>
 8001c6e:	e031      	b.n	8001cd4 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	22ff      	movs	r2, #255	@ 0xff
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	b25a      	sxtb	r2, r3
 8001c7e:	793b      	ldrb	r3, [r7, #4]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	21ff      	movs	r1, #255	@ 0xff
 8001c88:	fa41 f303 	asr.w	r3, r1, r3
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8001c94:	79fa      	ldrb	r2, [r7, #7]
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	01db      	lsls	r3, r3, #7
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e00e      	b.n	8001cc2 <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	4053      	eors	r3, r2
 8001cb0:	b2d9      	uxtb	r1, r3
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce0 <ssd1306_InvertRectangle+0x174>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	460a      	mov	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	797b      	ldrb	r3, [r7, #5]
 8001cc4:	793a      	ldrb	r2, [r7, #4]
 8001cc6:	08d2      	lsrs	r2, r2, #3
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	01d2      	lsls	r2, r2, #7
 8001ccc:	4413      	add	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d9e7      	bls.n	8001ca4 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc90      	pop	{r4, r7}
 8001cde:	4770      	bx	lr
 8001ce0:	240000fc 	.word	0x240000fc

08001ce4 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	603a      	str	r2, [r7, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71bb      	strb	r3, [r7, #6]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001cfa:	797b      	ldrb	r3, [r7, #5]
 8001cfc:	3307      	adds	r3, #7
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <ssd1306_DrawBitmap+0x20>
 8001d02:	3307      	adds	r3, #7
 8001d04:	10db      	asrs	r3, r3, #3
 8001d06:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db3e      	blt.n	8001d92 <ssd1306_DrawBitmap+0xae>
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d18:	d83b      	bhi.n	8001d92 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
 8001d1e:	e033      	b.n	8001d88 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	737b      	strb	r3, [r7, #13]
 8001d24:	e026      	b.n	8001d74 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001d26:	7b7b      	ldrb	r3, [r7, #13]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e00d      	b.n	8001d54 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d3e:	fb02 f303 	mul.w	r3, r2, r3
 8001d42:	7b7a      	ldrb	r2, [r7, #13]
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	4413      	add	r3, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	da08      	bge.n	8001d6e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	7b7b      	ldrb	r3, [r7, #13]
 8001d60:	4413      	add	r3, r2
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	7f3a      	ldrb	r2, [r7, #28]
 8001d66:	79b9      	ldrb	r1, [r7, #6]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f951 	bl	8001010 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	3301      	adds	r3, #1
 8001d72:	737b      	strb	r3, [r7, #13]
 8001d74:	7b7a      	ldrb	r2, [r7, #13]
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d3d4      	bcc.n	8001d26 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	73bb      	strb	r3, [r7, #14]
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	3301      	adds	r3, #1
 8001d86:	71bb      	strb	r3, [r7, #6]
 8001d88:	7bba      	ldrb	r2, [r7, #14]
 8001d8a:	7e3b      	ldrb	r3, [r7, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3c7      	bcc.n	8001d20 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001d90:	e000      	b.n	8001d94 <ssd1306_DrawBitmap+0xb0>
        return;
 8001d92:	bf00      	nop
}
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001da4:	2381      	movs	r3, #129	@ 0x81
 8001da6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f854 	bl	8000e58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff f850 	bl	8000e58 <ssd1306_WriteCommand>
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001dd0:	23af      	movs	r3, #175	@ 0xaf
 8001dd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <ssd1306_SetDisplayOn+0x38>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	715a      	strb	r2, [r3, #5]
 8001dda:	e004      	b.n	8001de6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ddc:	23ae      	movs	r3, #174	@ 0xae
 8001dde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <ssd1306_SetDisplayOn+0x38>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff f835 	bl	8000e58 <ssd1306_WriteCommand>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	240004fc 	.word	0x240004fc

08001dfc <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f8c4 	bl	8000f90 <ssd1306_Fill>
   
    uint8_t x = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001e10:	79b9      	ldrb	r1, [r7, #6]
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f8fa 	bl	8001010 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <ssd1306_TestBorder+0x34>
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e26:	d803      	bhi.n	8001e30 <ssd1306_TestBorder+0x34>
            x++;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	71fb      	strb	r3, [r7, #7]
 8001e2e:	e016      	b.n	8001e5e <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e34:	d106      	bne.n	8001e44 <ssd1306_TestBorder+0x48>
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e3a:	d803      	bhi.n	8001e44 <ssd1306_TestBorder+0x48>
            y++;
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	71bb      	strb	r3, [r7, #6]
 8001e42:	e00c      	b.n	8001e5e <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e48:	d106      	bne.n	8001e58 <ssd1306_TestBorder+0x5c>
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <ssd1306_TestBorder+0x5c>
            x--;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	e002      	b.n	8001e5e <ssd1306_TestBorder+0x62>
        else
            y--;
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8001e5e:	79b9      	ldrb	r1, [r7, #6]
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2201      	movs	r2, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f8d3 	bl	8001010 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001e6a:	f7ff f8a9 	bl	8000fc0 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001e6e:	2005      	movs	r0, #5
 8001e70:	f000 ff56 	bl	8002d20 <HAL_Delay>
    } while(x > 0 || y > 0);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ca      	bne.n	8001e10 <ssd1306_TestBorder+0x14>
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1c7      	bne.n	8001e10 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8001e80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e84:	f000 ff4c 	bl	8002d20 <HAL_Delay>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff f878 	bl	8000f90 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff f9bd 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <ssd1306_TestFonts1+0x90>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	9200      	str	r2, [sp, #0]
 8001eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb2:	481c      	ldr	r0, [pc, #112]	@ (8001f24 <ssd1306_TestFonts1+0x94>)
 8001eb4:	f7ff f990 	bl	80011d8 <ssd1306_WriteString>
    y += 26;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	331a      	adds	r3, #26
 8001ebc:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff f9ae 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <ssd1306_TestFonts1+0x98>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	9200      	str	r2, [sp, #0]
 8001ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed0:	4816      	ldr	r0, [pc, #88]	@ (8001f2c <ssd1306_TestFonts1+0x9c>)
 8001ed2:	f7ff f981 	bl	80011d8 <ssd1306_WriteString>
    y += 18;
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	3312      	adds	r3, #18
 8001eda:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7ff f99f 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <ssd1306_TestFonts1+0xa0>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	9200      	str	r2, [sp, #0]
 8001eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eee:	4811      	ldr	r0, [pc, #68]	@ (8001f34 <ssd1306_TestFonts1+0xa4>)
 8001ef0:	f7ff f972 	bl	80011d8 <ssd1306_WriteString>
    y += 10;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	330a      	adds	r3, #10
 8001ef8:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4619      	mov	r1, r3
 8001efe:	2002      	movs	r0, #2
 8001f00:	f7ff f990 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <ssd1306_TestFonts1+0xa8>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0c:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <ssd1306_TestFonts1+0xac>)
 8001f0e:	f7ff f963 	bl	80011d8 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8001f12:	f7ff f855 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	0800d54c 	.word	0x0800d54c
 8001f24:	08008908 	.word	0x08008908
 8001f28:	0800d540 	.word	0x0800d540
 8001f2c:	08008914 	.word	0x08008914
 8001f30:	0800d534 	.word	0x0800d534
 8001f34:	08008920 	.word	0x08008920
 8001f38:	0800d528 	.word	0x0800d528
 8001f3c:	0800892c 	.word	0x0800892c

08001f40 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff f822 	bl	8000f90 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff f968 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <ssd1306_TestFonts2+0x68>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	9200      	str	r2, [sp, #0]
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	4813      	ldr	r0, [pc, #76]	@ (8001fac <ssd1306_TestFonts2+0x6c>)
 8001f5e:	f7ff f93b 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8001f62:	2124      	movs	r1, #36	@ 0x24
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff f95d 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <ssd1306_TestFonts2+0x68>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f72:	480f      	ldr	r0, [pc, #60]	@ (8001fb0 <ssd1306_TestFonts2+0x70>)
 8001f74:	f7ff f930 	bl	80011d8 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8001f78:	2360      	movs	r3, #96	@ 0x60
 8001f7a:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8001f7c:	233c      	movs	r3, #60	@ 0x3c
 8001f7e:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3310      	adds	r3, #16
 8001f84:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8001f8c:	793b      	ldrb	r3, [r7, #4]
 8001f8e:	797a      	ldrb	r2, [r7, #5]
 8001f90:	79b9      	ldrb	r1, [r7, #6]
 8001f92:	79f8      	ldrb	r0, [r7, #7]
 8001f94:	2401      	movs	r4, #1
 8001f96:	9400      	str	r4, [sp, #0]
 8001f98:	f7ff fd99 	bl	8001ace <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8001f9c:	f7ff f810 	bl	8000fc0 <ssd1306_UpdateScreen>
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd90      	pop	{r4, r7, pc}
 8001fa8:	0800d558 	.word	0x0800d558
 8001fac:	08008938 	.word	0x08008938
 8001fb0:	08008944 	.word	0x08008944

08001fb4 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7fe ffe8 	bl	8000f90 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f7ff f92e 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8001fc8:	4b10      	ldr	r3, [pc, #64]	@ (800200c <ssd1306_TestFonts3+0x58>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd0:	480f      	ldr	r0, [pc, #60]	@ (8002010 <ssd1306_TestFonts3+0x5c>)
 8001fd2:	f7ff f901 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8001fd6:	2118      	movs	r1, #24
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f7ff f923 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <ssd1306_TestFonts3+0x58>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	9200      	str	r2, [sp, #0]
 8001fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe6:	480b      	ldr	r0, [pc, #44]	@ (8002014 <ssd1306_TestFonts3+0x60>)
 8001fe8:	f7ff f8f6 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8001fec:	212c      	movs	r1, #44	@ 0x2c
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f7ff f918 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <ssd1306_TestFonts3+0x58>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffc:	4806      	ldr	r0, [pc, #24]	@ (8002018 <ssd1306_TestFonts3+0x64>)
 8001ffe:	f7ff f8eb 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 8002002:	f7fe ffdd 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800d564 	.word	0x0800d564
 8002010:	08008950 	.word	0x08008950
 8002014:	08008960 	.word	0x08008960
 8002018:	08008970 	.word	0x08008970
 800201c:	00000000 	.word	0x00000000

08002020 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	@ 0x68
 8002024:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8002026:	2001      	movs	r0, #1
 8002028:	f7fe ffb2 	bl	8000f90 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 800202c:	f000 fe6c 	bl	8002d08 <HAL_GetTick>
 8002030:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8002032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002034:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 800203a:	4a41      	ldr	r2, [pc, #260]	@ (8002140 <ssd1306_TestFPS+0x120>)
 800203c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002040:	ca07      	ldmia	r2, {r0, r1, r2}
 8002042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002046:	2100      	movs	r1, #0
 8002048:	2002      	movs	r0, #2
 800204a:	f7ff f8eb 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 800204e:	4b3d      	ldr	r3, [pc, #244]	@ (8002144 <ssd1306_TestFPS+0x124>)
 8002050:	2200      	movs	r2, #0
 8002052:	9200      	str	r2, [sp, #0]
 8002054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002056:	483c      	ldr	r0, [pc, #240]	@ (8002148 <ssd1306_TestFPS+0x128>)
 8002058:	f7ff f8be 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 800205c:	2124      	movs	r1, #36	@ 0x24
 800205e:	2002      	movs	r0, #2
 8002060:	f7ff f8e0 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <ssd1306_TestFPS+0x124>)
 8002066:	2200      	movs	r2, #0
 8002068:	9200      	str	r2, [sp, #0]
 800206a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206c:	4837      	ldr	r0, [pc, #220]	@ (800214c <ssd1306_TestFPS+0x12c>)
 800206e:	f7ff f8b3 	bl	80011d8 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002072:	2112      	movs	r1, #18
 8002074:	2002      	movs	r0, #2
 8002076:	f7ff f8d5 	bl	8001224 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 800207a:	4b32      	ldr	r3, [pc, #200]	@ (8002144 <ssd1306_TestFPS+0x124>)
 800207c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002080:	2200      	movs	r2, #0
 8002082:	9200      	str	r2, [sp, #0]
 8002084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002086:	f7ff f8a7 	bl	80011d8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800208a:	f7fe ff99 	bl	8000fc0 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 800208e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002092:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002096:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800209a:	3301      	adds	r3, #1
 800209c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80020a0:	220a      	movs	r2, #10
 80020a2:	4619      	mov	r1, r3
 80020a4:	f005 fdf6 	bl	8007c94 <memmove>
        message[sizeof(message)-2] = ch;
 80020a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80020ac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 80020b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020b2:	3301      	adds	r3, #1
 80020b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 80020b6:	f000 fe27 	bl	8002d08 <HAL_GetTick>
 80020ba:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 80020bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d9d3      	bls.n	8002072 <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 80020ca:	f241 3088 	movw	r0, #5000	@ 0x1388
 80020ce:	f000 fe27 	bl	8002d20 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80020d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020dc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80020e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020ee:	ed9f 4b12 	vldr	d4, [pc, #72]	@ 8002138 <ssd1306_TestFPS+0x118>
 80020f2:	ee87 6b04 	vdiv.f64	d6, d7, d4
 80020f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020fe:	ee17 3a90 	vmov	r3, s15
 8002102:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002104:	1d38      	adds	r0, r7, #4
 8002106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <ssd1306_TestFPS+0x130>)
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	f005 fd8e 	bl	8007c2c <sniprintf>
   
    ssd1306_Fill(White);
 8002110:	2001      	movs	r0, #1
 8002112:	f7fe ff3d 	bl	8000f90 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8002116:	2102      	movs	r1, #2
 8002118:	2002      	movs	r0, #2
 800211a:	f7ff f883 	bl	8001224 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <ssd1306_TestFPS+0x124>)
 8002120:	1d38      	adds	r0, r7, #4
 8002122:	2200      	movs	r2, #0
 8002124:	9200      	str	r2, [sp, #0]
 8002126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002128:	f7ff f856 	bl	80011d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800212c:	f7fe ff48 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 8002130:	bf00      	nop
 8002132:	3760      	adds	r7, #96	@ 0x60
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	00000000 	.word	0x00000000
 800213c:	408f4000 	.word	0x408f4000
 8002140:	080089a0 	.word	0x080089a0
 8002144:	0800d540 	.word	0x0800d540
 8002148:	08008980 	.word	0x08008980
 800214c:	0800898c 	.word	0x0800898c
 8002150:	08008998 	.word	0x08008998

08002154 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 800215a:	2301      	movs	r3, #1
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	233f      	movs	r3, #63	@ 0x3f
 8002160:	227f      	movs	r2, #127	@ 0x7f
 8002162:	2101      	movs	r1, #1
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff f875 	bl	8001254 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 800216a:	2301      	movs	r3, #1
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	233f      	movs	r3, #63	@ 0x3f
 8002170:	2201      	movs	r2, #1
 8002172:	2101      	movs	r1, #1
 8002174:	207f      	movs	r0, #127	@ 0x7f
 8002176:	f7ff f86d 	bl	8001254 <ssd1306_Line>
  ssd1306_UpdateScreen();
 800217a:	f7fe ff21 	bl	8000fc0 <ssd1306_UpdateScreen>
  return;
 800217e:	bf00      	nop
}
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	e028      	b.n	80021e2 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4413      	add	r3, r2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	b2d9      	uxtb	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461c      	mov	r4, r3
 80021c8:	00a4      	lsls	r4, r4, #2
 80021ca:	4423      	add	r3, r4
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2401      	movs	r4, #1
 80021d6:	9400      	str	r4, [sp, #0]
 80021d8:	f7ff fc42 	bl	8001a60 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d9d3      	bls.n	8002190 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80021e8:	f7fe feea 	bl	8000fc0 <ssd1306_UpdateScreen>
  return;
 80021ec:	bf00      	nop
}
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}

080021f4 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80021fa:	2301      	movs	r3, #1
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2323      	movs	r3, #35	@ 0x23
 8002200:	2241      	movs	r2, #65	@ 0x41
 8002202:	2101      	movs	r1, #1
 8002204:	201f      	movs	r0, #31
 8002206:	f7ff fc62 	bl	8001ace <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 800220a:	2301      	movs	r3, #1
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	233c      	movs	r3, #60	@ 0x3c
 8002210:	2246      	movs	r2, #70	@ 0x46
 8002212:	212d      	movs	r1, #45	@ 0x2d
 8002214:	200a      	movs	r0, #10
 8002216:	f7ff fc5a 	bl	8001ace <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 800221a:	2301      	movs	r3, #1
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	232d      	movs	r3, #45	@ 0x2d
 8002220:	2264      	movs	r2, #100	@ 0x64
 8002222:	210a      	movs	r1, #10
 8002224:	204b      	movs	r0, #75	@ 0x4b
 8002226:	f7ff fc52 	bl	8001ace <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 800222a:	2300      	movs	r3, #0
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2337      	movs	r3, #55	@ 0x37
 8002230:	2250      	movs	r2, #80	@ 0x50
 8002232:	211e      	movs	r1, #30
 8002234:	2037      	movs	r0, #55	@ 0x37
 8002236:	f7ff fc4a 	bl	8001ace <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 800223a:	f7fe fec1 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 800224a:	2100      	movs	r1, #0
 800224c:	2002      	movs	r0, #2
 800224e:	f7fe ffe9 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 8002254:	2201      	movs	r2, #1
 8002256:	9200      	str	r2, [sp, #0]
 8002258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225a:	4826      	ldr	r0, [pc, #152]	@ (80022f4 <ssd1306_TestRectangleInvert+0xb0>)
 800225c:	f7fe ffbc 	bl	80011d8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8002260:	2114      	movs	r1, #20
 8002262:	2002      	movs	r0, #2
 8002264:	f7fe ffde 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002268:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 800226a:	2201      	movs	r2, #1
 800226c:	9200      	str	r2, [sp, #0]
 800226e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002270:	4821      	ldr	r0, [pc, #132]	@ (80022f8 <ssd1306_TestRectangleInvert+0xb4>)
 8002272:	f7fe ffb1 	bl	80011d8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002276:	2128      	movs	r1, #40	@ 0x28
 8002278:	2002      	movs	r0, #2
 800227a:	f7fe ffd3 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800227e:	4b1c      	ldr	r3, [pc, #112]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 8002280:	2201      	movs	r2, #1
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002286:	481d      	ldr	r0, [pc, #116]	@ (80022fc <ssd1306_TestRectangleInvert+0xb8>)
 8002288:	f7fe ffa6 	bl	80011d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 800228c:	2100      	movs	r1, #0
 800228e:	2042      	movs	r0, #66	@ 0x42
 8002290:	f7fe ffc8 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002294:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 8002296:	2201      	movs	r2, #1
 8002298:	9200      	str	r2, [sp, #0]
 800229a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800229c:	4817      	ldr	r0, [pc, #92]	@ (80022fc <ssd1306_TestRectangleInvert+0xb8>)
 800229e:	f7fe ff9b 	bl	80011d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 80022a2:	2114      	movs	r1, #20
 80022a4:	2042      	movs	r0, #66	@ 0x42
 80022a6:	f7fe ffbd 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	9200      	str	r2, [sp, #0]
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	4811      	ldr	r0, [pc, #68]	@ (80022f8 <ssd1306_TestRectangleInvert+0xb4>)
 80022b4:	f7fe ff90 	bl	80011d8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 80022b8:	2128      	movs	r1, #40	@ 0x28
 80022ba:	2042      	movs	r0, #66	@ 0x42
 80022bc:	f7fe ffb2 	bl	8001224 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <ssd1306_TestRectangleInvert+0xac>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	480a      	ldr	r0, [pc, #40]	@ (80022f4 <ssd1306_TestRectangleInvert+0xb0>)
 80022ca:	f7fe ff85 	bl	80011d8 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 80022ce:	233f      	movs	r3, #63	@ 0x3f
 80022d0:	223f      	movs	r2, #63	@ 0x3f
 80022d2:	2100      	movs	r1, #0
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fc49 	bl	8001b6c <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 80022da:	233c      	movs	r3, #60	@ 0x3c
 80022dc:	227d      	movs	r2, #125	@ 0x7d
 80022de:	213a      	movs	r1, #58	@ 0x3a
 80022e0:	2002      	movs	r0, #2
 80022e2:	f7ff fc43 	bl	8001b6c <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 80022e6:	f7fe fe6b 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	0800d540 	.word	0x0800d540
 80022f4:	080089ac 	.word	0x080089ac
 80022f8:	080089b4 	.word	0x080089b4
 80022fc:	080089b8 	.word	0x080089b8

08002300 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	e010      	b.n	800232e <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	331e      	adds	r3, #30
 800231c:	b2d8      	uxtb	r0, r3
 800231e:	2301      	movs	r3, #1
 8002320:	220a      	movs	r2, #10
 8002322:	210f      	movs	r1, #15
 8002324:	f7ff faa2 	bl	800186c <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3301      	adds	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d9eb      	bls.n	800230c <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	e011      	b.n	800235e <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	0052      	lsls	r2, r2, #1
 8002342:	441a      	add	r2, r3
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	330f      	adds	r3, #15
 800234c:	b2d8      	uxtb	r0, r3
 800234e:	2301      	movs	r3, #1
 8002350:	220a      	movs	r2, #10
 8002352:	2128      	movs	r1, #40	@ 0x28
 8002354:	f7ff fb11 	bl	800197a <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d9ea      	bls.n	800233a <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002364:	f7fe fe2c 	bl	8000fc0 <ssd1306_UpdateScreen>
  return;
 8002368:	bf00      	nop
}
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002376:	2301      	movs	r3, #1
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2314      	movs	r3, #20
 8002382:	221e      	movs	r2, #30
 8002384:	211e      	movs	r1, #30
 8002386:	201e      	movs	r0, #30
 8002388:	f7ff f848 	bl	800141c <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 800238c:	2301      	movs	r3, #1
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	231e      	movs	r3, #30
 8002398:	220a      	movs	r2, #10
 800239a:	2137      	movs	r1, #55	@ 0x37
 800239c:	2050      	movs	r0, #80	@ 0x50
 800239e:	f7ff f925 	bl	80015ec <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 80023a2:	f7fe fe0d 	bl	8000fc0 <ssd1306_UpdateScreen>
  return;
 80023a6:	bf00      	nop
}
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <ssd1306_TestPolyline+0x28>)
 80023b4:	463c      	mov	r4, r7
 80023b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b8:	c407      	stmia	r4!, {r0, r1, r2}
 80023ba:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 80023bc:	463b      	mov	r3, r7
 80023be:	2201      	movs	r2, #1
 80023c0:	2107      	movs	r1, #7
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe ffb2 	bl	800132c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 80023c8:	f7fe fdfa 	bl	8000fc0 <ssd1306_UpdateScreen>
  return;
 80023cc:	bf00      	nop
}
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	080089c0 	.word	0x080089c0

080023d8 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe fdd6 	bl	8000f90 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2340      	movs	r3, #64	@ 0x40
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <ssd1306_TestDrawBitmap+0x78>)
 80023f0:	2100      	movs	r1, #0
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff fc76 	bl	8001ce4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80023f8:	f7fe fde2 	bl	8000fc0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80023fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002400:	f000 fc8e 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fdc3 	bl	8000f90 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800240a:	2301      	movs	r3, #1
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2340      	movs	r3, #64	@ 0x40
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2340      	movs	r3, #64	@ 0x40
 8002414:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <ssd1306_TestDrawBitmap+0x7c>)
 8002416:	2100      	movs	r1, #0
 8002418:	2020      	movs	r0, #32
 800241a:	f7ff fc63 	bl	8001ce4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800241e:	f7fe fdcf 	bl	8000fc0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002422:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002426:	f000 fc7b 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(White);
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe fdb0 	bl	8000f90 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2340      	movs	r3, #64	@ 0x40
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2340      	movs	r3, #64	@ 0x40
 800243a:	4a06      	ldr	r2, [pc, #24]	@ (8002454 <ssd1306_TestDrawBitmap+0x7c>)
 800243c:	2100      	movs	r1, #0
 800243e:	2020      	movs	r0, #32
 8002440:	f7ff fc50 	bl	8001ce4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002444:	f7fe fdbc 	bl	8000fc0 <ssd1306_UpdateScreen>
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	0800d570 	.word	0x0800d570
 8002454:	0800d970 	.word	0x0800d970

08002458 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 800245c:	f7fe fd2e 	bl	8000ebc <ssd1306_Init>

    ssd1306_TestFPS();
 8002460:	f7ff fdde 	bl	8002020 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002464:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002468:	f000 fc5a 	bl	8002d20 <HAL_Delay>
    ssd1306_TestBorder();
 800246c:	f7ff fcc6 	bl	8001dfc <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002470:	f7ff fd0e 	bl	8001e90 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002474:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002478:	f000 fc52 	bl	8002d20 <HAL_Delay>
    ssd1306_TestFonts2();
 800247c:	f7ff fd60 	bl	8001f40 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002480:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002484:	f000 fc4c 	bl	8002d20 <HAL_Delay>
    ssd1306_TestFonts3();
 8002488:	f7ff fd94 	bl	8001fb4 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 800248c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002490:	f000 fc46 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fd7b 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestRectangle();
 800249a:	f7ff fe73 	bl	8002184 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800249e:	f7ff fe59 	bl	8002154 <ssd1306_TestLine>
    HAL_Delay(3000);
 80024a2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024a6:	f000 fc3b 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fd70 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 80024b0:	f7ff fea0 	bl	80021f4 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 80024b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024b8:	f000 fc32 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe fd67 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 80024c2:	f7ff febf 	bl	8002244 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 80024c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024ca:	f000 fc29 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fd5e 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestPolyline();
 80024d4:	f7ff ff6a 	bl	80023ac <ssd1306_TestPolyline>
    HAL_Delay(3000);
 80024d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024dc:	f000 fc20 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe fd55 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestArc();
 80024e6:	f7ff ff43 	bl	8002370 <ssd1306_TestArc>
    HAL_Delay(3000);
 80024ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024ee:	f000 fc17 	bl	8002d20 <HAL_Delay>
    ssd1306_Fill(Black);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7fe fd4c 	bl	8000f90 <ssd1306_Fill>
    ssd1306_TestCircle();
 80024f8:	f7ff ff02 	bl	8002300 <ssd1306_TestCircle>
    HAL_Delay(3000);
 80024fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002500:	f000 fc0e 	bl	8002d20 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002504:	f7ff ff68 	bl	80023d8 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002508:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800250c:	f000 fc08 	bl	8002d20 <HAL_Delay>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_MspInit+0x30>)
 800251c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002520:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <HAL_MspInit+0x30>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_MspInit+0x30>)
 800252c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	58024400 	.word	0x58024400

08002548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b0ba      	sub	sp, #232	@ 0xe8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	22c0      	movs	r2, #192	@ 0xc0
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f005 fbad 	bl	8007cc8 <memset>
  if(hi2c->Instance==I2C4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a27      	ldr	r2, [pc, #156]	@ (8002610 <HAL_I2C_MspInit+0xc8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d146      	bne.n	8002606 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002578:	f04f 0210 	mov.w	r2, #16
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fc86 	bl	8004ea0 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800259a:	f7fe fc4f 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025ae:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025bc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80025d6:	2304      	movs	r3, #4
 80025d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	@ (8002618 <HAL_I2C_MspInit+0xd0>)
 80025e4:	f000 fdac 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_I2C_MspInit+0xcc>)
 80025fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8002606:	bf00      	nop
 8002608:	37e8      	adds	r7, #232	@ 0xe8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	58001c00 	.word	0x58001c00
 8002614:	58024400 	.word	0x58024400
 8002618:	58021400 	.word	0x58021400

0800261c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <NMI_Handler+0x4>

08002624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <MemManage_Handler+0x4>

08002634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <BusFault_Handler+0x4>

0800263c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <UsageFault_Handler+0x4>

08002644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002672:	f000 fb35 	bl	8002ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}

0800267a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800267e:	2000      	movs	r0, #0
 8002680:	f000 f9dc 	bl	8002a3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f005 fb0e 	bl	8007cd8 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24100000 	.word	0x24100000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	24000504 	.word	0x24000504
 80026f0:	240006f0 	.word	0x240006f0

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026f8:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <SystemInit+0xd0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <SystemInit+0xd0>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002708:	4b2f      	ldr	r3, [pc, #188]	@ (80027c8 <SystemInit+0xd4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	2b02      	cmp	r3, #2
 8002712:	d807      	bhi.n	8002724 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002714:	4b2c      	ldr	r3, [pc, #176]	@ (80027c8 <SystemInit+0xd4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 030f 	bic.w	r3, r3, #15
 800271c:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <SystemInit+0xd4>)
 800271e:	f043 0303 	orr.w	r3, r3, #3
 8002722:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <SystemInit+0xd8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <SystemInit+0xd8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <SystemInit+0xd8>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002736:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <SystemInit+0xd8>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4924      	ldr	r1, [pc, #144]	@ (80027cc <SystemInit+0xd8>)
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <SystemInit+0xdc>)
 800273e:	4013      	ands	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002742:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <SystemInit+0xd4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <SystemInit+0xd4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 030f 	bic.w	r3, r3, #15
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <SystemInit+0xd4>)
 8002758:	f043 0303 	orr.w	r3, r3, #3
 800275c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <SystemInit+0xd8>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <SystemInit+0xd8>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <SystemInit+0xd8>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <SystemInit+0xd8>)
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <SystemInit+0xe0>)
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <SystemInit+0xd8>)
 8002778:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <SystemInit+0xe4>)
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <SystemInit+0xd8>)
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <SystemInit+0xe8>)
 8002780:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002782:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <SystemInit+0xd8>)
 8002784:	2200      	movs	r2, #0
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <SystemInit+0xd8>)
 800278a:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <SystemInit+0xe8>)
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <SystemInit+0xd8>)
 8002790:	2200      	movs	r2, #0
 8002792:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002794:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <SystemInit+0xd8>)
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <SystemInit+0xe8>)
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <SystemInit+0xd8>)
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <SystemInit+0xd8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <SystemInit+0xd8>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <SystemInit+0xd8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027b2:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <SystemInit+0xec>)
 80027b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00
 80027c8:	52002000 	.word	0x52002000
 80027cc:	58024400 	.word	0x58024400
 80027d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d4:	02020200 	.word	0x02020200
 80027d8:	01ff0000 	.word	0x01ff0000
 80027dc:	01010280 	.word	0x01010280
 80027e0:	52004000 	.word	0x52004000

080027e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <ExitRun0Mode+0x2c>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a08      	ldr	r2, [pc, #32]	@ (8002810 <ExitRun0Mode+0x2c>)
 80027ee:	f023 0302 	bic.w	r3, r3, #2
 80027f2:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80027f4:	bf00      	nop
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <ExitRun0Mode+0x2c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f9      	beq.n	80027f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	58024800 	.word	0x58024800

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002814:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002850 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002818:	f7ff ffe4 	bl	80027e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800281c:	f7ff ff6a 	bl	80026f4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	@ (8002858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	@ (8002864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002846:	f005 fa4d 	bl	8007ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7fe f8d5 	bl	80009f8 <main>
  bx  lr
 800284e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002850:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002854:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002858:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 800285c:	0800dd28 	.word	0x0800dd28
  ldr r2, =_sbss
 8002860:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002864:	240006f0 	.word	0x240006f0

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>
	...

0800286c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	@ 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <BSP_LED_Init+0x28>
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d006      	beq.n	8002894 <BSP_LED_Init+0x28>
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d003      	beq.n	8002894 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800288c:	f06f 0301 	mvn.w	r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002892:	e055      	b.n	8002940 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <BSP_LED_Init+0xe0>)
 800289c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028a0:	4a2a      	ldr	r2, [pc, #168]	@ (800294c <BSP_LED_Init+0xe0>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028aa:	4b28      	ldr	r3, [pc, #160]	@ (800294c <BSP_LED_Init+0xe0>)
 80028ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	e021      	b.n	80028fe <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d10f      	bne.n	80028e0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <BSP_LED_Init+0xe0>)
 80028c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028c6:	4a21      	ldr	r2, [pc, #132]	@ (800294c <BSP_LED_Init+0xe0>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028d0:	4b1e      	ldr	r3, [pc, #120]	@ (800294c <BSP_LED_Init+0xe0>)
 80028d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	e00e      	b.n	80028fe <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80028e0:	4b1a      	ldr	r3, [pc, #104]	@ (800294c <BSP_LED_Init+0xe0>)
 80028e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028e6:	4a19      	ldr	r2, [pc, #100]	@ (800294c <BSP_LED_Init+0xe0>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028f0:	4b16      	ldr	r3, [pc, #88]	@ (800294c <BSP_LED_Init+0xe0>)
 80028f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <BSP_LED_Init+0xe4>)
 8002902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002906:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <BSP_LED_Init+0xe8>)
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	f107 0218 	add.w	r2, r7, #24
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fc0c 	bl	8003140 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <BSP_LED_Init+0xe8>)
 800292c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4a07      	ldr	r2, [pc, #28]	@ (8002950 <BSP_LED_Init+0xe4>)
 8002934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	f000 fdc8 	bl	80034d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002942:	4618      	mov	r0, r3
 8002944:	3730      	adds	r7, #48	@ 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	58024400 	.word	0x58024400
 8002950:	0800db80 	.word	0x0800db80
 8002954:	2400000c 	.word	0x2400000c

08002958 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	4613      	mov	r3, r2
 8002966:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <BSP_PB_Init+0xcc>)
 800296a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800296e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a24 <BSP_PB_Init+0xcc>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <BSP_PB_Init+0xcc>)
 800297a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800298a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800298c:	2302      	movs	r3, #2
 800298e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002990:	2302      	movs	r3, #2
 8002992:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002994:	79bb      	ldrb	r3, [r7, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	4a21      	ldr	r2, [pc, #132]	@ (8002a28 <BSP_PB_Init+0xd0>)
 80029a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a6:	f107 020c 	add.w	r2, r7, #12
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fbc7 	bl	8003140 <HAL_GPIO_Init>
 80029b2:	e031      	b.n	8002a18 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80029b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029b8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a28 <BSP_PB_Init+0xd0>)
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	f107 020c 	add.w	r2, r7, #12
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fbb9 	bl	8003140 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4a16      	ldr	r2, [pc, #88]	@ (8002a2c <BSP_PB_Init+0xd4>)
 80029d4:	441a      	add	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	4915      	ldr	r1, [pc, #84]	@ (8002a30 <BSP_PB_Init+0xd8>)
 80029da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fb68 	bl	80030b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <BSP_PB_Init+0xd4>)
 80029ec:	1898      	adds	r0, r3, r2
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <BSP_PB_Init+0xdc>)
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	461a      	mov	r2, r3
 80029f8:	2100      	movs	r1, #0
 80029fa:	f000 fb3d 	bl	8003078 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80029fe:	2028      	movs	r0, #40	@ 0x28
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <BSP_PB_Init+0xe0>)
 8002a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f000 fa87 	bl	8002f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002a10:	2328      	movs	r3, #40	@ 0x28
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa9d 	bl	8002f52 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	58024400 	.word	0x58024400
 8002a28:	24000018 	.word	0x24000018
 8002a2c:	24000508 	.word	0x24000508
 8002a30:	0800db88 	.word	0x0800db88
 8002a34:	2400001c 	.word	0x2400001c
 8002a38:	24000020 	.word	0x24000020

08002a3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <BSP_PB_IRQHandler+0x20>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb46 	bl	80030e0 <HAL_EXTI_IRQHandler>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	24000508 	.word	0x24000508

08002a60 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a8e:	f06f 0301 	mvn.w	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e018      	b.n	8002ac8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2294      	movs	r2, #148	@ 0x94
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <BSP_COM_Init+0x5c>)
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f852 	bl	8002b4c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	2294      	movs	r2, #148	@ 0x94
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <BSP_COM_Init+0x5c>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f80e 	bl	8002ad8 <MX_USART3_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002ac2:	f06f 0303 	mvn.w	r3, #3
 8002ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24000510 	.word	0x24000510

08002ad8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <MX_USART3_Init+0x60>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	220c      	movs	r2, #12
 8002af6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	895b      	ldrh	r3, [r3, #10]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	891b      	ldrh	r3, [r3, #8]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	899b      	ldrh	r3, [r3, #12]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b24:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f003 ff9a 	bl	8006a60 <HAL_UART_Init>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	24000008 	.word	0x24000008

08002b3c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff ff8d 	bl	8002a60 <BSP_PB_Callback>
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	@ 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b5a:	4a26      	ldr	r2, [pc, #152]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b64:	4b23      	ldr	r3, [pc, #140]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b78:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002b90:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b92:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002ba0:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <COM1_MspInit+0xa8>)
 8002ba2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bb2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002bc0:	2307      	movs	r3, #7
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480b      	ldr	r0, [pc, #44]	@ (8002bf8 <COM1_MspInit+0xac>)
 8002bcc:	f000 fab8 	bl	8003140 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bd4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4804      	ldr	r0, [pc, #16]	@ (8002bf8 <COM1_MspInit+0xac>)
 8002be6:	f000 faab 	bl	8003140 <HAL_GPIO_Init>
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	@ 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	58020c00 	.word	0x58020c00

08002bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c02:	2003      	movs	r0, #3
 8002c04:	f000 f980 	bl	8002f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002c08:	f001 ff74 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_Init+0x68>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	4913      	ldr	r1, [pc, #76]	@ (8002c68 <HAL_Init+0x6c>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002c26:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <HAL_Init+0x68>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c68 <HAL_Init+0x6c>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <HAL_Init+0x70>)
 8002c3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c40:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <HAL_Init+0x74>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 f814 	bl	8002c74 <HAL_InitTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e002      	b.n	8002c5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c56:	f7ff fc5d 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	58024400 	.word	0x58024400
 8002c68:	0800db70 	.word	0x0800db70
 8002c6c:	24000004 	.word	0x24000004
 8002c70:	24000000 	.word	0x24000000

08002c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c7c:	4b15      	ldr	r3, [pc, #84]	@ (8002cd4 <HAL_InitTick+0x60>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e021      	b.n	8002ccc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_InitTick+0x64>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <HAL_InitTick+0x60>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f965 	bl	8002f6e <HAL_SYSTICK_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00e      	b.n	8002ccc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d80a      	bhi.n	8002cca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f000 f92f 	bl	8002f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <HAL_InitTick+0x68>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	24000028 	.word	0x24000028
 8002cd8:	24000000 	.word	0x24000000
 8002cdc:	24000024 	.word	0x24000024

08002ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x20>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_IncTick+0x24>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <HAL_IncTick+0x24>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	24000028 	.word	0x24000028
 8002d04:	240005a4 	.word	0x240005a4

08002d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <HAL_GetTick+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	240005a4 	.word	0x240005a4

08002d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d28:	f7ff ffee 	bl	8002d08 <HAL_GetTick>
 8002d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d005      	beq.n	8002d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <HAL_Delay+0x44>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d46:	bf00      	nop
 8002d48:	f7ff ffde 	bl	8002d08 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d8f7      	bhi.n	8002d48 <HAL_Delay+0x28>
  {
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	24000028 	.word	0x24000028

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	05fa0000 	.word	0x05fa0000

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4907      	ldr	r1, [pc, #28]	@ (8002e04 <__NVIC_EnableIRQ+0x38>)
 8002de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	@ (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	@ (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	@ 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
         );
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	@ 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed4:	d301      	bcc.n	8002eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00f      	b.n	8002efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eda:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <SysTick_Config+0x40>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f7ff ff8e 	bl	8002e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eec:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <SysTick_Config+0x40>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef2:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <SysTick_Config+0x40>)
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000e010 	.word	0xe000e010

08002f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff29 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff40 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff90 	bl	8002e5c <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5f 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff33 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa4 	bl	8002ec4 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002f8c:	f3bf 8f5f 	dmb	sy
}
 8002f90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_MPU_Disable+0x28>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	4a06      	ldr	r2, [pc, #24]	@ (8002fb0 <HAL_MPU_Disable+0x28>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_MPU_Disable+0x2c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00
 8002fb4:	e000ed90 	.word	0xe000ed90

08002fb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff0 <HAL_MPU_Enable+0x38>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <HAL_MPU_Enable+0x3c>)
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_MPU_Enable+0x3c>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fd6:	f3bf 8f4f 	dsb	sy
}
 8002fda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002fdc:	f3bf 8f6f 	isb	sy
}
 8002fe0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed90 	.word	0xe000ed90
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	785a      	ldrb	r2, [r3, #1]
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_MPU_ConfigRegion+0x7c>)
 8003006:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <HAL_MPU_ConfigRegion+0x7c>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_MPU_ConfigRegion+0x7c>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003014:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <HAL_MPU_ConfigRegion+0x7c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7b1b      	ldrb	r3, [r3, #12]
 8003020:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7adb      	ldrb	r3, [r3, #11]
 8003026:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7a9b      	ldrb	r3, [r3, #10]
 800302e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7b5b      	ldrb	r3, [r3, #13]
 8003036:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7b9b      	ldrb	r3, [r3, #14]
 800303e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7bdb      	ldrb	r3, [r3, #15]
 8003046:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7a5b      	ldrb	r3, [r3, #9]
 800304e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7a1b      	ldrb	r3, [r3, #8]
 8003056:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003058:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003060:	4a04      	ldr	r2, [pc, #16]	@ (8003074 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003062:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003064:	6113      	str	r3, [r2, #16]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed90 	.word	0xe000ed90

08003078 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	460b      	mov	r3, r1
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e00a      	b.n	80030aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	605a      	str	r2, [r3, #4]
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
      break;
 80030a6:	bf00      	nop
  }

  return status;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e003      	b.n	80030d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2201      	movs	r2, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	011a      	lsls	r2, r3, #4
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_EXTI_IRQHandler+0x5c>)
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4798      	blx	r3
    }
  }
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	58000088 	.word	0x58000088

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800314e:	4b89      	ldr	r3, [pc, #548]	@ (8003374 <HAL_GPIO_Init+0x234>)
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003152:	e194      	b.n	800347e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8186 	beq.w	8003478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d005      	beq.n	8003184 <HAL_GPIO_Init+0x44>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d130      	bne.n	80031e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ba:	2201      	movs	r2, #1
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 0201 	and.w	r2, r3, #1
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d017      	beq.n	8003222 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80e0 	beq.w	8003478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003378 <HAL_GPIO_Init+0x238>)
 80032ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80032be:	4a2e      	ldr	r2, [pc, #184]	@ (8003378 <HAL_GPIO_Init+0x238>)
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80032c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003378 <HAL_GPIO_Init+0x238>)
 80032ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_GPIO_Init+0x23c>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <HAL_GPIO_Init+0x240>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d052      	beq.n	80033a8 <HAL_GPIO_Init+0x268>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_GPIO_Init+0x244>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d031      	beq.n	800336e <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1e      	ldr	r2, [pc, #120]	@ (8003388 <HAL_GPIO_Init+0x248>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d02b      	beq.n	800336a <HAL_GPIO_Init+0x22a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_GPIO_Init+0x24c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d025      	beq.n	8003366 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_GPIO_Init+0x250>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01f      	beq.n	8003362 <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <HAL_GPIO_Init+0x254>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d019      	beq.n	800335e <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <HAL_GPIO_Init+0x258>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <HAL_GPIO_Init+0x25c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00d      	beq.n	8003356 <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <HAL_GPIO_Init+0x260>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a17      	ldr	r2, [pc, #92]	@ (80033a4 <HAL_GPIO_Init+0x264>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_GPIO_Init+0x20e>
 800334a:	2309      	movs	r3, #9
 800334c:	e02d      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800334e:	230a      	movs	r3, #10
 8003350:	e02b      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003352:	2308      	movs	r3, #8
 8003354:	e029      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003356:	2307      	movs	r3, #7
 8003358:	e027      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800335a:	2306      	movs	r3, #6
 800335c:	e025      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800335e:	2305      	movs	r3, #5
 8003360:	e023      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003362:	2304      	movs	r3, #4
 8003364:	e021      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003366:	2303      	movs	r3, #3
 8003368:	e01f      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800336a:	2302      	movs	r3, #2
 800336c:	e01d      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 800336e:	2301      	movs	r3, #1
 8003370:	e01b      	b.n	80033aa <HAL_GPIO_Init+0x26a>
 8003372:	bf00      	nop
 8003374:	58000080 	.word	0x58000080
 8003378:	58024400 	.word	0x58024400
 800337c:	58000400 	.word	0x58000400
 8003380:	58020000 	.word	0x58020000
 8003384:	58020400 	.word	0x58020400
 8003388:	58020800 	.word	0x58020800
 800338c:	58020c00 	.word	0x58020c00
 8003390:	58021000 	.word	0x58021000
 8003394:	58021400 	.word	0x58021400
 8003398:	58021800 	.word	0x58021800
 800339c:	58021c00 	.word	0x58021c00
 80033a0:	58022000 	.word	0x58022000
 80033a4:	58022400 	.word	0x58022400
 80033a8:	2300      	movs	r3, #0
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	4093      	lsls	r3, r2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ba:	4938      	ldr	r1, [pc, #224]	@ (800349c <HAL_GPIO_Init+0x35c>)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80033ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800341c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f47f ae63 	bne.w	8003154 <HAL_GPIO_Init+0x14>
  }
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	3724      	adds	r7, #36	@ 0x24
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	58000400 	.word	0x58000400

080034a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e001      	b.n	80034c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034ec:	e003      	b.n	80034f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	041a      	lsls	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e08b      	b.n	800362e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff f80c 	bl	8002548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	@ 0x24
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003554:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003564:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	e006      	b.n	800358c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800358a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d108      	bne.n	80035a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	e007      	b.n	80035b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <HAL_I2C_Init+0x134>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69d9      	ldr	r1, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	02008000 	.word	0x02008000

0800363c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	f040 80f9 	bne.w	8003856 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_I2C_Mem_Write+0x34>
 800366a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0ed      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_I2C_Mem_Write+0x4e>
 8003686:	2302      	movs	r3, #2
 8003688:	e0e6      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003692:	f7ff fb39 	bl	8002d08 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f955 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d1      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	@ 0x21
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	@ 0x40
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036dc:	88f8      	ldrh	r0, [r7, #6]
 80036de:	893a      	ldrh	r2, [r7, #8]
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4603      	mov	r3, r0
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f8b9 	bl	8003864 <I2C_RequestMemoryWrite>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0a9      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2bff      	cmp	r3, #255	@ 0xff
 800370c:	d90e      	bls.n	800372c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	22ff      	movs	r2, #255	@ 0xff
 8003712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	b2da      	uxtb	r2, r3
 800371a:	8979      	ldrh	r1, [r7, #10]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fad9 	bl	8003cdc <I2C_TransferConfig>
 800372a:	e00f      	b.n	800374c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373a:	b2da      	uxtb	r2, r3
 800373c:	8979      	ldrh	r1, [r7, #10]
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fac8 	bl	8003cdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f958 	bl	8003a06 <I2C_WaitOnTXISFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e07b      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d034      	beq.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d130      	bne.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8d1 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e04d      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2bff      	cmp	r3, #255	@ 0xff
 80037c4:	d90e      	bls.n	80037e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22ff      	movs	r2, #255	@ 0xff
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa7d 	bl	8003cdc <I2C_TransferConfig>
 80037e2:	e00f      	b.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fa6c 	bl	8003cdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d19e      	bne.n	800374c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f93e 	bl	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01a      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2220      	movs	r2, #32
 8003828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <HAL_I2C_Mem_Write+0x224>)
 8003836:	400b      	ands	r3, r1
 8003838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	fe00e800 	.word	0xfe00e800

08003864 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	8979      	ldrh	r1, [r7, #10]
 8003884:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <I2C_RequestMemoryWrite+0xa4>)
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fa25 	bl	8003cdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f8b5 	bl	8003a06 <I2C_WaitOnTXISFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e02c      	b.n	8003900 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ac:	893b      	ldrh	r3, [r7, #8]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b6:	e015      	b.n	80038e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f89b 	bl	8003a06 <I2C_WaitOnTXISFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e012      	b.n	8003900 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038da:	893b      	ldrh	r3, [r7, #8]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2200      	movs	r2, #0
 80038ec:	2180      	movs	r1, #128	@ 0x80
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f830 	bl	8003954 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	80002000 	.word	0x80002000

0800390c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d103      	bne.n	800392a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	619a      	str	r2, [r3, #24]
  }
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003964:	e03b      	b.n	80039de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	6839      	ldr	r1, [r7, #0]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f8d6 	bl	8003b1c <I2C_IsErrorOccurred>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e041      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d02d      	beq.n	80039de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7ff f9c1 	bl	8002d08 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d122      	bne.n	80039de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d113      	bne.n	80039de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4013      	ands	r3, r2
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d0b4      	beq.n	8003966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a12:	e033      	b.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f87f 	bl	8003b1c <I2C_IsErrorOccurred>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e031      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d025      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7ff f96a 	bl	8002d08 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11a      	bne.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d013      	beq.n	8003a7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e007      	b.n	8003a8c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d1c4      	bne.n	8003a14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa0:	e02f      	b.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f838 	bl	8003b1c <I2C_IsErrorOccurred>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e02d      	b.n	8003b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7ff f927 	bl	8002d08 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d11a      	bne.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d013      	beq.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d1c8      	bne.n	8003aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d068      	beq.n	8003c1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b50:	e049      	b.n	8003be6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d045      	beq.n	8003be6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7ff f8d5 	bl	8002d08 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_IsErrorOccurred+0x54>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d13a      	bne.n	8003be6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b92:	d121      	bne.n	8003bd8 <I2C_IsErrorOccurred+0xbc>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9a:	d01d      	beq.n	8003bd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d01a      	beq.n	8003bd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bb2:	f7ff f8a9 	bl	8002d08 <HAL_GetTick>
 8003bb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb8:	e00e      	b.n	8003bd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bba:	f7ff f8a5 	bl	8002d08 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b19      	cmp	r3, #25
 8003bc6:	d907      	bls.n	8003bd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	f043 0320 	orr.w	r3, r3, #32
 8003bce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bd6:	e006      	b.n	8003be6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d1e9      	bne.n	8003bba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d003      	beq.n	8003bfc <I2C_IsErrorOccurred+0xe0>
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0aa      	beq.n	8003b52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f043 0308 	orr.w	r3, r3, #8
 8003c54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01c      	beq.n	8003cca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fe3b 	bl	800390c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <I2C_IsErrorOccurred+0x1bc>)
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3728      	adds	r7, #40	@ 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	fe00e800 	.word	0xfe00e800

08003cdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	4613      	mov	r3, r2
 8003cec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf4:	7a7b      	ldrb	r3, [r7, #9]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cfc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d0a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	0d5b      	lsrs	r3, r3, #21
 8003d16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <I2C_TransferConfig+0x60>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	ea02 0103 	and.w	r1, r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	03ff63ff 	.word	0x03ff63ff

08003d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d138      	bne.n	8003dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e032      	b.n	8003dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	@ 0x24
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d139      	bne.n	8003e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e033      	b.n	8003e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2224      	movs	r2, #36	@ 0x24
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e78:	4b29      	ldr	r3, [pc, #164]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d00a      	beq.n	8003e9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e84:	4b26      	ldr	r3, [pc, #152]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d001      	beq.n	8003e96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e040      	b.n	8003f18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e03e      	b.n	8003f18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e9a:	4b21      	ldr	r3, [pc, #132]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003ea2:	491f      	ldr	r1, [pc, #124]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eaa:	f7fe ff2d 	bl	8002d08 <HAL_GetTick>
 8003eae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eb0:	e009      	b.n	8003ec6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eb2:	f7fe ff29 	bl	8002d08 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ec0:	d901      	bls.n	8003ec6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e028      	b.n	8003f18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ec6:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed2:	d1ee      	bne.n	8003eb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b1e      	cmp	r3, #30
 8003ed8:	d008      	beq.n	8003eec <HAL_PWREx_ConfigSupply+0x7c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ede:	d005      	beq.n	8003eec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b1d      	cmp	r3, #29
 8003ee4:	d002      	beq.n	8003eec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b2d      	cmp	r3, #45	@ 0x2d
 8003eea:	d114      	bne.n	8003f16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003eec:	f7fe ff0c 	bl	8002d08 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ef2:	e009      	b.n	8003f08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ef4:	f7fe ff08 	bl	8002d08 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f02:	d901      	bls.n	8003f08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e007      	b.n	8003f18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58024800 	.word	0x58024800

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	@ 0x30
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f000 bc1f 	b.w	8004776 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80b3 	beq.w	80040ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f46:	4b95      	ldr	r3, [pc, #596]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f50:	4b92      	ldr	r3, [pc, #584]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d007      	beq.n	8003f6c <HAL_RCC_OscConfig+0x48>
 8003f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5e:	2b18      	cmp	r3, #24
 8003f60:	d112      	bne.n	8003f88 <HAL_RCC_OscConfig+0x64>
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8098 	beq.w	80040aa <HAL_RCC_OscConfig+0x186>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8093 	bne.w	80040aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e3f6      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x7c>
 8003f92:	4b82      	ldr	r3, [pc, #520]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a81      	ldr	r2, [pc, #516]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e058      	b.n	8004052 <HAL_RCC_OscConfig+0x12e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d112      	bne.n	8003fce <HAL_RCC_OscConfig+0xaa>
 8003fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a7b      	ldr	r2, [pc, #492]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b79      	ldr	r3, [pc, #484]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a78      	ldr	r2, [pc, #480]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b76      	ldr	r3, [pc, #472]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a75      	ldr	r2, [pc, #468]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e041      	b.n	8004052 <HAL_RCC_OscConfig+0x12e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd6:	d112      	bne.n	8003ffe <HAL_RCC_OscConfig+0xda>
 8003fd8:	4b70      	ldr	r3, [pc, #448]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6f      	ldr	r2, [pc, #444]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b6d      	ldr	r3, [pc, #436]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6c      	ldr	r2, [pc, #432]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003fea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a69      	ldr	r2, [pc, #420]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8003ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e029      	b.n	8004052 <HAL_RCC_OscConfig+0x12e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004006:	d112      	bne.n	800402e <HAL_RCC_OscConfig+0x10a>
 8004008:	4b64      	ldr	r3, [pc, #400]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a63      	ldr	r2, [pc, #396]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800400e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b61      	ldr	r3, [pc, #388]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a60      	ldr	r2, [pc, #384]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b5e      	ldr	r3, [pc, #376]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5d      	ldr	r2, [pc, #372]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e011      	b.n	8004052 <HAL_RCC_OscConfig+0x12e>
 800402e:	4b5b      	ldr	r3, [pc, #364]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5a      	ldr	r2, [pc, #360]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b58      	ldr	r3, [pc, #352]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a57      	ldr	r2, [pc, #348]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b55      	ldr	r3, [pc, #340]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a54      	ldr	r2, [pc, #336]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800404c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fe fe55 	bl	8002d08 <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004062:	f7fe fe51 	bl	8002d08 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	@ 0x64
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e380      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004074:	4b49      	ldr	r3, [pc, #292]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x13e>
 8004080:	e014      	b.n	80040ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fe fe41 	bl	8002d08 <HAL_GetTick>
 8004086:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408a:	f7fe fe3d 	bl	8002d08 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b64      	cmp	r3, #100	@ 0x64
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e36c      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800409c:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x166>
 80040a8:	e000      	b.n	80040ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 808c 	beq.w	80041d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ba:	4b38      	ldr	r3, [pc, #224]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040c4:	4b35      	ldr	r3, [pc, #212]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_RCC_OscConfig+0x1bc>
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	2b18      	cmp	r3, #24
 80040d4:	d137      	bne.n	8004146 <HAL_RCC_OscConfig+0x222>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d132      	bne.n	8004146 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x1d4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e33e      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040f8:	4b28      	ldr	r3, [pc, #160]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0219 	bic.w	r2, r3, #25
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4925      	ldr	r1, [pc, #148]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fe fdfd 	bl	8002d08 <HAL_GetTick>
 800410e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7fe fdf9 	bl	8002d08 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e328      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004124:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4917      	ldr	r1, [pc, #92]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	e045      	b.n	80041d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800414e:	4b13      	ldr	r3, [pc, #76]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0219 	bic.w	r2, r3, #25
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4910      	ldr	r1, [pc, #64]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fdd2 	bl	8002d08 <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004168:	f7fe fdce 	bl	8002d08 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e2fd      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b05      	ldr	r3, [pc, #20]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	4901      	ldr	r1, [pc, #4]	@ (800419c <HAL_RCC_OscConfig+0x278>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e01a      	b.n	80041d2 <HAL_RCC_OscConfig+0x2ae>
 800419c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a0:	4b97      	ldr	r3, [pc, #604]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a96      	ldr	r2, [pc, #600]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fe fdac 	bl	8002d08 <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b4:	f7fe fda8 	bl	8002d08 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e2d7      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041c6:	4b8e      	ldr	r3, [pc, #568]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d06a      	beq.n	80042b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041de:	4b88      	ldr	r3, [pc, #544]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041e8:	4b85      	ldr	r3, [pc, #532]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d007      	beq.n	8004204 <HAL_RCC_OscConfig+0x2e0>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b18      	cmp	r3, #24
 80041f8:	d11b      	bne.n	8004232 <HAL_RCC_OscConfig+0x30e>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d116      	bne.n	8004232 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004204:	4b7e      	ldr	r3, [pc, #504]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_OscConfig+0x2f8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b80      	cmp	r3, #128	@ 0x80
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e2ac      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800421c:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	4975      	ldr	r1, [pc, #468]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004230:	e040      	b.n	80042b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d023      	beq.n	8004282 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800423a:	4b71      	ldr	r3, [pc, #452]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a70      	ldr	r2, [pc, #448]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fe fd5f 	bl	8002d08 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800424e:	f7fe fd5b 	bl	8002d08 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e28a      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004260:	4b67      	ldr	r3, [pc, #412]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800426c:	4b64      	ldr	r3, [pc, #400]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	4961      	ldr	r1, [pc, #388]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	60cb      	str	r3, [r1, #12]
 8004280:	e018      	b.n	80042b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004282:	4b5f      	ldr	r3, [pc, #380]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5e      	ldr	r2, [pc, #376]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fd3b 	bl	8002d08 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004296:	f7fe fd37 	bl	8002d08 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e266      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042a8:	4b55      	ldr	r3, [pc, #340]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d036      	beq.n	800432e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d019      	beq.n	80042fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80042ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe fd18 	bl	8002d08 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe fd14 	bl	8002d08 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e243      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ee:	4b44      	ldr	r3, [pc, #272]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x3b8>
 80042fa:	e018      	b.n	800432e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b40      	ldr	r3, [pc, #256]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004300:	4a3f      	ldr	r2, [pc, #252]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fe fcfe 	bl	8002d08 <HAL_GetTick>
 800430c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004310:	f7fe fcfa 	bl	8002d08 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e229      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004322:	4b37      	ldr	r3, [pc, #220]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d036      	beq.n	80043a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d019      	beq.n	8004376 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004342:	4b2f      	ldr	r3, [pc, #188]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2e      	ldr	r2, [pc, #184]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800434c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800434e:	f7fe fcdb 	bl	8002d08 <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004356:	f7fe fcd7 	bl	8002d08 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e206      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004368:	4b25      	ldr	r3, [pc, #148]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x432>
 8004374:	e018      	b.n	80043a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004376:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a21      	ldr	r2, [pc, #132]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800437c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004380:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004382:	f7fe fcc1 	bl	8002d08 <HAL_GetTick>
 8004386:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800438a:	f7fe fcbd 	bl	8002d08 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1ec      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439c:	4b18      	ldr	r3, [pc, #96]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80af 	beq.w	8004514 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043b6:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <HAL_RCC_OscConfig+0x4e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <HAL_RCC_OscConfig+0x4e0>)
 80043bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c2:	f7fe fca1 	bl	8002d08 <HAL_GetTick>
 80043c6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ca:	f7fe fc9d 	bl	8002d08 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b64      	cmp	r3, #100	@ 0x64
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e1cc      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043dc:	4b09      	ldr	r3, [pc, #36]	@ (8004404 <HAL_RCC_OscConfig+0x4e0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10b      	bne.n	8004408 <HAL_RCC_OscConfig+0x4e4>
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	4a02      	ldr	r2, [pc, #8]	@ (8004400 <HAL_RCC_OscConfig+0x4dc>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fc:	e05b      	b.n	80044b6 <HAL_RCC_OscConfig+0x592>
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400
 8004404:	58024800 	.word	0x58024800
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d112      	bne.n	8004436 <HAL_RCC_OscConfig+0x512>
 8004410:	4b9d      	ldr	r3, [pc, #628]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	4a9c      	ldr	r2, [pc, #624]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	6713      	str	r3, [r2, #112]	@ 0x70
 800441c:	4b9a      	ldr	r3, [pc, #616]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004420:	4a99      	ldr	r2, [pc, #612]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004426:	6713      	str	r3, [r2, #112]	@ 0x70
 8004428:	4b97      	ldr	r3, [pc, #604]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a96      	ldr	r2, [pc, #600]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800442e:	f023 0304 	bic.w	r3, r3, #4
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	e03f      	b.n	80044b6 <HAL_RCC_OscConfig+0x592>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d112      	bne.n	8004464 <HAL_RCC_OscConfig+0x540>
 800443e:	4b92      	ldr	r3, [pc, #584]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	4a91      	ldr	r2, [pc, #580]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6713      	str	r3, [r2, #112]	@ 0x70
 800444a:	4b8f      	ldr	r3, [pc, #572]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	4a8e      	ldr	r2, [pc, #568]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004454:	6713      	str	r3, [r2, #112]	@ 0x70
 8004456:	4b8c      	ldr	r3, [pc, #560]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445a:	4a8b      	ldr	r2, [pc, #556]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
 8004462:	e028      	b.n	80044b6 <HAL_RCC_OscConfig+0x592>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b85      	cmp	r3, #133	@ 0x85
 800446a:	d112      	bne.n	8004492 <HAL_RCC_OscConfig+0x56e>
 800446c:	4b86      	ldr	r3, [pc, #536]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004470:	4a85      	ldr	r2, [pc, #532]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6713      	str	r3, [r2, #112]	@ 0x70
 8004478:	4b83      	ldr	r3, [pc, #524]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447c:	4a82      	ldr	r2, [pc, #520]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800447e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004482:	6713      	str	r3, [r2, #112]	@ 0x70
 8004484:	4b80      	ldr	r3, [pc, #512]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004488:	4a7f      	ldr	r2, [pc, #508]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004490:	e011      	b.n	80044b6 <HAL_RCC_OscConfig+0x592>
 8004492:	4b7d      	ldr	r3, [pc, #500]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a7c      	ldr	r2, [pc, #496]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
 800449e:	4b7a      	ldr	r3, [pc, #488]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	4a79      	ldr	r2, [pc, #484]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044aa:	4b77      	ldr	r3, [pc, #476]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ae:	4a76      	ldr	r2, [pc, #472]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80044b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fe fc23 	bl	8002d08 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fc1f 	bl	8002d08 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e14c      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ee      	beq.n	80044c6 <HAL_RCC_OscConfig+0x5a2>
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fe fc0d 	bl	8002d08 <HAL_GetTick>
 80044ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe fc09 	bl	8002d08 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e136      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004508:	4b5f      	ldr	r3, [pc, #380]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ee      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 812b 	beq.w	8004774 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800451e:	4b5a      	ldr	r3, [pc, #360]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004526:	2b18      	cmp	r3, #24
 8004528:	f000 80bb 	beq.w	80046a2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	2b02      	cmp	r3, #2
 8004532:	f040 8095 	bne.w	8004660 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b54      	ldr	r3, [pc, #336]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a53      	ldr	r2, [pc, #332]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800453c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fe fbe1 	bl	8002d08 <HAL_GetTick>
 8004546:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe fbdd 	bl	8002d08 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e10c      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800455c:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004568:	4b47      	ldr	r3, [pc, #284]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800456a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800456c:	4b47      	ldr	r3, [pc, #284]	@ (800468c <HAL_RCC_OscConfig+0x768>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	430a      	orrs	r2, r1
 800457c:	4942      	ldr	r1, [pc, #264]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800457e:	4313      	orrs	r3, r2
 8004580:	628b      	str	r3, [r1, #40]	@ 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	3b01      	subs	r3, #1
 8004588:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004590:	3b01      	subs	r3, #1
 8004592:	025b      	lsls	r3, r3, #9
 8004594:	b29b      	uxth	r3, r3
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	3b01      	subs	r3, #1
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045aa:	3b01      	subs	r3, #1
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045b2:	4935      	ldr	r1, [pc, #212]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80045b8:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	4a32      	ldr	r2, [pc, #200]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045c4:	4b30      	ldr	r3, [pc, #192]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c8:	4b31      	ldr	r3, [pc, #196]	@ (8004690 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045d0:	00d2      	lsls	r2, r2, #3
 80045d2:	492d      	ldr	r1, [pc, #180]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	f023 020c 	bic.w	r2, r3, #12
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	4928      	ldr	r1, [pc, #160]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045ea:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	f023 0202 	bic.w	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	4924      	ldr	r1, [pc, #144]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045fc:	4b22      	ldr	r3, [pc, #136]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004600:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	4a1e      	ldr	r2, [pc, #120]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004614:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	4a1b      	ldr	r2, [pc, #108]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800461a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800461e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004620:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800462c:	4b16      	ldr	r3, [pc, #88]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe fb66 	bl	8002d08 <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe fb62 	bl	8002d08 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e091      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x71c>
 800465e:	e089      	b.n	8004774 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <HAL_RCC_OscConfig+0x764>)
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800466a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe fb4c 	bl	8002d08 <HAL_GetTick>
 8004670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004672:	e00f      	b.n	8004694 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe fb48 	bl	8002d08 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d908      	bls.n	8004694 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e077      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
 800468c:	fffffc0c 	.word	0xfffffc0c
 8004690:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004694:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e9      	bne.n	8004674 <HAL_RCC_OscConfig+0x750>
 80046a0:	e068      	b.n	8004774 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046a2:	4b37      	ldr	r3, [pc, #220]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046a8:	4b35      	ldr	r3, [pc, #212]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d031      	beq.n	800471a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f003 0203 	and.w	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d12a      	bne.n	800471a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d122      	bne.n	800471a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d11a      	bne.n	800471a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	0a5b      	lsrs	r3, r3, #9
 80046e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d111      	bne.n	800471a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d108      	bne.n	800471a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0e1b      	lsrs	r3, r3, #24
 800470c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e02b      	b.n	8004776 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 8004720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004722:	08db      	lsrs	r3, r3, #3
 8004724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004728:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	429a      	cmp	r2, r3
 8004732:	d01f      	beq.n	8004774 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004734:	4b12      	ldr	r3, [pc, #72]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	4a11      	ldr	r2, [pc, #68]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004740:	f7fe fae2 	bl	8002d08 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004746:	bf00      	nop
 8004748:	f7fe fade 	bl	8002d08 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	4293      	cmp	r3, r2
 8004752:	d0f9      	beq.n	8004748 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 8004756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <HAL_RCC_OscConfig+0x860>)
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004760:	00d2      	lsls	r2, r2, #3
 8004762:	4907      	ldr	r1, [pc, #28]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <HAL_RCC_OscConfig+0x85c>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3730      	adds	r7, #48	@ 0x30
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	ffff0007 	.word	0xffff0007

08004788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e19c      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b8a      	ldr	r3, [pc, #552]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b87      	ldr	r3, [pc, #540]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 020f 	bic.w	r2, r3, #15
 80047b2:	4985      	ldr	r1, [pc, #532]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b83      	ldr	r3, [pc, #524]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e184      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d010      	beq.n	80047fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	4b7b      	ldr	r3, [pc, #492]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d908      	bls.n	80047fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047e8:	4b78      	ldr	r3, [pc, #480]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	4975      	ldr	r1, [pc, #468]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d010      	beq.n	8004828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	4b70      	ldr	r3, [pc, #448]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004812:	429a      	cmp	r2, r3
 8004814:	d908      	bls.n	8004828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004816:	4b6d      	ldr	r3, [pc, #436]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	496a      	ldr	r1, [pc, #424]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004824:	4313      	orrs	r3, r2
 8004826:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	4b64      	ldr	r3, [pc, #400]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004840:	429a      	cmp	r2, r3
 8004842:	d908      	bls.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004844:	4b61      	ldr	r3, [pc, #388]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	495e      	ldr	r1, [pc, #376]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004852:	4313      	orrs	r3, r2
 8004854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	4b59      	ldr	r3, [pc, #356]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800486e:	429a      	cmp	r2, r3
 8004870:	d908      	bls.n	8004884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004872:	4b56      	ldr	r3, [pc, #344]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	4953      	ldr	r1, [pc, #332]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004880:	4313      	orrs	r3, r2
 8004882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d010      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	4b4d      	ldr	r3, [pc, #308]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	429a      	cmp	r2, r3
 800489e:	d908      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b4a      	ldr	r3, [pc, #296]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f023 020f 	bic.w	r2, r3, #15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4947      	ldr	r1, [pc, #284]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d055      	beq.n	800496a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048be:	4b43      	ldr	r3, [pc, #268]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4940      	ldr	r1, [pc, #256]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d8:	4b3c      	ldr	r3, [pc, #240]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d121      	bne.n	8004928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0f6      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f0:	4b36      	ldr	r3, [pc, #216]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d115      	bne.n	8004928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0ea      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d107      	bne.n	8004918 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004908:	4b30      	ldr	r3, [pc, #192]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0de      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004918:	4b2c      	ldr	r3, [pc, #176]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d6      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004928:	4b28      	ldr	r3, [pc, #160]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f023 0207 	bic.w	r2, r3, #7
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4925      	ldr	r1, [pc, #148]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493a:	f7fe f9e5 	bl	8002d08 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004940:	e00a      	b.n	8004958 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004942:	f7fe f9e1 	bl	8002d08 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0be      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	429a      	cmp	r2, r3
 8004968:	d1eb      	bne.n	8004942 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	429a      	cmp	r2, r3
 8004984:	d208      	bcs.n	8004998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004986:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	490e      	ldr	r1, [pc, #56]	@ (80049cc <HAL_RCC_ClockConfig+0x244>)
 8004994:	4313      	orrs	r3, r2
 8004996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d214      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	4906      	ldr	r1, [pc, #24]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HAL_RCC_ClockConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e086      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x34e>
 80049c8:	52002000 	.word	0x52002000
 80049cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d208      	bcs.n	80049fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	4939      	ldr	r1, [pc, #228]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	4b34      	ldr	r3, [pc, #208]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d208      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	492e      	ldr	r1, [pc, #184]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d208      	bcs.n	8004a5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a48:	4b25      	ldr	r3, [pc, #148]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4922      	ldr	r1, [pc, #136]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d208      	bcs.n	8004a88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4917      	ldr	r1, [pc, #92]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004a88:	f000 f834 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	4912      	ldr	r1, [pc, #72]	@ (8004ae4 <HAL_RCC_ClockConfig+0x35c>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <HAL_RCC_ClockConfig+0x358>)
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae4 <HAL_RCC_ClockConfig+0x35c>)
 8004ab0:	5cd3      	ldrb	r3, [r2, r3]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <HAL_RCC_ClockConfig+0x360>)
 8004abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8004aec <HAL_RCC_ClockConfig+0x364>)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <HAL_RCC_ClockConfig+0x368>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe f8d2 	bl	8002c74 <HAL_InitTick>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	58024400 	.word	0x58024400
 8004ae4:	0800db70 	.word	0x0800db70
 8004ae8:	24000004 	.word	0x24000004
 8004aec:	24000000 	.word	0x24000000
 8004af0:	24000024 	.word	0x24000024

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004afa:	4bb3      	ldr	r3, [pc, #716]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b02:	2b18      	cmp	r3, #24
 8004b04:	f200 8155 	bhi.w	8004db2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b75 	.word	0x08004b75
 8004b14:	08004db3 	.word	0x08004db3
 8004b18:	08004db3 	.word	0x08004db3
 8004b1c:	08004db3 	.word	0x08004db3
 8004b20:	08004db3 	.word	0x08004db3
 8004b24:	08004db3 	.word	0x08004db3
 8004b28:	08004db3 	.word	0x08004db3
 8004b2c:	08004db3 	.word	0x08004db3
 8004b30:	08004b9b 	.word	0x08004b9b
 8004b34:	08004db3 	.word	0x08004db3
 8004b38:	08004db3 	.word	0x08004db3
 8004b3c:	08004db3 	.word	0x08004db3
 8004b40:	08004db3 	.word	0x08004db3
 8004b44:	08004db3 	.word	0x08004db3
 8004b48:	08004db3 	.word	0x08004db3
 8004b4c:	08004db3 	.word	0x08004db3
 8004b50:	08004ba1 	.word	0x08004ba1
 8004b54:	08004db3 	.word	0x08004db3
 8004b58:	08004db3 	.word	0x08004db3
 8004b5c:	08004db3 	.word	0x08004db3
 8004b60:	08004db3 	.word	0x08004db3
 8004b64:	08004db3 	.word	0x08004db3
 8004b68:	08004db3 	.word	0x08004db3
 8004b6c:	08004db3 	.word	0x08004db3
 8004b70:	08004ba7 	.word	0x08004ba7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b74:	4b94      	ldr	r3, [pc, #592]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b80:	4b91      	ldr	r3, [pc, #580]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	4a90      	ldr	r2, [pc, #576]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004b92:	e111      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b94:	4b8d      	ldr	r3, [pc, #564]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b96:	61bb      	str	r3, [r7, #24]
      break;
 8004b98:	e10e      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b9c:	61bb      	str	r3, [r7, #24]
      break;
 8004b9e:	e10b      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ba2:	61bb      	str	r3, [r7, #24]
      break;
 8004ba4:	e108      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ba6:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004bb0:	4b85      	ldr	r3, [pc, #532]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	091b      	lsrs	r3, r3, #4
 8004bb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bbc:	4b82      	ldr	r3, [pc, #520]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bc6:	4b80      	ldr	r3, [pc, #512]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80e1 	beq.w	8004dac <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f000 8083 	beq.w	8004cf8 <HAL_RCC_GetSysClockFreq+0x204>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	f200 80a1 	bhi.w	8004d3c <HAL_RCC_GetSysClockFreq+0x248>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x114>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d056      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c06:	e099      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c08:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02d      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c14:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	08db      	lsrs	r3, r3, #3
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
 8004c24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3e:	4b62      	ldr	r3, [pc, #392]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c6e:	e087      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004ddc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c82:	4b51      	ldr	r3, [pc, #324]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cb2:	e065      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc6:	4b40      	ldr	r3, [pc, #256]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cda:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cf6:	e043      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004de4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d3a:	e021      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d80:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d84:	0a5b      	lsrs	r3, r3, #9
 8004d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	ee17 3a90 	vmov	r3, s15
 8004da8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
      break;
 8004db0:	e002      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004db2:	4b07      	ldr	r3, [pc, #28]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004db4:	61bb      	str	r3, [r7, #24]
      break;
 8004db6:	bf00      	nop
  }

  return sysclockfreq;
 8004db8:	69bb      	ldr	r3, [r7, #24]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	@ 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	03d09000 	.word	0x03d09000
 8004dd0:	003d0900 	.word	0x003d0900
 8004dd4:	007a1200 	.word	0x007a1200
 8004dd8:	46000000 	.word	0x46000000
 8004ddc:	4c742400 	.word	0x4c742400
 8004de0:	4a742400 	.word	0x4a742400
 8004de4:	4af42400 	.word	0x4af42400

08004de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004dee:	f7ff fe81 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	490f      	ldr	r1, [pc, #60]	@ (8004e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	4a09      	ldr	r2, [pc, #36]	@ (8004e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004e16:	5cd3      	ldrb	r3, [r2, r3]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a07      	ldr	r2, [pc, #28]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e26:	4a07      	ldr	r2, [pc, #28]	@ (8004e44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e2c:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	0800db70 	.word	0x0800db70
 8004e40:	24000004 	.word	0x24000004
 8004e44:	24000000 	.word	0x24000000

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004e4c:	f7ff ffcc 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	0800db70 	.word	0x0800db70

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004e78:	f7ff ffb6 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	0800db70 	.word	0x0800db70

08004ea0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b0c8      	sub	sp, #288	@ 0x120
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004ec4:	2500      	movs	r5, #0
 8004ec6:	ea54 0305 	orrs.w	r3, r4, r5
 8004eca:	d049      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ed6:	d02f      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ed8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004edc:	d828      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee2:	d01a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee8:	d822      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef2:	d007      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef6:	4ba7      	ldr	r3, [pc, #668]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	4aa6      	ldr	r2, [pc, #664]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f02:	e01a      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f08:	3308      	adds	r3, #8
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fc43 	bl	8006798 <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f1e:	3328      	adds	r3, #40	@ 0x28
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 fcea 	bl	80068fc <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004f42:	4b94      	ldr	r3, [pc, #592]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f50:	4a90      	ldr	r2, [pc, #576]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	ea58 0309 	orrs.w	r3, r8, r9
 8004f74:	d047      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d82a      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004f9d 	.word	0x08004f9d
 8004f8c:	08004fab 	.word	0x08004fab
 8004f90:	08004fc1 	.word	0x08004fc1
 8004f94:	08004fdf 	.word	0x08004fdf
 8004f98:	08004fdf 	.word	0x08004fdf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f9c:	4b7d      	ldr	r3, [pc, #500]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fa8:	e01a      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fae:	3308      	adds	r3, #8
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 fbf0 	bl	8006798 <RCCEx_PLL2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fbe:	e00f      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc4:	3328      	adds	r3, #40	@ 0x28
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 fc97 	bl	80068fc <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	f023 0107 	bic.w	r1, r3, #7
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff6:	4a67      	ldr	r2, [pc, #412]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005002:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005012:	f04f 0b00 	mov.w	fp, #0
 8005016:	ea5a 030b 	orrs.w	r3, sl, fp
 800501a:	d054      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005022:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005026:	d036      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005028:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800502c:	d82f      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800502e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005032:	d032      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005038:	d829      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800503a:	2bc0      	cmp	r3, #192	@ 0xc0
 800503c:	d02f      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800503e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005040:	d825      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005042:	2b80      	cmp	r3, #128	@ 0x80
 8005044:	d018      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d821      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800504e:	2b40      	cmp	r3, #64	@ 0x40
 8005050:	d007      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005052:	e01c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005054:	4b4f      	ldr	r3, [pc, #316]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	4a4e      	ldr	r2, [pc, #312]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800505a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800505e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005060:	e01e      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005066:	3308      	adds	r3, #8
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f001 fb94 	bl	8006798 <RCCEx_PLL2_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005076:	e013      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800507c:	3328      	adds	r3, #40	@ 0x28
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fc3b 	bl	80068fc <RCCEx_PLL3_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800508c:	e008      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005094:	e004      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005096:	bf00      	nop
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800509a:	bf00      	nop
 800509c:	e000      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800509e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80050a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	4a37      	ldr	r2, [pc, #220]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80050bc:	e003      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80050c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80050d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80050dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80050e0:	460b      	mov	r3, r1
 80050e2:	4313      	orrs	r3, r2
 80050e4:	d05c      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80050f0:	d03b      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80050f2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80050f6:	d834      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fc:	d037      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80050fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005102:	d82e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005104:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005108:	d033      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800510a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800510e:	d828      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005114:	d01a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511a:	d822      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005124:	d007      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005126:	e01c      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800512e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005134:	e01e      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800513a:	3308      	adds	r3, #8
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f001 fb2a 	bl	8006798 <RCCEx_PLL2_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800514a:	e013      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800514c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005150:	3328      	adds	r3, #40	@ 0x28
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fbd1 	bl	80068fc <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005160:	e008      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005174:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800517e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005180:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	4a02      	ldr	r2, [pc, #8]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800518c:	430b      	orrs	r3, r1
 800518e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005192:	bf00      	nop
 8005194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800519c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80051ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d03a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c6:	2b30      	cmp	r3, #48	@ 0x30
 80051c8:	d01f      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80051ca:	2b30      	cmp	r3, #48	@ 0x30
 80051cc:	d819      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d00c      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d815      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d019      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d111      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051de:	4bae      	ldr	r3, [pc, #696]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4aad      	ldr	r2, [pc, #692]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80051ea:	e011      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f0:	3308      	adds	r3, #8
 80051f2:	2102      	movs	r1, #2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 facf 	bl	8006798 <RCCEx_PLL2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800520e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005210:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005218:	4b9f      	ldr	r3, [pc, #636]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	4a9c      	ldr	r2, [pc, #624]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005228:	430b      	orrs	r3, r1
 800522a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005232:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005242:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800524c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d051      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800525c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005260:	d035      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005266:	d82e      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800526c:	d031      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800526e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005272:	d828      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005278:	d01a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800527a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800527e:	d822      	bhi.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005288:	d007      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800528a:	e01c      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528c:	4b82      	ldr	r3, [pc, #520]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	4a81      	ldr	r2, [pc, #516]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005298:	e01c      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800529a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800529e:	3308      	adds	r3, #8
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fa78 	bl	8006798 <RCCEx_PLL2_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052ae:	e011      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b4:	3328      	adds	r3, #40	@ 0x28
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fb1f 	bl	80068fc <RCCEx_PLL3_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80052d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800530a:	2300      	movs	r3, #0
 800530c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005310:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d053      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800531a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005324:	d033      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005326:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800532a:	d82c      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800532c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005330:	d02f      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005332:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005336:	d826      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005338:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800533c:	d02b      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800533e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005342:	d820      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005348:	d012      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800534a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800534e:	d81a      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d022      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005358:	d115      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800535a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800535e:	3308      	adds	r3, #8
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fa18 	bl	8006798 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800536e:	e015      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005374:	3328      	adds	r3, #40	@ 0x28
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fabf 	bl	80068fc <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005384:	e00a      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800539a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b2:	4a39      	ldr	r2, [pc, #228]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053d2:	2300      	movs	r3, #0
 80053d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053d8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80053dc:	460b      	mov	r3, r1
 80053de:	4313      	orrs	r3, r2
 80053e0:	d060      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80053ee:	d039      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80053f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80053f4:	d832      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80053f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053fa:	d035      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80053fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005400:	d82c      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005406:	d031      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540c:	d826      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005412:	d02d      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005414:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005418:	d820      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800541a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541e:	d012      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005424:	d81a      	bhi.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d024      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542e:	d115      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005434:	3308      	adds	r3, #8
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f001 f9ad 	bl	8006798 <RCCEx_PLL2_Config>
 800543e:	4603      	mov	r3, r0
 8005440:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005444:	e017      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800544a:	3328      	adds	r3, #40	@ 0x28
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f001 fa54 	bl	80068fc <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800545a:	e00c      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005462:	e008      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005464:	bf00      	nop
 8005466:	e006      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005468:	bf00      	nop
 800546a:	e004      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800546c:	bf00      	nop
 800546e:	e002      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005470:	bf00      	nop
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10e      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800548e:	4a02      	ldr	r2, [pc, #8]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005490:	430b      	orrs	r3, r1
 8005492:	6593      	str	r3, [r2, #88]	@ 0x58
 8005494:	e006      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054b4:	2300      	movs	r3, #0
 80054b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054be:	460b      	mov	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	d037      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80054c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ce:	d00e      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80054d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d4:	d816      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80054da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054de:	d111      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e0:	4bc4      	ldr	r3, [pc, #784]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	4ac3      	ldr	r2, [pc, #780]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80054ec:	e00f      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f2:	3308      	adds	r3, #8
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 f94e 	bl	8006798 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005502:	e004      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005516:	4bb7      	ldr	r3, [pc, #732]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005524:	4ab3      	ldr	r2, [pc, #716]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005526:	430b      	orrs	r3, r1
 8005528:	6513      	str	r3, [r2, #80]	@ 0x50
 800552a:	e003      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800554a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800554e:	460b      	mov	r3, r1
 8005550:	4313      	orrs	r3, r2
 8005552:	d039      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555a:	2b03      	cmp	r3, #3
 800555c:	d81c      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	080055a1 	.word	0x080055a1
 8005568:	08005575 	.word	0x08005575
 800556c:	08005583 	.word	0x08005583
 8005570:	080055a1 	.word	0x080055a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005574:	4b9f      	ldr	r3, [pc, #636]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	4a9e      	ldr	r2, [pc, #632]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800557a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800557e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005580:	e00f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005586:	3308      	adds	r3, #8
 8005588:	2102      	movs	r1, #2
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f904 	bl	8006798 <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800559e:	e000      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80055a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055aa:	4b92      	ldr	r3, [pc, #584]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ae:	f023 0103 	bic.w	r1, r3, #3
 80055b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b8:	4a8e      	ldr	r2, [pc, #568]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055ba:	430b      	orrs	r3, r1
 80055bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80055be:	e003      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80055d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f000 8099 	beq.w	800571c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ea:	4b83      	ldr	r3, [pc, #524]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a82      	ldr	r2, [pc, #520]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f6:	f7fd fb87 	bl	8002d08 <HAL_GetTick>
 80055fa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fe:	e00b      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fd fb82 	bl	8002d08 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	@ 0x64
 800560e:	d903      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005616:	e005      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005618:	4b77      	ldr	r3, [pc, #476]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ed      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005628:	2b00      	cmp	r3, #0
 800562a:	d173      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800562c:	4b71      	ldr	r3, [pc, #452]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800562e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005638:	4053      	eors	r3, r2
 800563a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d015      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005642:	4b6c      	ldr	r3, [pc, #432]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800564e:	4b69      	ldr	r3, [pc, #420]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	4a68      	ldr	r2, [pc, #416]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005658:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800565a:	4b66      	ldr	r3, [pc, #408]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565e:	4a65      	ldr	r2, [pc, #404]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005664:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005666:	4a63      	ldr	r2, [pc, #396]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005672:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567a:	d118      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd fb44 	bl	8002d08 <HAL_GetTick>
 8005680:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005684:	e00d      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fd fb3f 	bl	8002d08 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005696:	429a      	cmp	r2, r3
 8005698:	d903      	bls.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80056a0:	e005      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a2:	4b54      	ldr	r3, [pc, #336]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0eb      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80056ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d129      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c6:	d10e      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80056c8:	4b4a      	ldr	r3, [pc, #296]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056d8:	091a      	lsrs	r2, r3, #4
 80056da:	4b48      	ldr	r3, [pc, #288]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056dc:	4013      	ands	r3, r2
 80056de:	4a45      	ldr	r2, [pc, #276]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6113      	str	r3, [r2, #16]
 80056e4:	e005      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80056e6:	4b43      	ldr	r3, [pc, #268]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	4a42      	ldr	r2, [pc, #264]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80056f0:	6113      	str	r3, [r2, #16]
 80056f2:	4b40      	ldr	r3, [pc, #256]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005702:	4a3c      	ldr	r2, [pc, #240]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005704:	430b      	orrs	r3, r1
 8005706:	6713      	str	r3, [r2, #112]	@ 0x70
 8005708:	e008      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800570a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800570e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005718:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800571c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f002 0301 	and.w	r3, r2, #1
 8005728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005732:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	f000 8090 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005746:	2b28      	cmp	r3, #40	@ 0x28
 8005748:	d870      	bhi.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800574a:	a201      	add	r2, pc, #4	@ (adr r2, 8005750 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005835 	.word	0x08005835
 8005754:	0800582d 	.word	0x0800582d
 8005758:	0800582d 	.word	0x0800582d
 800575c:	0800582d 	.word	0x0800582d
 8005760:	0800582d 	.word	0x0800582d
 8005764:	0800582d 	.word	0x0800582d
 8005768:	0800582d 	.word	0x0800582d
 800576c:	0800582d 	.word	0x0800582d
 8005770:	08005801 	.word	0x08005801
 8005774:	0800582d 	.word	0x0800582d
 8005778:	0800582d 	.word	0x0800582d
 800577c:	0800582d 	.word	0x0800582d
 8005780:	0800582d 	.word	0x0800582d
 8005784:	0800582d 	.word	0x0800582d
 8005788:	0800582d 	.word	0x0800582d
 800578c:	0800582d 	.word	0x0800582d
 8005790:	08005817 	.word	0x08005817
 8005794:	0800582d 	.word	0x0800582d
 8005798:	0800582d 	.word	0x0800582d
 800579c:	0800582d 	.word	0x0800582d
 80057a0:	0800582d 	.word	0x0800582d
 80057a4:	0800582d 	.word	0x0800582d
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	0800582d 	.word	0x0800582d
 80057b0:	08005835 	.word	0x08005835
 80057b4:	0800582d 	.word	0x0800582d
 80057b8:	0800582d 	.word	0x0800582d
 80057bc:	0800582d 	.word	0x0800582d
 80057c0:	0800582d 	.word	0x0800582d
 80057c4:	0800582d 	.word	0x0800582d
 80057c8:	0800582d 	.word	0x0800582d
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	08005835 	.word	0x08005835
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	0800582d 	.word	0x0800582d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	08005835 	.word	0x08005835
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58024800 	.word	0x58024800
 80057fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005804:	3308      	adds	r3, #8
 8005806:	2101      	movs	r1, #1
 8005808:	4618      	mov	r0, r3
 800580a:	f000 ffc5 	bl	8006798 <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005814:	e00f      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800581a:	3328      	adds	r3, #40	@ 0x28
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f86c 	bl	80068fc <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800582a:	e004      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005832:	e000      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005836:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800583e:	4bc0      	ldr	r3, [pc, #768]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800584e:	4abc      	ldr	r2, [pc, #752]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6553      	str	r3, [r2, #84]	@ 0x54
 8005854:	e003      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005856:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800585a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f002 0302 	and.w	r3, r2, #2
 800586a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005874:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005878:	460b      	mov	r3, r1
 800587a:	4313      	orrs	r3, r2
 800587c:	d043      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005886:	2b05      	cmp	r3, #5
 8005888:	d824      	bhi.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800588a:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058a9 	.word	0x080058a9
 8005898:	080058bf 	.word	0x080058bf
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ac:	3308      	adds	r3, #8
 80058ae:	2101      	movs	r1, #1
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 ff71 	bl	8006798 <RCCEx_PLL2_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058bc:	e00f      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c2:	3328      	adds	r3, #40	@ 0x28
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f818 	bl	80068fc <RCCEx_PLL3_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80058d2:	e004      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058da:	e000      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80058dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80058e6:	4b96      	ldr	r3, [pc, #600]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	f023 0107 	bic.w	r1, r3, #7
 80058ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f6:	4a92      	ldr	r2, [pc, #584]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005902:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f002 0304 	and.w	r3, r2, #4
 8005912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800591c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d043      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800592e:	2b05      	cmp	r3, #5
 8005930:	d824      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005985 	.word	0x08005985
 800593c:	08005951 	.word	0x08005951
 8005940:	08005967 	.word	0x08005967
 8005944:	08005985 	.word	0x08005985
 8005948:	08005985 	.word	0x08005985
 800594c:	08005985 	.word	0x08005985
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005954:	3308      	adds	r3, #8
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 ff1d 	bl	8006798 <RCCEx_PLL2_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005964:	e00f      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596a:	3328      	adds	r3, #40	@ 0x28
 800596c:	2101      	movs	r1, #1
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ffc4 	bl	80068fc <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800597a:	e004      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005986:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800598e:	4b6c      	ldr	r3, [pc, #432]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f023 0107 	bic.w	r1, r3, #7
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800599e:	4a68      	ldr	r2, [pc, #416]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f002 0320 	and.w	r3, r2, #32
 80059ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059c8:	460b      	mov	r3, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	d055      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059da:	d033      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e0:	d82c      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e6:	d02f      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ec:	d826      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80059ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f2:	d02b      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80059f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80059f8:	d820      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80059fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059fe:	d012      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a04:	d81a      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d022      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a0e:	d115      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a14:	3308      	adds	r3, #8
 8005a16:	2100      	movs	r1, #0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 febd 	bl	8006798 <RCCEx_PLL2_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a24:	e015      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2a:	3328      	adds	r3, #40	@ 0x28
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 ff64 	bl	80068fc <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a42:	e006      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005a44:	bf00      	nop
 8005a46:	e004      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e002      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a6a:	4a35      	ldr	r2, [pc, #212]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a70:	e003      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a90:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4313      	orrs	r3, r2
 8005a98:	d058      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aa2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005aa6:	d033      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005aa8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005aac:	d82c      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab2:	d02f      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d826      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005aba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005abe:	d02b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ac4:	d820      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aca:	d012      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ad0:	d81a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d022      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ada:	d115      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fe57 	bl	8006798 <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005af0:	e015      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af6:	3328      	adds	r3, #40	@ 0x28
 8005af8:	2102      	movs	r1, #2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fefe 	bl	80068fc <RCCEx_PLL3_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b06:	e00a      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b0e:	e006      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005b10:	bf00      	nop
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005b14:	bf00      	nop
 8005b16:	e002      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10e      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b36:	4a02      	ldr	r2, [pc, #8]	@ (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b3c:	e006      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005b3e:	bf00      	nop
 8005b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d055      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b78:	d033      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005b7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005b7e:	d82c      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b84:	d02f      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8a:	d826      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005b8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b90:	d02b      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005b92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005b96:	d820      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b9c:	d012      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005b9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba2:	d81a      	bhi.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d022      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bac:	d115      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fdee 	bl	8006798 <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bc2:	e015      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bc8:	3328      	adds	r3, #40	@ 0x28
 8005bca:	2102      	movs	r1, #2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fe95 	bl	80068fc <RCCEx_PLL3_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00a      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bf8:	4ba1      	ldr	r3, [pc, #644]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c08:	4a9d      	ldr	r2, [pc, #628]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 0308 	and.w	r3, r2, #8
 8005c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	d01e      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c4a:	3328      	adds	r3, #40	@ 0x28
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fe54 	bl	80068fc <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c60:	4b87      	ldr	r3, [pc, #540]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c70:	4a83      	ldr	r2, [pc, #524]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f002 0310 	and.w	r3, r2, #16
 8005c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005c90:	460b      	mov	r3, r1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	d01e      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ca2:	d10c      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca8:	3328      	adds	r3, #40	@ 0x28
 8005caa:	2102      	movs	r1, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fe25 	bl	80068fc <RCCEx_PLL3_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cbe:	4b70      	ldr	r3, [pc, #448]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cce:	4a6c      	ldr	r2, [pc, #432]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	d03e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d00:	d022      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d06:	d81b      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d10:	d00b      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005d12:	e015      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d18:	3308      	adds	r3, #8
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fd3b 	bl	8006798 <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d28:	e00f      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2102      	movs	r1, #2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fde2 	bl	80068fc <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d52:	4b4b      	ldr	r3, [pc, #300]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d62:	4a47      	ldr	r2, [pc, #284]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d80:	2300      	movs	r3, #0
 8005d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	d03b      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d9a:	d01f      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005da0:	d818      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da6:	d003      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dac:	d007      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005dae:	e011      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db0:	4b33      	ldr	r3, [pc, #204]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00f      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc2:	3328      	adds	r3, #40	@ 0x28
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fd98 	bl	80068fc <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005dd2:	e004      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005dda:	e000      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005de6:	4b26      	ldr	r3, [pc, #152]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	4a22      	ldr	r2, [pc, #136]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dfc:	e003      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e02:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e12:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e14:	2300      	movs	r3, #0
 8005e16:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d034      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e30:	d007      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005e32:	e011      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e34:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e38:	4a11      	ldr	r2, [pc, #68]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e40:	e00e      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e46:	3308      	adds	r3, #8
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fca4 	bl	8006798 <RCCEx_PLL2_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e56:	e003      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e76:	4a02      	ldr	r2, [pc, #8]	@ (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e7c:	e006      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005e7e:	bf00      	nop
 8005e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d00c      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eac:	3328      	adds	r3, #40	@ 0x28
 8005eae:	2102      	movs	r1, #2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fd23 	bl	80068fc <RCCEx_PLL3_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ece:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ed4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4313      	orrs	r3, r2
 8005edc:	d038      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eea:	d018      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef0:	d811      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef6:	d014      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efc:	d80b      	bhi.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f06:	d106      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4bc3      	ldr	r3, [pc, #780]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4ac2      	ldr	r2, [pc, #776]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f14:	e008      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005f1c:	e004      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f30:	4bb9      	ldr	r3, [pc, #740]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f40:	4ab5      	ldr	r2, [pc, #724]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f46:	e003      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f5e:	2300      	movs	r3, #0
 8005f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f6c:	4baa      	ldr	r3, [pc, #680]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f8e:	2300      	movs	r3, #0
 8005f90:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d009      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	4a9b      	ldr	r2, [pc, #620]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005fcc:	4b92      	ldr	r3, [pc, #584]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	4a8f      	ldr	r2, [pc, #572]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fee:	2300      	movs	r3, #0
 8005ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ff2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ffc:	4b86      	ldr	r3, [pc, #536]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	4a85      	ldr	r2, [pc, #532]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006002:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006006:	6113      	str	r3, [r2, #16]
 8006008:	4b83      	ldr	r3, [pc, #524]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800600a:	6919      	ldr	r1, [r3, #16]
 800600c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006010:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006014:	4a80      	ldr	r2, [pc, #512]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006016:	430b      	orrs	r3, r1
 8006018:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006026:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006028:	2300      	movs	r3, #0
 800602a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800602c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006030:	460b      	mov	r3, r1
 8006032:	4313      	orrs	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006036:	4b78      	ldr	r3, [pc, #480]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800603e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	4a74      	ldr	r2, [pc, #464]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006046:	430b      	orrs	r3, r1
 8006048:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800604a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006056:	633b      	str	r3, [r7, #48]	@ 0x30
 8006058:	2300      	movs	r3, #0
 800605a:	637b      	str	r3, [r7, #52]	@ 0x34
 800605c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d00a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006066:	4b6c      	ldr	r3, [pc, #432]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800606e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006076:	4a68      	ldr	r2, [pc, #416]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006078:	430b      	orrs	r3, r1
 800607a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800607c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	2100      	movs	r1, #0
 8006086:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006092:	460b      	mov	r3, r1
 8006094:	4313      	orrs	r3, r2
 8006096:	d011      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800609c:	3308      	adds	r3, #8
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fb79 	bl	8006798 <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80060ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80060bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	2100      	movs	r1, #0
 80060c6:	6239      	str	r1, [r7, #32]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80060d2:	460b      	mov	r3, r1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	d011      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060dc:	3308      	adds	r3, #8
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fb59 	bl	8006798 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80060ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80060f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80060fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	2100      	movs	r1, #0
 8006106:	61b9      	str	r1, [r7, #24]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006112:	460b      	mov	r3, r1
 8006114:	4313      	orrs	r3, r2
 8006116:	d011      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800611c:	3308      	adds	r3, #8
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fb39 	bl	8006798 <RCCEx_PLL2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800612c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006138:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800613c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	2100      	movs	r1, #0
 8006146:	6139      	str	r1, [r7, #16]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d011      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800615c:	3328      	adds	r3, #40	@ 0x28
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fbcb 	bl	80068fc <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800616c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006178:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800617c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	2100      	movs	r1, #0
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006192:	460b      	mov	r3, r1
 8006194:	4313      	orrs	r3, r2
 8006196:	d011      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800619c:	3328      	adds	r3, #40	@ 0x28
 800619e:	2101      	movs	r1, #1
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fbab 	bl	80068fc <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80061ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80061bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	2100      	movs	r1, #0
 80061c6:	6039      	str	r1, [r7, #0]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	607b      	str	r3, [r7, #4]
 80061ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d011      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061dc:	3328      	adds	r3, #40	@ 0x28
 80061de:	2102      	movs	r1, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fb8b 	bl	80068fc <RCCEx_PLL3_Config>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80061ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80061f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80061fc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
}
 800620a:	4618      	mov	r0, r3
 800620c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	58024400 	.word	0x58024400

0800621c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006220:	f7fe fde2 	bl	8004de8 <HAL_RCC_GetHCLKFreq>
 8006224:	4602      	mov	r2, r0
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	4904      	ldr	r1, [pc, #16]	@ (8006244 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006232:	5ccb      	ldrb	r3, [r1, r3]
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	58024400 	.word	0x58024400
 8006244:	0800db70 	.word	0x0800db70

08006248 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	@ 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006250:	4ba1      	ldr	r3, [pc, #644]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800625a:	4b9f      	ldr	r3, [pc, #636]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	0b1b      	lsrs	r3, r3, #12
 8006260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006264:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006266:	4b9c      	ldr	r3, [pc, #624]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626a:	091b      	lsrs	r3, r3, #4
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006272:	4b99      	ldr	r3, [pc, #612]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006276:	08db      	lsrs	r3, r3, #3
 8006278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	fb02 f303 	mul.w	r3, r2, r3
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8111 	beq.w	80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b02      	cmp	r3, #2
 800629a:	f000 8083 	beq.w	80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f200 80a1 	bhi.w	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d056      	beq.n	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062b2:	e099      	b.n	80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062b4:	4b88      	ldr	r3, [pc, #544]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02d      	beq.n	800631c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062c0:	4b85      	ldr	r3, [pc, #532]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	08db      	lsrs	r3, r3, #3
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	4a84      	ldr	r2, [pc, #528]	@ (80064dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
 80062d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	4b7b      	ldr	r3, [pc, #492]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80062fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800631a:	e087      	b.n	800642c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632e:	4b6a      	ldr	r3, [pc, #424]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006342:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800635e:	e065      	b.n	800642c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800636e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006372:	4b59      	ldr	r3, [pc, #356]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006382:	ed97 6a03 	vldr	s12, [r7, #12]
 8006386:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800638a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a2:	e043      	b.n	800642c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b6:	4b48      	ldr	r3, [pc, #288]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063e6:	e021      	b.n	800642c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fa:	4b37      	ldr	r3, [pc, #220]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640a:	ed97 6a03 	vldr	s12, [r7, #12]
 800640e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800642a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800642c:	4b2a      	ldr	r3, [pc, #168]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	0a5b      	lsrs	r3, r3, #9
 8006432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006446:	edd7 6a07 	vldr	s13, [r7, #28]
 800644a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006452:	ee17 2a90 	vmov	r2, s15
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800645a:	4b1f      	ldr	r3, [pc, #124]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	0c1b      	lsrs	r3, r3, #16
 8006460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006464:	ee07 3a90 	vmov	s15, r3
 8006468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006474:	edd7 6a07 	vldr	s13, [r7, #28]
 8006478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006480:	ee17 2a90 	vmov	r2, s15
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	0e1b      	lsrs	r3, r3, #24
 800648e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800649e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ae:	ee17 2a90 	vmov	r2, s15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064b6:	e008      	b.n	80064ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
}
 80064ca:	bf00      	nop
 80064cc:	3724      	adds	r7, #36	@ 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	58024400 	.word	0x58024400
 80064dc:	03d09000 	.word	0x03d09000
 80064e0:	46000000 	.word	0x46000000
 80064e4:	4c742400 	.word	0x4c742400
 80064e8:	4a742400 	.word	0x4a742400
 80064ec:	4af42400 	.word	0x4af42400

080064f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	@ 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064f8:	4ba1      	ldr	r3, [pc, #644]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006502:	4b9f      	ldr	r3, [pc, #636]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	0d1b      	lsrs	r3, r3, #20
 8006508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800650c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800650e:	4b9c      	ldr	r3, [pc, #624]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800651a:	4b99      	ldr	r3, [pc, #612]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	fb02 f303 	mul.w	r3, r2, r3
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8111 	beq.w	8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b02      	cmp	r3, #2
 8006542:	f000 8083 	beq.w	800664c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b02      	cmp	r3, #2
 800654a:	f200 80a1 	bhi.w	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d056      	beq.n	8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800655a:	e099      	b.n	8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800655c:	4b88      	ldr	r3, [pc, #544]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d02d      	beq.n	80065c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006568:	4b85      	ldr	r3, [pc, #532]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	08db      	lsrs	r3, r3, #3
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	4a84      	ldr	r2, [pc, #528]	@ (8006784 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
 8006578:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b7b      	ldr	r3, [pc, #492]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065c2:	e087      	b.n	80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800678c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80065ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006606:	e065      	b.n	80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b59      	ldr	r3, [pc, #356]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a03 	vldr	s12, [r7, #12]
 800662e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800664a:	e043      	b.n	80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800665a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800665e:	4b48      	ldr	r3, [pc, #288]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006672:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800667a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800667e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800668e:	e021      	b.n	80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800669e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a2:	4b37      	ldr	r3, [pc, #220]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80066d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	0a5b      	lsrs	r3, r3, #9
 80066da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066de:	ee07 3a90 	vmov	s15, r3
 80066e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fa:	ee17 2a90 	vmov	r2, s15
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006702:	4b1f      	ldr	r3, [pc, #124]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	0c1b      	lsrs	r3, r3, #16
 8006708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006714:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006718:	ee37 7a87 	vadd.f32	s14, s15, s14
 800671c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006728:	ee17 2a90 	vmov	r2, s15
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006730:	4b13      	ldr	r3, [pc, #76]	@ (8006780 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800674a:	edd7 6a07 	vldr	s13, [r7, #28]
 800674e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006756:	ee17 2a90 	vmov	r2, s15
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800675e:	e008      	b.n	8006772 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	609a      	str	r2, [r3, #8]
}
 8006772:	bf00      	nop
 8006774:	3724      	adds	r7, #36	@ 0x24
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	58024400 	.word	0x58024400
 8006784:	03d09000 	.word	0x03d09000
 8006788:	46000000 	.word	0x46000000
 800678c:	4c742400 	.word	0x4c742400
 8006790:	4a742400 	.word	0x4a742400
 8006794:	4af42400 	.word	0x4af42400

08006798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067a6:	4b53      	ldr	r3, [pc, #332]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d101      	bne.n	80067b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e099      	b.n	80068ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067b6:	4b4f      	ldr	r3, [pc, #316]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4e      	ldr	r2, [pc, #312]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c2:	f7fc faa1 	bl	8002d08 <HAL_GetTick>
 80067c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067c8:	e008      	b.n	80067dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067ca:	f7fc fa9d 	bl	8002d08 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e086      	b.n	80068ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067dc:	4b45      	ldr	r3, [pc, #276]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067e8:	4b42      	ldr	r3, [pc, #264]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	493f      	ldr	r1, [pc, #252]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	3b01      	subs	r3, #1
 8006802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	3b01      	subs	r3, #1
 800680c:	025b      	lsls	r3, r3, #9
 800680e:	b29b      	uxth	r3, r3
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	3b01      	subs	r3, #1
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800682c:	4931      	ldr	r1, [pc, #196]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006832:	4b30      	ldr	r3, [pc, #192]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006836:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	492d      	ldr	r1, [pc, #180]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006840:	4313      	orrs	r3, r2
 8006842:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006844:	4b2b      	ldr	r3, [pc, #172]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	f023 0220 	bic.w	r2, r3, #32
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	4928      	ldr	r1, [pc, #160]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006856:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	4a26      	ldr	r2, [pc, #152]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800685c:	f023 0310 	bic.w	r3, r3, #16
 8006860:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006862:	4b24      	ldr	r3, [pc, #144]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006866:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <RCCEx_PLL2_Config+0x160>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	69d2      	ldr	r2, [r2, #28]
 800686e:	00d2      	lsls	r2, r2, #3
 8006870:	4920      	ldr	r1, [pc, #128]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006872:	4313      	orrs	r3, r2
 8006874:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006876:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800687c:	f043 0310 	orr.w	r3, r3, #16
 8006880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006888:	4b1a      	ldr	r3, [pc, #104]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	4a19      	ldr	r2, [pc, #100]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800688e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006894:	e00f      	b.n	80068b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d106      	bne.n	80068aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800689c:	4b15      	ldr	r3, [pc, #84]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	4a14      	ldr	r2, [pc, #80]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068a8:	e005      	b.n	80068b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ae:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a0e      	ldr	r2, [pc, #56]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c2:	f7fc fa21 	bl	8002d08 <HAL_GetTick>
 80068c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068c8:	e008      	b.n	80068dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068ca:	f7fc fa1d 	bl	8002d08 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e006      	b.n	80068ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068dc:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	ffff0007 	.word	0xffff0007

080068fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800690a:	4b53      	ldr	r3, [pc, #332]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	2b03      	cmp	r3, #3
 8006914:	d101      	bne.n	800691a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e099      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800691a:	4b4f      	ldr	r3, [pc, #316]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a4e      	ldr	r2, [pc, #312]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006926:	f7fc f9ef 	bl	8002d08 <HAL_GetTick>
 800692a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800692c:	e008      	b.n	8006940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800692e:	f7fc f9eb 	bl	8002d08 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e086      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006940:	4b45      	ldr	r3, [pc, #276]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800694c:	4b42      	ldr	r3, [pc, #264]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	051b      	lsls	r3, r3, #20
 800695a:	493f      	ldr	r1, [pc, #252]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800695c:	4313      	orrs	r3, r2
 800695e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	3b01      	subs	r3, #1
 8006970:	025b      	lsls	r3, r3, #9
 8006972:	b29b      	uxth	r3, r3
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	3b01      	subs	r3, #1
 800698a:	061b      	lsls	r3, r3, #24
 800698c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006990:	4931      	ldr	r1, [pc, #196]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006996:	4b30      	ldr	r3, [pc, #192]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	492d      	ldr	r1, [pc, #180]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	4928      	ldr	r1, [pc, #160]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ba:	4b27      	ldr	r3, [pc, #156]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069be:	4a26      	ldr	r2, [pc, #152]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069c6:	4b24      	ldr	r3, [pc, #144]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ca:	4b24      	ldr	r3, [pc, #144]	@ (8006a5c <RCCEx_PLL3_Config+0x160>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	69d2      	ldr	r2, [r2, #28]
 80069d2:	00d2      	lsls	r2, r2, #3
 80069d4:	4920      	ldr	r1, [pc, #128]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069da:	4b1f      	ldr	r3, [pc, #124]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069de:	4a1e      	ldr	r2, [pc, #120]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f0:	4a19      	ldr	r2, [pc, #100]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80069f8:	e00f      	b.n	8006a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d106      	bne.n	8006a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a00:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	4a14      	ldr	r2, [pc, #80]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a06:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a0c:	e005      	b.n	8006a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a0e:	4b12      	ldr	r3, [pc, #72]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	4a11      	ldr	r2, [pc, #68]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a26:	f7fc f96f 	bl	8002d08 <HAL_GetTick>
 8006a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a2c:	e008      	b.n	8006a40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a2e:	f7fc f96b 	bl	8002d08 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a40:	4b05      	ldr	r3, [pc, #20]	@ (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	ffff0007 	.word	0xffff0007

08006a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e042      	b.n	8006af8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f83b 	bl	8006b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	@ 0x24
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fe9e 	bl	80077ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f82f 	bl	8006b14 <UART_SetConfig>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e01b      	b.n	8006af8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 ff1d 	bl	8007930 <UART_CheckIdleState>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b092      	sub	sp, #72	@ 0x48
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4bbe      	ldr	r3, [pc, #760]	@ (8006e3c <UART_SetConfig+0x328>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4ab3      	ldr	r2, [pc, #716]	@ (8006e40 <UART_SetConfig+0x32c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	4baf      	ldr	r3, [pc, #700]	@ (8006e44 <UART_SetConfig+0x330>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b90:	430b      	orrs	r3, r1
 8006b92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f023 010f 	bic.w	r1, r3, #15
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4aa6      	ldr	r2, [pc, #664]	@ (8006e48 <UART_SetConfig+0x334>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d177      	bne.n	8006ca4 <UART_SetConfig+0x190>
 8006bb4:	4ba5      	ldr	r3, [pc, #660]	@ (8006e4c <UART_SetConfig+0x338>)
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bbc:	2b28      	cmp	r3, #40	@ 0x28
 8006bbe:	d86d      	bhi.n	8006c9c <UART_SetConfig+0x188>
 8006bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc8 <UART_SetConfig+0xb4>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006c6d 	.word	0x08006c6d
 8006bcc:	08006c9d 	.word	0x08006c9d
 8006bd0:	08006c9d 	.word	0x08006c9d
 8006bd4:	08006c9d 	.word	0x08006c9d
 8006bd8:	08006c9d 	.word	0x08006c9d
 8006bdc:	08006c9d 	.word	0x08006c9d
 8006be0:	08006c9d 	.word	0x08006c9d
 8006be4:	08006c9d 	.word	0x08006c9d
 8006be8:	08006c75 	.word	0x08006c75
 8006bec:	08006c9d 	.word	0x08006c9d
 8006bf0:	08006c9d 	.word	0x08006c9d
 8006bf4:	08006c9d 	.word	0x08006c9d
 8006bf8:	08006c9d 	.word	0x08006c9d
 8006bfc:	08006c9d 	.word	0x08006c9d
 8006c00:	08006c9d 	.word	0x08006c9d
 8006c04:	08006c9d 	.word	0x08006c9d
 8006c08:	08006c7d 	.word	0x08006c7d
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006c9d 	.word	0x08006c9d
 8006c18:	08006c9d 	.word	0x08006c9d
 8006c1c:	08006c9d 	.word	0x08006c9d
 8006c20:	08006c9d 	.word	0x08006c9d
 8006c24:	08006c9d 	.word	0x08006c9d
 8006c28:	08006c85 	.word	0x08006c85
 8006c2c:	08006c9d 	.word	0x08006c9d
 8006c30:	08006c9d 	.word	0x08006c9d
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006c9d 	.word	0x08006c9d
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006c9d 	.word	0x08006c9d
 8006c50:	08006c9d 	.word	0x08006c9d
 8006c54:	08006c9d 	.word	0x08006c9d
 8006c58:	08006c9d 	.word	0x08006c9d
 8006c5c:	08006c9d 	.word	0x08006c9d
 8006c60:	08006c9d 	.word	0x08006c9d
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006c95 	.word	0x08006c95
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e326      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7a:	e322      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e31e      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e31a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e316      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c94:	2340      	movs	r3, #64	@ 0x40
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e312      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006c9c:	2380      	movs	r3, #128	@ 0x80
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e30e      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a69      	ldr	r2, [pc, #420]	@ (8006e50 <UART_SetConfig+0x33c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d130      	bne.n	8006d10 <UART_SetConfig+0x1fc>
 8006cae:	4b67      	ldr	r3, [pc, #412]	@ (8006e4c <UART_SetConfig+0x338>)
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	d826      	bhi.n	8006d08 <UART_SetConfig+0x1f4>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x1ac>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cd9 	.word	0x08006cd9
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e2f0      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e2ec      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006ce8:	2308      	movs	r3, #8
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e2e8      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006cf0:	2310      	movs	r3, #16
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e2e4      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e2e0      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e2dc      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d08:	2380      	movs	r3, #128	@ 0x80
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e2d8      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a4f      	ldr	r2, [pc, #316]	@ (8006e54 <UART_SetConfig+0x340>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d130      	bne.n	8006d7c <UART_SetConfig+0x268>
 8006d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8006e4c <UART_SetConfig+0x338>)
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d826      	bhi.n	8006d74 <UART_SetConfig+0x260>
 8006d26:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <UART_SetConfig+0x218>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d45 	.word	0x08006d45
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d55 	.word	0x08006d55
 8006d38:	08006d5d 	.word	0x08006d5d
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e2ba      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e2b6      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d54:	2308      	movs	r3, #8
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e2b2      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e2ae      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d64:	2320      	movs	r3, #32
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e2aa      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d6c:	2340      	movs	r3, #64	@ 0x40
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d72:	e2a6      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d74:	2380      	movs	r3, #128	@ 0x80
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e2a2      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a35      	ldr	r2, [pc, #212]	@ (8006e58 <UART_SetConfig+0x344>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d130      	bne.n	8006de8 <UART_SetConfig+0x2d4>
 8006d86:	4b31      	ldr	r3, [pc, #196]	@ (8006e4c <UART_SetConfig+0x338>)
 8006d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d826      	bhi.n	8006de0 <UART_SetConfig+0x2cc>
 8006d92:	a201      	add	r2, pc, #4	@ (adr r2, 8006d98 <UART_SetConfig+0x284>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006db1 	.word	0x08006db1
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006dc1 	.word	0x08006dc1
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e284      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e280      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e27c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e278      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e274      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006dd8:	2340      	movs	r3, #64	@ 0x40
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dde:	e270      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006de0:	2380      	movs	r3, #128	@ 0x80
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e26c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1b      	ldr	r2, [pc, #108]	@ (8006e5c <UART_SetConfig+0x348>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d142      	bne.n	8006e78 <UART_SetConfig+0x364>
 8006df2:	4b16      	ldr	r3, [pc, #88]	@ (8006e4c <UART_SetConfig+0x338>)
 8006df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d838      	bhi.n	8006e70 <UART_SetConfig+0x35c>
 8006dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <UART_SetConfig+0x2f0>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e1d 	.word	0x08006e1d
 8006e08:	08006e25 	.word	0x08006e25
 8006e0c:	08006e2d 	.word	0x08006e2d
 8006e10:	08006e35 	.word	0x08006e35
 8006e14:	08006e61 	.word	0x08006e61
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e22:	e24e      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e24:	2304      	movs	r3, #4
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e24a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e246      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e34:	2310      	movs	r3, #16
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e242      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e3c:	cfff69f3 	.word	0xcfff69f3
 8006e40:	58000c00 	.word	0x58000c00
 8006e44:	11fff4ff 	.word	0x11fff4ff
 8006e48:	40011000 	.word	0x40011000
 8006e4c:	58024400 	.word	0x58024400
 8006e50:	40004400 	.word	0x40004400
 8006e54:	40004800 	.word	0x40004800
 8006e58:	40004c00 	.word	0x40004c00
 8006e5c:	40005000 	.word	0x40005000
 8006e60:	2320      	movs	r3, #32
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e66:	e22c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e68:	2340      	movs	r3, #64	@ 0x40
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6e:	e228      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e70:	2380      	movs	r3, #128	@ 0x80
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e76:	e224      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4ab1      	ldr	r2, [pc, #708]	@ (8007144 <UART_SetConfig+0x630>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d176      	bne.n	8006f70 <UART_SetConfig+0x45c>
 8006e82:	4bb1      	ldr	r3, [pc, #708]	@ (8007148 <UART_SetConfig+0x634>)
 8006e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e8a:	2b28      	cmp	r3, #40	@ 0x28
 8006e8c:	d86c      	bhi.n	8006f68 <UART_SetConfig+0x454>
 8006e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e94 <UART_SetConfig+0x380>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006f39 	.word	0x08006f39
 8006e98:	08006f69 	.word	0x08006f69
 8006e9c:	08006f69 	.word	0x08006f69
 8006ea0:	08006f69 	.word	0x08006f69
 8006ea4:	08006f69 	.word	0x08006f69
 8006ea8:	08006f69 	.word	0x08006f69
 8006eac:	08006f69 	.word	0x08006f69
 8006eb0:	08006f69 	.word	0x08006f69
 8006eb4:	08006f41 	.word	0x08006f41
 8006eb8:	08006f69 	.word	0x08006f69
 8006ebc:	08006f69 	.word	0x08006f69
 8006ec0:	08006f69 	.word	0x08006f69
 8006ec4:	08006f69 	.word	0x08006f69
 8006ec8:	08006f69 	.word	0x08006f69
 8006ecc:	08006f69 	.word	0x08006f69
 8006ed0:	08006f69 	.word	0x08006f69
 8006ed4:	08006f49 	.word	0x08006f49
 8006ed8:	08006f69 	.word	0x08006f69
 8006edc:	08006f69 	.word	0x08006f69
 8006ee0:	08006f69 	.word	0x08006f69
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	08006f69 	.word	0x08006f69
 8006eec:	08006f69 	.word	0x08006f69
 8006ef0:	08006f69 	.word	0x08006f69
 8006ef4:	08006f51 	.word	0x08006f51
 8006ef8:	08006f69 	.word	0x08006f69
 8006efc:	08006f69 	.word	0x08006f69
 8006f00:	08006f69 	.word	0x08006f69
 8006f04:	08006f69 	.word	0x08006f69
 8006f08:	08006f69 	.word	0x08006f69
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f69 	.word	0x08006f69
 8006f14:	08006f59 	.word	0x08006f59
 8006f18:	08006f69 	.word	0x08006f69
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f69 	.word	0x08006f69
 8006f28:	08006f69 	.word	0x08006f69
 8006f2c:	08006f69 	.word	0x08006f69
 8006f30:	08006f69 	.word	0x08006f69
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e1c0      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e1bc      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e1b8      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e1b4      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f58:	2320      	movs	r3, #32
 8006f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5e:	e1b0      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f66:	e1ac      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f68:	2380      	movs	r3, #128	@ 0x80
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e1a8      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a75      	ldr	r2, [pc, #468]	@ (800714c <UART_SetConfig+0x638>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d130      	bne.n	8006fdc <UART_SetConfig+0x4c8>
 8006f7a:	4b73      	ldr	r3, [pc, #460]	@ (8007148 <UART_SetConfig+0x634>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d826      	bhi.n	8006fd4 <UART_SetConfig+0x4c0>
 8006f86:	a201      	add	r2, pc, #4	@ (adr r2, 8006f8c <UART_SetConfig+0x478>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006fad 	.word	0x08006fad
 8006f94:	08006fb5 	.word	0x08006fb5
 8006f98:	08006fbd 	.word	0x08006fbd
 8006f9c:	08006fc5 	.word	0x08006fc5
 8006fa0:	08006fcd 	.word	0x08006fcd
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e18a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e186      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e182      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e17e      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e17a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fcc:	2340      	movs	r3, #64	@ 0x40
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e176      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fd4:	2380      	movs	r3, #128	@ 0x80
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e172      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8007150 <UART_SetConfig+0x63c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d130      	bne.n	8007048 <UART_SetConfig+0x534>
 8006fe6:	4b58      	ldr	r3, [pc, #352]	@ (8007148 <UART_SetConfig+0x634>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d826      	bhi.n	8007040 <UART_SetConfig+0x52c>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <UART_SetConfig+0x4e4>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007011 	.word	0x08007011
 8006ffc:	08007019 	.word	0x08007019
 8007000:	08007021 	.word	0x08007021
 8007004:	08007029 	.word	0x08007029
 8007008:	08007031 	.word	0x08007031
 800700c:	08007039 	.word	0x08007039
 8007010:	2300      	movs	r3, #0
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e154      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007018:	2304      	movs	r3, #4
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e150      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007020:	2308      	movs	r3, #8
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e14c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007028:	2310      	movs	r3, #16
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e148      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e144      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007038:	2340      	movs	r3, #64	@ 0x40
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e140      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007040:	2380      	movs	r3, #128	@ 0x80
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e13c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a41      	ldr	r2, [pc, #260]	@ (8007154 <UART_SetConfig+0x640>)
 800704e:	4293      	cmp	r3, r2
 8007050:	f040 8082 	bne.w	8007158 <UART_SetConfig+0x644>
 8007054:	4b3c      	ldr	r3, [pc, #240]	@ (8007148 <UART_SetConfig+0x634>)
 8007056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800705c:	2b28      	cmp	r3, #40	@ 0x28
 800705e:	d86d      	bhi.n	800713c <UART_SetConfig+0x628>
 8007060:	a201      	add	r2, pc, #4	@ (adr r2, 8007068 <UART_SetConfig+0x554>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	0800710d 	.word	0x0800710d
 800706c:	0800713d 	.word	0x0800713d
 8007070:	0800713d 	.word	0x0800713d
 8007074:	0800713d 	.word	0x0800713d
 8007078:	0800713d 	.word	0x0800713d
 800707c:	0800713d 	.word	0x0800713d
 8007080:	0800713d 	.word	0x0800713d
 8007084:	0800713d 	.word	0x0800713d
 8007088:	08007115 	.word	0x08007115
 800708c:	0800713d 	.word	0x0800713d
 8007090:	0800713d 	.word	0x0800713d
 8007094:	0800713d 	.word	0x0800713d
 8007098:	0800713d 	.word	0x0800713d
 800709c:	0800713d 	.word	0x0800713d
 80070a0:	0800713d 	.word	0x0800713d
 80070a4:	0800713d 	.word	0x0800713d
 80070a8:	0800711d 	.word	0x0800711d
 80070ac:	0800713d 	.word	0x0800713d
 80070b0:	0800713d 	.word	0x0800713d
 80070b4:	0800713d 	.word	0x0800713d
 80070b8:	0800713d 	.word	0x0800713d
 80070bc:	0800713d 	.word	0x0800713d
 80070c0:	0800713d 	.word	0x0800713d
 80070c4:	0800713d 	.word	0x0800713d
 80070c8:	08007125 	.word	0x08007125
 80070cc:	0800713d 	.word	0x0800713d
 80070d0:	0800713d 	.word	0x0800713d
 80070d4:	0800713d 	.word	0x0800713d
 80070d8:	0800713d 	.word	0x0800713d
 80070dc:	0800713d 	.word	0x0800713d
 80070e0:	0800713d 	.word	0x0800713d
 80070e4:	0800713d 	.word	0x0800713d
 80070e8:	0800712d 	.word	0x0800712d
 80070ec:	0800713d 	.word	0x0800713d
 80070f0:	0800713d 	.word	0x0800713d
 80070f4:	0800713d 	.word	0x0800713d
 80070f8:	0800713d 	.word	0x0800713d
 80070fc:	0800713d 	.word	0x0800713d
 8007100:	0800713d 	.word	0x0800713d
 8007104:	0800713d 	.word	0x0800713d
 8007108:	08007135 	.word	0x08007135
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e0d6      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e0d2      	b.n	80072c2 <UART_SetConfig+0x7ae>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e0ce      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e0ca      	b.n	80072c2 <UART_SetConfig+0x7ae>
 800712c:	2320      	movs	r3, #32
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e0c6      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007134:	2340      	movs	r3, #64	@ 0x40
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e0c2      	b.n	80072c2 <UART_SetConfig+0x7ae>
 800713c:	2380      	movs	r3, #128	@ 0x80
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007142:	e0be      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007144:	40011400 	.word	0x40011400
 8007148:	58024400 	.word	0x58024400
 800714c:	40007800 	.word	0x40007800
 8007150:	40007c00 	.word	0x40007c00
 8007154:	40011800 	.word	0x40011800
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4aad      	ldr	r2, [pc, #692]	@ (8007414 <UART_SetConfig+0x900>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d176      	bne.n	8007250 <UART_SetConfig+0x73c>
 8007162:	4bad      	ldr	r3, [pc, #692]	@ (8007418 <UART_SetConfig+0x904>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800716a:	2b28      	cmp	r3, #40	@ 0x28
 800716c:	d86c      	bhi.n	8007248 <UART_SetConfig+0x734>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x660>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007219 	.word	0x08007219
 8007178:	08007249 	.word	0x08007249
 800717c:	08007249 	.word	0x08007249
 8007180:	08007249 	.word	0x08007249
 8007184:	08007249 	.word	0x08007249
 8007188:	08007249 	.word	0x08007249
 800718c:	08007249 	.word	0x08007249
 8007190:	08007249 	.word	0x08007249
 8007194:	08007221 	.word	0x08007221
 8007198:	08007249 	.word	0x08007249
 800719c:	08007249 	.word	0x08007249
 80071a0:	08007249 	.word	0x08007249
 80071a4:	08007249 	.word	0x08007249
 80071a8:	08007249 	.word	0x08007249
 80071ac:	08007249 	.word	0x08007249
 80071b0:	08007249 	.word	0x08007249
 80071b4:	08007229 	.word	0x08007229
 80071b8:	08007249 	.word	0x08007249
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007249 	.word	0x08007249
 80071c4:	08007249 	.word	0x08007249
 80071c8:	08007249 	.word	0x08007249
 80071cc:	08007249 	.word	0x08007249
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007231 	.word	0x08007231
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007249 	.word	0x08007249
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007249 	.word	0x08007249
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007239 	.word	0x08007239
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007249 	.word	0x08007249
 8007200:	08007249 	.word	0x08007249
 8007204:	08007249 	.word	0x08007249
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	08007249 	.word	0x08007249
 8007214:	08007241 	.word	0x08007241
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e050      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e04c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722e:	e048      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007236:	e044      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723e:	e040      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007240:	2340      	movs	r3, #64	@ 0x40
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007246:	e03c      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007248:	2380      	movs	r3, #128	@ 0x80
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724e:	e038      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a71      	ldr	r2, [pc, #452]	@ (800741c <UART_SetConfig+0x908>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d130      	bne.n	80072bc <UART_SetConfig+0x7a8>
 800725a:	4b6f      	ldr	r3, [pc, #444]	@ (8007418 <UART_SetConfig+0x904>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b05      	cmp	r3, #5
 8007264:	d826      	bhi.n	80072b4 <UART_SetConfig+0x7a0>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <UART_SetConfig+0x758>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007295 	.word	0x08007295
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2302      	movs	r3, #2
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e01a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e016      	b.n	80072c2 <UART_SetConfig+0x7ae>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e012      	b.n	80072c2 <UART_SetConfig+0x7ae>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072a2:	e00e      	b.n	80072c2 <UART_SetConfig+0x7ae>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072aa:	e00a      	b.n	80072c2 <UART_SetConfig+0x7ae>
 80072ac:	2340      	movs	r3, #64	@ 0x40
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072b2:	e006      	b.n	80072c2 <UART_SetConfig+0x7ae>
 80072b4:	2380      	movs	r3, #128	@ 0x80
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ba:	e002      	b.n	80072c2 <UART_SetConfig+0x7ae>
 80072bc:	2380      	movs	r3, #128	@ 0x80
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a55      	ldr	r2, [pc, #340]	@ (800741c <UART_SetConfig+0x908>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	f040 80f8 	bne.w	80074be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	dc46      	bgt.n	8007364 <UART_SetConfig+0x850>
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	db75      	blt.n	80073c6 <UART_SetConfig+0x8b2>
 80072da:	3b02      	subs	r3, #2
 80072dc:	2b1e      	cmp	r3, #30
 80072de:	d872      	bhi.n	80073c6 <UART_SetConfig+0x8b2>
 80072e0:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <UART_SetConfig+0x7d4>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	080073c7 	.word	0x080073c7
 80072f0:	08007373 	.word	0x08007373
 80072f4:	080073c7 	.word	0x080073c7
 80072f8:	080073c7 	.word	0x080073c7
 80072fc:	080073c7 	.word	0x080073c7
 8007300:	08007383 	.word	0x08007383
 8007304:	080073c7 	.word	0x080073c7
 8007308:	080073c7 	.word	0x080073c7
 800730c:	080073c7 	.word	0x080073c7
 8007310:	080073c7 	.word	0x080073c7
 8007314:	080073c7 	.word	0x080073c7
 8007318:	080073c7 	.word	0x080073c7
 800731c:	080073c7 	.word	0x080073c7
 8007320:	08007393 	.word	0x08007393
 8007324:	080073c7 	.word	0x080073c7
 8007328:	080073c7 	.word	0x080073c7
 800732c:	080073c7 	.word	0x080073c7
 8007330:	080073c7 	.word	0x080073c7
 8007334:	080073c7 	.word	0x080073c7
 8007338:	080073c7 	.word	0x080073c7
 800733c:	080073c7 	.word	0x080073c7
 8007340:	080073c7 	.word	0x080073c7
 8007344:	080073c7 	.word	0x080073c7
 8007348:	080073c7 	.word	0x080073c7
 800734c:	080073c7 	.word	0x080073c7
 8007350:	080073c7 	.word	0x080073c7
 8007354:	080073c7 	.word	0x080073c7
 8007358:	080073c7 	.word	0x080073c7
 800735c:	080073c7 	.word	0x080073c7
 8007360:	080073b9 	.word	0x080073b9
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	d02a      	beq.n	80073be <UART_SetConfig+0x8aa>
 8007368:	e02d      	b.n	80073c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800736a:	f7fe ff57 	bl	800621c <HAL_RCCEx_GetD3PCLK1Freq>
 800736e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007370:	e02f      	b.n	80073d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe ff66 	bl	8006248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007380:	e027      	b.n	80073d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f8b2 	bl	80064f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007390:	e01f      	b.n	80073d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007392:	4b21      	ldr	r3, [pc, #132]	@ (8007418 <UART_SetConfig+0x904>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d009      	beq.n	80073b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800739e:	4b1e      	ldr	r3, [pc, #120]	@ (8007418 <UART_SetConfig+0x904>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	08db      	lsrs	r3, r3, #3
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <UART_SetConfig+0x90c>)
 80073aa:	fa22 f303 	lsr.w	r3, r2, r3
 80073ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073b0:	e00f      	b.n	80073d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <UART_SetConfig+0x90c>)
 80073b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b6:	e00c      	b.n	80073d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007424 <UART_SetConfig+0x910>)
 80073ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073bc:	e009      	b.n	80073d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c4:	e005      	b.n	80073d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80073d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 81ee 	beq.w	80077b6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	4a12      	ldr	r2, [pc, #72]	@ (8007428 <UART_SetConfig+0x914>)
 80073e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d305      	bcc.n	800740a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007406:	429a      	cmp	r2, r3
 8007408:	d910      	bls.n	800742c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007410:	e1d1      	b.n	80077b6 <UART_SetConfig+0xca2>
 8007412:	bf00      	nop
 8007414:	40011c00 	.word	0x40011c00
 8007418:	58024400 	.word	0x58024400
 800741c:	58000c00 	.word	0x58000c00
 8007420:	03d09000 	.word	0x03d09000
 8007424:	003d0900 	.word	0x003d0900
 8007428:	0800db8c 	.word	0x0800db8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800742c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742e:	2200      	movs	r2, #0
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	60fa      	str	r2, [r7, #12]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	4ac0      	ldr	r2, [pc, #768]	@ (800773c <UART_SetConfig+0xc28>)
 800743a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800743e:	b29b      	uxth	r3, r3
 8007440:	2200      	movs	r2, #0
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	607a      	str	r2, [r7, #4]
 8007446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800744e:	f7f9 f95b 	bl	8000708 <__aeabi_uldivmod>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	020b      	lsls	r3, r1, #8
 8007464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007468:	0202      	lsls	r2, r0, #8
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	6849      	ldr	r1, [r1, #4]
 800746e:	0849      	lsrs	r1, r1, #1
 8007470:	2000      	movs	r0, #0
 8007472:	460c      	mov	r4, r1
 8007474:	4605      	mov	r5, r0
 8007476:	eb12 0804 	adds.w	r8, r2, r4
 800747a:	eb43 0905 	adc.w	r9, r3, r5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	469a      	mov	sl, r3
 8007486:	4693      	mov	fp, r2
 8007488:	4652      	mov	r2, sl
 800748a:	465b      	mov	r3, fp
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 f93a 	bl	8000708 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4613      	mov	r3, r2
 800749a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074a2:	d308      	bcc.n	80074b6 <UART_SetConfig+0x9a2>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074aa:	d204      	bcs.n	80074b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074b2:	60da      	str	r2, [r3, #12]
 80074b4:	e17f      	b.n	80077b6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80074bc:	e17b      	b.n	80077b6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074c6:	f040 80bd 	bne.w	8007644 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80074ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	dc48      	bgt.n	8007564 <UART_SetConfig+0xa50>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db7b      	blt.n	80075ce <UART_SetConfig+0xaba>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d879      	bhi.n	80075ce <UART_SetConfig+0xaba>
 80074da:	a201      	add	r2, pc, #4	@ (adr r2, 80074e0 <UART_SetConfig+0x9cc>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	0800756b 	.word	0x0800756b
 80074e4:	08007573 	.word	0x08007573
 80074e8:	080075cf 	.word	0x080075cf
 80074ec:	080075cf 	.word	0x080075cf
 80074f0:	0800757b 	.word	0x0800757b
 80074f4:	080075cf 	.word	0x080075cf
 80074f8:	080075cf 	.word	0x080075cf
 80074fc:	080075cf 	.word	0x080075cf
 8007500:	0800758b 	.word	0x0800758b
 8007504:	080075cf 	.word	0x080075cf
 8007508:	080075cf 	.word	0x080075cf
 800750c:	080075cf 	.word	0x080075cf
 8007510:	080075cf 	.word	0x080075cf
 8007514:	080075cf 	.word	0x080075cf
 8007518:	080075cf 	.word	0x080075cf
 800751c:	080075cf 	.word	0x080075cf
 8007520:	0800759b 	.word	0x0800759b
 8007524:	080075cf 	.word	0x080075cf
 8007528:	080075cf 	.word	0x080075cf
 800752c:	080075cf 	.word	0x080075cf
 8007530:	080075cf 	.word	0x080075cf
 8007534:	080075cf 	.word	0x080075cf
 8007538:	080075cf 	.word	0x080075cf
 800753c:	080075cf 	.word	0x080075cf
 8007540:	080075cf 	.word	0x080075cf
 8007544:	080075cf 	.word	0x080075cf
 8007548:	080075cf 	.word	0x080075cf
 800754c:	080075cf 	.word	0x080075cf
 8007550:	080075cf 	.word	0x080075cf
 8007554:	080075cf 	.word	0x080075cf
 8007558:	080075cf 	.word	0x080075cf
 800755c:	080075cf 	.word	0x080075cf
 8007560:	080075c1 	.word	0x080075c1
 8007564:	2b40      	cmp	r3, #64	@ 0x40
 8007566:	d02e      	beq.n	80075c6 <UART_SetConfig+0xab2>
 8007568:	e031      	b.n	80075ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756a:	f7fd fc6d 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800756e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007570:	e033      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007572:	f7fd fc7f 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 8007576:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007578:	e02f      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fe62 	bl	8006248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007588:	e027      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800758a:	f107 0318 	add.w	r3, r7, #24
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe ffae 	bl	80064f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007598:	e01f      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800759a:	4b69      	ldr	r3, [pc, #420]	@ (8007740 <UART_SetConfig+0xc2c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075a6:	4b66      	ldr	r3, [pc, #408]	@ (8007740 <UART_SetConfig+0xc2c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	08db      	lsrs	r3, r3, #3
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	4a64      	ldr	r2, [pc, #400]	@ (8007744 <UART_SetConfig+0xc30>)
 80075b2:	fa22 f303 	lsr.w	r3, r2, r3
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075b8:	e00f      	b.n	80075da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80075ba:	4b62      	ldr	r3, [pc, #392]	@ (8007744 <UART_SetConfig+0xc30>)
 80075bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075be:	e00c      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075c0:	4b61      	ldr	r3, [pc, #388]	@ (8007748 <UART_SetConfig+0xc34>)
 80075c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075c4:	e009      	b.n	80075da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075cc:	e005      	b.n	80075da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80ea 	beq.w	80077b6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e6:	4a55      	ldr	r2, [pc, #340]	@ (800773c <UART_SetConfig+0xc28>)
 80075e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ec:	461a      	mov	r2, r3
 80075ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075f4:	005a      	lsls	r2, r3, #1
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	085b      	lsrs	r3, r3, #1
 80075fc:	441a      	add	r2, r3
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	fbb2 f3f3 	udiv	r3, r2, r3
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d916      	bls.n	800763c <UART_SetConfig+0xb28>
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007614:	d212      	bcs.n	800763c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	b29b      	uxth	r3, r3
 800761a:	f023 030f 	bic.w	r3, r3, #15
 800761e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	085b      	lsrs	r3, r3, #1
 8007624:	b29b      	uxth	r3, r3
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	b29a      	uxth	r2, r3
 800762c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800762e:	4313      	orrs	r3, r2
 8007630:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e0bc      	b.n	80077b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007642:	e0b8      	b.n	80077b6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007644:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007648:	2b20      	cmp	r3, #32
 800764a:	dc4b      	bgt.n	80076e4 <UART_SetConfig+0xbd0>
 800764c:	2b00      	cmp	r3, #0
 800764e:	f2c0 8087 	blt.w	8007760 <UART_SetConfig+0xc4c>
 8007652:	2b20      	cmp	r3, #32
 8007654:	f200 8084 	bhi.w	8007760 <UART_SetConfig+0xc4c>
 8007658:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <UART_SetConfig+0xb4c>)
 800765a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765e:	bf00      	nop
 8007660:	080076eb 	.word	0x080076eb
 8007664:	080076f3 	.word	0x080076f3
 8007668:	08007761 	.word	0x08007761
 800766c:	08007761 	.word	0x08007761
 8007670:	080076fb 	.word	0x080076fb
 8007674:	08007761 	.word	0x08007761
 8007678:	08007761 	.word	0x08007761
 800767c:	08007761 	.word	0x08007761
 8007680:	0800770b 	.word	0x0800770b
 8007684:	08007761 	.word	0x08007761
 8007688:	08007761 	.word	0x08007761
 800768c:	08007761 	.word	0x08007761
 8007690:	08007761 	.word	0x08007761
 8007694:	08007761 	.word	0x08007761
 8007698:	08007761 	.word	0x08007761
 800769c:	08007761 	.word	0x08007761
 80076a0:	0800771b 	.word	0x0800771b
 80076a4:	08007761 	.word	0x08007761
 80076a8:	08007761 	.word	0x08007761
 80076ac:	08007761 	.word	0x08007761
 80076b0:	08007761 	.word	0x08007761
 80076b4:	08007761 	.word	0x08007761
 80076b8:	08007761 	.word	0x08007761
 80076bc:	08007761 	.word	0x08007761
 80076c0:	08007761 	.word	0x08007761
 80076c4:	08007761 	.word	0x08007761
 80076c8:	08007761 	.word	0x08007761
 80076cc:	08007761 	.word	0x08007761
 80076d0:	08007761 	.word	0x08007761
 80076d4:	08007761 	.word	0x08007761
 80076d8:	08007761 	.word	0x08007761
 80076dc:	08007761 	.word	0x08007761
 80076e0:	08007753 	.word	0x08007753
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	d037      	beq.n	8007758 <UART_SetConfig+0xc44>
 80076e8:	e03a      	b.n	8007760 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fd fbad 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 80076ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076f0:	e03c      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f2:	f7fd fbbf 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 80076f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076f8:	e038      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fda2 	bl	8006248 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	e030      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770a:	f107 0318 	add.w	r3, r7, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe feee 	bl	80064f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007718:	e028      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771a:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <UART_SetConfig+0xc2c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d012      	beq.n	800774c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007726:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <UART_SetConfig+0xc2c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	4a04      	ldr	r2, [pc, #16]	@ (8007744 <UART_SetConfig+0xc30>)
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007738:	e018      	b.n	800776c <UART_SetConfig+0xc58>
 800773a:	bf00      	nop
 800773c:	0800db8c 	.word	0x0800db8c
 8007740:	58024400 	.word	0x58024400
 8007744:	03d09000 	.word	0x03d09000
 8007748:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800774c:	4b24      	ldr	r3, [pc, #144]	@ (80077e0 <UART_SetConfig+0xccc>)
 800774e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007750:	e00c      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007752:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <UART_SetConfig+0xcd0>)
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007756:	e009      	b.n	800776c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007758:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775e:	e005      	b.n	800776c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800776a:	bf00      	nop
    }

    if (pclk != 0U)
 800776c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d021      	beq.n	80077b6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	4a1c      	ldr	r2, [pc, #112]	@ (80077e8 <UART_SetConfig+0xcd4>)
 8007778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777c:	461a      	mov	r2, r3
 800777e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007780:	fbb3 f2f2 	udiv	r2, r3, r2
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	441a      	add	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	fbb2 f3f3 	udiv	r3, r2, r3
 8007794:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	2b0f      	cmp	r3, #15
 800779a:	d909      	bls.n	80077b0 <UART_SetConfig+0xc9c>
 800779c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a2:	d205      	bcs.n	80077b0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	e002      	b.n	80077b6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2200      	movs	r2, #0
 80077d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3748      	adds	r7, #72	@ 0x48
 80077da:	46bd      	mov	sp, r7
 80077dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e0:	03d09000 	.word	0x03d09000
 80077e4:	003d0900 	.word	0x003d0900
 80077e8:	0800db8c 	.word	0x0800db8c

080077ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01a      	beq.n	8007902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ea:	d10a      	bne.n	8007902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b098      	sub	sp, #96	@ 0x60
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007940:	f7fb f9e2 	bl	8002d08 <HAL_GetTick>
 8007944:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b08      	cmp	r3, #8
 8007952:	d12f      	bne.n	80079b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007954:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f88e 	bl	8007a84 <UART_WaitOnFlagUntilTimeout>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d022      	beq.n	80079b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800797c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007982:	653b      	str	r3, [r7, #80]	@ 0x50
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800798c:	647b      	str	r3, [r7, #68]	@ 0x44
 800798e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800799a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e063      	b.n	8007a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d149      	bne.n	8007a56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ca:	2200      	movs	r2, #0
 80079cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f857 	bl	8007a84 <UART_WaitOnFlagUntilTimeout>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d03c      	beq.n	8007a56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80079fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e6      	bne.n	80079dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a2e:	61fa      	str	r2, [r7, #28]
 8007a30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	69b9      	ldr	r1, [r7, #24]
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e5      	bne.n	8007a0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e012      	b.n	8007a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3758      	adds	r7, #88	@ 0x58
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4613      	mov	r3, r2
 8007a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a94:	e04f      	b.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d04b      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a9e:	f7fb f933 	bl	8002d08 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d302      	bcc.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e04e      	b.n	8007b56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d037      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b80      	cmp	r3, #128	@ 0x80
 8007aca:	d034      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b40      	cmp	r3, #64	@ 0x40
 8007ad0:	d031      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d110      	bne.n	8007b02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f839 	bl	8007b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2208      	movs	r2, #8
 8007af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e029      	b.n	8007b56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b10:	d111      	bne.n	8007b36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 f81f 	bl	8007b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e00f      	b.n	8007b56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	bf0c      	ite	eq
 8007b46:	2301      	moveq	r3, #1
 8007b48:	2300      	movne	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d0a0      	beq.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b095      	sub	sp, #84	@ 0x54
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e6      	bne.n	8007b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	4b1e      	ldr	r3, [pc, #120]	@ (8007c28 <UART_EndRxTransfer+0xc8>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e5      	bne.n	8007b9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d118      	bne.n	8007c08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0310 	bic.w	r3, r3, #16
 8007bea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	613b      	str	r3, [r7, #16]
   return(result);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c1c:	bf00      	nop
 8007c1e:	3754      	adds	r7, #84	@ 0x54
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	effffffe 	.word	0xeffffffe

08007c2c <sniprintf>:
 8007c2c:	b40c      	push	{r2, r3}
 8007c2e:	b530      	push	{r4, r5, lr}
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <sniprintf+0x64>)
 8007c32:	1e0c      	subs	r4, r1, #0
 8007c34:	681d      	ldr	r5, [r3, #0]
 8007c36:	b09d      	sub	sp, #116	@ 0x74
 8007c38:	da08      	bge.n	8007c4c <sniprintf+0x20>
 8007c3a:	238b      	movs	r3, #139	@ 0x8b
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c42:	b01d      	add	sp, #116	@ 0x74
 8007c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c48:	b002      	add	sp, #8
 8007c4a:	4770      	bx	lr
 8007c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c54:	bf14      	ite	ne
 8007c56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c5a:	4623      	moveq	r3, r4
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c64:	9002      	str	r0, [sp, #8]
 8007c66:	9006      	str	r0, [sp, #24]
 8007c68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c6e:	ab21      	add	r3, sp, #132	@ 0x84
 8007c70:	a902      	add	r1, sp, #8
 8007c72:	4628      	mov	r0, r5
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	f000 f9bd 	bl	8007ff4 <_svfiprintf_r>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	bfbc      	itt	lt
 8007c7e:	238b      	movlt	r3, #139	@ 0x8b
 8007c80:	602b      	strlt	r3, [r5, #0]
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	d0dd      	beq.n	8007c42 <sniprintf+0x16>
 8007c86:	9b02      	ldr	r3, [sp, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e7d9      	b.n	8007c42 <sniprintf+0x16>
 8007c8e:	bf00      	nop
 8007c90:	2400002c 	.word	0x2400002c

08007c94 <memmove>:
 8007c94:	4288      	cmp	r0, r1
 8007c96:	b510      	push	{r4, lr}
 8007c98:	eb01 0402 	add.w	r4, r1, r2
 8007c9c:	d902      	bls.n	8007ca4 <memmove+0x10>
 8007c9e:	4284      	cmp	r4, r0
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	d807      	bhi.n	8007cb4 <memmove+0x20>
 8007ca4:	1e43      	subs	r3, r0, #1
 8007ca6:	42a1      	cmp	r1, r4
 8007ca8:	d008      	beq.n	8007cbc <memmove+0x28>
 8007caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cb2:	e7f8      	b.n	8007ca6 <memmove+0x12>
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	428a      	cmp	r2, r1
 8007cba:	d100      	bne.n	8007cbe <memmove+0x2a>
 8007cbc:	bd10      	pop	{r4, pc}
 8007cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cc6:	e7f7      	b.n	8007cb8 <memmove+0x24>

08007cc8 <memset>:
 8007cc8:	4402      	add	r2, r0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d100      	bne.n	8007cd2 <memset+0xa>
 8007cd0:	4770      	bx	lr
 8007cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd6:	e7f9      	b.n	8007ccc <memset+0x4>

08007cd8 <__errno>:
 8007cd8:	4b01      	ldr	r3, [pc, #4]	@ (8007ce0 <__errno+0x8>)
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2400002c 	.word	0x2400002c

08007ce4 <__libc_init_array>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8007d1c <__libc_init_array+0x38>)
 8007ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8007d20 <__libc_init_array+0x3c>)
 8007cea:	1b64      	subs	r4, r4, r5
 8007cec:	10a4      	asrs	r4, r4, #2
 8007cee:	2600      	movs	r6, #0
 8007cf0:	42a6      	cmp	r6, r4
 8007cf2:	d109      	bne.n	8007d08 <__libc_init_array+0x24>
 8007cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8007d24 <__libc_init_array+0x40>)
 8007cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8007d28 <__libc_init_array+0x44>)
 8007cf8:	f000 fdf8 	bl	80088ec <_init>
 8007cfc:	1b64      	subs	r4, r4, r5
 8007cfe:	10a4      	asrs	r4, r4, #2
 8007d00:	2600      	movs	r6, #0
 8007d02:	42a6      	cmp	r6, r4
 8007d04:	d105      	bne.n	8007d12 <__libc_init_array+0x2e>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0c:	4798      	blx	r3
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7ee      	b.n	8007cf0 <__libc_init_array+0xc>
 8007d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d16:	4798      	blx	r3
 8007d18:	3601      	adds	r6, #1
 8007d1a:	e7f2      	b.n	8007d02 <__libc_init_array+0x1e>
 8007d1c:	0800dd20 	.word	0x0800dd20
 8007d20:	0800dd20 	.word	0x0800dd20
 8007d24:	0800dd20 	.word	0x0800dd20
 8007d28:	0800dd24 	.word	0x0800dd24

08007d2c <__retarget_lock_acquire_recursive>:
 8007d2c:	4770      	bx	lr

08007d2e <__retarget_lock_release_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <memcpy>:
 8007d30:	440a      	add	r2, r1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xc>
 8007d3a:	4770      	bx	lr
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d1f9      	bne.n	8007d3e <memcpy+0xe>
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <_free_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4605      	mov	r5, r0
 8007d50:	2900      	cmp	r1, #0
 8007d52:	d041      	beq.n	8007dd8 <_free_r+0x8c>
 8007d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d58:	1f0c      	subs	r4, r1, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfb8      	it	lt
 8007d5e:	18e4      	addlt	r4, r4, r3
 8007d60:	f000 f8e0 	bl	8007f24 <__malloc_lock>
 8007d64:	4a1d      	ldr	r2, [pc, #116]	@ (8007ddc <_free_r+0x90>)
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	b933      	cbnz	r3, 8007d78 <_free_r+0x2c>
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	6014      	str	r4, [r2, #0]
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d74:	f000 b8dc 	b.w	8007f30 <__malloc_unlock>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d908      	bls.n	8007d8e <_free_r+0x42>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	1821      	adds	r1, r4, r0
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf01      	itttt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	1809      	addeq	r1, r1, r0
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	e7ed      	b.n	8007d6a <_free_r+0x1e>
 8007d8e:	461a      	mov	r2, r3
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	b10b      	cbz	r3, 8007d98 <_free_r+0x4c>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d9fa      	bls.n	8007d8e <_free_r+0x42>
 8007d98:	6811      	ldr	r1, [r2, #0]
 8007d9a:	1850      	adds	r0, r2, r1
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d10b      	bne.n	8007db8 <_free_r+0x6c>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	4401      	add	r1, r0
 8007da4:	1850      	adds	r0, r2, r1
 8007da6:	4283      	cmp	r3, r0
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	d1e0      	bne.n	8007d6e <_free_r+0x22>
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	6053      	str	r3, [r2, #4]
 8007db2:	4408      	add	r0, r1
 8007db4:	6010      	str	r0, [r2, #0]
 8007db6:	e7da      	b.n	8007d6e <_free_r+0x22>
 8007db8:	d902      	bls.n	8007dc0 <_free_r+0x74>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	e7d6      	b.n	8007d6e <_free_r+0x22>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf04      	itt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	bf04      	itt	eq
 8007dd0:	1809      	addeq	r1, r1, r0
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	6054      	str	r4, [r2, #4]
 8007dd6:	e7ca      	b.n	8007d6e <_free_r+0x22>
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	240006ec 	.word	0x240006ec

08007de0 <sbrk_aligned>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	4e0f      	ldr	r6, [pc, #60]	@ (8007e20 <sbrk_aligned+0x40>)
 8007de4:	460c      	mov	r4, r1
 8007de6:	6831      	ldr	r1, [r6, #0]
 8007de8:	4605      	mov	r5, r0
 8007dea:	b911      	cbnz	r1, 8007df2 <sbrk_aligned+0x12>
 8007dec:	f000 fb8c 	bl	8008508 <_sbrk_r>
 8007df0:	6030      	str	r0, [r6, #0]
 8007df2:	4621      	mov	r1, r4
 8007df4:	4628      	mov	r0, r5
 8007df6:	f000 fb87 	bl	8008508 <_sbrk_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d103      	bne.n	8007e06 <sbrk_aligned+0x26>
 8007dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8007e02:	4620      	mov	r0, r4
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	1cc4      	adds	r4, r0, #3
 8007e08:	f024 0403 	bic.w	r4, r4, #3
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d0f8      	beq.n	8007e02 <sbrk_aligned+0x22>
 8007e10:	1a21      	subs	r1, r4, r0
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 fb78 	bl	8008508 <_sbrk_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d1f2      	bne.n	8007e02 <sbrk_aligned+0x22>
 8007e1c:	e7ef      	b.n	8007dfe <sbrk_aligned+0x1e>
 8007e1e:	bf00      	nop
 8007e20:	240006e8 	.word	0x240006e8

08007e24 <_malloc_r>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	1ccd      	adds	r5, r1, #3
 8007e2a:	f025 0503 	bic.w	r5, r5, #3
 8007e2e:	3508      	adds	r5, #8
 8007e30:	2d0c      	cmp	r5, #12
 8007e32:	bf38      	it	cc
 8007e34:	250c      	movcc	r5, #12
 8007e36:	2d00      	cmp	r5, #0
 8007e38:	4606      	mov	r6, r0
 8007e3a:	db01      	blt.n	8007e40 <_malloc_r+0x1c>
 8007e3c:	42a9      	cmp	r1, r5
 8007e3e:	d904      	bls.n	8007e4a <_malloc_r+0x26>
 8007e40:	230c      	movs	r3, #12
 8007e42:	6033      	str	r3, [r6, #0]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f20 <_malloc_r+0xfc>
 8007e4e:	f000 f869 	bl	8007f24 <__malloc_lock>
 8007e52:	f8d8 3000 	ldr.w	r3, [r8]
 8007e56:	461c      	mov	r4, r3
 8007e58:	bb44      	cbnz	r4, 8007eac <_malloc_r+0x88>
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7ff ffbf 	bl	8007de0 <sbrk_aligned>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	4604      	mov	r4, r0
 8007e66:	d158      	bne.n	8007f1a <_malloc_r+0xf6>
 8007e68:	f8d8 4000 	ldr.w	r4, [r8]
 8007e6c:	4627      	mov	r7, r4
 8007e6e:	2f00      	cmp	r7, #0
 8007e70:	d143      	bne.n	8007efa <_malloc_r+0xd6>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d04b      	beq.n	8007f0e <_malloc_r+0xea>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	4639      	mov	r1, r7
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	eb04 0903 	add.w	r9, r4, r3
 8007e80:	f000 fb42 	bl	8008508 <_sbrk_r>
 8007e84:	4581      	cmp	r9, r0
 8007e86:	d142      	bne.n	8007f0e <_malloc_r+0xea>
 8007e88:	6821      	ldr	r1, [r4, #0]
 8007e8a:	1a6d      	subs	r5, r5, r1
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f7ff ffa6 	bl	8007de0 <sbrk_aligned>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d03a      	beq.n	8007f0e <_malloc_r+0xea>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	442b      	add	r3, r5
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	bb62      	cbnz	r2, 8007f00 <_malloc_r+0xdc>
 8007ea6:	f8c8 7000 	str.w	r7, [r8]
 8007eaa:	e00f      	b.n	8007ecc <_malloc_r+0xa8>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	1b52      	subs	r2, r2, r5
 8007eb0:	d420      	bmi.n	8007ef4 <_malloc_r+0xd0>
 8007eb2:	2a0b      	cmp	r2, #11
 8007eb4:	d917      	bls.n	8007ee6 <_malloc_r+0xc2>
 8007eb6:	1961      	adds	r1, r4, r5
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	6025      	str	r5, [r4, #0]
 8007ebc:	bf18      	it	ne
 8007ebe:	6059      	strne	r1, [r3, #4]
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	bf08      	it	eq
 8007ec4:	f8c8 1000 	streq.w	r1, [r8]
 8007ec8:	5162      	str	r2, [r4, r5]
 8007eca:	604b      	str	r3, [r1, #4]
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f82f 	bl	8007f30 <__malloc_unlock>
 8007ed2:	f104 000b 	add.w	r0, r4, #11
 8007ed6:	1d23      	adds	r3, r4, #4
 8007ed8:	f020 0007 	bic.w	r0, r0, #7
 8007edc:	1ac2      	subs	r2, r0, r3
 8007ede:	bf1c      	itt	ne
 8007ee0:	1a1b      	subne	r3, r3, r0
 8007ee2:	50a3      	strne	r3, [r4, r2]
 8007ee4:	e7af      	b.n	8007e46 <_malloc_r+0x22>
 8007ee6:	6862      	ldr	r2, [r4, #4]
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	bf0c      	ite	eq
 8007eec:	f8c8 2000 	streq.w	r2, [r8]
 8007ef0:	605a      	strne	r2, [r3, #4]
 8007ef2:	e7eb      	b.n	8007ecc <_malloc_r+0xa8>
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	6864      	ldr	r4, [r4, #4]
 8007ef8:	e7ae      	b.n	8007e58 <_malloc_r+0x34>
 8007efa:	463c      	mov	r4, r7
 8007efc:	687f      	ldr	r7, [r7, #4]
 8007efe:	e7b6      	b.n	8007e6e <_malloc_r+0x4a>
 8007f00:	461a      	mov	r2, r3
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d1fb      	bne.n	8007f00 <_malloc_r+0xdc>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6053      	str	r3, [r2, #4]
 8007f0c:	e7de      	b.n	8007ecc <_malloc_r+0xa8>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	6033      	str	r3, [r6, #0]
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 f80c 	bl	8007f30 <__malloc_unlock>
 8007f18:	e794      	b.n	8007e44 <_malloc_r+0x20>
 8007f1a:	6005      	str	r5, [r0, #0]
 8007f1c:	e7d6      	b.n	8007ecc <_malloc_r+0xa8>
 8007f1e:	bf00      	nop
 8007f20:	240006ec 	.word	0x240006ec

08007f24 <__malloc_lock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__malloc_lock+0x8>)
 8007f26:	f7ff bf01 	b.w	8007d2c <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	240006e4 	.word	0x240006e4

08007f30 <__malloc_unlock>:
 8007f30:	4801      	ldr	r0, [pc, #4]	@ (8007f38 <__malloc_unlock+0x8>)
 8007f32:	f7ff befc 	b.w	8007d2e <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	240006e4 	.word	0x240006e4

08007f3c <__ssputs_r>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	688e      	ldr	r6, [r1, #8]
 8007f42:	461f      	mov	r7, r3
 8007f44:	42be      	cmp	r6, r7
 8007f46:	680b      	ldr	r3, [r1, #0]
 8007f48:	4682      	mov	sl, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	4690      	mov	r8, r2
 8007f4e:	d82d      	bhi.n	8007fac <__ssputs_r+0x70>
 8007f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f58:	d026      	beq.n	8007fa8 <__ssputs_r+0x6c>
 8007f5a:	6965      	ldr	r5, [r4, #20]
 8007f5c:	6909      	ldr	r1, [r1, #16]
 8007f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f62:	eba3 0901 	sub.w	r9, r3, r1
 8007f66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f6a:	1c7b      	adds	r3, r7, #1
 8007f6c:	444b      	add	r3, r9
 8007f6e:	106d      	asrs	r5, r5, #1
 8007f70:	429d      	cmp	r5, r3
 8007f72:	bf38      	it	cc
 8007f74:	461d      	movcc	r5, r3
 8007f76:	0553      	lsls	r3, r2, #21
 8007f78:	d527      	bpl.n	8007fca <__ssputs_r+0x8e>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7ff ff52 	bl	8007e24 <_malloc_r>
 8007f80:	4606      	mov	r6, r0
 8007f82:	b360      	cbz	r0, 8007fde <__ssputs_r+0xa2>
 8007f84:	6921      	ldr	r1, [r4, #16]
 8007f86:	464a      	mov	r2, r9
 8007f88:	f7ff fed2 	bl	8007d30 <memcpy>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	6126      	str	r6, [r4, #16]
 8007f9a:	6165      	str	r5, [r4, #20]
 8007f9c:	444e      	add	r6, r9
 8007f9e:	eba5 0509 	sub.w	r5, r5, r9
 8007fa2:	6026      	str	r6, [r4, #0]
 8007fa4:	60a5      	str	r5, [r4, #8]
 8007fa6:	463e      	mov	r6, r7
 8007fa8:	42be      	cmp	r6, r7
 8007faa:	d900      	bls.n	8007fae <__ssputs_r+0x72>
 8007fac:	463e      	mov	r6, r7
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	f7ff fe6e 	bl	8007c94 <memmove>
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	1b9b      	subs	r3, r3, r6
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	4433      	add	r3, r6
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	462a      	mov	r2, r5
 8007fcc:	f000 faac 	bl	8008528 <_realloc_r>
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d1e0      	bne.n	8007f98 <__ssputs_r+0x5c>
 8007fd6:	6921      	ldr	r1, [r4, #16]
 8007fd8:	4650      	mov	r0, sl
 8007fda:	f7ff feb7 	bl	8007d4c <_free_r>
 8007fde:	230c      	movs	r3, #12
 8007fe0:	f8ca 3000 	str.w	r3, [sl]
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	e7e9      	b.n	8007fc6 <__ssputs_r+0x8a>
	...

08007ff4 <_svfiprintf_r>:
 8007ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	4698      	mov	r8, r3
 8007ffa:	898b      	ldrh	r3, [r1, #12]
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	b09d      	sub	sp, #116	@ 0x74
 8008000:	4607      	mov	r7, r0
 8008002:	460d      	mov	r5, r1
 8008004:	4614      	mov	r4, r2
 8008006:	d510      	bpl.n	800802a <_svfiprintf_r+0x36>
 8008008:	690b      	ldr	r3, [r1, #16]
 800800a:	b973      	cbnz	r3, 800802a <_svfiprintf_r+0x36>
 800800c:	2140      	movs	r1, #64	@ 0x40
 800800e:	f7ff ff09 	bl	8007e24 <_malloc_r>
 8008012:	6028      	str	r0, [r5, #0]
 8008014:	6128      	str	r0, [r5, #16]
 8008016:	b930      	cbnz	r0, 8008026 <_svfiprintf_r+0x32>
 8008018:	230c      	movs	r3, #12
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b01d      	add	sp, #116	@ 0x74
 8008022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	2340      	movs	r3, #64	@ 0x40
 8008028:	616b      	str	r3, [r5, #20]
 800802a:	2300      	movs	r3, #0
 800802c:	9309      	str	r3, [sp, #36]	@ 0x24
 800802e:	2320      	movs	r3, #32
 8008030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008034:	f8cd 800c 	str.w	r8, [sp, #12]
 8008038:	2330      	movs	r3, #48	@ 0x30
 800803a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081d8 <_svfiprintf_r+0x1e4>
 800803e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008042:	f04f 0901 	mov.w	r9, #1
 8008046:	4623      	mov	r3, r4
 8008048:	469a      	mov	sl, r3
 800804a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800804e:	b10a      	cbz	r2, 8008054 <_svfiprintf_r+0x60>
 8008050:	2a25      	cmp	r2, #37	@ 0x25
 8008052:	d1f9      	bne.n	8008048 <_svfiprintf_r+0x54>
 8008054:	ebba 0b04 	subs.w	fp, sl, r4
 8008058:	d00b      	beq.n	8008072 <_svfiprintf_r+0x7e>
 800805a:	465b      	mov	r3, fp
 800805c:	4622      	mov	r2, r4
 800805e:	4629      	mov	r1, r5
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ff6b 	bl	8007f3c <__ssputs_r>
 8008066:	3001      	adds	r0, #1
 8008068:	f000 80a7 	beq.w	80081ba <_svfiprintf_r+0x1c6>
 800806c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800806e:	445a      	add	r2, fp
 8008070:	9209      	str	r2, [sp, #36]	@ 0x24
 8008072:	f89a 3000 	ldrb.w	r3, [sl]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 809f 	beq.w	80081ba <_svfiprintf_r+0x1c6>
 800807c:	2300      	movs	r3, #0
 800807e:	f04f 32ff 	mov.w	r2, #4294967295
 8008082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008086:	f10a 0a01 	add.w	sl, sl, #1
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	9307      	str	r3, [sp, #28]
 800808e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008092:	931a      	str	r3, [sp, #104]	@ 0x68
 8008094:	4654      	mov	r4, sl
 8008096:	2205      	movs	r2, #5
 8008098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800809c:	484e      	ldr	r0, [pc, #312]	@ (80081d8 <_svfiprintf_r+0x1e4>)
 800809e:	f7f8 f927 	bl	80002f0 <memchr>
 80080a2:	9a04      	ldr	r2, [sp, #16]
 80080a4:	b9d8      	cbnz	r0, 80080de <_svfiprintf_r+0xea>
 80080a6:	06d0      	lsls	r0, r2, #27
 80080a8:	bf44      	itt	mi
 80080aa:	2320      	movmi	r3, #32
 80080ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b0:	0711      	lsls	r1, r2, #28
 80080b2:	bf44      	itt	mi
 80080b4:	232b      	movmi	r3, #43	@ 0x2b
 80080b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ba:	f89a 3000 	ldrb.w	r3, [sl]
 80080be:	2b2a      	cmp	r3, #42	@ 0x2a
 80080c0:	d015      	beq.n	80080ee <_svfiprintf_r+0xfa>
 80080c2:	9a07      	ldr	r2, [sp, #28]
 80080c4:	4654      	mov	r4, sl
 80080c6:	2000      	movs	r0, #0
 80080c8:	f04f 0c0a 	mov.w	ip, #10
 80080cc:	4621      	mov	r1, r4
 80080ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080d2:	3b30      	subs	r3, #48	@ 0x30
 80080d4:	2b09      	cmp	r3, #9
 80080d6:	d94b      	bls.n	8008170 <_svfiprintf_r+0x17c>
 80080d8:	b1b0      	cbz	r0, 8008108 <_svfiprintf_r+0x114>
 80080da:	9207      	str	r2, [sp, #28]
 80080dc:	e014      	b.n	8008108 <_svfiprintf_r+0x114>
 80080de:	eba0 0308 	sub.w	r3, r0, r8
 80080e2:	fa09 f303 	lsl.w	r3, r9, r3
 80080e6:	4313      	orrs	r3, r2
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	46a2      	mov	sl, r4
 80080ec:	e7d2      	b.n	8008094 <_svfiprintf_r+0xa0>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	1d19      	adds	r1, r3, #4
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	9103      	str	r1, [sp, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfbb      	ittet	lt
 80080fa:	425b      	neglt	r3, r3
 80080fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008100:	9307      	strge	r3, [sp, #28]
 8008102:	9307      	strlt	r3, [sp, #28]
 8008104:	bfb8      	it	lt
 8008106:	9204      	strlt	r2, [sp, #16]
 8008108:	7823      	ldrb	r3, [r4, #0]
 800810a:	2b2e      	cmp	r3, #46	@ 0x2e
 800810c:	d10a      	bne.n	8008124 <_svfiprintf_r+0x130>
 800810e:	7863      	ldrb	r3, [r4, #1]
 8008110:	2b2a      	cmp	r3, #42	@ 0x2a
 8008112:	d132      	bne.n	800817a <_svfiprintf_r+0x186>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	9203      	str	r2, [sp, #12]
 800811c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008120:	3402      	adds	r4, #2
 8008122:	9305      	str	r3, [sp, #20]
 8008124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081e8 <_svfiprintf_r+0x1f4>
 8008128:	7821      	ldrb	r1, [r4, #0]
 800812a:	2203      	movs	r2, #3
 800812c:	4650      	mov	r0, sl
 800812e:	f7f8 f8df 	bl	80002f0 <memchr>
 8008132:	b138      	cbz	r0, 8008144 <_svfiprintf_r+0x150>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	eba0 000a 	sub.w	r0, r0, sl
 800813a:	2240      	movs	r2, #64	@ 0x40
 800813c:	4082      	lsls	r2, r0
 800813e:	4313      	orrs	r3, r2
 8008140:	3401      	adds	r4, #1
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008148:	4824      	ldr	r0, [pc, #144]	@ (80081dc <_svfiprintf_r+0x1e8>)
 800814a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800814e:	2206      	movs	r2, #6
 8008150:	f7f8 f8ce 	bl	80002f0 <memchr>
 8008154:	2800      	cmp	r0, #0
 8008156:	d036      	beq.n	80081c6 <_svfiprintf_r+0x1d2>
 8008158:	4b21      	ldr	r3, [pc, #132]	@ (80081e0 <_svfiprintf_r+0x1ec>)
 800815a:	bb1b      	cbnz	r3, 80081a4 <_svfiprintf_r+0x1b0>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	3307      	adds	r3, #7
 8008160:	f023 0307 	bic.w	r3, r3, #7
 8008164:	3308      	adds	r3, #8
 8008166:	9303      	str	r3, [sp, #12]
 8008168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816a:	4433      	add	r3, r6
 800816c:	9309      	str	r3, [sp, #36]	@ 0x24
 800816e:	e76a      	b.n	8008046 <_svfiprintf_r+0x52>
 8008170:	fb0c 3202 	mla	r2, ip, r2, r3
 8008174:	460c      	mov	r4, r1
 8008176:	2001      	movs	r0, #1
 8008178:	e7a8      	b.n	80080cc <_svfiprintf_r+0xd8>
 800817a:	2300      	movs	r3, #0
 800817c:	3401      	adds	r4, #1
 800817e:	9305      	str	r3, [sp, #20]
 8008180:	4619      	mov	r1, r3
 8008182:	f04f 0c0a 	mov.w	ip, #10
 8008186:	4620      	mov	r0, r4
 8008188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800818c:	3a30      	subs	r2, #48	@ 0x30
 800818e:	2a09      	cmp	r2, #9
 8008190:	d903      	bls.n	800819a <_svfiprintf_r+0x1a6>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0c6      	beq.n	8008124 <_svfiprintf_r+0x130>
 8008196:	9105      	str	r1, [sp, #20]
 8008198:	e7c4      	b.n	8008124 <_svfiprintf_r+0x130>
 800819a:	fb0c 2101 	mla	r1, ip, r1, r2
 800819e:	4604      	mov	r4, r0
 80081a0:	2301      	movs	r3, #1
 80081a2:	e7f0      	b.n	8008186 <_svfiprintf_r+0x192>
 80081a4:	ab03      	add	r3, sp, #12
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <_svfiprintf_r+0x1f0>)
 80081ac:	a904      	add	r1, sp, #16
 80081ae:	4638      	mov	r0, r7
 80081b0:	f3af 8000 	nop.w
 80081b4:	1c42      	adds	r2, r0, #1
 80081b6:	4606      	mov	r6, r0
 80081b8:	d1d6      	bne.n	8008168 <_svfiprintf_r+0x174>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	065b      	lsls	r3, r3, #25
 80081be:	f53f af2d 	bmi.w	800801c <_svfiprintf_r+0x28>
 80081c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c4:	e72c      	b.n	8008020 <_svfiprintf_r+0x2c>
 80081c6:	ab03      	add	r3, sp, #12
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	462a      	mov	r2, r5
 80081cc:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <_svfiprintf_r+0x1f0>)
 80081ce:	a904      	add	r1, sp, #16
 80081d0:	4638      	mov	r0, r7
 80081d2:	f000 f879 	bl	80082c8 <_printf_i>
 80081d6:	e7ed      	b.n	80081b4 <_svfiprintf_r+0x1c0>
 80081d8:	0800dba4 	.word	0x0800dba4
 80081dc:	0800dbae 	.word	0x0800dbae
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08007f3d 	.word	0x08007f3d
 80081e8:	0800dbaa 	.word	0x0800dbaa

080081ec <_printf_common>:
 80081ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	4616      	mov	r6, r2
 80081f2:	4698      	mov	r8, r3
 80081f4:	688a      	ldr	r2, [r1, #8]
 80081f6:	690b      	ldr	r3, [r1, #16]
 80081f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	bfb8      	it	lt
 8008200:	4613      	movlt	r3, r2
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008208:	4607      	mov	r7, r0
 800820a:	460c      	mov	r4, r1
 800820c:	b10a      	cbz	r2, 8008212 <_printf_common+0x26>
 800820e:	3301      	adds	r3, #1
 8008210:	6033      	str	r3, [r6, #0]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	0699      	lsls	r1, r3, #26
 8008216:	bf42      	ittt	mi
 8008218:	6833      	ldrmi	r3, [r6, #0]
 800821a:	3302      	addmi	r3, #2
 800821c:	6033      	strmi	r3, [r6, #0]
 800821e:	6825      	ldr	r5, [r4, #0]
 8008220:	f015 0506 	ands.w	r5, r5, #6
 8008224:	d106      	bne.n	8008234 <_printf_common+0x48>
 8008226:	f104 0a19 	add.w	sl, r4, #25
 800822a:	68e3      	ldr	r3, [r4, #12]
 800822c:	6832      	ldr	r2, [r6, #0]
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	42ab      	cmp	r3, r5
 8008232:	dc26      	bgt.n	8008282 <_printf_common+0x96>
 8008234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	3b00      	subs	r3, #0
 800823c:	bf18      	it	ne
 800823e:	2301      	movne	r3, #1
 8008240:	0692      	lsls	r2, r2, #26
 8008242:	d42b      	bmi.n	800829c <_printf_common+0xb0>
 8008244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008248:	4641      	mov	r1, r8
 800824a:	4638      	mov	r0, r7
 800824c:	47c8      	blx	r9
 800824e:	3001      	adds	r0, #1
 8008250:	d01e      	beq.n	8008290 <_printf_common+0xa4>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	f003 0306 	and.w	r3, r3, #6
 800825a:	2b04      	cmp	r3, #4
 800825c:	bf02      	ittt	eq
 800825e:	68e5      	ldreq	r5, [r4, #12]
 8008260:	6833      	ldreq	r3, [r6, #0]
 8008262:	1aed      	subeq	r5, r5, r3
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	bf0c      	ite	eq
 8008268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800826c:	2500      	movne	r5, #0
 800826e:	4293      	cmp	r3, r2
 8008270:	bfc4      	itt	gt
 8008272:	1a9b      	subgt	r3, r3, r2
 8008274:	18ed      	addgt	r5, r5, r3
 8008276:	2600      	movs	r6, #0
 8008278:	341a      	adds	r4, #26
 800827a:	42b5      	cmp	r5, r6
 800827c:	d11a      	bne.n	80082b4 <_printf_common+0xc8>
 800827e:	2000      	movs	r0, #0
 8008280:	e008      	b.n	8008294 <_printf_common+0xa8>
 8008282:	2301      	movs	r3, #1
 8008284:	4652      	mov	r2, sl
 8008286:	4641      	mov	r1, r8
 8008288:	4638      	mov	r0, r7
 800828a:	47c8      	blx	r9
 800828c:	3001      	adds	r0, #1
 800828e:	d103      	bne.n	8008298 <_printf_common+0xac>
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008298:	3501      	adds	r5, #1
 800829a:	e7c6      	b.n	800822a <_printf_common+0x3e>
 800829c:	18e1      	adds	r1, r4, r3
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	2030      	movs	r0, #48	@ 0x30
 80082a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a6:	4422      	add	r2, r4
 80082a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082b0:	3302      	adds	r3, #2
 80082b2:	e7c7      	b.n	8008244 <_printf_common+0x58>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4622      	mov	r2, r4
 80082b8:	4641      	mov	r1, r8
 80082ba:	4638      	mov	r0, r7
 80082bc:	47c8      	blx	r9
 80082be:	3001      	adds	r0, #1
 80082c0:	d0e6      	beq.n	8008290 <_printf_common+0xa4>
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7d9      	b.n	800827a <_printf_common+0x8e>
	...

080082c8 <_printf_i>:
 80082c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082cc:	7e0f      	ldrb	r7, [r1, #24]
 80082ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082d0:	2f78      	cmp	r7, #120	@ 0x78
 80082d2:	4691      	mov	r9, r2
 80082d4:	4680      	mov	r8, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	469a      	mov	sl, r3
 80082da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082de:	d807      	bhi.n	80082f0 <_printf_i+0x28>
 80082e0:	2f62      	cmp	r7, #98	@ 0x62
 80082e2:	d80a      	bhi.n	80082fa <_printf_i+0x32>
 80082e4:	2f00      	cmp	r7, #0
 80082e6:	f000 80d2 	beq.w	800848e <_printf_i+0x1c6>
 80082ea:	2f58      	cmp	r7, #88	@ 0x58
 80082ec:	f000 80b9 	beq.w	8008462 <_printf_i+0x19a>
 80082f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f8:	e03a      	b.n	8008370 <_printf_i+0xa8>
 80082fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fe:	2b15      	cmp	r3, #21
 8008300:	d8f6      	bhi.n	80082f0 <_printf_i+0x28>
 8008302:	a101      	add	r1, pc, #4	@ (adr r1, 8008308 <_printf_i+0x40>)
 8008304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008308:	08008361 	.word	0x08008361
 800830c:	08008375 	.word	0x08008375
 8008310:	080082f1 	.word	0x080082f1
 8008314:	080082f1 	.word	0x080082f1
 8008318:	080082f1 	.word	0x080082f1
 800831c:	080082f1 	.word	0x080082f1
 8008320:	08008375 	.word	0x08008375
 8008324:	080082f1 	.word	0x080082f1
 8008328:	080082f1 	.word	0x080082f1
 800832c:	080082f1 	.word	0x080082f1
 8008330:	080082f1 	.word	0x080082f1
 8008334:	08008475 	.word	0x08008475
 8008338:	0800839f 	.word	0x0800839f
 800833c:	0800842f 	.word	0x0800842f
 8008340:	080082f1 	.word	0x080082f1
 8008344:	080082f1 	.word	0x080082f1
 8008348:	08008497 	.word	0x08008497
 800834c:	080082f1 	.word	0x080082f1
 8008350:	0800839f 	.word	0x0800839f
 8008354:	080082f1 	.word	0x080082f1
 8008358:	080082f1 	.word	0x080082f1
 800835c:	08008437 	.word	0x08008437
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	1d1a      	adds	r2, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6032      	str	r2, [r6, #0]
 8008368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800836c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008370:	2301      	movs	r3, #1
 8008372:	e09d      	b.n	80084b0 <_printf_i+0x1e8>
 8008374:	6833      	ldr	r3, [r6, #0]
 8008376:	6820      	ldr	r0, [r4, #0]
 8008378:	1d19      	adds	r1, r3, #4
 800837a:	6031      	str	r1, [r6, #0]
 800837c:	0606      	lsls	r6, r0, #24
 800837e:	d501      	bpl.n	8008384 <_printf_i+0xbc>
 8008380:	681d      	ldr	r5, [r3, #0]
 8008382:	e003      	b.n	800838c <_printf_i+0xc4>
 8008384:	0645      	lsls	r5, r0, #25
 8008386:	d5fb      	bpl.n	8008380 <_printf_i+0xb8>
 8008388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800838c:	2d00      	cmp	r5, #0
 800838e:	da03      	bge.n	8008398 <_printf_i+0xd0>
 8008390:	232d      	movs	r3, #45	@ 0x2d
 8008392:	426d      	negs	r5, r5
 8008394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008398:	4859      	ldr	r0, [pc, #356]	@ (8008500 <_printf_i+0x238>)
 800839a:	230a      	movs	r3, #10
 800839c:	e011      	b.n	80083c2 <_printf_i+0xfa>
 800839e:	6821      	ldr	r1, [r4, #0]
 80083a0:	6833      	ldr	r3, [r6, #0]
 80083a2:	0608      	lsls	r0, r1, #24
 80083a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a8:	d402      	bmi.n	80083b0 <_printf_i+0xe8>
 80083aa:	0649      	lsls	r1, r1, #25
 80083ac:	bf48      	it	mi
 80083ae:	b2ad      	uxthmi	r5, r5
 80083b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80083b2:	4853      	ldr	r0, [pc, #332]	@ (8008500 <_printf_i+0x238>)
 80083b4:	6033      	str	r3, [r6, #0]
 80083b6:	bf14      	ite	ne
 80083b8:	230a      	movne	r3, #10
 80083ba:	2308      	moveq	r3, #8
 80083bc:	2100      	movs	r1, #0
 80083be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083c2:	6866      	ldr	r6, [r4, #4]
 80083c4:	60a6      	str	r6, [r4, #8]
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	bfa2      	ittt	ge
 80083ca:	6821      	ldrge	r1, [r4, #0]
 80083cc:	f021 0104 	bicge.w	r1, r1, #4
 80083d0:	6021      	strge	r1, [r4, #0]
 80083d2:	b90d      	cbnz	r5, 80083d8 <_printf_i+0x110>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	d04b      	beq.n	8008470 <_printf_i+0x1a8>
 80083d8:	4616      	mov	r6, r2
 80083da:	fbb5 f1f3 	udiv	r1, r5, r3
 80083de:	fb03 5711 	mls	r7, r3, r1, r5
 80083e2:	5dc7      	ldrb	r7, [r0, r7]
 80083e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e8:	462f      	mov	r7, r5
 80083ea:	42bb      	cmp	r3, r7
 80083ec:	460d      	mov	r5, r1
 80083ee:	d9f4      	bls.n	80083da <_printf_i+0x112>
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d10b      	bne.n	800840c <_printf_i+0x144>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	07df      	lsls	r7, r3, #31
 80083f8:	d508      	bpl.n	800840c <_printf_i+0x144>
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6861      	ldr	r1, [r4, #4]
 80083fe:	4299      	cmp	r1, r3
 8008400:	bfde      	ittt	le
 8008402:	2330      	movle	r3, #48	@ 0x30
 8008404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008408:	f106 36ff 	addle.w	r6, r6, #4294967295
 800840c:	1b92      	subs	r2, r2, r6
 800840e:	6122      	str	r2, [r4, #16]
 8008410:	f8cd a000 	str.w	sl, [sp]
 8008414:	464b      	mov	r3, r9
 8008416:	aa03      	add	r2, sp, #12
 8008418:	4621      	mov	r1, r4
 800841a:	4640      	mov	r0, r8
 800841c:	f7ff fee6 	bl	80081ec <_printf_common>
 8008420:	3001      	adds	r0, #1
 8008422:	d14a      	bne.n	80084ba <_printf_i+0x1f2>
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	b004      	add	sp, #16
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	f043 0320 	orr.w	r3, r3, #32
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	4833      	ldr	r0, [pc, #204]	@ (8008504 <_printf_i+0x23c>)
 8008438:	2778      	movs	r7, #120	@ 0x78
 800843a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	6831      	ldr	r1, [r6, #0]
 8008442:	061f      	lsls	r7, r3, #24
 8008444:	f851 5b04 	ldr.w	r5, [r1], #4
 8008448:	d402      	bmi.n	8008450 <_printf_i+0x188>
 800844a:	065f      	lsls	r7, r3, #25
 800844c:	bf48      	it	mi
 800844e:	b2ad      	uxthmi	r5, r5
 8008450:	6031      	str	r1, [r6, #0]
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	bf44      	itt	mi
 8008456:	f043 0320 	orrmi.w	r3, r3, #32
 800845a:	6023      	strmi	r3, [r4, #0]
 800845c:	b11d      	cbz	r5, 8008466 <_printf_i+0x19e>
 800845e:	2310      	movs	r3, #16
 8008460:	e7ac      	b.n	80083bc <_printf_i+0xf4>
 8008462:	4827      	ldr	r0, [pc, #156]	@ (8008500 <_printf_i+0x238>)
 8008464:	e7e9      	b.n	800843a <_printf_i+0x172>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f023 0320 	bic.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	e7f6      	b.n	800845e <_printf_i+0x196>
 8008470:	4616      	mov	r6, r2
 8008472:	e7bd      	b.n	80083f0 <_printf_i+0x128>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	6825      	ldr	r5, [r4, #0]
 8008478:	6961      	ldr	r1, [r4, #20]
 800847a:	1d18      	adds	r0, r3, #4
 800847c:	6030      	str	r0, [r6, #0]
 800847e:	062e      	lsls	r6, r5, #24
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	d501      	bpl.n	8008488 <_printf_i+0x1c0>
 8008484:	6019      	str	r1, [r3, #0]
 8008486:	e002      	b.n	800848e <_printf_i+0x1c6>
 8008488:	0668      	lsls	r0, r5, #25
 800848a:	d5fb      	bpl.n	8008484 <_printf_i+0x1bc>
 800848c:	8019      	strh	r1, [r3, #0]
 800848e:	2300      	movs	r3, #0
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	4616      	mov	r6, r2
 8008494:	e7bc      	b.n	8008410 <_printf_i+0x148>
 8008496:	6833      	ldr	r3, [r6, #0]
 8008498:	1d1a      	adds	r2, r3, #4
 800849a:	6032      	str	r2, [r6, #0]
 800849c:	681e      	ldr	r6, [r3, #0]
 800849e:	6862      	ldr	r2, [r4, #4]
 80084a0:	2100      	movs	r1, #0
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7f7 ff24 	bl	80002f0 <memchr>
 80084a8:	b108      	cbz	r0, 80084ae <_printf_i+0x1e6>
 80084aa:	1b80      	subs	r0, r0, r6
 80084ac:	6060      	str	r0, [r4, #4]
 80084ae:	6863      	ldr	r3, [r4, #4]
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	2300      	movs	r3, #0
 80084b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b8:	e7aa      	b.n	8008410 <_printf_i+0x148>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	4632      	mov	r2, r6
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	47d0      	blx	sl
 80084c4:	3001      	adds	r0, #1
 80084c6:	d0ad      	beq.n	8008424 <_printf_i+0x15c>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	079b      	lsls	r3, r3, #30
 80084cc:	d413      	bmi.n	80084f6 <_printf_i+0x22e>
 80084ce:	68e0      	ldr	r0, [r4, #12]
 80084d0:	9b03      	ldr	r3, [sp, #12]
 80084d2:	4298      	cmp	r0, r3
 80084d4:	bfb8      	it	lt
 80084d6:	4618      	movlt	r0, r3
 80084d8:	e7a6      	b.n	8008428 <_printf_i+0x160>
 80084da:	2301      	movs	r3, #1
 80084dc:	4632      	mov	r2, r6
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	47d0      	blx	sl
 80084e4:	3001      	adds	r0, #1
 80084e6:	d09d      	beq.n	8008424 <_printf_i+0x15c>
 80084e8:	3501      	adds	r5, #1
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	9903      	ldr	r1, [sp, #12]
 80084ee:	1a5b      	subs	r3, r3, r1
 80084f0:	42ab      	cmp	r3, r5
 80084f2:	dcf2      	bgt.n	80084da <_printf_i+0x212>
 80084f4:	e7eb      	b.n	80084ce <_printf_i+0x206>
 80084f6:	2500      	movs	r5, #0
 80084f8:	f104 0619 	add.w	r6, r4, #25
 80084fc:	e7f5      	b.n	80084ea <_printf_i+0x222>
 80084fe:	bf00      	nop
 8008500:	0800dbb5 	.word	0x0800dbb5
 8008504:	0800dbc6 	.word	0x0800dbc6

08008508 <_sbrk_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	@ (8008524 <_sbrk_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7fa f8b8 	bl	8002688 <_sbrk>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_sbrk_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_sbrk_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	240006e0 	.word	0x240006e0

08008528 <_realloc_r>:
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800852c:	4680      	mov	r8, r0
 800852e:	4615      	mov	r5, r2
 8008530:	460c      	mov	r4, r1
 8008532:	b921      	cbnz	r1, 800853e <_realloc_r+0x16>
 8008534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	4611      	mov	r1, r2
 800853a:	f7ff bc73 	b.w	8007e24 <_malloc_r>
 800853e:	b92a      	cbnz	r2, 800854c <_realloc_r+0x24>
 8008540:	f7ff fc04 	bl	8007d4c <_free_r>
 8008544:	2400      	movs	r4, #0
 8008546:	4620      	mov	r0, r4
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	f000 f81a 	bl	8008584 <_malloc_usable_size_r>
 8008550:	4285      	cmp	r5, r0
 8008552:	4606      	mov	r6, r0
 8008554:	d802      	bhi.n	800855c <_realloc_r+0x34>
 8008556:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800855a:	d8f4      	bhi.n	8008546 <_realloc_r+0x1e>
 800855c:	4629      	mov	r1, r5
 800855e:	4640      	mov	r0, r8
 8008560:	f7ff fc60 	bl	8007e24 <_malloc_r>
 8008564:	4607      	mov	r7, r0
 8008566:	2800      	cmp	r0, #0
 8008568:	d0ec      	beq.n	8008544 <_realloc_r+0x1c>
 800856a:	42b5      	cmp	r5, r6
 800856c:	462a      	mov	r2, r5
 800856e:	4621      	mov	r1, r4
 8008570:	bf28      	it	cs
 8008572:	4632      	movcs	r2, r6
 8008574:	f7ff fbdc 	bl	8007d30 <memcpy>
 8008578:	4621      	mov	r1, r4
 800857a:	4640      	mov	r0, r8
 800857c:	f7ff fbe6 	bl	8007d4c <_free_r>
 8008580:	463c      	mov	r4, r7
 8008582:	e7e0      	b.n	8008546 <_realloc_r+0x1e>

08008584 <_malloc_usable_size_r>:
 8008584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008588:	1f18      	subs	r0, r3, #4
 800858a:	2b00      	cmp	r3, #0
 800858c:	bfbc      	itt	lt
 800858e:	580b      	ldrlt	r3, [r1, r0]
 8008590:	18c0      	addlt	r0, r0, r3
 8008592:	4770      	bx	lr

08008594 <sinf_poly>:
 8008594:	07cb      	lsls	r3, r1, #31
 8008596:	d412      	bmi.n	80085be <sinf_poly+0x2a>
 8008598:	ee21 5b00 	vmul.f64	d5, d1, d0
 800859c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80085a0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80085a4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80085a8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80085ac:	ee21 1b05 	vmul.f64	d1, d1, d5
 80085b0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80085b4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80085b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80085bc:	4770      	bx	lr
 80085be:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80085c2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80085c6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80085ca:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80085ce:	eea1 7b06 	vfma.f64	d7, d1, d6
 80085d2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80085d6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80085da:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80085de:	ee21 1b05 	vmul.f64	d1, d1, d5
 80085e2:	eea5 0b06 	vfma.f64	d0, d5, d6
 80085e6:	e7e5      	b.n	80085b4 <sinf_poly+0x20>

080085e8 <sinf>:
 80085e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ea:	ee10 4a10 	vmov	r4, s0
 80085ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80085f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80085f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80085fa:	eef0 7a40 	vmov.f32	s15, s0
 80085fe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8008602:	d218      	bcs.n	8008636 <sinf+0x4e>
 8008604:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008608:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800860c:	d20a      	bcs.n	8008624 <sinf+0x3c>
 800860e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8008612:	d103      	bne.n	800861c <sinf+0x34>
 8008614:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8008618:	ed8d 1a01 	vstr	s2, [sp, #4]
 800861c:	eeb0 0a67 	vmov.f32	s0, s15
 8008620:	b003      	add	sp, #12
 8008622:	bd30      	pop	{r4, r5, pc}
 8008624:	483a      	ldr	r0, [pc, #232]	@ (8008710 <sinf+0x128>)
 8008626:	eeb0 0b46 	vmov.f64	d0, d6
 800862a:	2100      	movs	r1, #0
 800862c:	b003      	add	sp, #12
 800862e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008632:	f7ff bfaf 	b.w	8008594 <sinf_poly>
 8008636:	f240 422e 	movw	r2, #1070	@ 0x42e
 800863a:	4293      	cmp	r3, r2
 800863c:	d824      	bhi.n	8008688 <sinf+0xa0>
 800863e:	4b34      	ldr	r3, [pc, #208]	@ (8008710 <sinf+0x128>)
 8008640:	ed93 7b08 	vldr	d7, [r3, #32]
 8008644:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008648:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800864c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8008650:	ee17 1a90 	vmov	r1, s15
 8008654:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8008658:	1609      	asrs	r1, r1, #24
 800865a:	ee07 1a90 	vmov	s15, r1
 800865e:	f001 0203 	and.w	r2, r1, #3
 8008662:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008666:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800866a:	ed92 0b00 	vldr	d0, [r2]
 800866e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8008672:	f011 0f02 	tst.w	r1, #2
 8008676:	eea5 6b47 	vfms.f64	d6, d5, d7
 800867a:	bf08      	it	eq
 800867c:	4618      	moveq	r0, r3
 800867e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008682:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008686:	e7d1      	b.n	800862c <sinf+0x44>
 8008688:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800868c:	d237      	bcs.n	80086fe <sinf+0x116>
 800868e:	4921      	ldr	r1, [pc, #132]	@ (8008714 <sinf+0x12c>)
 8008690:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8008694:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8008698:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800869c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80086a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80086a4:	6a10      	ldr	r0, [r2, #32]
 80086a6:	6912      	ldr	r2, [r2, #16]
 80086a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086ac:	40ab      	lsls	r3, r5
 80086ae:	fba0 5003 	umull	r5, r0, r0, r3
 80086b2:	4359      	muls	r1, r3
 80086b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80086b8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80086bc:	0f9d      	lsrs	r5, r3, #30
 80086be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80086c2:	1ac9      	subs	r1, r1, r3
 80086c4:	f7f7 fff2 	bl	80006ac <__aeabi_l2d>
 80086c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <sinf+0x128>)
 80086ce:	f004 0203 	and.w	r2, r4, #3
 80086d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80086d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8008708 <sinf+0x120>
 80086da:	ed92 0b00 	vldr	d0, [r2]
 80086de:	ec41 0b17 	vmov	d7, r0, r1
 80086e2:	f014 0f02 	tst.w	r4, #2
 80086e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80086ee:	4629      	mov	r1, r5
 80086f0:	bf08      	it	eq
 80086f2:	4618      	moveq	r0, r3
 80086f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80086f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80086fc:	e796      	b.n	800862c <sinf+0x44>
 80086fe:	b003      	add	sp, #12
 8008700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008704:	f000 b8e2 	b.w	80088cc <__math_invalidf>
 8008708:	54442d18 	.word	0x54442d18
 800870c:	3c1921fb 	.word	0x3c1921fb
 8008710:	0800dc38 	.word	0x0800dc38
 8008714:	0800dbd8 	.word	0x0800dbd8

08008718 <sinf_poly>:
 8008718:	07cb      	lsls	r3, r1, #31
 800871a:	d412      	bmi.n	8008742 <sinf_poly+0x2a>
 800871c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8008720:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8008724:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8008728:	eea6 7b01 	vfma.f64	d7, d6, d1
 800872c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8008730:	ee21 1b05 	vmul.f64	d1, d1, d5
 8008734:	eea6 0b05 	vfma.f64	d0, d6, d5
 8008738:	eea7 0b01 	vfma.f64	d0, d7, d1
 800873c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008740:	4770      	bx	lr
 8008742:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8008746:	ee21 5b01 	vmul.f64	d5, d1, d1
 800874a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800874e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8008752:	eea1 7b06 	vfma.f64	d7, d1, d6
 8008756:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800875a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800875e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8008762:	ee21 1b05 	vmul.f64	d1, d1, d5
 8008766:	eea5 0b06 	vfma.f64	d0, d5, d6
 800876a:	e7e5      	b.n	8008738 <sinf_poly+0x20>
 800876c:	0000      	movs	r0, r0
	...

08008770 <cosf>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	ee10 4a10 	vmov	r4, s0
 8008776:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800877a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800877e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8008782:	d21f      	bcs.n	80087c4 <cosf+0x54>
 8008784:	ee27 7b07 	vmul.f64	d7, d7, d7
 8008788:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800878c:	f0c0 8082 	bcc.w	8008894 <cosf+0x124>
 8008790:	ee27 4b07 	vmul.f64	d4, d7, d7
 8008794:	4b44      	ldr	r3, [pc, #272]	@ (80088a8 <cosf+0x138>)
 8008796:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800879a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800879e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80087a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80087a6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80087aa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80087ae:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80087b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80087ba:	eea6 0b07 	vfma.f64	d0, d6, d7
 80087be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d829      	bhi.n	8008820 <cosf+0xb0>
 80087cc:	4b36      	ldr	r3, [pc, #216]	@ (80088a8 <cosf+0x138>)
 80087ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80087d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087d6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80087da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80087de:	ee16 1a90 	vmov	r1, s13
 80087e2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80087e6:	1609      	asrs	r1, r1, #24
 80087e8:	ee06 1a90 	vmov	s13, r1
 80087ec:	f001 0203 	and.w	r2, r1, #3
 80087f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80087f4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80087f8:	ed92 0b00 	vldr	d0, [r2]
 80087fc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8008800:	f011 0f02 	tst.w	r1, #2
 8008804:	f081 0101 	eor.w	r1, r1, #1
 8008808:	eea5 7b46 	vfms.f64	d7, d5, d6
 800880c:	bf08      	it	eq
 800880e:	4618      	moveq	r0, r3
 8008810:	ee27 1b07 	vmul.f64	d1, d7, d7
 8008814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008818:	ee20 0b07 	vmul.f64	d0, d0, d7
 800881c:	f7ff bf7c 	b.w	8008718 <sinf_poly>
 8008820:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8008824:	d232      	bcs.n	800888c <cosf+0x11c>
 8008826:	4921      	ldr	r1, [pc, #132]	@ (80088ac <cosf+0x13c>)
 8008828:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800882c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8008830:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8008834:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8008838:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800883c:	6a10      	ldr	r0, [r2, #32]
 800883e:	6912      	ldr	r2, [r2, #16]
 8008840:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008844:	40ab      	lsls	r3, r5
 8008846:	fba0 5003 	umull	r5, r0, r0, r3
 800884a:	4359      	muls	r1, r3
 800884c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8008850:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8008854:	0f9d      	lsrs	r5, r3, #30
 8008856:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800885a:	1ac9      	subs	r1, r1, r3
 800885c:	f7f7 ff26 	bl	80006ac <__aeabi_l2d>
 8008860:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8008864:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <cosf+0x138>)
 8008866:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80088a0 <cosf+0x130>
 800886a:	ec41 0b17 	vmov	d7, r0, r1
 800886e:	f004 0203 	and.w	r2, r4, #3
 8008872:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008876:	ed92 0b00 	vldr	d0, [r2]
 800887a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800887e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8008882:	f014 0f02 	tst.w	r4, #2
 8008886:	f085 0101 	eor.w	r1, r5, #1
 800888a:	e7bf      	b.n	800880c <cosf+0x9c>
 800888c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008890:	f000 b81c 	b.w	80088cc <__math_invalidf>
 8008894:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008898:	e793      	b.n	80087c2 <cosf+0x52>
 800889a:	bf00      	nop
 800889c:	f3af 8000 	nop.w
 80088a0:	54442d18 	.word	0x54442d18
 80088a4:	3c1921fb 	.word	0x3c1921fb
 80088a8:	0800dc38 	.word	0x0800dc38
 80088ac:	0800dbd8 	.word	0x0800dbd8

080088b0 <with_errnof>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	ed2d 8b02 	vpush	{d8}
 80088b6:	eeb0 8a40 	vmov.f32	s16, s0
 80088ba:	4604      	mov	r4, r0
 80088bc:	f7ff fa0c 	bl	8007cd8 <__errno>
 80088c0:	eeb0 0a48 	vmov.f32	s0, s16
 80088c4:	ecbd 8b02 	vpop	{d8}
 80088c8:	6004      	str	r4, [r0, #0]
 80088ca:	bd10      	pop	{r4, pc}

080088cc <__math_invalidf>:
 80088cc:	eef0 7a40 	vmov.f32	s15, s0
 80088d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80088d4:	eef4 7a67 	vcmp.f32	s15, s15
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80088e0:	d602      	bvs.n	80088e8 <__math_invalidf+0x1c>
 80088e2:	2021      	movs	r0, #33	@ 0x21
 80088e4:	f7ff bfe4 	b.w	80088b0 <with_errnof>
 80088e8:	4770      	bx	lr
	...

080088ec <_init>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr

080088f8 <_fini>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr
