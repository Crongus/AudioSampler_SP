
keypad_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f9c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  0800724c  0800724c  0000824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800802c  0800802c  0000902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008034  08008034  00009034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008038  08008038  00009038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800803c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000674  2400007c  080080b8  0000a07c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240006f0  080080b8  0000a6f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014859  00000000  00000000  0000a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028ee  00000000  00000000  0001e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  000211f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b7a  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000305e9  00000000  00000000  00022c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000158d3  00000000  00000000  0005323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136460  00000000  00000000  00068b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019ef6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042bc  00000000  00000000  0019efb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009d  00000000  00000000  001a3270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007234 	.word	0x08007234

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	08007234 	.word	0x08007234

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000686:	f000 fb3f 	bl	8000d08 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f001 f91b 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f9af 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fa61 	bl	8000b58 <MX_GPIO_Init>
  MX_I2C4_Init();
 8000696:	f000 fa1f 	bl	8000ad8 <MX_I2C4_Init>
  ssd1306_Init();
 800069a:	f000 fba1 	bl	8000de0 <ssd1306_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 ff48 	bl	8001534 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 ff45 	bl	8001534 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006aa:	2002      	movs	r0, #2
 80006ac:	f000 ff42 	bl	8001534 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 ffb4 	bl	8001620 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006b8:	4b58      	ldr	r3, [pc, #352]	@ (800081c <main+0x19c>)
 80006ba:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006be:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006c0:	4b56      	ldr	r3, [pc, #344]	@ (800081c <main+0x19c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006c6:	4b55      	ldr	r3, [pc, #340]	@ (800081c <main+0x19c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006cc:	4b53      	ldr	r3, [pc, #332]	@ (800081c <main+0x19c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006d2:	4b52      	ldr	r3, [pc, #328]	@ (800081c <main+0x19c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006d8:	4950      	ldr	r1, [pc, #320]	@ (800081c <main+0x19c>)
 80006da:	2000      	movs	r0, #0
 80006dc:	f001 f830 	bl	8001740 <BSP_COM_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <main+0x6a>
  {
    Error_Handler();
 80006e6:	f000 fb3b 	bl	8000d60 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t ColNum, RowNum, RowNumStable;
  while (1)
  {
	  RowNumStable = RowNum;
 80006ea:	8abb      	ldrh	r3, [r7, #20]
 80006ec:	827b      	strh	r3, [r7, #18]
	  uint16_t cols[5] = {1, 1, 1, 1, 1};
 80006ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000820 <main+0x1a0>)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006f6:	c303      	stmia	r3!, {r0, r1}
 80006f8:	801a      	strh	r2, [r3, #0]
	  //Ensure col buffer rest state before we start
	  DriveAllRowPins(0);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 f896 	bl	800082c <DriveAllRowPins>
	  HAL_Delay(3); //Passed as ms
 8000700:	2003      	movs	r0, #3
 8000702:	f001 f971 	bl	80019e8 <HAL_Delay>
	  //Drive all kp rows LO before we go into the keypad reading loop
	  for (ColNum = 0; ColNum < 5; ColNum++) {
 8000706:	2300      	movs	r3, #0
 8000708:	82fb      	strh	r3, [r7, #22]
 800070a:	e00e      	b.n	800072a <main+0xaa>
		  cols[ColNum] = ReadOneColPin(ColNum);
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f92e 	bl	8000970 <ReadOneColPin>
 8000714:	4602      	mov	r2, r0
 8000716:	8afb      	ldrh	r3, [r7, #22]
 8000718:	b292      	uxth	r2, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	3318      	adds	r3, #24
 800071e:	443b      	add	r3, r7
 8000720:	f823 2c10 	strh.w	r2, [r3, #-16]
	  for (ColNum = 0; ColNum < 5; ColNum++) {
 8000724:	8afb      	ldrh	r3, [r7, #22]
 8000726:	3301      	adds	r3, #1
 8000728:	82fb      	strh	r3, [r7, #22]
 800072a:	8afb      	ldrh	r3, [r7, #22]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d9ed      	bls.n	800070c <main+0x8c>
	  }
	  if (!cols[0] | !cols[1] | !cols[2] | !cols[3] | !cols[4]) {
 8000730:	893b      	ldrh	r3, [r7, #8]
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf0c      	ite	eq
 8000736:	2301      	moveq	r3, #1
 8000738:	2300      	movne	r3, #0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	897b      	ldrh	r3, [r7, #10]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	89bb      	ldrh	r3, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf0c      	ite	eq
 8000754:	2301      	moveq	r3, #1
 8000756:	2300      	movne	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4313      	orrs	r3, r2
 800075c:	89fa      	ldrh	r2, [r7, #14]
 800075e:	2a00      	cmp	r2, #0
 8000760:	bf0c      	ite	eq
 8000762:	2201      	moveq	r2, #1
 8000764:	2200      	movne	r2, #0
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	4313      	orrs	r3, r2
 800076a:	8a3a      	ldrh	r2, [r7, #16]
 800076c:	2a00      	cmp	r2, #0
 800076e:	bf0c      	ite	eq
 8000770:	2201      	moveq	r2, #1
 8000772:	2200      	movne	r2, #0
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	4313      	orrs	r3, r2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d032      	beq.n	80007e2 <main+0x162>
		  for (ColNum = 0; ColNum < 5; ColNum++) {
 800077c:	2300      	movs	r3, #0
 800077e:	82fb      	strh	r3, [r7, #22]
 8000780:	e00a      	b.n	8000798 <main+0x118>
			  if (!cols[ColNum]) break;
 8000782:	8afb      	ldrh	r3, [r7, #22]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	3318      	adds	r3, #24
 8000788:	443b      	add	r3, r7
 800078a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d006      	beq.n	80007a0 <main+0x120>
		  for (ColNum = 0; ColNum < 5; ColNum++) {
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	3301      	adds	r3, #1
 8000796:	82fb      	strh	r3, [r7, #22]
 8000798:	8afb      	ldrh	r3, [r7, #22]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d9f1      	bls.n	8000782 <main+0x102>
 800079e:	e000      	b.n	80007a2 <main+0x122>
			  if (!cols[ColNum]) break;
 80007a0:	bf00      	nop
		  }
		  for (RowNum = 0; RowNum < 4; RowNum++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	82bb      	strh	r3, [r7, #20]
 80007a6:	e017      	b.n	80007d8 <main+0x158>
			  DriveAllRowPins(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 f83f 	bl	800082c <DriveAllRowPins>
			  HAL_Delay(3);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f001 f91a 	bl	80019e8 <HAL_Delay>
			  DriveOneRowPin(RowNum, 0);
 80007b4:	8abb      	ldrh	r3, [r7, #20]
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f877 	bl	80008ac <DriveOneRowPin>
			  //Drive all HI then check for a hit when driving one LO
			  HAL_Delay(3);
 80007be:	2003      	movs	r0, #3
 80007c0:	f001 f912 	bl	80019e8 <HAL_Delay>
			  if (!ReadOneColPin(ColNum)) {
 80007c4:	8afb      	ldrh	r3, [r7, #22]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f8d2 	bl	8000970 <ReadOneColPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <main+0x160>
		  for (RowNum = 0; RowNum < 4; RowNum++) {
 80007d2:	8abb      	ldrh	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	82bb      	strh	r3, [r7, #20]
 80007d8:	8abb      	ldrh	r3, [r7, #20]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d9e4      	bls.n	80007a8 <main+0x128>
 80007de:	e000      	b.n	80007e2 <main+0x162>
				  break;
 80007e0:	bf00      	nop
			  }
		  }
	  }
	  if (RowNum == 4) RowNum = RowNumStable;
 80007e2:	8abb      	ldrh	r3, [r7, #20]
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d101      	bne.n	80007ec <main+0x16c>
 80007e8:	8a7b      	ldrh	r3, [r7, #18]
 80007ea:	82bb      	strh	r3, [r7, #20]
	  //Ugly hack to fix problem with slow pull up.
	  //If the row finder loop finishes without hitting, that shouldn't have happened.
	  //We hack in the last good value instead.
	  char RNforPrint[4], CNforPrint[4];
	  //sprintf(CNforPrint, "%d", ColNum);
	  sprintf(RNforPrint, "%d", RowNum);
 80007ec:	8aba      	ldrh	r2, [r7, #20]
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	490c      	ldr	r1, [pc, #48]	@ (8000824 <main+0x1a4>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 f87e 	bl	80068f4 <siprintf>
	  ssd1306_Fill(Black);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 fb5b 	bl	8000eb4 <ssd1306_Fill>
	  ssd1306_SetCursor(2, 0);
 80007fe:	2100      	movs	r1, #0
 8000800:	2002      	movs	r0, #2
 8000802:	f000 fca1 	bl	8001148 <ssd1306_SetCursor>
	  //ssd1306_WriteString(CNforPrint, Font_11x18, White);
	  ssd1306_WriteString(RNforPrint, Font_11x18, White);
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <main+0x1a8>)
 8000808:	1d38      	adds	r0, r7, #4
 800080a:	2201      	movs	r2, #1
 800080c:	9200      	str	r2, [sp, #0]
 800080e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000810:	f000 fc74 	bl	80010fc <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000814:	f000 fb66 	bl	8000ee4 <ssd1306_UpdateScreen>
  {
 8000818:	e767      	b.n	80006ea <main+0x6a>
 800081a:	bf00      	nop
 800081c:	24000098 	.word	0x24000098
 8000820:	08007250 	.word	0x08007250
 8000824:	0800724c 	.word	0x0800724c
 8000828:	08007fb8 	.word	0x08007fb8

0800082c <DriveAllRowPins>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void DriveAllRowPins(int state) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if (state) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d017      	beq.n	800086a <DriveAllRowPins+0x3e>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2140      	movs	r1, #64	@ 0x40
 800083e:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <DriveAllRowPins+0x74>)
 8000840:	f001 fcaa 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084a:	4816      	ldr	r0, [pc, #88]	@ (80008a4 <DriveAllRowPins+0x78>)
 800084c:	f001 fca4 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000856:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <DriveAllRowPins+0x7c>)
 8000858:	f001 fc9e 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000862:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <DriveAllRowPins+0x7c>)
 8000864:	f001 fc98 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
	}
}
 8000868:	e016      	b.n	8000898 <DriveAllRowPins+0x6c>
		HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <DriveAllRowPins+0x74>)
 8000870:	f001 fc92 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087a:	480a      	ldr	r0, [pc, #40]	@ (80008a4 <DriveAllRowPins+0x78>)
 800087c:	f001 fc8c 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000886:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <DriveAllRowPins+0x7c>)
 8000888:	f001 fc86 	bl	8002198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <DriveAllRowPins+0x7c>)
 8000894:	f001 fc80 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58020400 	.word	0x58020400
 80008a4:	58021800 	.word	0x58021800
 80008a8:	58021000 	.word	0x58021000

080008ac <DriveOneRowPin>:

void DriveOneRowPin(int row, int state) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	//Be aware that "row" as passed is zero-indexed
	//GPIOBANK and GPIOPIN constants are one-indexed
	switch (row) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d84d      	bhi.n	8000958 <DriveOneRowPin+0xac>
 80008bc:	a201      	add	r2, pc, #4	@ (adr r2, 80008c4 <DriveOneRowPin+0x18>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008f3 	.word	0x080008f3
 80008cc:	08000915 	.word	0x08000915
 80008d0:	08000937 	.word	0x08000937
		case 0:
			if (state) {
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d005      	beq.n	80008e6 <DriveOneRowPin+0x3a>
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	4821      	ldr	r0, [pc, #132]	@ (8000964 <DriveOneRowPin+0xb8>)
 80008e0:	f001 fc5a 	bl	8002198 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 80008e4:	e039      	b.n	800095a <DriveOneRowPin+0xae>
				HAL_GPIO_WritePin(R1GPIOBANK, R1GPIOPIN, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	@ 0x40
 80008ea:	481e      	ldr	r0, [pc, #120]	@ (8000964 <DriveOneRowPin+0xb8>)
 80008ec:	f001 fc54 	bl	8002198 <HAL_GPIO_WritePin>
			break;
 80008f0:	e033      	b.n	800095a <DriveOneRowPin+0xae>
		case 1:
			if (state) {
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <DriveOneRowPin+0x5a>
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fe:	481a      	ldr	r0, [pc, #104]	@ (8000968 <DriveOneRowPin+0xbc>)
 8000900:	f001 fc4a 	bl	8002198 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000904:	e029      	b.n	800095a <DriveOneRowPin+0xae>
				HAL_GPIO_WritePin(R2GPIOBANK, R2GPIOPIN, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800090c:	4816      	ldr	r0, [pc, #88]	@ (8000968 <DriveOneRowPin+0xbc>)
 800090e:	f001 fc43 	bl	8002198 <HAL_GPIO_WritePin>
			break;
 8000912:	e022      	b.n	800095a <DriveOneRowPin+0xae>
		case 2:
			if (state) {
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <DriveOneRowPin+0x7c>
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_SET);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000920:	4812      	ldr	r0, [pc, #72]	@ (800096c <DriveOneRowPin+0xc0>)
 8000922:	f001 fc39 	bl	8002198 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000926:	e018      	b.n	800095a <DriveOneRowPin+0xae>
				HAL_GPIO_WritePin(R3GPIOBANK, R3GPIOPIN, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	480f      	ldr	r0, [pc, #60]	@ (800096c <DriveOneRowPin+0xc0>)
 8000930:	f001 fc32 	bl	8002198 <HAL_GPIO_WritePin>
			break;
 8000934:	e011      	b.n	800095a <DriveOneRowPin+0xae>
		case 3:
			if (state) {
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <DriveOneRowPin+0x9e>
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000942:	480a      	ldr	r0, [pc, #40]	@ (800096c <DriveOneRowPin+0xc0>)
 8000944:	f001 fc28 	bl	8002198 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
			}
			break;
 8000948:	e007      	b.n	800095a <DriveOneRowPin+0xae>
				HAL_GPIO_WritePin(R4GPIOBANK, R4GPIOPIN, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000950:	4806      	ldr	r0, [pc, #24]	@ (800096c <DriveOneRowPin+0xc0>)
 8000952:	f001 fc21 	bl	8002198 <HAL_GPIO_WritePin>
			break;
 8000956:	e000      	b.n	800095a <DriveOneRowPin+0xae>
		default:
			break;
 8000958:	bf00      	nop
	}
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	58020400 	.word	0x58020400
 8000968:	58021800 	.word	0x58021800
 800096c:	58021000 	.word	0x58021000

08000970 <ReadOneColPin>:

int ReadOneColPin(int col) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	//Mind that the col variable is zero-indexed
	//GPIOBANK and GPIOPIN constants are one-indexed
	switch (col) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d82b      	bhi.n	80009d6 <ReadOneColPin+0x66>
 800097e:	a201      	add	r2, pc, #4	@ (adr r2, 8000984 <ReadOneColPin+0x14>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000999 	.word	0x08000999
 8000988:	080009a5 	.word	0x080009a5
 800098c:	080009b1 	.word	0x080009b1
 8000990:	080009bd 	.word	0x080009bd
 8000994:	080009c9 	.word	0x080009c9
		case 0:
			return(HAL_GPIO_ReadPin(C1GPIOBANK, C1GPIOPIN));
 8000998:	2101      	movs	r1, #1
 800099a:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <ReadOneColPin+0x74>)
 800099c:	f001 fbe4 	bl	8002168 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	e01b      	b.n	80009dc <ReadOneColPin+0x6c>
			break;
		case 1:
			return(HAL_GPIO_ReadPin(C2GPIOBANK, C2GPIOPIN));
 80009a4:	2108      	movs	r1, #8
 80009a6:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <ReadOneColPin+0x74>)
 80009a8:	f001 fbde 	bl	8002168 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	e015      	b.n	80009dc <ReadOneColPin+0x6c>
			break;
		case 2:
			return(HAL_GPIO_ReadPin(C3GPIOBANK, C3GPIOPIN));
 80009b0:	2102      	movs	r1, #2
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <ReadOneColPin+0x78>)
 80009b4:	f001 fbd8 	bl	8002168 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	e00f      	b.n	80009dc <ReadOneColPin+0x6c>
			break;
		case 3:
			return(HAL_GPIO_ReadPin(C4GPIOBANK, C4GPIOPIN));
 80009bc:	2104      	movs	r1, #4
 80009be:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <ReadOneColPin+0x74>)
 80009c0:	f001 fbd2 	bl	8002168 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	e009      	b.n	80009dc <ReadOneColPin+0x6c>
			break;
		case 4:
			return(HAL_GPIO_ReadPin(C5GPIOBANK, C5GPIOPIN));
 80009c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <ReadOneColPin+0x7c>)
 80009ce:	f001 fbcb 	bl	8002168 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e002      	b.n	80009dc <ReadOneColPin+0x6c>
			break;
		default:
			break;
 80009d6:	bf00      	nop
	}
	return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58020800 	.word	0x58020800
 80009e8:	58020400 	.word	0x58020400
 80009ec:	58021400 	.word	0x58021400

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09c      	sub	sp, #112	@ 0x70
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	224c      	movs	r2, #76	@ 0x4c
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f005 ffb2 	bl	8006968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2220      	movs	r2, #32
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 ffac 	bl	8006968 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <SystemClock_Config+0xe0>)
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f002 f88c 	bl	8002b38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <SystemClock_Config+0xe4>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad4 <SystemClock_Config+0xe4>)
 8000a2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <SystemClock_Config+0xe4>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <SystemClock_Config+0xe4>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a54:	2340      	movs	r3, #64	@ 0x40
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a64:	2308      	movs	r3, #8
 8000a66:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a74:	230c      	movs	r3, #12
 8000a76:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f8b1 	bl	8002bec <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a90:	f000 f966 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	233f      	movs	r3, #63	@ 0x3f
 8000a96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fcc9 	bl	8003450 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ac4:	f000 f94c 	bl	8000d60 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3770      	adds	r7, #112	@ 0x70
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	58024400 	.word	0x58024400
 8000ad4:	58024800 	.word	0x58024800

08000ad8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	@ (8000b50 <MX_I2C4_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <MX_I2C4_Init+0x7c>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b12:	480e      	ldr	r0, [pc, #56]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b14:	f001 fb5a 	bl	80021cc <HAL_I2C_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b1e:	f000 f91f 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4809      	ldr	r0, [pc, #36]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b26:	f001 ff6f 	bl	8002a08 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f000 f916 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_I2C4_Init+0x74>)
 8000b38:	f001 ffb1 	bl	8002a9e <HAL_I2CEx_ConfigDigitalFilter>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 f90d 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240000a8 	.word	0x240000a8
 8000b50:	58001c00 	.word	0x58001c00
 8000b54:	10707dbc 	.word	0x10707dbc

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b60      	ldr	r3, [pc, #384]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b74:	4a5e      	ldr	r2, [pc, #376]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8c:	4b58      	ldr	r3, [pc, #352]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b92:	4a57      	ldr	r2, [pc, #348]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000b9c:	4b54      	ldr	r3, [pc, #336]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b51      	ldr	r3, [pc, #324]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bba:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc8:	4b49      	ldr	r3, [pc, #292]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bce:	4a48      	ldr	r2, [pc, #288]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bd8:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bec:	4a40      	ldr	r2, [pc, #256]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c0a:	4a39      	ldr	r2, [pc, #228]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c10:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <MX_GPIO_Init+0x198>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c28:	4832      	ldr	r0, [pc, #200]	@ (8000cf4 <MX_GPIO_Init+0x19c>)
 8000c2a:	f001 fab5 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c34:	4830      	ldr	r0, [pc, #192]	@ (8000cf8 <MX_GPIO_Init+0x1a0>)
 8000c36:	f001 faaf 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	@ 0x40
 8000c3e:	482f      	ldr	r0, [pc, #188]	@ (8000cfc <MX_GPIO_Init+0x1a4>)
 8000c40:	f001 faaa 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000c44:	230d      	movs	r3, #13
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	482a      	ldr	r0, [pc, #168]	@ (8000d00 <MX_GPIO_Init+0x1a8>)
 8000c58:	f001 f8d6 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4823      	ldr	r0, [pc, #140]	@ (8000cfc <MX_GPIO_Init+0x1a4>)
 8000c70:	f001 f8ca 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	481e      	ldr	r0, [pc, #120]	@ (8000d04 <MX_GPIO_Init+0x1ac>)
 8000c8a:	f001 f8bd 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c8e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_GPIO_Init+0x19c>)
 8000ca8:	f001 f8ae 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_GPIO_Init+0x1a0>)
 8000cc6:	f001 f89f 	bl	8001e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cca:	2340      	movs	r3, #64	@ 0x40
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <MX_GPIO_Init+0x1a4>)
 8000ce2:	f001 f891 	bl	8001e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	@ 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58021000 	.word	0x58021000
 8000cf8:	58021800 	.word	0x58021800
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58020800 	.word	0x58020800
 8000d04:	58021400 	.word	0x58021400

08000d08 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d1a:	f000 ff99 	bl	8001c50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d2a:	231f      	movs	r3, #31
 8000d2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d2e:	2387      	movs	r3, #135	@ 0x87
 8000d30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ffb7 	bl	8001cc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d52:	2004      	movs	r0, #4
 8000d54:	f000 ff94 	bl	8001c80 <HAL_MPU_Enable>

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2301      	movs	r3, #1
 8000d96:	2200      	movs	r2, #0
 8000d98:	2178      	movs	r1, #120	@ 0x78
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <ssd1306_WriteCommand+0x2c>)
 8000d9c:	f001 fab2 	bl	8002304 <HAL_I2C_Mem_Write>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	240000a8 	.word	0x240000a8

08000dac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af04      	add	r7, sp, #16
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbe:	9202      	str	r2, [sp, #8]
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	2178      	movs	r1, #120	@ 0x78
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <ssd1306_WriteData+0x30>)
 8000dce:	f001 fa99 	bl	8002304 <HAL_I2C_Mem_Write>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	240000a8 	.word	0x240000a8

08000de0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000de4:	f7ff ffc2 	bl	8000d6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000de8:	2064      	movs	r0, #100	@ 0x64
 8000dea:	f000 fdfd 	bl	80019e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f9d6 	bl	80011a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000df4:	2020      	movs	r0, #32
 8000df6:	f7ff ffc1 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ffbe 	bl	8000d7c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e00:	20b0      	movs	r0, #176	@ 0xb0
 8000e02:	f7ff ffbb 	bl	8000d7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e06:	20c8      	movs	r0, #200	@ 0xc8
 8000e08:	f7ff ffb8 	bl	8000d7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ffb5 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e12:	2010      	movs	r0, #16
 8000e14:	f7ff ffb2 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e18:	2040      	movs	r0, #64	@ 0x40
 8000e1a:	f7ff ffaf 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000e1e:	20ff      	movs	r0, #255	@ 0xff
 8000e20:	f000 f9aa 	bl	8001178 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e24:	20a1      	movs	r0, #161	@ 0xa1
 8000e26:	f7ff ffa9 	bl	8000d7c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e2a:	20a6      	movs	r0, #166	@ 0xa6
 8000e2c:	f7ff ffa6 	bl	8000d7c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e30:	20a8      	movs	r0, #168	@ 0xa8
 8000e32:	f7ff ffa3 	bl	8000d7c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000e36:	203f      	movs	r0, #63	@ 0x3f
 8000e38:	f7ff ffa0 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e3c:	20a4      	movs	r0, #164	@ 0xa4
 8000e3e:	f7ff ff9d 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e42:	20d3      	movs	r0, #211	@ 0xd3
 8000e44:	f7ff ff9a 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff97 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e4e:	20d5      	movs	r0, #213	@ 0xd5
 8000e50:	f7ff ff94 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e54:	20f0      	movs	r0, #240	@ 0xf0
 8000e56:	f7ff ff91 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000e5a:	20d9      	movs	r0, #217	@ 0xd9
 8000e5c:	f7ff ff8e 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000e60:	2022      	movs	r0, #34	@ 0x22
 8000e62:	f7ff ff8b 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000e66:	20da      	movs	r0, #218	@ 0xda
 8000e68:	f7ff ff88 	bl	8000d7c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f7ff ff85 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000e72:	20db      	movs	r0, #219	@ 0xdb
 8000e74:	f7ff ff82 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000e78:	2020      	movs	r0, #32
 8000e7a:	f7ff ff7f 	bl	8000d7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000e7e:	208d      	movs	r0, #141	@ 0x8d
 8000e80:	f7ff ff7c 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000e84:	2014      	movs	r0, #20
 8000e86:	f7ff ff79 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 f988 	bl	80011a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f80f 	bl	8000eb4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000e96:	f000 f825 	bl	8000ee4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <ssd1306_Init+0xd0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <ssd1306_Init+0xd0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ea6:	4b02      	ldr	r3, [pc, #8]	@ (8000eb0 <ssd1306_Init+0xd0>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	711a      	strb	r2, [r3, #4]
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	240004fc 	.word	0x240004fc

08000eb4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <ssd1306_Fill+0x14>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e000      	b.n	8000eca <ssd1306_Fill+0x16>
 8000ec8:	23ff      	movs	r3, #255	@ 0xff
 8000eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <ssd1306_Fill+0x2c>)
 8000ed2:	f005 fd49 	bl	8006968 <memset>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	240000fc 	.word	0x240000fc

08000ee4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e016      	b.n	8000f1e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	3b50      	subs	r3, #80	@ 0x50
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff40 	bl	8000d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff3d 	bl	8000d7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f02:	2010      	movs	r0, #16
 8000f04:	f7ff ff3a 	bl	8000d7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	01db      	lsls	r3, r3, #7
 8000f0c:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <ssd1306_UpdateScreen+0x4c>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff4a 	bl	8000dac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9e5      	bls.n	8000ef0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	240000fc 	.word	0x240000fc

08000f34 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	4613      	mov	r3, r2
 8000f44:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db3d      	blt.n	8000fca <ssd1306_DrawPixel+0x96>
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f52:	d83a      	bhi.n	8000fca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000f54:	797b      	ldrb	r3, [r7, #5]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d11a      	bne.n	8000f90 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f5a:	79fa      	ldrb	r2, [r7, #7]
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	b2d8      	uxtb	r0, r3
 8000f62:	4603      	mov	r3, r0
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	4413      	add	r3, r2
 8000f68:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd8 <ssd1306_DrawPixel+0xa4>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	b25a      	sxtb	r2, r3
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b259      	sxtb	r1, r3
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	4603      	mov	r3, r0
 8000f84:	01db      	lsls	r3, r3, #7
 8000f86:	4413      	add	r3, r2
 8000f88:	b2c9      	uxtb	r1, r1
 8000f8a:	4a13      	ldr	r2, [pc, #76]	@ (8000fd8 <ssd1306_DrawPixel+0xa4>)
 8000f8c:	54d1      	strb	r1, [r2, r3]
 8000f8e:	e01d      	b.n	8000fcc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f90:	79fa      	ldrb	r2, [r7, #7]
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	4603      	mov	r3, r0
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd8 <ssd1306_DrawPixel+0xa4>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b259      	sxtb	r1, r3
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	01db      	lsls	r3, r3, #7
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b2c9      	uxtb	r1, r1
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <ssd1306_DrawPixel+0xa4>)
 8000fc6:	54d1      	strb	r1, [r2, r3]
 8000fc8:	e000      	b.n	8000fcc <ssd1306_DrawPixel+0x98>
        return;
 8000fca:	bf00      	nop
    }
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240000fc 	.word	0x240000fc

08000fdc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b089      	sub	sp, #36	@ 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000fea:	4623      	mov	r3, r4
 8000fec:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	d902      	bls.n	8000ffa <ssd1306_WriteChar+0x1e>
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ff8:	d901      	bls.n	8000ffe <ssd1306_WriteChar+0x22>
        return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e077      	b.n	80010ee <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	783b      	ldrb	r3, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	2b80      	cmp	r3, #128	@ 0x80
 800100a:	dc06      	bgt.n	800101a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	461a      	mov	r2, r3
 8001012:	787b      	ldrb	r3, [r7, #1]
 8001014:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001016:	2b40      	cmp	r3, #64	@ 0x40
 8001018:	dd01      	ble.n	800101e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800101a:	2300      	movs	r3, #0
 800101c:	e067      	b.n	80010ee <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e04e      	b.n	80010c2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3b20      	subs	r3, #32
 800102a:	7879      	ldrb	r1, [r7, #1]
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	4619      	mov	r1, r3
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	e036      	b.n	80010b2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	b2d8      	uxtb	r0, r3
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 8001064:	885b      	ldrh	r3, [r3, #2]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff ff5d 	bl	8000f34 <ssd1306_DrawPixel>
 800107a:	e017      	b.n	80010ac <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800107c:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b2d8      	uxtb	r0, r3
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 800108c:	885b      	ldrh	r3, [r3, #2]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b2d9      	uxtb	r1, r3
 8001098:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf0c      	ite	eq
 80010a0:	2301      	moveq	r3, #1
 80010a2:	2300      	movne	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	f7ff ff44 	bl	8000f34 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	783b      	ldrb	r3, [r7, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d3c3      	bcc.n	8001044 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3301      	adds	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	787b      	ldrb	r3, [r7, #1]
 80010c4:	461a      	mov	r2, r3
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d3ab      	bcc.n	8001024 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d005      	beq.n	80010e2 <ssd1306_WriteChar+0x106>
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	3a20      	subs	r2, #32
 80010dc:	440a      	add	r2, r1
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	e000      	b.n	80010e4 <ssd1306_WriteChar+0x108>
 80010e2:	783a      	ldrb	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <ssd1306_WriteChar+0x11c>)
 80010ea:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	@ 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240004fc 	.word	0x240004fc

080010fc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	4638      	mov	r0, r7
 8001106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800110a:	e013      	b.n	8001134 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	7818      	ldrb	r0, [r3, #0]
 8001110:	7e3b      	ldrb	r3, [r7, #24]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	463b      	mov	r3, r7
 8001116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001118:	f7ff ff60 	bl	8000fdc <ssd1306_WriteChar>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d002      	beq.n	800112e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	e008      	b.n	8001140 <ssd1306_WriteString+0x44>
        }
        str++;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3301      	adds	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e7      	bne.n	800110c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	781b      	ldrb	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <ssd1306_SetCursor+0x2c>)
 800115e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <ssd1306_SetCursor+0x2c>)
 8001166:	805a      	strh	r2, [r3, #2]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	240004fc 	.word	0x240004fc

08001178 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001182:	2381      	movs	r3, #129	@ 0x81
 8001184:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fdf7 	bl	8000d7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fdf3 	bl	8000d7c <ssd1306_WriteCommand>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80011b0:	23af      	movs	r3, #175	@ 0xaf
 80011b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <ssd1306_SetDisplayOn+0x38>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	715a      	strb	r2, [r3, #5]
 80011ba:	e004      	b.n	80011c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80011bc:	23ae      	movs	r3, #174	@ 0xae
 80011be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <ssd1306_SetDisplayOn+0x38>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fdd7 	bl	8000d7c <ssd1306_WriteCommand>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240004fc 	.word	0x240004fc

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <HAL_MspInit+0x30>)
 80011e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011e8:	4a08      	ldr	r2, [pc, #32]	@ (800120c <HAL_MspInit+0x30>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_MspInit+0x30>)
 80011f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	58024400 	.word	0x58024400

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0ba      	sub	sp, #232	@ 0xe8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	22c0      	movs	r2, #192	@ 0xc0
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fb99 	bl	8006968 <memset>
  if(hi2c->Instance==I2C4)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a27      	ldr	r2, [pc, #156]	@ (80012d8 <HAL_I2C_MspInit+0xc8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d146      	bne.n	80012ce <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001240:	f04f 0210 	mov.w	r2, #16
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fc86 	bl	8003b68 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001262:	f7ff fd7d 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 8001268:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800126c:	4a1b      	ldr	r2, [pc, #108]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 800126e:	f043 0320 	orr.w	r3, r3, #32
 8001272:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001276:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 8001278:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001284:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128c:	2312      	movs	r3, #18
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800129e:	2304      	movs	r3, #4
 80012a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <HAL_I2C_MspInit+0xd0>)
 80012ac:	f000 fdac 	bl	8001e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012bc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_I2C_MspInit+0xcc>)
 80012c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	37e8      	adds	r7, #232	@ 0xe8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58001c00 	.word	0x58001c00
 80012dc:	58024400 	.word	0x58024400
 80012e0:	58021400 	.word	0x58021400

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 fb35 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}

08001342 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f9dc 	bl	8001704 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f005 fafa 	bl	8006978 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	24100000 	.word	0x24100000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	24000504 	.word	0x24000504
 80013b8:	240006f0 	.word	0x240006f0

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013c0:	4b32      	ldr	r3, [pc, #200]	@ (800148c <SystemInit+0xd0>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a31      	ldr	r2, [pc, #196]	@ (800148c <SystemInit+0xd0>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <SystemInit+0xd4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d807      	bhi.n	80013ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <SystemInit+0xd4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 030f 	bic.w	r3, r3, #15
 80013e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001490 <SystemInit+0xd4>)
 80013e6:	f043 0303 	orr.w	r3, r3, #3
 80013ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013ec:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <SystemInit+0xd8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <SystemInit+0xd8>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <SystemInit+0xd8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemInit+0xd8>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4924      	ldr	r1, [pc, #144]	@ (8001494 <SystemInit+0xd8>)
 8001404:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <SystemInit+0xdc>)
 8001406:	4013      	ands	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <SystemInit+0xd4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <SystemInit+0xd4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 030f 	bic.w	r3, r3, #15
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <SystemInit+0xd4>)
 8001420:	f043 0303 	orr.w	r3, r3, #3
 8001424:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <SystemInit+0xd8>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <SystemInit+0xd8>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <SystemInit+0xd8>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <SystemInit+0xd8>)
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <SystemInit+0xe0>)
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <SystemInit+0xd8>)
 8001440:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <SystemInit+0xe4>)
 8001442:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <SystemInit+0xd8>)
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <SystemInit+0xe8>)
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800144a:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <SystemInit+0xd8>)
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <SystemInit+0xd8>)
 8001452:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <SystemInit+0xe8>)
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <SystemInit+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800145c:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <SystemInit+0xd8>)
 800145e:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <SystemInit+0xe8>)
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <SystemInit+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <SystemInit+0xd8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <SystemInit+0xd8>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <SystemInit+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800147a:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <SystemInit+0xec>)
 800147c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001480:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	52002000 	.word	0x52002000
 8001494:	58024400 	.word	0x58024400
 8001498:	eaf6ed7f 	.word	0xeaf6ed7f
 800149c:	02020200 	.word	0x02020200
 80014a0:	01ff0000 	.word	0x01ff0000
 80014a4:	01010280 	.word	0x01010280
 80014a8:	52004000 	.word	0x52004000

080014ac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <ExitRun0Mode+0x2c>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <ExitRun0Mode+0x2c>)
 80014b6:	f023 0302 	bic.w	r3, r3, #2
 80014ba:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80014bc:	bf00      	nop
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <ExitRun0Mode+0x2c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f9      	beq.n	80014be <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	58024800 	.word	0x58024800

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001518 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80014e0:	f7ff ffe4 	bl	80014ac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff ff6a 	bl	80013bc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	@ (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	@ (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800150e:	f005 fa39 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff f8b5 	bl	8000680 <main>
  bx  lr
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800151c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001520:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001524:	0800803c 	.word	0x0800803c
  ldr r2, =_sbss
 8001528:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 800152c:	240006f0 	.word	0x240006f0

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	@ 0x30
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d009      	beq.n	800155c <BSP_LED_Init+0x28>
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d006      	beq.n	800155c <BSP_LED_Init+0x28>
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d003      	beq.n	800155c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001554:	f06f 0301 	mvn.w	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155a:	e055      	b.n	8001608 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <BSP_LED_Init+0xe0>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001568:	4a2a      	ldr	r2, [pc, #168]	@ (8001614 <BSP_LED_Init+0xe0>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001572:	4b28      	ldr	r3, [pc, #160]	@ (8001614 <BSP_LED_Init+0xe0>)
 8001574:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	e021      	b.n	80015c6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10f      	bne.n	80015a8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001588:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <BSP_LED_Init+0xe0>)
 800158a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <BSP_LED_Init+0xe0>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001598:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <BSP_LED_Init+0xe0>)
 800159a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	e00e      	b.n	80015c6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80015a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <BSP_LED_Init+0xe0>)
 80015aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015ae:	4a19      	ldr	r2, [pc, #100]	@ (8001614 <BSP_LED_Init+0xe0>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015b8:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <BSP_LED_Init+0xe0>)
 80015ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4a13      	ldr	r2, [pc, #76]	@ (8001618 <BSP_LED_Init+0xe4>)
 80015ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ce:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a0f      	ldr	r2, [pc, #60]	@ (800161c <BSP_LED_Init+0xe8>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	f107 0218 	add.w	r2, r7, #24
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fc0c 	bl	8001e08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <BSP_LED_Init+0xe8>)
 80015f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <BSP_LED_Init+0xe4>)
 80015fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	f000 fdc8 	bl	8002198 <HAL_GPIO_WritePin>
  }

  return ret;
 8001608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800160a:	4618      	mov	r0, r3
 800160c:	3730      	adds	r7, #48	@ 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58024400 	.word	0x58024400
 8001618:	08007fd4 	.word	0x08007fd4
 800161c:	2400000c 	.word	0x2400000c

08001620 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001630:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <BSP_PB_Init+0xcc>)
 8001632:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001636:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <BSP_PB_Init+0xcc>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001640:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <BSP_PB_Init+0xcc>)
 8001642:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800164e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001652:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001654:	2302      	movs	r3, #2
 8001656:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	4a21      	ldr	r2, [pc, #132]	@ (80016f0 <BSP_PB_Init+0xd0>)
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	f107 020c 	add.w	r2, r7, #12
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fbc7 	bl	8001e08 <HAL_GPIO_Init>
 800167a:	e031      	b.n	80016e0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800167c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001680:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4a1a      	ldr	r2, [pc, #104]	@ (80016f0 <BSP_PB_Init+0xd0>)
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	f107 020c 	add.w	r2, r7, #12
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fbb9 	bl	8001e08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <BSP_PB_Init+0xd4>)
 800169c:	441a      	add	r2, r3
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4915      	ldr	r1, [pc, #84]	@ (80016f8 <BSP_PB_Init+0xd8>)
 80016a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f000 fb68 	bl	8001d7e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <BSP_PB_Init+0xd4>)
 80016b4:	1898      	adds	r0, r3, r2
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a10      	ldr	r2, [pc, #64]	@ (80016fc <BSP_PB_Init+0xdc>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	461a      	mov	r2, r3
 80016c0:	2100      	movs	r1, #0
 80016c2:	f000 fb3d 	bl	8001d40 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80016c6:	2028      	movs	r0, #40	@ 0x28
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <BSP_PB_Init+0xe0>)
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	f000 fa87 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80016d8:	2328      	movs	r3, #40	@ 0x28
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 fa9d 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3720      	adds	r7, #32
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	58024400 	.word	0x58024400
 80016f0:	24000018 	.word	0x24000018
 80016f4:	24000508 	.word	0x24000508
 80016f8:	08007fdc 	.word	0x08007fdc
 80016fc:	2400001c 	.word	0x2400001c
 8001700:	24000020 	.word	0x24000020

08001704 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <BSP_PB_IRQHandler+0x20>)
 8001714:	4413      	add	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fb46 	bl	8001da8 <HAL_EXTI_IRQHandler>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24000508 	.word	0x24000508

08001728 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001756:	f06f 0301 	mvn.w	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e018      	b.n	8001790 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2294      	movs	r2, #148	@ 0x94
 8001762:	fb02 f303 	mul.w	r3, r2, r3
 8001766:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <BSP_COM_Init+0x5c>)
 8001768:	4413      	add	r3, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f852 	bl	8001814 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2294      	movs	r2, #148	@ 0x94
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	4a08      	ldr	r2, [pc, #32]	@ (800179c <BSP_COM_Init+0x5c>)
 800177a:	4413      	add	r3, r2
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f80e 	bl	80017a0 <MX_USART3_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800178a:	f06f 0303 	mvn.w	r3, #3
 800178e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000510 	.word	0x24000510

080017a0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_USART3_Init+0x60>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	220c      	movs	r2, #12
 80017be:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	895b      	ldrh	r3, [r3, #10]
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	891b      	ldrh	r3, [r3, #8]
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	899b      	ldrh	r3, [r3, #12]
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017ec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f003 ff9a 	bl	8005728 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000008 	.word	0x24000008

08001804 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff ff8d 	bl	8001728 <BSP_PB_Callback>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <COM1_MspInit+0xa8>)
 800181e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001822:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <COM1_MspInit+0xa8>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <COM1_MspInit+0xa8>)
 800182e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <COM1_MspInit+0xa8>)
 800183c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001840:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <COM1_MspInit+0xa8>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <COM1_MspInit+0xa8>)
 800184c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <COM1_MspInit+0xa8>)
 800185a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800185e:	4a17      	ldr	r2, [pc, #92]	@ (80018bc <COM1_MspInit+0xa8>)
 8001860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001864:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <COM1_MspInit+0xa8>)
 800186a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800186e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001876:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001888:	2307      	movs	r3, #7
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <COM1_MspInit+0xac>)
 8001894:	f000 fab8 	bl	8001e08 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800189c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <COM1_MspInit+0xac>)
 80018ae:	f000 faab 	bl	8001e08 <HAL_GPIO_Init>
}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58020c00 	.word	0x58020c00

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ca:	2003      	movs	r0, #3
 80018cc:	f000 f980 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018d0:	f001 ff74 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_Init+0x68>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	4913      	ldr	r1, [pc, #76]	@ (8001930 <HAL_Init+0x6c>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001930 <HAL_Init+0x6c>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_Init+0x70>)
 8001906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001908:	4a0b      	ldr	r2, [pc, #44]	@ (8001938 <HAL_Init+0x74>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f814 	bl	800193c <HAL_InitTick>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e002      	b.n	8001924 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800191e:	f7ff fc5d 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	08007fc4 	.word	0x08007fc4
 8001934:	24000004 	.word	0x24000004
 8001938:	24000000 	.word	0x24000000

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_InitTick+0x60>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e021      	b.n	8001994 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_InitTick+0x64>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <HAL_InitTick+0x60>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f965 	bl	8001c36 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f92f 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x68>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24000028 	.word	0x24000028
 80019a0:	24000000 	.word	0x24000000
 80019a4:	24000024 	.word	0x24000024

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	24000028 	.word	0x24000028
 80019cc:	240005a4 	.word	0x240005a4

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	240005a4 	.word	0x240005a4

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000028 	.word	0x24000028

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x40>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	05fa0000 	.word	0x05fa0000

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	@ (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	@ (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	@ (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	@ 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff40 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff90 	bl	8001b24 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5f 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff33 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa4 	bl	8001b8c <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c54:	f3bf 8f5f 	dmb	sy
}
 8001c58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <HAL_MPU_Disable+0x28>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <HAL_MPU_Disable+0x28>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c64:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_MPU_Disable+0x2c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	e000ed90 	.word	0xe000ed90

08001c80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_MPU_Enable+0x38>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_MPU_Enable+0x3c>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <HAL_MPU_Enable+0x3c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9e:	f3bf 8f4f 	dsb	sy
}
 8001ca2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ca4:	f3bf 8f6f 	isb	sy
}
 8001ca8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed90 	.word	0xe000ed90
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	785a      	ldrb	r2, [r3, #1]
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_MPU_ConfigRegion+0x7c>)
 8001cce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_MPU_ConfigRegion+0x7c>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <HAL_MPU_ConfigRegion+0x7c>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cdc:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <HAL_MPU_ConfigRegion+0x7c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7b1b      	ldrb	r3, [r3, #12]
 8001ce8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7adb      	ldrb	r3, [r3, #11]
 8001cee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7a9b      	ldrb	r3, [r3, #10]
 8001cf6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7b5b      	ldrb	r3, [r3, #13]
 8001cfe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7b9b      	ldrb	r3, [r3, #14]
 8001d06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7bdb      	ldrb	r3, [r3, #15]
 8001d0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7a5b      	ldrb	r3, [r3, #9]
 8001d16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7a1b      	ldrb	r3, [r3, #8]
 8001d1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d2c:	6113      	str	r3, [r2, #16]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed90 	.word	0xe000ed90

08001d40 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00a      	b.n	8001d72 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]
      break;
 8001d68:	e002      	b.n	8001d70 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8001d6e:	bf00      	nop
  }

  return status;
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e003      	b.n	8001d9a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	011a      	lsls	r2, r3, #4
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_EXTI_IRQHandler+0x5c>)
 8001dd2:	4413      	add	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4798      	blx	r3
    }
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	58000088 	.word	0x58000088

08001e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_GPIO_Init+0x234>)
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e1a:	e194      	b.n	8002146 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8186 	beq.w	8002140 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x44>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	69b9      	ldr	r1, [r7, #24]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80e0 	beq.w	8002140 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b2f      	ldr	r3, [pc, #188]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f86:	4a2e      	ldr	r2, [pc, #184]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_GPIO_Init+0x238>)
 8001f92:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9e:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <HAL_GPIO_Init+0x23c>)
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a20      	ldr	r2, [pc, #128]	@ (8002048 <HAL_GPIO_Init+0x240>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d052      	beq.n	8002070 <HAL_GPIO_Init+0x268>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_GPIO_Init+0x244>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d031      	beq.n	8002036 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_GPIO_Init+0x248>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02b      	beq.n	8002032 <HAL_GPIO_Init+0x22a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_GPIO_Init+0x24c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d025      	beq.n	800202e <HAL_GPIO_Init+0x226>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_GPIO_Init+0x250>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <HAL_GPIO_Init+0x222>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_GPIO_Init+0x254>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0x21e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8002060 <HAL_GPIO_Init+0x258>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	@ (8002064 <HAL_GPIO_Init+0x25c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00d      	beq.n	800201e <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_GPIO_Init+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d007      	beq.n	800201a <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_GPIO_Init+0x264>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d101      	bne.n	8002016 <HAL_GPIO_Init+0x20e>
 8002012:	2309      	movs	r3, #9
 8002014:	e02d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002016:	230a      	movs	r3, #10
 8002018:	e02b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201a:	2308      	movs	r3, #8
 800201c:	e029      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800201e:	2307      	movs	r3, #7
 8002020:	e027      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002022:	2306      	movs	r3, #6
 8002024:	e025      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002026:	2305      	movs	r3, #5
 8002028:	e023      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202a:	2304      	movs	r3, #4
 800202c:	e021      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800202e:	2303      	movs	r3, #3
 8002030:	e01f      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002032:	2302      	movs	r3, #2
 8002034:	e01d      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 8002036:	2301      	movs	r3, #1
 8002038:	e01b      	b.n	8002072 <HAL_GPIO_Init+0x26a>
 800203a:	bf00      	nop
 800203c:	58000080 	.word	0x58000080
 8002040:	58024400 	.word	0x58024400
 8002044:	58000400 	.word	0x58000400
 8002048:	58020000 	.word	0x58020000
 800204c:	58020400 	.word	0x58020400
 8002050:	58020800 	.word	0x58020800
 8002054:	58020c00 	.word	0x58020c00
 8002058:	58021000 	.word	0x58021000
 800205c:	58021400 	.word	0x58021400
 8002060:	58021800 	.word	0x58021800
 8002064:	58021c00 	.word	0x58021c00
 8002068:	58022000 	.word	0x58022000
 800206c:	58022400 	.word	0x58022400
 8002070:	2300      	movs	r3, #0
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002082:	4938      	ldr	r1, [pc, #224]	@ (8002164 <HAL_GPIO_Init+0x35c>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f ae63 	bne.w	8001e1c <HAL_GPIO_Init+0x14>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3724      	adds	r7, #36	@ 0x24
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	58000400 	.word	0x58000400

08002168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e001      	b.n	800218a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e08b      	b.n	80022f6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff f80c 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	@ 0x24
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800221c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800222c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e006      	b.n	8002254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d108      	bne.n	800226e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	e007      	b.n	800227e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_I2C_Init+0x134>)
 800228a:	430b      	orrs	r3, r1
 800228c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800229c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69d9      	ldr	r1, [r3, #28]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1a      	ldr	r2, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	02008000 	.word	0x02008000

08002304 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 80f9 	bne.w	800251e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_I2C_Mem_Write+0x34>
 8002332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800233e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0ed      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Mem_Write+0x4e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0e6      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800235a:	f7ff fb39 	bl	80019d0 <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2319      	movs	r3, #25
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f955 	bl	800261c <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d1      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	@ 0x21
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800239c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a4:	88f8      	ldrh	r0, [r7, #6]
 80023a6:	893a      	ldrh	r2, [r7, #8]
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4603      	mov	r3, r0
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8b9 	bl	800252c <I2C_RequestMemoryWrite>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0a9      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d90e      	bls.n	80023f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	22ff      	movs	r2, #255	@ 0xff
 80023da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fad9 	bl	80029a4 <I2C_TransferConfig>
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fac8 	bl	80029a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f958 	bl	80026ce <I2C_WaitOnTXISFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e07b      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d034      	beq.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d130      	bne.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002470:	2200      	movs	r2, #0
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f8d1 	bl	800261c <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e04d      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2bff      	cmp	r3, #255	@ 0xff
 800248c:	d90e      	bls.n	80024ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	22ff      	movs	r2, #255	@ 0xff
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fa7d 	bl	80029a4 <I2C_TransferConfig>
 80024aa:	e00f      	b.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fa6c 	bl	80029a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d19e      	bne.n	8002414 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f93e 	bl	800275c <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e01a      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2220      	movs	r2, #32
 80024f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_I2C_Mem_Write+0x224>)
 80024fe:	400b      	ands	r3, r1
 8002500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800251e:	2302      	movs	r3, #2
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	fe00e800 	.word	0xfe00e800

0800252c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	8979      	ldrh	r1, [r7, #10]
 800254c:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <I2C_RequestMemoryWrite+0xa4>)
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fa25 	bl	80029a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	69b9      	ldr	r1, [r7, #24]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8b5 	bl	80026ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02c      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
 800257e:	e015      	b.n	80025ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29b      	uxth	r3, r3
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	69b9      	ldr	r1, [r7, #24]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f89b 	bl	80026ce <I2C_WaitOnTXISFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e012      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025a2:	893b      	ldrh	r3, [r7, #8]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f830 	bl	800261c <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	80002000 	.word	0x80002000

080025d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d007      	beq.n	8002610 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	619a      	str	r2, [r3, #24]
  }
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800262c:	e03b      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f8d6 	bl	80027e4 <I2C_IsErrorOccurred>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e041      	b.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d02d      	beq.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f9c1 	bl	80019d0 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x44>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d122      	bne.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d113      	bne.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d0b4      	beq.n	800262e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026da:	e033      	b.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f87f 	bl	80027e4 <I2C_IsErrorOccurred>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e031      	b.n	8002754 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d025      	beq.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7ff f96a 	bl	80019d0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11a      	bne.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b02      	cmp	r3, #2
 800271a:	d013      	beq.n	8002744 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d1c4      	bne.n	80026dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002768:	e02f      	b.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f838 	bl	80027e4 <I2C_IsErrorOccurred>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e02d      	b.n	80027da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277e:	f7ff f927 	bl	80019d0 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11a      	bne.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d013      	beq.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d1c8      	bne.n	800276a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d068      	beq.n	80028e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2210      	movs	r2, #16
 8002816:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002818:	e049      	b.n	80028ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d045      	beq.n	80028ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7ff f8d5 	bl	80019d0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_IsErrorOccurred+0x54>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d13a      	bne.n	80028ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800284a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002856:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800285a:	d121      	bne.n	80028a0 <I2C_IsErrorOccurred+0xbc>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002862:	d01d      	beq.n	80028a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	2b20      	cmp	r3, #32
 8002868:	d01a      	beq.n	80028a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002878:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800287a:	f7ff f8a9 	bl	80019d0 <HAL_GetTick>
 800287e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002880:	e00e      	b.n	80028a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002882:	f7ff f8a5 	bl	80019d0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b19      	cmp	r3, #25
 800288e:	d907      	bls.n	80028a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f043 0320 	orr.w	r3, r3, #32
 8002896:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800289e:	e006      	b.n	80028ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d1e9      	bne.n	8002882 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d003      	beq.n	80028c4 <I2C_IsErrorOccurred+0xe0>
 80028bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0aa      	beq.n	800281a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002926:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00b      	beq.n	8002950 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002948:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01c      	beq.n	8002992 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fe3b 	bl	80025d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <I2C_IsErrorOccurred+0x1bc>)
 800296a:	400b      	ands	r3, r1
 800296c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002996:	4618      	mov	r0, r3
 8002998:	3728      	adds	r7, #40	@ 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	fe00e800 	.word	0xfe00e800

080029a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	4613      	mov	r3, r2
 80029b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029bc:	7a7b      	ldrb	r3, [r7, #9]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029c4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029d2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	0d5b      	lsrs	r3, r3, #21
 80029de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029e2:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <I2C_TransferConfig+0x60>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	43db      	mvns	r3, r3
 80029e8:	ea02 0103 	and.w	r1, r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	03ff63ff 	.word	0x03ff63ff

08002a08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d138      	bne.n	8002a90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e032      	b.n	8002a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	@ 0x24
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d139      	bne.n	8002b28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e033      	b.n	8002b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2224      	movs	r2, #36	@ 0x24
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b40:	4b29      	ldr	r3, [pc, #164]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d00a      	beq.n	8002b62 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b4c:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e040      	b.n	8002be0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e03e      	b.n	8002be0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b62:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002b6a:	491f      	ldr	r1, [pc, #124]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b72:	f7fe ff2d 	bl	80019d0 <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b78:	e009      	b.n	8002b8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b7a:	f7fe ff29 	bl	80019d0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b88:	d901      	bls.n	8002b8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e028      	b.n	8002be0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b8e:	4b16      	ldr	r3, [pc, #88]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b1e      	cmp	r3, #30
 8002ba0:	d008      	beq.n	8002bb4 <HAL_PWREx_ConfigSupply+0x7c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ba6:	d005      	beq.n	8002bb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b1d      	cmp	r3, #29
 8002bac:	d002      	beq.n	8002bb4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b2d      	cmp	r3, #45	@ 0x2d
 8002bb2:	d114      	bne.n	8002bde <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bb4:	f7fe ff0c 	bl	80019d0 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bba:	e009      	b.n	8002bd0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bbc:	f7fe ff08 	bl	80019d0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bca:	d901      	bls.n	8002bd0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bd0:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	58024800 	.word	0x58024800

08002bec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f000 bc1f 	b.w	800343e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b3 	beq.w	8002d74 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b95      	ldr	r3, [pc, #596]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c18:	4b92      	ldr	r3, [pc, #584]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_OscConfig+0x48>
 8002c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x64>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	4b8b      	ldr	r3, [pc, #556]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8098 	beq.w	8002d72 <HAL_RCC_OscConfig+0x186>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8093 	bne.w	8002d72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e3f6      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCC_OscConfig+0x7c>
 8002c5a:	4b82      	ldr	r3, [pc, #520]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a81      	ldr	r2, [pc, #516]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e058      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d112      	bne.n	8002c96 <HAL_RCC_OscConfig+0xaa>
 8002c70:	4b7c      	ldr	r3, [pc, #496]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a7b      	ldr	r2, [pc, #492]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b79      	ldr	r3, [pc, #484]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a78      	ldr	r2, [pc, #480]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c82:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b76      	ldr	r3, [pc, #472]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a75      	ldr	r2, [pc, #468]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e041      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c9e:	d112      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xda>
 8002ca0:	4b70      	ldr	r3, [pc, #448]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002ca6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b6d      	ldr	r3, [pc, #436]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6c      	ldr	r2, [pc, #432]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cb2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a69      	ldr	r2, [pc, #420]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e029      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002cce:	d112      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x10a>
 8002cd0:	4b64      	ldr	r3, [pc, #400]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a63      	ldr	r2, [pc, #396]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a60      	ldr	r2, [pc, #384]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x12e>
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b58      	ldr	r3, [pc, #352]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a57      	ldr	r2, [pc, #348]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a54      	ldr	r2, [pc, #336]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d013      	beq.n	8002d4a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fe55 	bl	80019d0 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fe51 	bl	80019d0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	@ 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e380      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d3c:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x13e>
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fe41 	bl	80019d0 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d52:	f7fe fe3d 	bl	80019d0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	@ 0x64
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e36c      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d64:	4b3f      	ldr	r3, [pc, #252]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x166>
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 808c 	beq.w	8002e9a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d8a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d8c:	4b35      	ldr	r3, [pc, #212]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d90:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1bc>
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	2b18      	cmp	r3, #24
 8002d9c:	d137      	bne.n	8002e0e <HAL_RCC_OscConfig+0x222>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d132      	bne.n	8002e0e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x1d4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e33e      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 0219 	bic.w	r2, r3, #25
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4925      	ldr	r1, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fdfd 	bl	80019d0 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe fdf9 	bl	80019d0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e328      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	061b      	lsls	r3, r3, #24
 8002e06:	4917      	ldr	r1, [pc, #92]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0c:	e045      	b.n	8002e9a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d028      	beq.n	8002e68 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e16:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0219 	bic.w	r2, r3, #25
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4910      	ldr	r1, [pc, #64]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fdd2 	bl	80019d0 <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fdce 	bl	80019d0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e2fd      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e42:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	061b      	lsls	r3, r3, #24
 8002e5c:	4901      	ldr	r1, [pc, #4]	@ (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e01a      	b.n	8002e9a <HAL_RCC_OscConfig+0x2ae>
 8002e64:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e68:	4b97      	ldr	r3, [pc, #604]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a96      	ldr	r2, [pc, #600]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe fdac 	bl	80019d0 <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7c:	f7fe fda8 	bl	80019d0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e2d7      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d06a      	beq.n	8002f7c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea6:	4b88      	ldr	r3, [pc, #544]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eb0:	4b85      	ldr	r3, [pc, #532]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d007      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2e0>
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b18      	cmp	r3, #24
 8002ec0:	d11b      	bne.n	8002efa <HAL_RCC_OscConfig+0x30e>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d116      	bne.n	8002efa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2f8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e2ac      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee4:	4b78      	ldr	r3, [pc, #480]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	4975      	ldr	r1, [pc, #468]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef8:	e040      	b.n	8002f7c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d023      	beq.n	8002f4a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f02:	4b71      	ldr	r3, [pc, #452]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a70      	ldr	r2, [pc, #448]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fd5f 	bl	80019d0 <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f16:	f7fe fd5b 	bl	80019d0 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e28a      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f28:	4b67      	ldr	r3, [pc, #412]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f34:	4b64      	ldr	r3, [pc, #400]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	4961      	ldr	r1, [pc, #388]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e018      	b.n	8002f7c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe fd3b 	bl	80019d0 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fd37 	bl	80019d0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e266      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f70:	4b55      	ldr	r3, [pc, #340]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d036      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f90:	4b4d      	ldr	r3, [pc, #308]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f94:	4a4c      	ldr	r2, [pc, #304]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fd18 	bl	80019d0 <HAL_GetTick>
 8002fa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fd14 	bl	80019d0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e243      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fb6:	4b44      	ldr	r3, [pc, #272]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x3b8>
 8002fc2:	e018      	b.n	8002ff6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc4:	4b40      	ldr	r3, [pc, #256]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fcfe 	bl	80019d0 <HAL_GetTick>
 8002fd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fcfa 	bl	80019d0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e229      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fea:	4b37      	ldr	r3, [pc, #220]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d019      	beq.n	800303e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800300a:	4b2f      	ldr	r3, [pc, #188]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2e      	ldr	r2, [pc, #184]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8003010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003014:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003016:	f7fe fcdb 	bl	80019d0 <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301e:	f7fe fcd7 	bl	80019d0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e206      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x432>
 800303c:	e018      	b.n	8003070 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800303e:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8003044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003048:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800304a:	f7fe fcc1 	bl	80019d0 <HAL_GetTick>
 800304e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003052:	f7fe fcbd 	bl	80019d0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e1ec      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003064:	4b18      	ldr	r3, [pc, #96]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80af 	beq.w	80031dc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800307e:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <HAL_RCC_OscConfig+0x4e0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <HAL_RCC_OscConfig+0x4e0>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308a:	f7fe fca1 	bl	80019d0 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fe fc9d 	bl	80019d0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	@ 0x64
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1cc      	b.n	800343e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <HAL_RCC_OscConfig+0x4e0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10b      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4e4>
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	4a02      	ldr	r2, [pc, #8]	@ (80030c8 <HAL_RCC_OscConfig+0x4dc>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c4:	e05b      	b.n	800317e <HAL_RCC_OscConfig+0x592>
 80030c6:	bf00      	nop
 80030c8:	58024400 	.word	0x58024400
 80030cc:	58024800 	.word	0x58024800
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d112      	bne.n	80030fe <HAL_RCC_OscConfig+0x512>
 80030d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030dc:	4a9c      	ldr	r2, [pc, #624]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e4:	4b9a      	ldr	r3, [pc, #616]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	4a99      	ldr	r2, [pc, #612]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f0:	4b97      	ldr	r3, [pc, #604]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	4a96      	ldr	r2, [pc, #600]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030fc:	e03f      	b.n	800317e <HAL_RCC_OscConfig+0x592>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x540>
 8003106:	4b92      	ldr	r3, [pc, #584]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310a:	4a91      	ldr	r2, [pc, #580]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6713      	str	r3, [r2, #112]	@ 0x70
 8003112:	4b8f      	ldr	r3, [pc, #572]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	4a8e      	ldr	r2, [pc, #568]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800311c:	6713      	str	r3, [r2, #112]	@ 0x70
 800311e:	4b8c      	ldr	r3, [pc, #560]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	4a8b      	ldr	r2, [pc, #556]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	@ 0x70
 800312a:	e028      	b.n	800317e <HAL_RCC_OscConfig+0x592>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b85      	cmp	r3, #133	@ 0x85
 8003132:	d112      	bne.n	800315a <HAL_RCC_OscConfig+0x56e>
 8003134:	4b86      	ldr	r3, [pc, #536]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a85      	ldr	r2, [pc, #532]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003140:	4b83      	ldr	r3, [pc, #524]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a82      	ldr	r2, [pc, #520]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b80      	ldr	r3, [pc, #512]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a7f      	ldr	r2, [pc, #508]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	e011      	b.n	800317e <HAL_RCC_OscConfig+0x592>
 800315a:	4b7d      	ldr	r3, [pc, #500]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a7c      	ldr	r2, [pc, #496]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	4b7a      	ldr	r3, [pc, #488]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	4a79      	ldr	r2, [pc, #484]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	6713      	str	r3, [r2, #112]	@ 0x70
 8003172:	4b77      	ldr	r3, [pc, #476]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a76      	ldr	r2, [pc, #472]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003178:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fe fc23 	bl	80019d0 <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fc1f 	bl	80019d0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e14c      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x5a2>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe fc0d 	bl	80019d0 <HAL_GetTick>
 80031b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe fc09 	bl	80019d0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e136      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 812b 	beq.w	800343c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ee:	2b18      	cmp	r3, #24
 80031f0:	f000 80bb 	beq.w	800336a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f040 8095 	bne.w	8003328 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a53      	ldr	r2, [pc, #332]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003204:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fbe1 	bl	80019d0 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fbdd 	bl	80019d0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e10c      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003224:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003232:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003234:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_OscConfig+0x768>)
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	430a      	orrs	r2, r1
 8003244:	4942      	ldr	r1, [pc, #264]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003246:	4313      	orrs	r3, r2
 8003248:	628b      	str	r3, [r1, #40]	@ 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	3b01      	subs	r3, #1
 8003250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	3b01      	subs	r3, #1
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	b29b      	uxth	r3, r3
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	3b01      	subs	r3, #1
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800327a:	4935      	ldr	r1, [pc, #212]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800327c:	4313      	orrs	r3, r2
 800327e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003280:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800328c:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800328e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003290:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_RCC_OscConfig+0x76c>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003298:	00d2      	lsls	r2, r2, #3
 800329a:	492d      	ldr	r1, [pc, #180]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800329c:	4313      	orrs	r3, r2
 800329e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	f023 020c 	bic.w	r2, r3, #12
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	4928      	ldr	r1, [pc, #160]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032b2:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	f023 0202 	bic.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4924      	ldr	r1, [pc, #144]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032c4:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	4a18      	ldr	r2, [pc, #96]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b16      	ldr	r3, [pc, #88]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fb66 	bl	80019d0 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fb62 	bl	80019d0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e091      	b.n	800343e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x71c>
 8003326:	e089      	b.n	800343c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_RCC_OscConfig+0x764>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fb4c 	bl	80019d0 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333a:	e00f      	b.n	800335c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fb48 	bl	80019d0 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d908      	bls.n	800335c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e077      	b.n	800343e <HAL_RCC_OscConfig+0x852>
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	fffffc0c 	.word	0xfffffc0c
 8003358:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e9      	bne.n	800333c <HAL_RCC_OscConfig+0x750>
 8003368:	e068      	b.n	800343c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800336a:	4b37      	ldr	r3, [pc, #220]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003370:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	2b01      	cmp	r3, #1
 800337c:	d031      	beq.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d12a      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d122      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d11a      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d111      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d108      	bne.n	80033e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	0e1b      	lsrs	r3, r3, #24
 80033d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e02b      	b.n	800343e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 80033e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ea:	08db      	lsrs	r3, r3, #3
 80033ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033f0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d01f      	beq.n	800343c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003408:	f7fe fae2 	bl	80019d0 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800340e:	bf00      	nop
 8003410:	f7fe fade 	bl	80019d0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	4293      	cmp	r3, r2
 800341a:	d0f9      	beq.n	8003410 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 800341e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_RCC_OscConfig+0x860>)
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	4907      	ldr	r1, [pc, #28]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_RCC_OscConfig+0x85c>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	@ 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	58024400 	.word	0x58024400
 800344c:	ffff0007 	.word	0xffff0007

08003450 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e19c      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b8a      	ldr	r3, [pc, #552]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b87      	ldr	r3, [pc, #540]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	4985      	ldr	r1, [pc, #532]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b83      	ldr	r3, [pc, #524]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e184      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d908      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034b0:	4b78      	ldr	r3, [pc, #480]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4975      	ldr	r1, [pc, #468]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	4b70      	ldr	r3, [pc, #448]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034da:	429a      	cmp	r2, r3
 80034dc:	d908      	bls.n	80034f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034de:	4b6d      	ldr	r3, [pc, #436]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	496a      	ldr	r1, [pc, #424]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	4b64      	ldr	r3, [pc, #400]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003508:	429a      	cmp	r2, r3
 800350a:	d908      	bls.n	800351e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800350c:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	495e      	ldr	r1, [pc, #376]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800351a:	4313      	orrs	r3, r2
 800351c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d010      	beq.n	800354c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	4b59      	ldr	r3, [pc, #356]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003536:	429a      	cmp	r2, r3
 8003538:	d908      	bls.n	800354c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800353a:	4b56      	ldr	r3, [pc, #344]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4953      	ldr	r1, [pc, #332]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b4d      	ldr	r3, [pc, #308]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	429a      	cmp	r2, r3
 8003566:	d908      	bls.n	800357a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b4a      	ldr	r3, [pc, #296]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f023 020f 	bic.w	r2, r3, #15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4947      	ldr	r1, [pc, #284]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003576:	4313      	orrs	r3, r2
 8003578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d055      	beq.n	8003632 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003586:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4940      	ldr	r1, [pc, #256]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003594:	4313      	orrs	r3, r2
 8003596:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d121      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0f6      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035b8:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d115      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0ea      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035d0:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0de      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d6      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f0:	4b28      	ldr	r3, [pc, #160]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f023 0207 	bic.w	r2, r3, #7
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4925      	ldr	r1, [pc, #148]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003602:	f7fe f9e5 	bl	80019d0 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003608:	e00a      	b.n	8003620 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360a:	f7fe f9e1 	bl	80019d0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0be      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	429a      	cmp	r2, r3
 8003630:	d1eb      	bne.n	800360a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	429a      	cmp	r2, r3
 800364c:	d208      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	490e      	ldr	r1, [pc, #56]	@ (8003694 <HAL_RCC_ClockConfig+0x244>)
 800365c:	4313      	orrs	r3, r2
 800365e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d214      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	4906      	ldr	r1, [pc, #24]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <HAL_RCC_ClockConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e086      	b.n	800379e <HAL_RCC_ClockConfig+0x34e>
 8003690:	52002000 	.word	0x52002000
 8003694:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d208      	bcs.n	80036c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036b4:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4939      	ldr	r1, [pc, #228]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036de:	429a      	cmp	r2, r3
 80036e0:	d208      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036e2:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	492e      	ldr	r1, [pc, #184]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800370c:	429a      	cmp	r2, r3
 800370e:	d208      	bcs.n	8003722 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4922      	ldr	r1, [pc, #136]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 800371e:	4313      	orrs	r3, r2
 8003720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800373a:	429a      	cmp	r2, r3
 800373c:	d208      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800373e:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4917      	ldr	r1, [pc, #92]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 800374c:	4313      	orrs	r3, r2
 800374e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003750:	f000 f834 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b14      	ldr	r3, [pc, #80]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4912      	ldr	r1, [pc, #72]	@ (80037ac <HAL_RCC_ClockConfig+0x35c>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800376e:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <HAL_RCC_ClockConfig+0x358>)
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <HAL_RCC_ClockConfig+0x35c>)
 8003778:	5cd3      	ldrb	r3, [r2, r3]
 800377a:	f003 031f 	and.w	r3, r3, #31
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <HAL_RCC_ClockConfig+0x360>)
 8003786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x364>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_RCC_ClockConfig+0x368>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f8d2 	bl	800193c <HAL_InitTick>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
 80037ac:	08007fc4 	.word	0x08007fc4
 80037b0:	24000004 	.word	0x24000004
 80037b4:	24000000 	.word	0x24000000
 80037b8:	24000024 	.word	0x24000024

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	@ 0x24
 80037c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c2:	4bb3      	ldr	r3, [pc, #716]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037ca:	2b18      	cmp	r3, #24
 80037cc:	f200 8155 	bhi.w	8003a7a <HAL_RCC_GetSysClockFreq+0x2be>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	08003a7b 	.word	0x08003a7b
 80037e0:	08003a7b 	.word	0x08003a7b
 80037e4:	08003a7b 	.word	0x08003a7b
 80037e8:	08003a7b 	.word	0x08003a7b
 80037ec:	08003a7b 	.word	0x08003a7b
 80037f0:	08003a7b 	.word	0x08003a7b
 80037f4:	08003a7b 	.word	0x08003a7b
 80037f8:	08003863 	.word	0x08003863
 80037fc:	08003a7b 	.word	0x08003a7b
 8003800:	08003a7b 	.word	0x08003a7b
 8003804:	08003a7b 	.word	0x08003a7b
 8003808:	08003a7b 	.word	0x08003a7b
 800380c:	08003a7b 	.word	0x08003a7b
 8003810:	08003a7b 	.word	0x08003a7b
 8003814:	08003a7b 	.word	0x08003a7b
 8003818:	08003869 	.word	0x08003869
 800381c:	08003a7b 	.word	0x08003a7b
 8003820:	08003a7b 	.word	0x08003a7b
 8003824:	08003a7b 	.word	0x08003a7b
 8003828:	08003a7b 	.word	0x08003a7b
 800382c:	08003a7b 	.word	0x08003a7b
 8003830:	08003a7b 	.word	0x08003a7b
 8003834:	08003a7b 	.word	0x08003a7b
 8003838:	0800386f 	.word	0x0800386f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800383c:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003848:	4b91      	ldr	r3, [pc, #580]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	4a90      	ldr	r2, [pc, #576]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
 8003858:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800385a:	e111      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800385c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800385e:	61bb      	str	r3, [r7, #24]
      break;
 8003860:	e10e      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003862:	4b8d      	ldr	r3, [pc, #564]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003864:	61bb      	str	r3, [r7, #24]
      break;
 8003866:	e10b      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003868:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800386a:	61bb      	str	r3, [r7, #24]
      break;
 800386c:	e108      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800386e:	4b88      	ldr	r3, [pc, #544]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003878:	4b85      	ldr	r3, [pc, #532]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003882:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003884:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800388e:	4b80      	ldr	r3, [pc, #512]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003892:	08db      	lsrs	r3, r3, #3
 8003894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80e1 	beq.w	8003a74 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f000 8083 	beq.w	80039c0 <HAL_RCC_GetSysClockFreq+0x204>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	f200 80a1 	bhi.w	8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x114>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d056      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x1c0>
 80038ce:	e099      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02d      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	4a6b      	ldr	r2, [pc, #428]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003906:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003916:	ed97 6a02 	vldr	s12, [r7, #8]
 800391a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800391e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003932:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003936:	e087      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003aa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394a:	4b51      	ldr	r3, [pc, #324]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395a:	ed97 6a02 	vldr	s12, [r7, #8]
 800395e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800396e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800397a:	e065      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003aa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800398a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398e:	4b40      	ldr	r3, [pc, #256]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399e:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039be:	e043      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x2f0>
 80039ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a02:	e021      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003aa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003aa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	0a5b      	lsrs	r3, r3, #9
 8003a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a52:	3301      	adds	r3, #1
 8003a54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	ee07 3a90 	vmov	s15, r3
 8003a5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6c:	ee17 3a90 	vmov	r3, s15
 8003a70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
      break;
 8003a78:	e002      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a7c:	61bb      	str	r3, [r7, #24]
      break;
 8003a7e:	bf00      	nop
  }

  return sysclockfreq;
 8003a80:	69bb      	ldr	r3, [r7, #24]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	@ 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	58024400 	.word	0x58024400
 8003a94:	03d09000 	.word	0x03d09000
 8003a98:	003d0900 	.word	0x003d0900
 8003a9c:	007a1200 	.word	0x007a1200
 8003aa0:	46000000 	.word	0x46000000
 8003aa4:	4c742400 	.word	0x4c742400
 8003aa8:	4a742400 	.word	0x4a742400
 8003aac:	4af42400 	.word	0x4af42400

08003ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ab6:	f7ff fe81 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490f      	ldr	r1, [pc, #60]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	4a09      	ldr	r2, [pc, #36]	@ (8003b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a07      	ldr	r2, [pc, #28]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003aec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aee:	4a07      	ldr	r2, [pc, #28]	@ (8003b0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003af4:	4b04      	ldr	r3, [pc, #16]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	58024400 	.word	0x58024400
 8003b04:	08007fc4 	.word	0x08007fc4
 8003b08:	24000004 	.word	0x24000004
 8003b0c:	24000000 	.word	0x24000000

08003b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003b14:	f7ff ffcc 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4904      	ldr	r1, [pc, #16]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	58024400 	.word	0x58024400
 8003b38:	08007fc4 	.word	0x08007fc4

08003b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003b40:	f7ff ffb6 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4904      	ldr	r1, [pc, #16]	@ (8003b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	08007fc4 	.word	0x08007fc4

08003b68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b0c8      	sub	sp, #288	@ 0x120
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	ea54 0305 	orrs.w	r3, r4, r5
 8003b92:	d049      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b9e:	d02f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ba4:	d828      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003baa:	d01a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb0:	d822      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bba:	d007      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbe:	4ba7      	ldr	r3, [pc, #668]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc2:	4aa6      	ldr	r2, [pc, #664]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bca:	e01a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fc43 	bl	8005460 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fcea 	bl	80055c4 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c0a:	4b94      	ldr	r3, [pc, #592]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c18:	4a90      	ldr	r2, [pc, #576]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	ea58 0309 	orrs.w	r3, r8, r9
 8003c3c:	d047      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d82a      	bhi.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c73 	.word	0x08003c73
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003ca7 	.word	0x08003ca7
 8003c60:	08003ca7 	.word	0x08003ca7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b7d      	ldr	r3, [pc, #500]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	4a7c      	ldr	r2, [pc, #496]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c70:	e01a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c76:	3308      	adds	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fbf0 	bl	8005460 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c86:	e00f      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c8c:	3328      	adds	r3, #40	@ 0x28
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f001 fc97 	bl	80055c4 <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	f023 0107 	bic.w	r1, r3, #7
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbe:	4a67      	ldr	r2, [pc, #412]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003cda:	f04f 0b00 	mov.w	fp, #0
 8003cde:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ce2:	d054      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cee:	d036      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003cf0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cf4:	d82f      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cfa:	d032      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d00:	d829      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d04:	d02f      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d08:	d825      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d0a:	2b80      	cmp	r3, #128	@ 0x80
 8003d0c:	d018      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d0e:	2b80      	cmp	r3, #128	@ 0x80
 8003d10:	d821      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d16:	2b40      	cmp	r3, #64	@ 0x40
 8003d18:	d007      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003d1a:	e01c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	4a4e      	ldr	r2, [pc, #312]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d28:	e01e      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d2e:	3308      	adds	r3, #8
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fb94 	bl	8005460 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d3e:	e013      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d44:	3328      	adds	r3, #40	@ 0x28
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fc3b 	bl	80055c4 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003d70:	4b3a      	ldr	r3, [pc, #232]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	4a37      	ldr	r2, [pc, #220]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003d9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003da4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d05c      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003db8:	d03b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003dba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003dbe:	d834      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc4:	d037      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dca:	d82e      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003dcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dd0:	d033      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003dd2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dd6:	d828      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ddc:	d01a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d822      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dec:	d007      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003dee:	e01c      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	4a19      	ldr	r2, [pc, #100]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003dfc:	e01e      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e02:	3308      	adds	r3, #8
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fb2a 	bl	8005460 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e12:	e013      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e18:	3328      	adds	r3, #40	@ 0x28
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fbd1 	bl	80055c4 <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e28:	e008      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e30:	e004      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10d      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003e44:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e52:	4a02      	ldr	r2, [pc, #8]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003e5a:	bf00      	nop
 8003e5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d03a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	2b30      	cmp	r3, #48	@ 0x30
 8003e90:	d01f      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003e92:	2b30      	cmp	r3, #48	@ 0x30
 8003e94:	d819      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d815      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d111      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea6:	4bae      	ldr	r3, [pc, #696]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	4aad      	ldr	r2, [pc, #692]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb8:	3308      	adds	r3, #8
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 facf 	bl	8005460 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ee0:	4b9f      	ldr	r3, [pc, #636]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eee:	4a9c      	ldr	r2, [pc, #624]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003efa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003f0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d051      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f28:	d035      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f2e:	d82e      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f34:	d031      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003f36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f3a:	d828      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f40:	d01a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f46:	d822      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f50:	d007      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003f52:	e01c      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f54:	4b82      	ldr	r3, [pc, #520]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	4a81      	ldr	r2, [pc, #516]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f60:	e01c      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f66:	3308      	adds	r3, #8
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fa78 	bl	8005460 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f76:	e011      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7c:	3328      	adds	r3, #40	@ 0x28
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 fb1f 	bl	80055c4 <RCCEx_PLL3_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f8c:	e006      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb8:	e003      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	d053      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fec:	d033      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003fee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff2:	d82c      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ff4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ff8:	d02f      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003ffa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ffe:	d826      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004000:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004006:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800400a:	d820      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800400c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004010:	d012      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004016:	d81a      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d022      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800401c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004020:	d115      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004026:	3308      	adds	r3, #8
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fa18 	bl	8005460 <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004036:	e015      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800403c:	3328      	adds	r3, #40	@ 0x28
 800403e:	2101      	movs	r1, #1
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fabf 	bl	80055c4 <RCCEx_PLL3_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800404c:	e00a      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004056:	bf00      	nop
 8004058:	e004      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800406c:	4b3c      	ldr	r3, [pc, #240]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800406e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004070:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800407a:	4a39      	ldr	r2, [pc, #228]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004086:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d060      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80040aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80040b6:	d039      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80040b8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80040bc:	d832      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c2:	d035      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80040c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c8:	d82c      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ce:	d031      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d4:	d826      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040da:	d02d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80040dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e0:	d820      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e6:	d012      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80040e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ec:	d81a      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d024      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040f6:	d115      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040fc:	3308      	adds	r3, #8
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f001 f9ad 	bl	8005460 <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800410c:	e017      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004112:	3328      	adds	r3, #40	@ 0x28
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fa54 	bl	80055c4 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004122:	e00c      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800412a:	e008      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800412c:	bf00      	nop
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10e      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004156:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6593      	str	r3, [r2, #88]	@ 0x58
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004182:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d037      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800418c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004196:	d00e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800419c:	d816      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a6:	d111      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4bc4      	ldr	r3, [pc, #784]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	4ac3      	ldr	r2, [pc, #780]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041b4:	e00f      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ba:	3308      	adds	r3, #8
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f94e 	bl	8005460 <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041ca:	e004      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80041d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041de:	4bb7      	ldr	r3, [pc, #732]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ec:	4ab3      	ldr	r2, [pc, #716]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80041f2:	e003      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800420c:	2300      	movs	r3, #0
 800420e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004212:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004216:	460b      	mov	r3, r1
 8004218:	4313      	orrs	r3, r2
 800421a:	d039      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004222:	2b03      	cmp	r3, #3
 8004224:	d81c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004269 	.word	0x08004269
 8004230:	0800423d 	.word	0x0800423d
 8004234:	0800424b 	.word	0x0800424b
 8004238:	08004269 	.word	0x08004269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b9f      	ldr	r3, [pc, #636]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a9e      	ldr	r2, [pc, #632]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800424a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424e:	3308      	adds	r3, #8
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f904 	bl	8005460 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800425e:	e004      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004272:	4b92      	ldr	r3, [pc, #584]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004276:	f023 0103 	bic.w	r1, r3, #3
 800427a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800427e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004280:	4a8e      	ldr	r2, [pc, #568]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004282:	430b      	orrs	r3, r1
 8004284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800428c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800429c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a0:	2300      	movs	r3, #0
 80042a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f000 8099 	beq.w	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4b83      	ldr	r3, [pc, #524]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a82      	ldr	r2, [pc, #520]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042be:	f7fd fb87 	bl	80019d0 <HAL_GetTick>
 80042c2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c6:	e00b      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fd fb82 	bl	80019d0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	@ 0x64
 80042d6:	d903      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042e0:	4b77      	ldr	r3, [pc, #476]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ed      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80042ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d173      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042f4:	4b71      	ldr	r3, [pc, #452]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004300:	4053      	eors	r3, r2
 8004302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004312:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004316:	4b69      	ldr	r3, [pc, #420]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004322:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004326:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800432e:	4a63      	ldr	r2, [pc, #396]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800433a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800433e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004342:	d118      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd fb44 	bl	80019d0 <HAL_GetTick>
 8004348:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434c:	e00d      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fd fb3f 	bl	80019d0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004358:	1ad2      	subs	r2, r2, r3
 800435a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800435e:	429a      	cmp	r2, r3
 8004360:	d903      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004368:	e005      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800436a:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0eb      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004376:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800437a:	2b00      	cmp	r3, #0
 800437c:	d129      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800438e:	d10e      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004390:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a0:	091a      	lsrs	r2, r3, #4
 80043a2:	4b48      	ldr	r3, [pc, #288]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	4a45      	ldr	r2, [pc, #276]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6113      	str	r3, [r2, #16]
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043b8:	6113      	str	r3, [r2, #16]
 80043ba:	4b40      	ldr	r3, [pc, #256]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80043be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	4a3c      	ldr	r2, [pc, #240]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 0301 	and.w	r3, r2, #1
 80043f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043fe:	460b      	mov	r3, r1
 8004400:	4313      	orrs	r3, r2
 8004402:	f000 8090 	beq.w	8004526 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440e:	2b28      	cmp	r3, #40	@ 0x28
 8004410:	d870      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004412:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	080044fd 	.word	0x080044fd
 800441c:	080044f5 	.word	0x080044f5
 8004420:	080044f5 	.word	0x080044f5
 8004424:	080044f5 	.word	0x080044f5
 8004428:	080044f5 	.word	0x080044f5
 800442c:	080044f5 	.word	0x080044f5
 8004430:	080044f5 	.word	0x080044f5
 8004434:	080044f5 	.word	0x080044f5
 8004438:	080044c9 	.word	0x080044c9
 800443c:	080044f5 	.word	0x080044f5
 8004440:	080044f5 	.word	0x080044f5
 8004444:	080044f5 	.word	0x080044f5
 8004448:	080044f5 	.word	0x080044f5
 800444c:	080044f5 	.word	0x080044f5
 8004450:	080044f5 	.word	0x080044f5
 8004454:	080044f5 	.word	0x080044f5
 8004458:	080044df 	.word	0x080044df
 800445c:	080044f5 	.word	0x080044f5
 8004460:	080044f5 	.word	0x080044f5
 8004464:	080044f5 	.word	0x080044f5
 8004468:	080044f5 	.word	0x080044f5
 800446c:	080044f5 	.word	0x080044f5
 8004470:	080044f5 	.word	0x080044f5
 8004474:	080044f5 	.word	0x080044f5
 8004478:	080044fd 	.word	0x080044fd
 800447c:	080044f5 	.word	0x080044f5
 8004480:	080044f5 	.word	0x080044f5
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044f5 	.word	0x080044f5
 800448c:	080044f5 	.word	0x080044f5
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080044f5 	.word	0x080044f5
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080044f5 	.word	0x080044f5
 80044a0:	080044f5 	.word	0x080044f5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	080044f5 	.word	0x080044f5
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	58024400 	.word	0x58024400
 80044c0:	58024800 	.word	0x58024800
 80044c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044cc:	3308      	adds	r3, #8
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 ffc5 	bl	8005460 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f86c 	bl	80055c4 <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004506:	4bc0      	ldr	r3, [pc, #768]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800450e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004516:	4abc      	ldr	r2, [pc, #752]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004518:	430b      	orrs	r3, r1
 800451a:	6553      	str	r3, [r2, #84]	@ 0x54
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004522:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f002 0302 	and.w	r3, r2, #2
 8004532:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800453c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004540:	460b      	mov	r3, r1
 8004542:	4313      	orrs	r3, r2
 8004544:	d043      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800454e:	2b05      	cmp	r3, #5
 8004550:	d824      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004552:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	080045a5 	.word	0x080045a5
 800455c:	08004571 	.word	0x08004571
 8004560:	08004587 	.word	0x08004587
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004574:	3308      	adds	r3, #8
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f000 ff71 	bl	8005460 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004584:	e00f      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800458a:	3328      	adds	r3, #40	@ 0x28
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f001 f818 	bl	80055c4 <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800459a:	e004      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80045a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045ae:	4b96      	ldr	r3, [pc, #600]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	f023 0107 	bic.w	r1, r3, #7
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	4a92      	ldr	r2, [pc, #584]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f002 0304 	and.w	r3, r2, #4
 80045da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d043      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d824      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80045fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	0800464d 	.word	0x0800464d
 8004604:	08004619 	.word	0x08004619
 8004608:	0800462f 	.word	0x0800462f
 800460c:	0800464d 	.word	0x0800464d
 8004610:	0800464d 	.word	0x0800464d
 8004614:	0800464d 	.word	0x0800464d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461c:	3308      	adds	r3, #8
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 ff1d 	bl	8005460 <RCCEx_PLL2_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800462c:	e00f      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004632:	3328      	adds	r3, #40	@ 0x28
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ffc4 	bl	80055c4 <RCCEx_PLL3_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004656:	4b6c      	ldr	r3, [pc, #432]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f023 0107 	bic.w	r1, r3, #7
 800465e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	4a68      	ldr	r2, [pc, #416]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6593      	str	r3, [r2, #88]	@ 0x58
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004672:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f002 0320 	and.w	r3, r2, #32
 8004682:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800468c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004690:	460b      	mov	r3, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	d055      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800469e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a2:	d033      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80046a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a8:	d82c      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ae:	d02f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80046b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046b4:	d826      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80046b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046ba:	d02b      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80046bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80046c0:	d820      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80046c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c6:	d012      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80046c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046cc:	d81a      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d022      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80046d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d6:	d115      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046dc:	3308      	adds	r3, #8
 80046de:	2100      	movs	r1, #0
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 febd 	bl	8005460 <RCCEx_PLL2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046ec:	e015      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f2:	3328      	adds	r3, #40	@ 0x28
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 ff64 	bl	80055c4 <RCCEx_PLL3_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004702:	e00a      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800470a:	e006      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800470c:	bf00      	nop
 800470e:	e004      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004710:	bf00      	nop
 8004712:	e002      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004722:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800472a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800472e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004732:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004734:	430b      	orrs	r3, r1
 8004736:	6553      	str	r3, [r2, #84]	@ 0x54
 8004738:	e003      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800473e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800474e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004758:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800475c:	460b      	mov	r3, r1
 800475e:	4313      	orrs	r3, r2
 8004760:	d058      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004766:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800476a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800476e:	d033      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004770:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004774:	d82c      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477a:	d02f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004780:	d826      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004786:	d02b      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004788:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800478c:	d820      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800478e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004792:	d012      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004798:	d81a      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d022      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a2:	d115      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a8:	3308      	adds	r3, #8
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fe57 	bl	8005460 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047b8:	e015      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047be:	3328      	adds	r3, #40	@ 0x28
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fefe 	bl	80055c4 <RCCEx_PLL3_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047ce:	e00a      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80047d6:	e006      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80047d8:	bf00      	nop
 80047da:	e004      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80047dc:	bf00      	nop
 80047de:	e002      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80047e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10e      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047fe:	4a02      	ldr	r2, [pc, #8]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6593      	str	r3, [r2, #88]	@ 0x58
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004810:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800482a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d055      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004838:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800483c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004840:	d033      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004842:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004846:	d82c      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800484c:	d02f      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800484e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004852:	d826      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004854:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004858:	d02b      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800485a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800485e:	d820      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004864:	d012      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004866:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800486a:	d81a      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d022      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004874:	d115      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800487a:	3308      	adds	r3, #8
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fdee 	bl	8005460 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800488a:	e015      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004890:	3328      	adds	r3, #40	@ 0x28
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe95 	bl	80055c4 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80048a0:	e00a      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048aa:	bf00      	nop
 80048ac:	e004      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048ae:	bf00      	nop
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048b2:	bf00      	nop
 80048b4:	e000      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80048b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80048c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048d0:	4a9d      	ldr	r2, [pc, #628]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d6:	e003      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f002 0308 	and.w	r3, r2, #8
 80048ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048fa:	460b      	mov	r3, r1
 80048fc:	4313      	orrs	r3, r2
 80048fe:	d01e      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490c:	d10c      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004912:	3328      	adds	r3, #40	@ 0x28
 8004914:	2102      	movs	r1, #2
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fe54 	bl	80055c4 <RCCEx_PLL3_Config>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004928:	4b87      	ldr	r3, [pc, #540]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004938:	4a83      	ldr	r2, [pc, #524]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800493a:	430b      	orrs	r3, r1
 800493c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f002 0310 	and.w	r3, r2, #16
 800494a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004954:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d01e      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004962:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496a:	d10c      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004970:	3328      	adds	r3, #40	@ 0x28
 8004972:	2102      	movs	r1, #2
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fe25 	bl	80055c4 <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004986:	4b70      	ldr	r3, [pc, #448]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004996:	4a6c      	ldr	r2, [pc, #432]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004998:	430b      	orrs	r3, r1
 800499a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800499c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80049a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80049b6:	460b      	mov	r3, r1
 80049b8:	4313      	orrs	r3, r2
 80049ba:	d03e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049c8:	d022      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80049ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ce:	d81b      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d00b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80049da:	e015      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e0:	3308      	adds	r3, #8
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fd3b 	bl	8005460 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049f0:	e00f      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f6:	3328      	adds	r3, #40	@ 0x28
 80049f8:	2102      	movs	r1, #2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fde2 	bl	80055c4 <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a2a:	4a47      	ldr	r2, [pc, #284]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a48:	2300      	movs	r3, #0
 8004a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a4c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d03b      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a62:	d01f      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a68:	d818      	bhi.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a74:	d007      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004a76:	e011      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4b33      	ldr	r3, [pc, #204]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	4a32      	ldr	r2, [pc, #200]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a84:	e00f      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8a:	3328      	adds	r3, #40	@ 0x28
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fd98 	bl	80055c4 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a9a:	e004      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aae:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004abe:	4a22      	ldr	r2, [pc, #136]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ac4:	e003      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ada:	673b      	str	r3, [r7, #112]	@ 0x70
 8004adc:	2300      	movs	r3, #0
 8004ade:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ae0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	d034      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af8:	d007      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004afa:	e011      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004afc:	4b12      	ldr	r3, [pc, #72]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	4a11      	ldr	r2, [pc, #68]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b08:	e00e      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0e:	3308      	adds	r3, #8
 8004b10:	2102      	movs	r1, #2
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fca4 	bl	8005460 <RCCEx_PLL2_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b1e:	e003      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10d      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b30:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b34:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3e:	4a02      	ldr	r2, [pc, #8]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b44:	e006      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b62:	2300      	movs	r3, #0
 8004b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	d00c      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b74:	3328      	adds	r3, #40	@ 0x28
 8004b76:	2102      	movs	r1, #2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fd23 	bl	80055c4 <RCCEx_PLL3_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b98:	2300      	movs	r3, #0
 8004b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d038      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb2:	d018      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb8:	d811      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bbe:	d014      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc4:	d80b      	bhi.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	d106      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd0:	4bc3      	ldr	r3, [pc, #780]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	4ac2      	ldr	r2, [pc, #776]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bf8:	4bb9      	ldr	r3, [pc, #740]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	4ab5      	ldr	r2, [pc, #724]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c26:	2300      	movs	r3, #0
 8004c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c2a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c34:	4baa      	ldr	r3, [pc, #680]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c42:	4aa7      	ldr	r2, [pc, #668]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c56:	2300      	movs	r3, #0
 8004c58:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c64:	4b9e      	ldr	r3, [pc, #632]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c68:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	4a9b      	ldr	r2, [pc, #620]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c86:	2300      	movs	r3, #0
 8004c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004c94:	4b92      	ldr	r3, [pc, #584]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca2:	4a8f      	ldr	r2, [pc, #572]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cc4:	4b86      	ldr	r3, [pc, #536]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4a85      	ldr	r2, [pc, #532]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004cce:	6113      	str	r3, [r2, #16]
 8004cd0:	4b83      	ldr	r3, [pc, #524]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cd2:	6919      	ldr	r1, [r3, #16]
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004cdc:	4a80      	ldr	r2, [pc, #512]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cfe:	4b78      	ldr	r3, [pc, #480]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	4a74      	ldr	r2, [pc, #464]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d20:	2300      	movs	r3, #0
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d32:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3e:	4a68      	ldr	r2, [pc, #416]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d56:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d011      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d64:	3308      	adds	r3, #8
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fb79 	bl	8005460 <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004d74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	6239      	str	r1, [r7, #32]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d011      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da4:	3308      	adds	r3, #8
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fb59 	bl	8005460 <RCCEx_PLL2_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004db4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	61b9      	str	r1, [r7, #24]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	d011      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de4:	3308      	adds	r3, #8
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fb39 	bl	8005460 <RCCEx_PLL2_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004df4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	6139      	str	r1, [r7, #16]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d011      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e24:	3328      	adds	r3, #40	@ 0x28
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fbcb 	bl	80055c4 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004e34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d011      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e64:	3328      	adds	r3, #40	@ 0x28
 8004e66:	2101      	movs	r1, #1
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fbab 	bl	80055c4 <RCCEx_PLL3_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004e74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	6039      	str	r1, [r7, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	d011      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea4:	3328      	adds	r3, #40	@ 0x28
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fb8b 	bl	80055c4 <RCCEx_PLL3_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004ec4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400

08004ee4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004ee8:	f7fe fde2 	bl	8003ab0 <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	091b      	lsrs	r3, r3, #4
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4904      	ldr	r1, [pc, #16]	@ (8004f0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	08007fc4 	.word	0x08007fc4

08004f10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b089      	sub	sp, #36	@ 0x24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f18:	4ba1      	ldr	r3, [pc, #644]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004f22:	4b9f      	ldr	r3, [pc, #636]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	0b1b      	lsrs	r3, r3, #12
 8004f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f2e:	4b9c      	ldr	r3, [pc, #624]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f3a:	4b99      	ldr	r3, [pc, #612]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	08db      	lsrs	r3, r3, #3
 8004f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8111 	beq.w	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f000 8083 	beq.w	800506c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f200 80a1 	bhi.w	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d056      	beq.n	8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f7a:	e099      	b.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f7c:	4b88      	ldr	r3, [pc, #544]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02d      	beq.n	8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f88:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	08db      	lsrs	r3, r3, #3
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	4a84      	ldr	r2, [pc, #528]	@ (80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
 8004f98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fe2:	e087      	b.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	ed97 6a03 	vldr	s12, [r7, #12]
 800500a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800500e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005026:	e065      	b.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800506a:	e043      	b.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b48      	ldr	r3, [pc, #288]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ae:	e021      	b.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b37      	ldr	r3, [pc, #220]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050f4:	4b2a      	ldr	r3, [pc, #168]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f8:	0a5b      	lsrs	r3, r3, #9
 80050fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800510a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800510e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511a:	ee17 2a90 	vmov	r2, s15
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005122:	4b1f      	ldr	r3, [pc, #124]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005134:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800513c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005148:	ee17 2a90 	vmov	r2, s15
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005150:	4b13      	ldr	r3, [pc, #76]	@ (80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	0e1b      	lsrs	r3, r3, #24
 8005156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800516a:	edd7 6a07 	vldr	s13, [r7, #28]
 800516e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005176:	ee17 2a90 	vmov	r2, s15
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800517e:	e008      	b.n	8005192 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
}
 8005192:	bf00      	nop
 8005194:	3724      	adds	r7, #36	@ 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	58024400 	.word	0x58024400
 80051a4:	03d09000 	.word	0x03d09000
 80051a8:	46000000 	.word	0x46000000
 80051ac:	4c742400 	.word	0x4c742400
 80051b0:	4a742400 	.word	0x4a742400
 80051b4:	4af42400 	.word	0x4af42400

080051b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	@ 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051c0:	4ba1      	ldr	r3, [pc, #644]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80051ca:	4b9f      	ldr	r3, [pc, #636]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	0d1b      	lsrs	r3, r3, #20
 80051d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051e2:	4b99      	ldr	r3, [pc, #612]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	08db      	lsrs	r3, r3, #3
 80051e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	fb02 f303 	mul.w	r3, r2, r3
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8111 	beq.w	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b02      	cmp	r3, #2
 800520a:	f000 8083 	beq.w	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b02      	cmp	r3, #2
 8005212:	f200 80a1 	bhi.w	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d056      	beq.n	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005222:	e099      	b.n	8005358 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005224:	4b88      	ldr	r3, [pc, #544]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02d      	beq.n	800528c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005230:	4b85      	ldr	r3, [pc, #532]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	08db      	lsrs	r3, r3, #3
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	4a84      	ldr	r2, [pc, #528]	@ (800544c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525a:	4b7b      	ldr	r3, [pc, #492]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526a:	ed97 6a03 	vldr	s12, [r7, #12]
 800526e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005286:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800528a:	e087      	b.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800529a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800529e:	4b6a      	ldr	r3, [pc, #424]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80052b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ce:	e065      	b.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e2:	4b59      	ldr	r3, [pc, #356]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005312:	e043      	b.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800545c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b48      	ldr	r3, [pc, #288]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	ed97 6a03 	vldr	s12, [r7, #12]
 800533a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005356:	e021      	b.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b37      	ldr	r3, [pc, #220]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537a:	ed97 6a03 	vldr	s12, [r7, #12]
 800537e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800539a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800539c:	4b2a      	ldr	r3, [pc, #168]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	0a5b      	lsrs	r3, r3, #9
 80053a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c2:	ee17 2a90 	vmov	r2, s15
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	0c1b      	lsrs	r3, r3, #16
 80053d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f0:	ee17 2a90 	vmov	r2, s15
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053f8:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800540e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005412:	edd7 6a07 	vldr	s13, [r7, #28]
 8005416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541e:	ee17 2a90 	vmov	r2, s15
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005426:	e008      	b.n	800543a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	609a      	str	r2, [r3, #8]
}
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	@ 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	58024400 	.word	0x58024400
 800544c:	03d09000 	.word	0x03d09000
 8005450:	46000000 	.word	0x46000000
 8005454:	4c742400 	.word	0x4c742400
 8005458:	4a742400 	.word	0x4a742400
 800545c:	4af42400 	.word	0x4af42400

08005460 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800546e:	4b53      	ldr	r3, [pc, #332]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b03      	cmp	r3, #3
 8005478:	d101      	bne.n	800547e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e099      	b.n	80055b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800547e:	4b4f      	ldr	r3, [pc, #316]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a4e      	ldr	r2, [pc, #312]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005484:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548a:	f7fc faa1 	bl	80019d0 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005490:	e008      	b.n	80054a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005492:	f7fc fa9d 	bl	80019d0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e086      	b.n	80055b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054a4:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80054b0:	4b42      	ldr	r3, [pc, #264]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	031b      	lsls	r3, r3, #12
 80054be:	493f      	ldr	r1, [pc, #252]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	025b      	lsls	r3, r3, #9
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	3b01      	subs	r3, #1
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054f4:	4931      	ldr	r1, [pc, #196]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054fa:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	492d      	ldr	r1, [pc, #180]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800550c:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	f023 0220 	bic.w	r2, r3, #32
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	4928      	ldr	r1, [pc, #160]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 800551a:	4313      	orrs	r3, r2
 800551c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800551e:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	4a26      	ldr	r2, [pc, #152]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005524:	f023 0310 	bic.w	r3, r3, #16
 8005528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800552a:	4b24      	ldr	r3, [pc, #144]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 800552c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800552e:	4b24      	ldr	r3, [pc, #144]	@ (80055c0 <RCCEx_PLL2_Config+0x160>)
 8005530:	4013      	ands	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	69d2      	ldr	r2, [r2, #28]
 8005536:	00d2      	lsls	r2, r2, #3
 8005538:	4920      	ldr	r1, [pc, #128]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 800553a:	4313      	orrs	r3, r2
 800553c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800553e:	4b1f      	ldr	r3, [pc, #124]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005542:	4a1e      	ldr	r2, [pc, #120]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005544:	f043 0310 	orr.w	r3, r3, #16
 8005548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005550:	4b1a      	ldr	r3, [pc, #104]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005556:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800555c:	e00f      	b.n	800557e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005564:	4b15      	ldr	r3, [pc, #84]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	4a14      	ldr	r2, [pc, #80]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005570:	e005      	b.n	800557e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005576:	4a11      	ldr	r2, [pc, #68]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005578:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800557c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a0e      	ldr	r2, [pc, #56]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 8005584:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558a:	f7fc fa21 	bl	80019d0 <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005590:	e008      	b.n	80055a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005592:	f7fc fa1d 	bl	80019d0 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e006      	b.n	80055b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <RCCEx_PLL2_Config+0x15c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0f0      	beq.n	8005592 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	58024400 	.word	0x58024400
 80055c0:	ffff0007 	.word	0xffff0007

080055c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055d2:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d101      	bne.n	80055e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e099      	b.n	8005716 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a4e      	ldr	r2, [pc, #312]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ee:	f7fc f9ef 	bl	80019d0 <HAL_GetTick>
 80055f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055f4:	e008      	b.n	8005608 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055f6:	f7fc f9eb 	bl	80019d0 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e086      	b.n	8005716 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005608:	4b45      	ldr	r3, [pc, #276]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005614:	4b42      	ldr	r3, [pc, #264]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	051b      	lsls	r3, r3, #20
 8005622:	493f      	ldr	r1, [pc, #252]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	628b      	str	r3, [r1, #40]	@ 0x28
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	3b01      	subs	r3, #1
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	025b      	lsls	r3, r3, #9
 800563a:	b29b      	uxth	r3, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	3b01      	subs	r3, #1
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005658:	4931      	ldr	r1, [pc, #196]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800565e:	4b30      	ldr	r3, [pc, #192]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	492d      	ldr	r1, [pc, #180]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005670:	4b2b      	ldr	r3, [pc, #172]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4928      	ldr	r1, [pc, #160]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005682:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800568e:	4b24      	ldr	r3, [pc, #144]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 8005690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005692:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <RCCEx_PLL3_Config+0x160>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	69d2      	ldr	r2, [r2, #28]
 800569a:	00d2      	lsls	r2, r2, #3
 800569c:	4920      	ldr	r1, [pc, #128]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80056a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80056b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056c0:	e00f      	b.n	80056e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d106      	bne.n	80056d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056c8:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4a14      	ldr	r2, [pc, #80]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056d4:	e005      	b.n	80056e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056d6:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	4a11      	ldr	r2, [pc, #68]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 80056e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fc f96f 	bl	80019d0 <HAL_GetTick>
 80056f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056f4:	e008      	b.n	8005708 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056f6:	f7fc f96b 	bl	80019d0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005708:	4b05      	ldr	r3, [pc, #20]	@ (8005720 <RCCEx_PLL3_Config+0x15c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
 8005724:	ffff0007 	.word	0xffff0007

08005728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e042      	b.n	80057c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f83b 	bl	80057c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	@ 0x24
 8005756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fe9e 	bl	80064b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f82f 	bl	80057dc <UART_SetConfig>
 800577e:	4603      	mov	r3, r0
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e01b      	b.n	80057c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 ff1d 	bl	80065f8 <UART_CheckIdleState>
 80057be:	4603      	mov	r3, r0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e0:	b092      	sub	sp, #72	@ 0x48
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	4313      	orrs	r3, r2
 8005802:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4bbe      	ldr	r3, [pc, #760]	@ (8005b04 <UART_SetConfig+0x328>)
 800580c:	4013      	ands	r3, r2
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005814:	430b      	orrs	r3, r1
 8005816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4ab3      	ldr	r2, [pc, #716]	@ (8005b08 <UART_SetConfig+0x32c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005844:	4313      	orrs	r3, r2
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	4baf      	ldr	r3, [pc, #700]	@ (8005b0c <UART_SetConfig+0x330>)
 8005850:	4013      	ands	r3, r2
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005858:	430b      	orrs	r3, r1
 800585a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	f023 010f 	bic.w	r1, r3, #15
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4aa6      	ldr	r2, [pc, #664]	@ (8005b10 <UART_SetConfig+0x334>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d177      	bne.n	800596c <UART_SetConfig+0x190>
 800587c:	4ba5      	ldr	r3, [pc, #660]	@ (8005b14 <UART_SetConfig+0x338>)
 800587e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005880:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005884:	2b28      	cmp	r3, #40	@ 0x28
 8005886:	d86d      	bhi.n	8005964 <UART_SetConfig+0x188>
 8005888:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <UART_SetConfig+0xb4>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	08005935 	.word	0x08005935
 8005894:	08005965 	.word	0x08005965
 8005898:	08005965 	.word	0x08005965
 800589c:	08005965 	.word	0x08005965
 80058a0:	08005965 	.word	0x08005965
 80058a4:	08005965 	.word	0x08005965
 80058a8:	08005965 	.word	0x08005965
 80058ac:	08005965 	.word	0x08005965
 80058b0:	0800593d 	.word	0x0800593d
 80058b4:	08005965 	.word	0x08005965
 80058b8:	08005965 	.word	0x08005965
 80058bc:	08005965 	.word	0x08005965
 80058c0:	08005965 	.word	0x08005965
 80058c4:	08005965 	.word	0x08005965
 80058c8:	08005965 	.word	0x08005965
 80058cc:	08005965 	.word	0x08005965
 80058d0:	08005945 	.word	0x08005945
 80058d4:	08005965 	.word	0x08005965
 80058d8:	08005965 	.word	0x08005965
 80058dc:	08005965 	.word	0x08005965
 80058e0:	08005965 	.word	0x08005965
 80058e4:	08005965 	.word	0x08005965
 80058e8:	08005965 	.word	0x08005965
 80058ec:	08005965 	.word	0x08005965
 80058f0:	0800594d 	.word	0x0800594d
 80058f4:	08005965 	.word	0x08005965
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005965 	.word	0x08005965
 8005900:	08005965 	.word	0x08005965
 8005904:	08005965 	.word	0x08005965
 8005908:	08005965 	.word	0x08005965
 800590c:	08005965 	.word	0x08005965
 8005910:	08005955 	.word	0x08005955
 8005914:	08005965 	.word	0x08005965
 8005918:	08005965 	.word	0x08005965
 800591c:	08005965 	.word	0x08005965
 8005920:	08005965 	.word	0x08005965
 8005924:	08005965 	.word	0x08005965
 8005928:	08005965 	.word	0x08005965
 800592c:	08005965 	.word	0x08005965
 8005930:	0800595d 	.word	0x0800595d
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e326      	b.n	8005f8a <UART_SetConfig+0x7ae>
 800593c:	2304      	movs	r3, #4
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e322      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005944:	2308      	movs	r3, #8
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e31e      	b.n	8005f8a <UART_SetConfig+0x7ae>
 800594c:	2310      	movs	r3, #16
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e31a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005954:	2320      	movs	r3, #32
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e316      	b.n	8005f8a <UART_SetConfig+0x7ae>
 800595c:	2340      	movs	r3, #64	@ 0x40
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e312      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005964:	2380      	movs	r3, #128	@ 0x80
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e30e      	b.n	8005f8a <UART_SetConfig+0x7ae>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a69      	ldr	r2, [pc, #420]	@ (8005b18 <UART_SetConfig+0x33c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d130      	bne.n	80059d8 <UART_SetConfig+0x1fc>
 8005976:	4b67      	ldr	r3, [pc, #412]	@ (8005b14 <UART_SetConfig+0x338>)
 8005978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b05      	cmp	r3, #5
 8005980:	d826      	bhi.n	80059d0 <UART_SetConfig+0x1f4>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <UART_SetConfig+0x1ac>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059a1 	.word	0x080059a1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	080059b1 	.word	0x080059b1
 8005994:	080059b9 	.word	0x080059b9
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c9 	.word	0x080059c9
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e2f0      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059a8:	2304      	movs	r3, #4
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e2ec      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059b0:	2308      	movs	r3, #8
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e2e8      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059b8:	2310      	movs	r3, #16
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e2e4      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059c0:	2320      	movs	r3, #32
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e2e0      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059c8:	2340      	movs	r3, #64	@ 0x40
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e2dc      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e2d8      	b.n	8005f8a <UART_SetConfig+0x7ae>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a4f      	ldr	r2, [pc, #316]	@ (8005b1c <UART_SetConfig+0x340>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d130      	bne.n	8005a44 <UART_SetConfig+0x268>
 80059e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b14 <UART_SetConfig+0x338>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b05      	cmp	r3, #5
 80059ec:	d826      	bhi.n	8005a3c <UART_SetConfig+0x260>
 80059ee:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <UART_SetConfig+0x218>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a1d 	.word	0x08005a1d
 8005a00:	08005a25 	.word	0x08005a25
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a35 	.word	0x08005a35
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e2ba      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e2b6      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e2b2      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e2ae      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e2aa      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a34:	2340      	movs	r3, #64	@ 0x40
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e2a6      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e2a2      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a35      	ldr	r2, [pc, #212]	@ (8005b20 <UART_SetConfig+0x344>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d130      	bne.n	8005ab0 <UART_SetConfig+0x2d4>
 8005a4e:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <UART_SetConfig+0x338>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d826      	bhi.n	8005aa8 <UART_SetConfig+0x2cc>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x284>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a79 	.word	0x08005a79
 8005a64:	08005a81 	.word	0x08005a81
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a99 	.word	0x08005a99
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e284      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a80:	2304      	movs	r3, #4
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e280      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a88:	2308      	movs	r3, #8
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e27c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a90:	2310      	movs	r3, #16
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e278      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005a98:	2320      	movs	r3, #32
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e274      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005aa0:	2340      	movs	r3, #64	@ 0x40
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e270      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005aa8:	2380      	movs	r3, #128	@ 0x80
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e26c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b24 <UART_SetConfig+0x348>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d142      	bne.n	8005b40 <UART_SetConfig+0x364>
 8005aba:	4b16      	ldr	r3, [pc, #88]	@ (8005b14 <UART_SetConfig+0x338>)
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d838      	bhi.n	8005b38 <UART_SetConfig+0x35c>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <UART_SetConfig+0x2f0>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005ae5 	.word	0x08005ae5
 8005ad0:	08005aed 	.word	0x08005aed
 8005ad4:	08005af5 	.word	0x08005af5
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b29 	.word	0x08005b29
 8005ae0:	08005b31 	.word	0x08005b31
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e24e      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005aec:	2304      	movs	r3, #4
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e24a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005af4:	2308      	movs	r3, #8
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e246      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005afc:	2310      	movs	r3, #16
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e242      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005b04:	cfff69f3 	.word	0xcfff69f3
 8005b08:	58000c00 	.word	0x58000c00
 8005b0c:	11fff4ff 	.word	0x11fff4ff
 8005b10:	40011000 	.word	0x40011000
 8005b14:	58024400 	.word	0x58024400
 8005b18:	40004400 	.word	0x40004400
 8005b1c:	40004800 	.word	0x40004800
 8005b20:	40004c00 	.word	0x40004c00
 8005b24:	40005000 	.word	0x40005000
 8005b28:	2320      	movs	r3, #32
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e22c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e228      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005b38:	2380      	movs	r3, #128	@ 0x80
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e224      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4ab1      	ldr	r2, [pc, #708]	@ (8005e0c <UART_SetConfig+0x630>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d176      	bne.n	8005c38 <UART_SetConfig+0x45c>
 8005b4a:	4bb1      	ldr	r3, [pc, #708]	@ (8005e10 <UART_SetConfig+0x634>)
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b52:	2b28      	cmp	r3, #40	@ 0x28
 8005b54:	d86c      	bhi.n	8005c30 <UART_SetConfig+0x454>
 8005b56:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <UART_SetConfig+0x380>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005c01 	.word	0x08005c01
 8005b60:	08005c31 	.word	0x08005c31
 8005b64:	08005c31 	.word	0x08005c31
 8005b68:	08005c31 	.word	0x08005c31
 8005b6c:	08005c31 	.word	0x08005c31
 8005b70:	08005c31 	.word	0x08005c31
 8005b74:	08005c31 	.word	0x08005c31
 8005b78:	08005c31 	.word	0x08005c31
 8005b7c:	08005c09 	.word	0x08005c09
 8005b80:	08005c31 	.word	0x08005c31
 8005b84:	08005c31 	.word	0x08005c31
 8005b88:	08005c31 	.word	0x08005c31
 8005b8c:	08005c31 	.word	0x08005c31
 8005b90:	08005c31 	.word	0x08005c31
 8005b94:	08005c31 	.word	0x08005c31
 8005b98:	08005c31 	.word	0x08005c31
 8005b9c:	08005c11 	.word	0x08005c11
 8005ba0:	08005c31 	.word	0x08005c31
 8005ba4:	08005c31 	.word	0x08005c31
 8005ba8:	08005c31 	.word	0x08005c31
 8005bac:	08005c31 	.word	0x08005c31
 8005bb0:	08005c31 	.word	0x08005c31
 8005bb4:	08005c31 	.word	0x08005c31
 8005bb8:	08005c31 	.word	0x08005c31
 8005bbc:	08005c19 	.word	0x08005c19
 8005bc0:	08005c31 	.word	0x08005c31
 8005bc4:	08005c31 	.word	0x08005c31
 8005bc8:	08005c31 	.word	0x08005c31
 8005bcc:	08005c31 	.word	0x08005c31
 8005bd0:	08005c31 	.word	0x08005c31
 8005bd4:	08005c31 	.word	0x08005c31
 8005bd8:	08005c31 	.word	0x08005c31
 8005bdc:	08005c21 	.word	0x08005c21
 8005be0:	08005c31 	.word	0x08005c31
 8005be4:	08005c31 	.word	0x08005c31
 8005be8:	08005c31 	.word	0x08005c31
 8005bec:	08005c31 	.word	0x08005c31
 8005bf0:	08005c31 	.word	0x08005c31
 8005bf4:	08005c31 	.word	0x08005c31
 8005bf8:	08005c31 	.word	0x08005c31
 8005bfc:	08005c29 	.word	0x08005c29
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e1c0      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c08:	2304      	movs	r3, #4
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e1bc      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c10:	2308      	movs	r3, #8
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e1b8      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e1b4      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c20:	2320      	movs	r3, #32
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e1b0      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c28:	2340      	movs	r3, #64	@ 0x40
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e1ac      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e1a8      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a75      	ldr	r2, [pc, #468]	@ (8005e14 <UART_SetConfig+0x638>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d130      	bne.n	8005ca4 <UART_SetConfig+0x4c8>
 8005c42:	4b73      	ldr	r3, [pc, #460]	@ (8005e10 <UART_SetConfig+0x634>)
 8005c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d826      	bhi.n	8005c9c <UART_SetConfig+0x4c0>
 8005c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <UART_SetConfig+0x478>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c75 	.word	0x08005c75
 8005c5c:	08005c7d 	.word	0x08005c7d
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005c95 	.word	0x08005c95
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c72:	e18a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7a:	e186      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e182      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e17e      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e17a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c94:	2340      	movs	r3, #64	@ 0x40
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e176      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005c9c:	2380      	movs	r3, #128	@ 0x80
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e172      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8005e18 <UART_SetConfig+0x63c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d130      	bne.n	8005d10 <UART_SetConfig+0x534>
 8005cae:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <UART_SetConfig+0x634>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d826      	bhi.n	8005d08 <UART_SetConfig+0x52c>
 8005cba:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <UART_SetConfig+0x4e4>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	08005ce9 	.word	0x08005ce9
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e154      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e150      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e14c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e148      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e144      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005d00:	2340      	movs	r3, #64	@ 0x40
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e140      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e13c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <UART_SetConfig+0x640>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f040 8082 	bne.w	8005e20 <UART_SetConfig+0x644>
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e10 <UART_SetConfig+0x634>)
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d24:	2b28      	cmp	r3, #40	@ 0x28
 8005d26:	d86d      	bhi.n	8005e04 <UART_SetConfig+0x628>
 8005d28:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0x554>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005dd5 	.word	0x08005dd5
 8005d34:	08005e05 	.word	0x08005e05
 8005d38:	08005e05 	.word	0x08005e05
 8005d3c:	08005e05 	.word	0x08005e05
 8005d40:	08005e05 	.word	0x08005e05
 8005d44:	08005e05 	.word	0x08005e05
 8005d48:	08005e05 	.word	0x08005e05
 8005d4c:	08005e05 	.word	0x08005e05
 8005d50:	08005ddd 	.word	0x08005ddd
 8005d54:	08005e05 	.word	0x08005e05
 8005d58:	08005e05 	.word	0x08005e05
 8005d5c:	08005e05 	.word	0x08005e05
 8005d60:	08005e05 	.word	0x08005e05
 8005d64:	08005e05 	.word	0x08005e05
 8005d68:	08005e05 	.word	0x08005e05
 8005d6c:	08005e05 	.word	0x08005e05
 8005d70:	08005de5 	.word	0x08005de5
 8005d74:	08005e05 	.word	0x08005e05
 8005d78:	08005e05 	.word	0x08005e05
 8005d7c:	08005e05 	.word	0x08005e05
 8005d80:	08005e05 	.word	0x08005e05
 8005d84:	08005e05 	.word	0x08005e05
 8005d88:	08005e05 	.word	0x08005e05
 8005d8c:	08005e05 	.word	0x08005e05
 8005d90:	08005ded 	.word	0x08005ded
 8005d94:	08005e05 	.word	0x08005e05
 8005d98:	08005e05 	.word	0x08005e05
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005e05 	.word	0x08005e05
 8005da4:	08005e05 	.word	0x08005e05
 8005da8:	08005e05 	.word	0x08005e05
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005df5 	.word	0x08005df5
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005e05 	.word	0x08005e05
 8005dbc:	08005e05 	.word	0x08005e05
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e05 	.word	0x08005e05
 8005dcc:	08005e05 	.word	0x08005e05
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e0d6      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e0d2      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e0ce      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e0ca      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005df4:	2320      	movs	r3, #32
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e0c6      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005dfc:	2340      	movs	r3, #64	@ 0x40
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e0c2      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005e04:	2380      	movs	r3, #128	@ 0x80
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e0be      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005e0c:	40011400 	.word	0x40011400
 8005e10:	58024400 	.word	0x58024400
 8005e14:	40007800 	.word	0x40007800
 8005e18:	40007c00 	.word	0x40007c00
 8005e1c:	40011800 	.word	0x40011800
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4aad      	ldr	r2, [pc, #692]	@ (80060dc <UART_SetConfig+0x900>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d176      	bne.n	8005f18 <UART_SetConfig+0x73c>
 8005e2a:	4bad      	ldr	r3, [pc, #692]	@ (80060e0 <UART_SetConfig+0x904>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e32:	2b28      	cmp	r3, #40	@ 0x28
 8005e34:	d86c      	bhi.n	8005f10 <UART_SetConfig+0x734>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x660>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005ee1 	.word	0x08005ee1
 8005e40:	08005f11 	.word	0x08005f11
 8005e44:	08005f11 	.word	0x08005f11
 8005e48:	08005f11 	.word	0x08005f11
 8005e4c:	08005f11 	.word	0x08005f11
 8005e50:	08005f11 	.word	0x08005f11
 8005e54:	08005f11 	.word	0x08005f11
 8005e58:	08005f11 	.word	0x08005f11
 8005e5c:	08005ee9 	.word	0x08005ee9
 8005e60:	08005f11 	.word	0x08005f11
 8005e64:	08005f11 	.word	0x08005f11
 8005e68:	08005f11 	.word	0x08005f11
 8005e6c:	08005f11 	.word	0x08005f11
 8005e70:	08005f11 	.word	0x08005f11
 8005e74:	08005f11 	.word	0x08005f11
 8005e78:	08005f11 	.word	0x08005f11
 8005e7c:	08005ef1 	.word	0x08005ef1
 8005e80:	08005f11 	.word	0x08005f11
 8005e84:	08005f11 	.word	0x08005f11
 8005e88:	08005f11 	.word	0x08005f11
 8005e8c:	08005f11 	.word	0x08005f11
 8005e90:	08005f11 	.word	0x08005f11
 8005e94:	08005f11 	.word	0x08005f11
 8005e98:	08005f11 	.word	0x08005f11
 8005e9c:	08005ef9 	.word	0x08005ef9
 8005ea0:	08005f11 	.word	0x08005f11
 8005ea4:	08005f11 	.word	0x08005f11
 8005ea8:	08005f11 	.word	0x08005f11
 8005eac:	08005f11 	.word	0x08005f11
 8005eb0:	08005f11 	.word	0x08005f11
 8005eb4:	08005f11 	.word	0x08005f11
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005f01 	.word	0x08005f01
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005f11 	.word	0x08005f11
 8005ec8:	08005f11 	.word	0x08005f11
 8005ecc:	08005f11 	.word	0x08005f11
 8005ed0:	08005f11 	.word	0x08005f11
 8005ed4:	08005f11 	.word	0x08005f11
 8005ed8:	08005f11 	.word	0x08005f11
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e050      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e04c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e048      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e044      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f00:	2320      	movs	r3, #32
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e040      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f08:	2340      	movs	r3, #64	@ 0x40
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e03c      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f10:	2380      	movs	r3, #128	@ 0x80
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e038      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a71      	ldr	r2, [pc, #452]	@ (80060e4 <UART_SetConfig+0x908>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d130      	bne.n	8005f84 <UART_SetConfig+0x7a8>
 8005f22:	4b6f      	ldr	r3, [pc, #444]	@ (80060e0 <UART_SetConfig+0x904>)
 8005f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d826      	bhi.n	8005f7c <UART_SetConfig+0x7a0>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <UART_SetConfig+0x758>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f4d 	.word	0x08005f4d
 8005f38:	08005f55 	.word	0x08005f55
 8005f3c:	08005f5d 	.word	0x08005f5d
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e01a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e016      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e012      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e00e      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f6c:	2320      	movs	r3, #32
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e00a      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e006      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e002      	b.n	8005f8a <UART_SetConfig+0x7ae>
 8005f84:	2380      	movs	r3, #128	@ 0x80
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a55      	ldr	r2, [pc, #340]	@ (80060e4 <UART_SetConfig+0x908>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f040 80f8 	bne.w	8006186 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	dc46      	bgt.n	800602c <UART_SetConfig+0x850>
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	db75      	blt.n	800608e <UART_SetConfig+0x8b2>
 8005fa2:	3b02      	subs	r3, #2
 8005fa4:	2b1e      	cmp	r3, #30
 8005fa6:	d872      	bhi.n	800608e <UART_SetConfig+0x8b2>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x7d4>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08006033 	.word	0x08006033
 8005fb4:	0800608f 	.word	0x0800608f
 8005fb8:	0800603b 	.word	0x0800603b
 8005fbc:	0800608f 	.word	0x0800608f
 8005fc0:	0800608f 	.word	0x0800608f
 8005fc4:	0800608f 	.word	0x0800608f
 8005fc8:	0800604b 	.word	0x0800604b
 8005fcc:	0800608f 	.word	0x0800608f
 8005fd0:	0800608f 	.word	0x0800608f
 8005fd4:	0800608f 	.word	0x0800608f
 8005fd8:	0800608f 	.word	0x0800608f
 8005fdc:	0800608f 	.word	0x0800608f
 8005fe0:	0800608f 	.word	0x0800608f
 8005fe4:	0800608f 	.word	0x0800608f
 8005fe8:	0800605b 	.word	0x0800605b
 8005fec:	0800608f 	.word	0x0800608f
 8005ff0:	0800608f 	.word	0x0800608f
 8005ff4:	0800608f 	.word	0x0800608f
 8005ff8:	0800608f 	.word	0x0800608f
 8005ffc:	0800608f 	.word	0x0800608f
 8006000:	0800608f 	.word	0x0800608f
 8006004:	0800608f 	.word	0x0800608f
 8006008:	0800608f 	.word	0x0800608f
 800600c:	0800608f 	.word	0x0800608f
 8006010:	0800608f 	.word	0x0800608f
 8006014:	0800608f 	.word	0x0800608f
 8006018:	0800608f 	.word	0x0800608f
 800601c:	0800608f 	.word	0x0800608f
 8006020:	0800608f 	.word	0x0800608f
 8006024:	0800608f 	.word	0x0800608f
 8006028:	08006081 	.word	0x08006081
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d02a      	beq.n	8006086 <UART_SetConfig+0x8aa>
 8006030:	e02d      	b.n	800608e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006032:	f7fe ff57 	bl	8004ee4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006038:	e02f      	b.n	800609a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe ff66 	bl	8004f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006048:	e027      	b.n	800609a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800604a:	f107 0318 	add.w	r3, r7, #24
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f8b2 	bl	80051b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	e01f      	b.n	800609a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800605a:	4b21      	ldr	r3, [pc, #132]	@ (80060e0 <UART_SetConfig+0x904>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006066:	4b1e      	ldr	r3, [pc, #120]	@ (80060e0 <UART_SetConfig+0x904>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	08db      	lsrs	r3, r3, #3
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <UART_SetConfig+0x90c>)
 8006072:	fa22 f303 	lsr.w	r3, r2, r3
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006078:	e00f      	b.n	800609a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800607a:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <UART_SetConfig+0x90c>)
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607e:	e00c      	b.n	800609a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006080:	4b1a      	ldr	r3, [pc, #104]	@ (80060ec <UART_SetConfig+0x910>)
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006084:	e009      	b.n	800609a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800608c:	e005      	b.n	800609a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006098:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800609a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 81ee 	beq.w	800647e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	4a12      	ldr	r2, [pc, #72]	@ (80060f0 <UART_SetConfig+0x914>)
 80060a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d305      	bcc.n	80060d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d910      	bls.n	80060f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060d8:	e1d1      	b.n	800647e <UART_SetConfig+0xca2>
 80060da:	bf00      	nop
 80060dc:	40011c00 	.word	0x40011c00
 80060e0:	58024400 	.word	0x58024400
 80060e4:	58000c00 	.word	0x58000c00
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	08007fe0 	.word	0x08007fe0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f6:	2200      	movs	r2, #0
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	60fa      	str	r2, [r7, #12]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	4ac0      	ldr	r2, [pc, #768]	@ (8006404 <UART_SetConfig+0xc28>)
 8006102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006106:	b29b      	uxth	r3, r3
 8006108:	2200      	movs	r2, #0
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006112:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006116:	f7fa f93b 	bl	8000390 <__aeabi_uldivmod>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	020b      	lsls	r3, r1, #8
 800612c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006130:	0202      	lsls	r2, r0, #8
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	6849      	ldr	r1, [r1, #4]
 8006136:	0849      	lsrs	r1, r1, #1
 8006138:	2000      	movs	r0, #0
 800613a:	460c      	mov	r4, r1
 800613c:	4605      	mov	r5, r0
 800613e:	eb12 0804 	adds.w	r8, r2, r4
 8006142:	eb43 0905 	adc.w	r9, r3, r5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	469a      	mov	sl, r3
 800614e:	4693      	mov	fp, r2
 8006150:	4652      	mov	r2, sl
 8006152:	465b      	mov	r3, fp
 8006154:	4640      	mov	r0, r8
 8006156:	4649      	mov	r1, r9
 8006158:	f7fa f91a 	bl	8000390 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800616a:	d308      	bcc.n	800617e <UART_SetConfig+0x9a2>
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006172:	d204      	bcs.n	800617e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	e17f      	b.n	800647e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006184:	e17b      	b.n	800647e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618e:	f040 80bd 	bne.w	800630c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006192:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006196:	2b20      	cmp	r3, #32
 8006198:	dc48      	bgt.n	800622c <UART_SetConfig+0xa50>
 800619a:	2b00      	cmp	r3, #0
 800619c:	db7b      	blt.n	8006296 <UART_SetConfig+0xaba>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d879      	bhi.n	8006296 <UART_SetConfig+0xaba>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x9cc>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	08006233 	.word	0x08006233
 80061ac:	0800623b 	.word	0x0800623b
 80061b0:	08006297 	.word	0x08006297
 80061b4:	08006297 	.word	0x08006297
 80061b8:	08006243 	.word	0x08006243
 80061bc:	08006297 	.word	0x08006297
 80061c0:	08006297 	.word	0x08006297
 80061c4:	08006297 	.word	0x08006297
 80061c8:	08006253 	.word	0x08006253
 80061cc:	08006297 	.word	0x08006297
 80061d0:	08006297 	.word	0x08006297
 80061d4:	08006297 	.word	0x08006297
 80061d8:	08006297 	.word	0x08006297
 80061dc:	08006297 	.word	0x08006297
 80061e0:	08006297 	.word	0x08006297
 80061e4:	08006297 	.word	0x08006297
 80061e8:	08006263 	.word	0x08006263
 80061ec:	08006297 	.word	0x08006297
 80061f0:	08006297 	.word	0x08006297
 80061f4:	08006297 	.word	0x08006297
 80061f8:	08006297 	.word	0x08006297
 80061fc:	08006297 	.word	0x08006297
 8006200:	08006297 	.word	0x08006297
 8006204:	08006297 	.word	0x08006297
 8006208:	08006297 	.word	0x08006297
 800620c:	08006297 	.word	0x08006297
 8006210:	08006297 	.word	0x08006297
 8006214:	08006297 	.word	0x08006297
 8006218:	08006297 	.word	0x08006297
 800621c:	08006297 	.word	0x08006297
 8006220:	08006297 	.word	0x08006297
 8006224:	08006297 	.word	0x08006297
 8006228:	08006289 	.word	0x08006289
 800622c:	2b40      	cmp	r3, #64	@ 0x40
 800622e:	d02e      	beq.n	800628e <UART_SetConfig+0xab2>
 8006230:	e031      	b.n	8006296 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006232:	f7fd fc6d 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 8006236:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006238:	e033      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800623a:	f7fd fc7f 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 800623e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006240:	e02f      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fe62 	bl	8004f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006250:	e027      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006252:	f107 0318 	add.w	r3, r7, #24
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe ffae 	bl	80051b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006260:	e01f      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006262:	4b69      	ldr	r3, [pc, #420]	@ (8006408 <UART_SetConfig+0xc2c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800626e:	4b66      	ldr	r3, [pc, #408]	@ (8006408 <UART_SetConfig+0xc2c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	08db      	lsrs	r3, r3, #3
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	4a64      	ldr	r2, [pc, #400]	@ (800640c <UART_SetConfig+0xc30>)
 800627a:	fa22 f303 	lsr.w	r3, r2, r3
 800627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006280:	e00f      	b.n	80062a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006282:	4b62      	ldr	r3, [pc, #392]	@ (800640c <UART_SetConfig+0xc30>)
 8006284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006286:	e00c      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006288:	4b61      	ldr	r3, [pc, #388]	@ (8006410 <UART_SetConfig+0xc34>)
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628c:	e009      	b.n	80062a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	e005      	b.n	80062a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80ea 	beq.w	800647e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	4a55      	ldr	r2, [pc, #340]	@ (8006404 <UART_SetConfig+0xc28>)
 80062b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b4:	461a      	mov	r2, r3
 80062b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062bc:	005a      	lsls	r2, r3, #1
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	441a      	add	r2, r3
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d916      	bls.n	8006304 <UART_SetConfig+0xb28>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062dc:	d212      	bcs.n	8006304 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f023 030f 	bic.w	r3, r3, #15
 80062e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062f6:	4313      	orrs	r3, r2
 80062f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	e0bc      	b.n	800647e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800630a:	e0b8      	b.n	800647e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800630c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006310:	2b20      	cmp	r3, #32
 8006312:	dc4b      	bgt.n	80063ac <UART_SetConfig+0xbd0>
 8006314:	2b00      	cmp	r3, #0
 8006316:	f2c0 8087 	blt.w	8006428 <UART_SetConfig+0xc4c>
 800631a:	2b20      	cmp	r3, #32
 800631c:	f200 8084 	bhi.w	8006428 <UART_SetConfig+0xc4c>
 8006320:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <UART_SetConfig+0xb4c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	080063b3 	.word	0x080063b3
 800632c:	080063bb 	.word	0x080063bb
 8006330:	08006429 	.word	0x08006429
 8006334:	08006429 	.word	0x08006429
 8006338:	080063c3 	.word	0x080063c3
 800633c:	08006429 	.word	0x08006429
 8006340:	08006429 	.word	0x08006429
 8006344:	08006429 	.word	0x08006429
 8006348:	080063d3 	.word	0x080063d3
 800634c:	08006429 	.word	0x08006429
 8006350:	08006429 	.word	0x08006429
 8006354:	08006429 	.word	0x08006429
 8006358:	08006429 	.word	0x08006429
 800635c:	08006429 	.word	0x08006429
 8006360:	08006429 	.word	0x08006429
 8006364:	08006429 	.word	0x08006429
 8006368:	080063e3 	.word	0x080063e3
 800636c:	08006429 	.word	0x08006429
 8006370:	08006429 	.word	0x08006429
 8006374:	08006429 	.word	0x08006429
 8006378:	08006429 	.word	0x08006429
 800637c:	08006429 	.word	0x08006429
 8006380:	08006429 	.word	0x08006429
 8006384:	08006429 	.word	0x08006429
 8006388:	08006429 	.word	0x08006429
 800638c:	08006429 	.word	0x08006429
 8006390:	08006429 	.word	0x08006429
 8006394:	08006429 	.word	0x08006429
 8006398:	08006429 	.word	0x08006429
 800639c:	08006429 	.word	0x08006429
 80063a0:	08006429 	.word	0x08006429
 80063a4:	08006429 	.word	0x08006429
 80063a8:	0800641b 	.word	0x0800641b
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	d037      	beq.n	8006420 <UART_SetConfig+0xc44>
 80063b0:	e03a      	b.n	8006428 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b2:	f7fd fbad 	bl	8003b10 <HAL_RCC_GetPCLK1Freq>
 80063b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b8:	e03c      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063ba:	f7fd fbbf 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
 80063be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c0:	e038      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fda2 	bl	8004f10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d0:	e030      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063d2:	f107 0318 	add.w	r3, r7, #24
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe feee 	bl	80051b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e0:	e028      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <UART_SetConfig+0xc2c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ee:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <UART_SetConfig+0xc2c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	08db      	lsrs	r3, r3, #3
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	4a04      	ldr	r2, [pc, #16]	@ (800640c <UART_SetConfig+0xc30>)
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006400:	e018      	b.n	8006434 <UART_SetConfig+0xc58>
 8006402:	bf00      	nop
 8006404:	08007fe0 	.word	0x08007fe0
 8006408:	58024400 	.word	0x58024400
 800640c:	03d09000 	.word	0x03d09000
 8006410:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006414:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <UART_SetConfig+0xccc>)
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006418:	e00c      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800641a:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <UART_SetConfig+0xcd0>)
 800641c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800641e:	e009      	b.n	8006434 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006426:	e005      	b.n	8006434 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006432:	bf00      	nop
    }

    if (pclk != 0U)
 8006434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d021      	beq.n	800647e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <UART_SetConfig+0xcd4>)
 8006440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006444:	461a      	mov	r2, r3
 8006446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006448:	fbb3 f2f2 	udiv	r2, r3, r2
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	441a      	add	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	2b0f      	cmp	r3, #15
 8006462:	d909      	bls.n	8006478 <UART_SetConfig+0xc9c>
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646a:	d205      	bcs.n	8006478 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800646c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646e:	b29a      	uxth	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60da      	str	r2, [r3, #12]
 8006476:	e002      	b.n	800647e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2201      	movs	r2, #1
 8006482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2201      	movs	r2, #1
 800648a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2200      	movs	r2, #0
 8006498:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800649a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3748      	adds	r7, #72	@ 0x48
 80064a2:	46bd      	mov	sp, r7
 80064a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	003d0900 	.word	0x003d0900
 80064b0:	08007fe0 	.word	0x08007fe0

080064b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01a      	beq.n	80065ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065b2:	d10a      	bne.n	80065ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b098      	sub	sp, #96	@ 0x60
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006608:	f7fb f9e2 	bl	80019d0 <HAL_GetTick>
 800660c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d12f      	bne.n	800667c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800661c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006624:	2200      	movs	r2, #0
 8006626:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f88e 	bl	800674c <UART_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d022      	beq.n	800667c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800664a:	653b      	str	r3, [r7, #80]	@ 0x50
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006654:	647b      	str	r3, [r7, #68]	@ 0x44
 8006656:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800665a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e6      	bne.n	8006636 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e063      	b.n	8006744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d149      	bne.n	800671e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800668a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006692:	2200      	movs	r2, #0
 8006694:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f857 	bl	800674c <UART_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d03c      	beq.n	800671e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	623b      	str	r3, [r7, #32]
   return(result);
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f023 0301 	bic.w	r3, r3, #1
 80066ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f6:	61fa      	str	r2, [r7, #28]
 80066f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	69b9      	ldr	r1, [r7, #24]
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	617b      	str	r3, [r7, #20]
   return(result);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e012      	b.n	8006744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3758      	adds	r7, #88	@ 0x58
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675c:	e04f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d04b      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006766:	f7fb f933 	bl	80019d0 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	429a      	cmp	r2, r3
 8006774:	d302      	bcc.n	800677c <UART_WaitOnFlagUntilTimeout+0x30>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e04e      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d037      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b80      	cmp	r3, #128	@ 0x80
 8006792:	d034      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b40      	cmp	r3, #64	@ 0x40
 8006798:	d031      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d110      	bne.n	80067ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2208      	movs	r2, #8
 80067ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f839 	bl	8006828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2208      	movs	r2, #8
 80067ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e029      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d8:	d111      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f81f 	bl	8006828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d0a0      	beq.n	800675e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b095      	sub	sp, #84	@ 0x54
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006850:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e6      	bne.n	8006830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	61fb      	str	r3, [r7, #28]
   return(result);
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	4b1e      	ldr	r3, [pc, #120]	@ (80068f0 <UART_EndRxTransfer+0xc8>)
 8006876:	4013      	ands	r3, r2
 8006878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e5      	bne.n	8006862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d118      	bne.n	80068d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0310 	bic.w	r3, r3, #16
 80068b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6979      	ldr	r1, [r7, #20]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e6      	bne.n	800689e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068e4:	bf00      	nop
 80068e6:	3754      	adds	r7, #84	@ 0x54
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	effffffe 	.word	0xeffffffe

080068f4 <siprintf>:
 80068f4:	b40e      	push	{r1, r2, r3}
 80068f6:	b500      	push	{lr}
 80068f8:	b09c      	sub	sp, #112	@ 0x70
 80068fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	9006      	str	r0, [sp, #24]
 8006900:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006904:	4809      	ldr	r0, [pc, #36]	@ (800692c <siprintf+0x38>)
 8006906:	9107      	str	r1, [sp, #28]
 8006908:	9104      	str	r1, [sp, #16]
 800690a:	4909      	ldr	r1, [pc, #36]	@ (8006930 <siprintf+0x3c>)
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006910:	9105      	str	r1, [sp, #20]
 8006912:	6800      	ldr	r0, [r0, #0]
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	a902      	add	r1, sp, #8
 8006918:	f000 f9bc 	bl	8006c94 <_svfiprintf_r>
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	b01c      	add	sp, #112	@ 0x70
 8006924:	f85d eb04 	ldr.w	lr, [sp], #4
 8006928:	b003      	add	sp, #12
 800692a:	4770      	bx	lr
 800692c:	2400002c 	.word	0x2400002c
 8006930:	ffff0208 	.word	0xffff0208

08006934 <memmove>:
 8006934:	4288      	cmp	r0, r1
 8006936:	b510      	push	{r4, lr}
 8006938:	eb01 0402 	add.w	r4, r1, r2
 800693c:	d902      	bls.n	8006944 <memmove+0x10>
 800693e:	4284      	cmp	r4, r0
 8006940:	4623      	mov	r3, r4
 8006942:	d807      	bhi.n	8006954 <memmove+0x20>
 8006944:	1e43      	subs	r3, r0, #1
 8006946:	42a1      	cmp	r1, r4
 8006948:	d008      	beq.n	800695c <memmove+0x28>
 800694a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800694e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006952:	e7f8      	b.n	8006946 <memmove+0x12>
 8006954:	4402      	add	r2, r0
 8006956:	4601      	mov	r1, r0
 8006958:	428a      	cmp	r2, r1
 800695a:	d100      	bne.n	800695e <memmove+0x2a>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006966:	e7f7      	b.n	8006958 <memmove+0x24>

08006968 <memset>:
 8006968:	4402      	add	r2, r0
 800696a:	4603      	mov	r3, r0
 800696c:	4293      	cmp	r3, r2
 800696e:	d100      	bne.n	8006972 <memset+0xa>
 8006970:	4770      	bx	lr
 8006972:	f803 1b01 	strb.w	r1, [r3], #1
 8006976:	e7f9      	b.n	800696c <memset+0x4>

08006978 <__errno>:
 8006978:	4b01      	ldr	r3, [pc, #4]	@ (8006980 <__errno+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	2400002c 	.word	0x2400002c

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4d0d      	ldr	r5, [pc, #52]	@ (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	@ (80069c0 <__libc_init_array+0x3c>)
 800698a:	1b64      	subs	r4, r4, r5
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2600      	movs	r6, #0
 8006990:	42a6      	cmp	r6, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4d0b      	ldr	r5, [pc, #44]	@ (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	@ (80069c8 <__libc_init_array+0x44>)
 8006998:	f000 fc4c 	bl	8007234 <_init>
 800699c:	1b64      	subs	r4, r4, r5
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2600      	movs	r6, #0
 80069a2:	42a6      	cmp	r6, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ac:	4798      	blx	r3
 80069ae:	3601      	adds	r6, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b6:	4798      	blx	r3
 80069b8:	3601      	adds	r6, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	08008034 	.word	0x08008034
 80069c0:	08008034 	.word	0x08008034
 80069c4:	08008034 	.word	0x08008034
 80069c8:	08008038 	.word	0x08008038

080069cc <__retarget_lock_acquire_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_release_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <memcpy>:
 80069d0:	440a      	add	r2, r1
 80069d2:	4291      	cmp	r1, r2
 80069d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069d8:	d100      	bne.n	80069dc <memcpy+0xc>
 80069da:	4770      	bx	lr
 80069dc:	b510      	push	{r4, lr}
 80069de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e6:	4291      	cmp	r1, r2
 80069e8:	d1f9      	bne.n	80069de <memcpy+0xe>
 80069ea:	bd10      	pop	{r4, pc}

080069ec <_free_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4605      	mov	r5, r0
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d041      	beq.n	8006a78 <_free_r+0x8c>
 80069f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f8:	1f0c      	subs	r4, r1, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bfb8      	it	lt
 80069fe:	18e4      	addlt	r4, r4, r3
 8006a00:	f000 f8e0 	bl	8006bc4 <__malloc_lock>
 8006a04:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <_free_r+0x90>)
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	b933      	cbnz	r3, 8006a18 <_free_r+0x2c>
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	6014      	str	r4, [r2, #0]
 8006a0e:	4628      	mov	r0, r5
 8006a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a14:	f000 b8dc 	b.w	8006bd0 <__malloc_unlock>
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d908      	bls.n	8006a2e <_free_r+0x42>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	1821      	adds	r1, r4, r0
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf01      	itttt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	1809      	addeq	r1, r1, r0
 8006a2a:	6021      	streq	r1, [r4, #0]
 8006a2c:	e7ed      	b.n	8006a0a <_free_r+0x1e>
 8006a2e:	461a      	mov	r2, r3
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b10b      	cbz	r3, 8006a38 <_free_r+0x4c>
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d9fa      	bls.n	8006a2e <_free_r+0x42>
 8006a38:	6811      	ldr	r1, [r2, #0]
 8006a3a:	1850      	adds	r0, r2, r1
 8006a3c:	42a0      	cmp	r0, r4
 8006a3e:	d10b      	bne.n	8006a58 <_free_r+0x6c>
 8006a40:	6820      	ldr	r0, [r4, #0]
 8006a42:	4401      	add	r1, r0
 8006a44:	1850      	adds	r0, r2, r1
 8006a46:	4283      	cmp	r3, r0
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	d1e0      	bne.n	8006a0e <_free_r+0x22>
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	6053      	str	r3, [r2, #4]
 8006a52:	4408      	add	r0, r1
 8006a54:	6010      	str	r0, [r2, #0]
 8006a56:	e7da      	b.n	8006a0e <_free_r+0x22>
 8006a58:	d902      	bls.n	8006a60 <_free_r+0x74>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	e7d6      	b.n	8006a0e <_free_r+0x22>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	1821      	adds	r1, r4, r0
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf04      	itt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	bf04      	itt	eq
 8006a70:	1809      	addeq	r1, r1, r0
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	6054      	str	r4, [r2, #4]
 8006a76:	e7ca      	b.n	8006a0e <_free_r+0x22>
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	bf00      	nop
 8006a7c:	240006ec 	.word	0x240006ec

08006a80 <sbrk_aligned>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4e0f      	ldr	r6, [pc, #60]	@ (8006ac0 <sbrk_aligned+0x40>)
 8006a84:	460c      	mov	r4, r1
 8006a86:	6831      	ldr	r1, [r6, #0]
 8006a88:	4605      	mov	r5, r0
 8006a8a:	b911      	cbnz	r1, 8006a92 <sbrk_aligned+0x12>
 8006a8c:	f000 fb8c 	bl	80071a8 <_sbrk_r>
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fb87 	bl	80071a8 <_sbrk_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d103      	bne.n	8006aa6 <sbrk_aligned+0x26>
 8006a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d0f8      	beq.n	8006aa2 <sbrk_aligned+0x22>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fb78 	bl	80071a8 <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d1f2      	bne.n	8006aa2 <sbrk_aligned+0x22>
 8006abc:	e7ef      	b.n	8006a9e <sbrk_aligned+0x1e>
 8006abe:	bf00      	nop
 8006ac0:	240006e8 	.word	0x240006e8

08006ac4 <_malloc_r>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4606      	mov	r6, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d904      	bls.n	8006aea <_malloc_r+0x26>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bc0 <_malloc_r+0xfc>
 8006aee:	f000 f869 	bl	8006bc4 <__malloc_lock>
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	461c      	mov	r4, r3
 8006af8:	bb44      	cbnz	r4, 8006b4c <_malloc_r+0x88>
 8006afa:	4629      	mov	r1, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff ffbf 	bl	8006a80 <sbrk_aligned>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	4604      	mov	r4, r0
 8006b06:	d158      	bne.n	8006bba <_malloc_r+0xf6>
 8006b08:	f8d8 4000 	ldr.w	r4, [r8]
 8006b0c:	4627      	mov	r7, r4
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	d143      	bne.n	8006b9a <_malloc_r+0xd6>
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	d04b      	beq.n	8006bae <_malloc_r+0xea>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	eb04 0903 	add.w	r9, r4, r3
 8006b20:	f000 fb42 	bl	80071a8 <_sbrk_r>
 8006b24:	4581      	cmp	r9, r0
 8006b26:	d142      	bne.n	8006bae <_malloc_r+0xea>
 8006b28:	6821      	ldr	r1, [r4, #0]
 8006b2a:	1a6d      	subs	r5, r5, r1
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff ffa6 	bl	8006a80 <sbrk_aligned>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d03a      	beq.n	8006bae <_malloc_r+0xea>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	442b      	add	r3, r5
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	bb62      	cbnz	r2, 8006ba0 <_malloc_r+0xdc>
 8006b46:	f8c8 7000 	str.w	r7, [r8]
 8006b4a:	e00f      	b.n	8006b6c <_malloc_r+0xa8>
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	1b52      	subs	r2, r2, r5
 8006b50:	d420      	bmi.n	8006b94 <_malloc_r+0xd0>
 8006b52:	2a0b      	cmp	r2, #11
 8006b54:	d917      	bls.n	8006b86 <_malloc_r+0xc2>
 8006b56:	1961      	adds	r1, r4, r5
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	6025      	str	r5, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	6059      	strne	r1, [r3, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	bf08      	it	eq
 8006b64:	f8c8 1000 	streq.w	r1, [r8]
 8006b68:	5162      	str	r2, [r4, r5]
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f82f 	bl	8006bd0 <__malloc_unlock>
 8006b72:	f104 000b 	add.w	r0, r4, #11
 8006b76:	1d23      	adds	r3, r4, #4
 8006b78:	f020 0007 	bic.w	r0, r0, #7
 8006b7c:	1ac2      	subs	r2, r0, r3
 8006b7e:	bf1c      	itt	ne
 8006b80:	1a1b      	subne	r3, r3, r0
 8006b82:	50a3      	strne	r3, [r4, r2]
 8006b84:	e7af      	b.n	8006ae6 <_malloc_r+0x22>
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	bf0c      	ite	eq
 8006b8c:	f8c8 2000 	streq.w	r2, [r8]
 8006b90:	605a      	strne	r2, [r3, #4]
 8006b92:	e7eb      	b.n	8006b6c <_malloc_r+0xa8>
 8006b94:	4623      	mov	r3, r4
 8006b96:	6864      	ldr	r4, [r4, #4]
 8006b98:	e7ae      	b.n	8006af8 <_malloc_r+0x34>
 8006b9a:	463c      	mov	r4, r7
 8006b9c:	687f      	ldr	r7, [r7, #4]
 8006b9e:	e7b6      	b.n	8006b0e <_malloc_r+0x4a>
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d1fb      	bne.n	8006ba0 <_malloc_r+0xdc>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6053      	str	r3, [r2, #4]
 8006bac:	e7de      	b.n	8006b6c <_malloc_r+0xa8>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	6033      	str	r3, [r6, #0]
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f000 f80c 	bl	8006bd0 <__malloc_unlock>
 8006bb8:	e794      	b.n	8006ae4 <_malloc_r+0x20>
 8006bba:	6005      	str	r5, [r0, #0]
 8006bbc:	e7d6      	b.n	8006b6c <_malloc_r+0xa8>
 8006bbe:	bf00      	nop
 8006bc0:	240006ec 	.word	0x240006ec

08006bc4 <__malloc_lock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	@ (8006bcc <__malloc_lock+0x8>)
 8006bc6:	f7ff bf01 	b.w	80069cc <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	240006e4 	.word	0x240006e4

08006bd0 <__malloc_unlock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_unlock+0x8>)
 8006bd2:	f7ff befc 	b.w	80069ce <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	240006e4 	.word	0x240006e4

08006bdc <__ssputs_r>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	688e      	ldr	r6, [r1, #8]
 8006be2:	461f      	mov	r7, r3
 8006be4:	42be      	cmp	r6, r7
 8006be6:	680b      	ldr	r3, [r1, #0]
 8006be8:	4682      	mov	sl, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	4690      	mov	r8, r2
 8006bee:	d82d      	bhi.n	8006c4c <__ssputs_r+0x70>
 8006bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bf8:	d026      	beq.n	8006c48 <__ssputs_r+0x6c>
 8006bfa:	6965      	ldr	r5, [r4, #20]
 8006bfc:	6909      	ldr	r1, [r1, #16]
 8006bfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c02:	eba3 0901 	sub.w	r9, r3, r1
 8006c06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c0a:	1c7b      	adds	r3, r7, #1
 8006c0c:	444b      	add	r3, r9
 8006c0e:	106d      	asrs	r5, r5, #1
 8006c10:	429d      	cmp	r5, r3
 8006c12:	bf38      	it	cc
 8006c14:	461d      	movcc	r5, r3
 8006c16:	0553      	lsls	r3, r2, #21
 8006c18:	d527      	bpl.n	8006c6a <__ssputs_r+0x8e>
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7ff ff52 	bl	8006ac4 <_malloc_r>
 8006c20:	4606      	mov	r6, r0
 8006c22:	b360      	cbz	r0, 8006c7e <__ssputs_r+0xa2>
 8006c24:	6921      	ldr	r1, [r4, #16]
 8006c26:	464a      	mov	r2, r9
 8006c28:	f7ff fed2 	bl	80069d0 <memcpy>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	6126      	str	r6, [r4, #16]
 8006c3a:	6165      	str	r5, [r4, #20]
 8006c3c:	444e      	add	r6, r9
 8006c3e:	eba5 0509 	sub.w	r5, r5, r9
 8006c42:	6026      	str	r6, [r4, #0]
 8006c44:	60a5      	str	r5, [r4, #8]
 8006c46:	463e      	mov	r6, r7
 8006c48:	42be      	cmp	r6, r7
 8006c4a:	d900      	bls.n	8006c4e <__ssputs_r+0x72>
 8006c4c:	463e      	mov	r6, r7
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	4632      	mov	r2, r6
 8006c52:	4641      	mov	r1, r8
 8006c54:	f7ff fe6e 	bl	8006934 <memmove>
 8006c58:	68a3      	ldr	r3, [r4, #8]
 8006c5a:	1b9b      	subs	r3, r3, r6
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	4433      	add	r3, r6
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	2000      	movs	r0, #0
 8006c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	f000 faac 	bl	80071c8 <_realloc_r>
 8006c70:	4606      	mov	r6, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1e0      	bne.n	8006c38 <__ssputs_r+0x5c>
 8006c76:	6921      	ldr	r1, [r4, #16]
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f7ff feb7 	bl	80069ec <_free_r>
 8006c7e:	230c      	movs	r3, #12
 8006c80:	f8ca 3000 	str.w	r3, [sl]
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	e7e9      	b.n	8006c66 <__ssputs_r+0x8a>
	...

08006c94 <_svfiprintf_r>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	4698      	mov	r8, r3
 8006c9a:	898b      	ldrh	r3, [r1, #12]
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	b09d      	sub	sp, #116	@ 0x74
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	d510      	bpl.n	8006cca <_svfiprintf_r+0x36>
 8006ca8:	690b      	ldr	r3, [r1, #16]
 8006caa:	b973      	cbnz	r3, 8006cca <_svfiprintf_r+0x36>
 8006cac:	2140      	movs	r1, #64	@ 0x40
 8006cae:	f7ff ff09 	bl	8006ac4 <_malloc_r>
 8006cb2:	6028      	str	r0, [r5, #0]
 8006cb4:	6128      	str	r0, [r5, #16]
 8006cb6:	b930      	cbnz	r0, 8006cc6 <_svfiprintf_r+0x32>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	b01d      	add	sp, #116	@ 0x74
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	2340      	movs	r3, #64	@ 0x40
 8006cc8:	616b      	str	r3, [r5, #20]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd8:	2330      	movs	r3, #48	@ 0x30
 8006cda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e78 <_svfiprintf_r+0x1e4>
 8006cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ce2:	f04f 0901 	mov.w	r9, #1
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	469a      	mov	sl, r3
 8006cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cee:	b10a      	cbz	r2, 8006cf4 <_svfiprintf_r+0x60>
 8006cf0:	2a25      	cmp	r2, #37	@ 0x25
 8006cf2:	d1f9      	bne.n	8006ce8 <_svfiprintf_r+0x54>
 8006cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf8:	d00b      	beq.n	8006d12 <_svfiprintf_r+0x7e>
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4638      	mov	r0, r7
 8006d02:	f7ff ff6b 	bl	8006bdc <__ssputs_r>
 8006d06:	3001      	adds	r0, #1
 8006d08:	f000 80a7 	beq.w	8006e5a <_svfiprintf_r+0x1c6>
 8006d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d0e:	445a      	add	r2, fp
 8006d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 809f 	beq.w	8006e5a <_svfiprintf_r+0x1c6>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d26:	f10a 0a01 	add.w	sl, sl, #1
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	9307      	str	r3, [sp, #28]
 8006d2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d32:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d34:	4654      	mov	r4, sl
 8006d36:	2205      	movs	r2, #5
 8006d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3c:	484e      	ldr	r0, [pc, #312]	@ (8006e78 <_svfiprintf_r+0x1e4>)
 8006d3e:	f7f9 fad7 	bl	80002f0 <memchr>
 8006d42:	9a04      	ldr	r2, [sp, #16]
 8006d44:	b9d8      	cbnz	r0, 8006d7e <_svfiprintf_r+0xea>
 8006d46:	06d0      	lsls	r0, r2, #27
 8006d48:	bf44      	itt	mi
 8006d4a:	2320      	movmi	r3, #32
 8006d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d50:	0711      	lsls	r1, r2, #28
 8006d52:	bf44      	itt	mi
 8006d54:	232b      	movmi	r3, #43	@ 0x2b
 8006d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d60:	d015      	beq.n	8006d8e <_svfiprintf_r+0xfa>
 8006d62:	9a07      	ldr	r2, [sp, #28]
 8006d64:	4654      	mov	r4, sl
 8006d66:	2000      	movs	r0, #0
 8006d68:	f04f 0c0a 	mov.w	ip, #10
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d72:	3b30      	subs	r3, #48	@ 0x30
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d94b      	bls.n	8006e10 <_svfiprintf_r+0x17c>
 8006d78:	b1b0      	cbz	r0, 8006da8 <_svfiprintf_r+0x114>
 8006d7a:	9207      	str	r2, [sp, #28]
 8006d7c:	e014      	b.n	8006da8 <_svfiprintf_r+0x114>
 8006d7e:	eba0 0308 	sub.w	r3, r0, r8
 8006d82:	fa09 f303 	lsl.w	r3, r9, r3
 8006d86:	4313      	orrs	r3, r2
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	46a2      	mov	sl, r4
 8006d8c:	e7d2      	b.n	8006d34 <_svfiprintf_r+0xa0>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	1d19      	adds	r1, r3, #4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	9103      	str	r1, [sp, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfbb      	ittet	lt
 8006d9a:	425b      	neglt	r3, r3
 8006d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006da0:	9307      	strge	r3, [sp, #28]
 8006da2:	9307      	strlt	r3, [sp, #28]
 8006da4:	bfb8      	it	lt
 8006da6:	9204      	strlt	r2, [sp, #16]
 8006da8:	7823      	ldrb	r3, [r4, #0]
 8006daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dac:	d10a      	bne.n	8006dc4 <_svfiprintf_r+0x130>
 8006dae:	7863      	ldrb	r3, [r4, #1]
 8006db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db2:	d132      	bne.n	8006e1a <_svfiprintf_r+0x186>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9203      	str	r2, [sp, #12]
 8006dbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dc0:	3402      	adds	r4, #2
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e88 <_svfiprintf_r+0x1f4>
 8006dc8:	7821      	ldrb	r1, [r4, #0]
 8006dca:	2203      	movs	r2, #3
 8006dcc:	4650      	mov	r0, sl
 8006dce:	f7f9 fa8f 	bl	80002f0 <memchr>
 8006dd2:	b138      	cbz	r0, 8006de4 <_svfiprintf_r+0x150>
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	eba0 000a 	sub.w	r0, r0, sl
 8006dda:	2240      	movs	r2, #64	@ 0x40
 8006ddc:	4082      	lsls	r2, r0
 8006dde:	4313      	orrs	r3, r2
 8006de0:	3401      	adds	r4, #1
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de8:	4824      	ldr	r0, [pc, #144]	@ (8006e7c <_svfiprintf_r+0x1e8>)
 8006dea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006dee:	2206      	movs	r2, #6
 8006df0:	f7f9 fa7e 	bl	80002f0 <memchr>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d036      	beq.n	8006e66 <_svfiprintf_r+0x1d2>
 8006df8:	4b21      	ldr	r3, [pc, #132]	@ (8006e80 <_svfiprintf_r+0x1ec>)
 8006dfa:	bb1b      	cbnz	r3, 8006e44 <_svfiprintf_r+0x1b0>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	3307      	adds	r3, #7
 8006e00:	f023 0307 	bic.w	r3, r3, #7
 8006e04:	3308      	adds	r3, #8
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	4433      	add	r3, r6
 8006e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0e:	e76a      	b.n	8006ce6 <_svfiprintf_r+0x52>
 8006e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e14:	460c      	mov	r4, r1
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7a8      	b.n	8006d6c <_svfiprintf_r+0xd8>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	3401      	adds	r4, #1
 8006e1e:	9305      	str	r3, [sp, #20]
 8006e20:	4619      	mov	r1, r3
 8006e22:	f04f 0c0a 	mov.w	ip, #10
 8006e26:	4620      	mov	r0, r4
 8006e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2c:	3a30      	subs	r2, #48	@ 0x30
 8006e2e:	2a09      	cmp	r2, #9
 8006e30:	d903      	bls.n	8006e3a <_svfiprintf_r+0x1a6>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c6      	beq.n	8006dc4 <_svfiprintf_r+0x130>
 8006e36:	9105      	str	r1, [sp, #20]
 8006e38:	e7c4      	b.n	8006dc4 <_svfiprintf_r+0x130>
 8006e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e3e:	4604      	mov	r4, r0
 8006e40:	2301      	movs	r3, #1
 8006e42:	e7f0      	b.n	8006e26 <_svfiprintf_r+0x192>
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e84 <_svfiprintf_r+0x1f0>)
 8006e4c:	a904      	add	r1, sp, #16
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f3af 8000 	nop.w
 8006e54:	1c42      	adds	r2, r0, #1
 8006e56:	4606      	mov	r6, r0
 8006e58:	d1d6      	bne.n	8006e08 <_svfiprintf_r+0x174>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	065b      	lsls	r3, r3, #25
 8006e5e:	f53f af2d 	bmi.w	8006cbc <_svfiprintf_r+0x28>
 8006e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e64:	e72c      	b.n	8006cc0 <_svfiprintf_r+0x2c>
 8006e66:	ab03      	add	r3, sp, #12
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	462a      	mov	r2, r5
 8006e6c:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <_svfiprintf_r+0x1f0>)
 8006e6e:	a904      	add	r1, sp, #16
 8006e70:	4638      	mov	r0, r7
 8006e72:	f000 f879 	bl	8006f68 <_printf_i>
 8006e76:	e7ed      	b.n	8006e54 <_svfiprintf_r+0x1c0>
 8006e78:	08007ff8 	.word	0x08007ff8
 8006e7c:	08008002 	.word	0x08008002
 8006e80:	00000000 	.word	0x00000000
 8006e84:	08006bdd 	.word	0x08006bdd
 8006e88:	08007ffe 	.word	0x08007ffe

08006e8c <_printf_common>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	4616      	mov	r6, r2
 8006e92:	4698      	mov	r8, r3
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bfb8      	it	lt
 8006ea0:	4613      	movlt	r3, r2
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ea8:	4607      	mov	r7, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	b10a      	cbz	r2, 8006eb2 <_printf_common+0x26>
 8006eae:	3301      	adds	r3, #1
 8006eb0:	6033      	str	r3, [r6, #0]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	0699      	lsls	r1, r3, #26
 8006eb6:	bf42      	ittt	mi
 8006eb8:	6833      	ldrmi	r3, [r6, #0]
 8006eba:	3302      	addmi	r3, #2
 8006ebc:	6033      	strmi	r3, [r6, #0]
 8006ebe:	6825      	ldr	r5, [r4, #0]
 8006ec0:	f015 0506 	ands.w	r5, r5, #6
 8006ec4:	d106      	bne.n	8006ed4 <_printf_common+0x48>
 8006ec6:	f104 0a19 	add.w	sl, r4, #25
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	6832      	ldr	r2, [r6, #0]
 8006ece:	1a9b      	subs	r3, r3, r2
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	dc26      	bgt.n	8006f22 <_printf_common+0x96>
 8006ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	3b00      	subs	r3, #0
 8006edc:	bf18      	it	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	0692      	lsls	r2, r2, #26
 8006ee2:	d42b      	bmi.n	8006f3c <_printf_common+0xb0>
 8006ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ee8:	4641      	mov	r1, r8
 8006eea:	4638      	mov	r0, r7
 8006eec:	47c8      	blx	r9
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d01e      	beq.n	8006f30 <_printf_common+0xa4>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	6922      	ldr	r2, [r4, #16]
 8006ef6:	f003 0306 	and.w	r3, r3, #6
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	bf02      	ittt	eq
 8006efe:	68e5      	ldreq	r5, [r4, #12]
 8006f00:	6833      	ldreq	r3, [r6, #0]
 8006f02:	1aed      	subeq	r5, r5, r3
 8006f04:	68a3      	ldr	r3, [r4, #8]
 8006f06:	bf0c      	ite	eq
 8006f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f0c:	2500      	movne	r5, #0
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	bfc4      	itt	gt
 8006f12:	1a9b      	subgt	r3, r3, r2
 8006f14:	18ed      	addgt	r5, r5, r3
 8006f16:	2600      	movs	r6, #0
 8006f18:	341a      	adds	r4, #26
 8006f1a:	42b5      	cmp	r5, r6
 8006f1c:	d11a      	bne.n	8006f54 <_printf_common+0xc8>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e008      	b.n	8006f34 <_printf_common+0xa8>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4652      	mov	r2, sl
 8006f26:	4641      	mov	r1, r8
 8006f28:	4638      	mov	r0, r7
 8006f2a:	47c8      	blx	r9
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d103      	bne.n	8006f38 <_printf_common+0xac>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f38:	3501      	adds	r5, #1
 8006f3a:	e7c6      	b.n	8006eca <_printf_common+0x3e>
 8006f3c:	18e1      	adds	r1, r4, r3
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	2030      	movs	r0, #48	@ 0x30
 8006f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f46:	4422      	add	r2, r4
 8006f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f50:	3302      	adds	r3, #2
 8006f52:	e7c7      	b.n	8006ee4 <_printf_common+0x58>
 8006f54:	2301      	movs	r3, #1
 8006f56:	4622      	mov	r2, r4
 8006f58:	4641      	mov	r1, r8
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	47c8      	blx	r9
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d0e6      	beq.n	8006f30 <_printf_common+0xa4>
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7d9      	b.n	8006f1a <_printf_common+0x8e>
	...

08006f68 <_printf_i>:
 8006f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	7e0f      	ldrb	r7, [r1, #24]
 8006f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f70:	2f78      	cmp	r7, #120	@ 0x78
 8006f72:	4691      	mov	r9, r2
 8006f74:	4680      	mov	r8, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	469a      	mov	sl, r3
 8006f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f7e:	d807      	bhi.n	8006f90 <_printf_i+0x28>
 8006f80:	2f62      	cmp	r7, #98	@ 0x62
 8006f82:	d80a      	bhi.n	8006f9a <_printf_i+0x32>
 8006f84:	2f00      	cmp	r7, #0
 8006f86:	f000 80d2 	beq.w	800712e <_printf_i+0x1c6>
 8006f8a:	2f58      	cmp	r7, #88	@ 0x58
 8006f8c:	f000 80b9 	beq.w	8007102 <_printf_i+0x19a>
 8006f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f98:	e03a      	b.n	8007010 <_printf_i+0xa8>
 8006f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f9e:	2b15      	cmp	r3, #21
 8006fa0:	d8f6      	bhi.n	8006f90 <_printf_i+0x28>
 8006fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fa8 <_printf_i+0x40>)
 8006fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fa8:	08007001 	.word	0x08007001
 8006fac:	08007015 	.word	0x08007015
 8006fb0:	08006f91 	.word	0x08006f91
 8006fb4:	08006f91 	.word	0x08006f91
 8006fb8:	08006f91 	.word	0x08006f91
 8006fbc:	08006f91 	.word	0x08006f91
 8006fc0:	08007015 	.word	0x08007015
 8006fc4:	08006f91 	.word	0x08006f91
 8006fc8:	08006f91 	.word	0x08006f91
 8006fcc:	08006f91 	.word	0x08006f91
 8006fd0:	08006f91 	.word	0x08006f91
 8006fd4:	08007115 	.word	0x08007115
 8006fd8:	0800703f 	.word	0x0800703f
 8006fdc:	080070cf 	.word	0x080070cf
 8006fe0:	08006f91 	.word	0x08006f91
 8006fe4:	08006f91 	.word	0x08006f91
 8006fe8:	08007137 	.word	0x08007137
 8006fec:	08006f91 	.word	0x08006f91
 8006ff0:	0800703f 	.word	0x0800703f
 8006ff4:	08006f91 	.word	0x08006f91
 8006ff8:	08006f91 	.word	0x08006f91
 8006ffc:	080070d7 	.word	0x080070d7
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	1d1a      	adds	r2, r3, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6032      	str	r2, [r6, #0]
 8007008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800700c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007010:	2301      	movs	r3, #1
 8007012:	e09d      	b.n	8007150 <_printf_i+0x1e8>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	1d19      	adds	r1, r3, #4
 800701a:	6031      	str	r1, [r6, #0]
 800701c:	0606      	lsls	r6, r0, #24
 800701e:	d501      	bpl.n	8007024 <_printf_i+0xbc>
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	e003      	b.n	800702c <_printf_i+0xc4>
 8007024:	0645      	lsls	r5, r0, #25
 8007026:	d5fb      	bpl.n	8007020 <_printf_i+0xb8>
 8007028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800702c:	2d00      	cmp	r5, #0
 800702e:	da03      	bge.n	8007038 <_printf_i+0xd0>
 8007030:	232d      	movs	r3, #45	@ 0x2d
 8007032:	426d      	negs	r5, r5
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007038:	4859      	ldr	r0, [pc, #356]	@ (80071a0 <_printf_i+0x238>)
 800703a:	230a      	movs	r3, #10
 800703c:	e011      	b.n	8007062 <_printf_i+0xfa>
 800703e:	6821      	ldr	r1, [r4, #0]
 8007040:	6833      	ldr	r3, [r6, #0]
 8007042:	0608      	lsls	r0, r1, #24
 8007044:	f853 5b04 	ldr.w	r5, [r3], #4
 8007048:	d402      	bmi.n	8007050 <_printf_i+0xe8>
 800704a:	0649      	lsls	r1, r1, #25
 800704c:	bf48      	it	mi
 800704e:	b2ad      	uxthmi	r5, r5
 8007050:	2f6f      	cmp	r7, #111	@ 0x6f
 8007052:	4853      	ldr	r0, [pc, #332]	@ (80071a0 <_printf_i+0x238>)
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	bf14      	ite	ne
 8007058:	230a      	movne	r3, #10
 800705a:	2308      	moveq	r3, #8
 800705c:	2100      	movs	r1, #0
 800705e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007062:	6866      	ldr	r6, [r4, #4]
 8007064:	60a6      	str	r6, [r4, #8]
 8007066:	2e00      	cmp	r6, #0
 8007068:	bfa2      	ittt	ge
 800706a:	6821      	ldrge	r1, [r4, #0]
 800706c:	f021 0104 	bicge.w	r1, r1, #4
 8007070:	6021      	strge	r1, [r4, #0]
 8007072:	b90d      	cbnz	r5, 8007078 <_printf_i+0x110>
 8007074:	2e00      	cmp	r6, #0
 8007076:	d04b      	beq.n	8007110 <_printf_i+0x1a8>
 8007078:	4616      	mov	r6, r2
 800707a:	fbb5 f1f3 	udiv	r1, r5, r3
 800707e:	fb03 5711 	mls	r7, r3, r1, r5
 8007082:	5dc7      	ldrb	r7, [r0, r7]
 8007084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007088:	462f      	mov	r7, r5
 800708a:	42bb      	cmp	r3, r7
 800708c:	460d      	mov	r5, r1
 800708e:	d9f4      	bls.n	800707a <_printf_i+0x112>
 8007090:	2b08      	cmp	r3, #8
 8007092:	d10b      	bne.n	80070ac <_printf_i+0x144>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07df      	lsls	r7, r3, #31
 8007098:	d508      	bpl.n	80070ac <_printf_i+0x144>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	6861      	ldr	r1, [r4, #4]
 800709e:	4299      	cmp	r1, r3
 80070a0:	bfde      	ittt	le
 80070a2:	2330      	movle	r3, #48	@ 0x30
 80070a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070ac:	1b92      	subs	r2, r2, r6
 80070ae:	6122      	str	r2, [r4, #16]
 80070b0:	f8cd a000 	str.w	sl, [sp]
 80070b4:	464b      	mov	r3, r9
 80070b6:	aa03      	add	r2, sp, #12
 80070b8:	4621      	mov	r1, r4
 80070ba:	4640      	mov	r0, r8
 80070bc:	f7ff fee6 	bl	8006e8c <_printf_common>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d14a      	bne.n	800715a <_printf_i+0x1f2>
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	b004      	add	sp, #16
 80070ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	f043 0320 	orr.w	r3, r3, #32
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	4833      	ldr	r0, [pc, #204]	@ (80071a4 <_printf_i+0x23c>)
 80070d8:	2778      	movs	r7, #120	@ 0x78
 80070da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	6831      	ldr	r1, [r6, #0]
 80070e2:	061f      	lsls	r7, r3, #24
 80070e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80070e8:	d402      	bmi.n	80070f0 <_printf_i+0x188>
 80070ea:	065f      	lsls	r7, r3, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2ad      	uxthmi	r5, r5
 80070f0:	6031      	str	r1, [r6, #0]
 80070f2:	07d9      	lsls	r1, r3, #31
 80070f4:	bf44      	itt	mi
 80070f6:	f043 0320 	orrmi.w	r3, r3, #32
 80070fa:	6023      	strmi	r3, [r4, #0]
 80070fc:	b11d      	cbz	r5, 8007106 <_printf_i+0x19e>
 80070fe:	2310      	movs	r3, #16
 8007100:	e7ac      	b.n	800705c <_printf_i+0xf4>
 8007102:	4827      	ldr	r0, [pc, #156]	@ (80071a0 <_printf_i+0x238>)
 8007104:	e7e9      	b.n	80070da <_printf_i+0x172>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f023 0320 	bic.w	r3, r3, #32
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	e7f6      	b.n	80070fe <_printf_i+0x196>
 8007110:	4616      	mov	r6, r2
 8007112:	e7bd      	b.n	8007090 <_printf_i+0x128>
 8007114:	6833      	ldr	r3, [r6, #0]
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	6961      	ldr	r1, [r4, #20]
 800711a:	1d18      	adds	r0, r3, #4
 800711c:	6030      	str	r0, [r6, #0]
 800711e:	062e      	lsls	r6, r5, #24
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	d501      	bpl.n	8007128 <_printf_i+0x1c0>
 8007124:	6019      	str	r1, [r3, #0]
 8007126:	e002      	b.n	800712e <_printf_i+0x1c6>
 8007128:	0668      	lsls	r0, r5, #25
 800712a:	d5fb      	bpl.n	8007124 <_printf_i+0x1bc>
 800712c:	8019      	strh	r1, [r3, #0]
 800712e:	2300      	movs	r3, #0
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	4616      	mov	r6, r2
 8007134:	e7bc      	b.n	80070b0 <_printf_i+0x148>
 8007136:	6833      	ldr	r3, [r6, #0]
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	6032      	str	r2, [r6, #0]
 800713c:	681e      	ldr	r6, [r3, #0]
 800713e:	6862      	ldr	r2, [r4, #4]
 8007140:	2100      	movs	r1, #0
 8007142:	4630      	mov	r0, r6
 8007144:	f7f9 f8d4 	bl	80002f0 <memchr>
 8007148:	b108      	cbz	r0, 800714e <_printf_i+0x1e6>
 800714a:	1b80      	subs	r0, r0, r6
 800714c:	6060      	str	r0, [r4, #4]
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	6123      	str	r3, [r4, #16]
 8007152:	2300      	movs	r3, #0
 8007154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007158:	e7aa      	b.n	80070b0 <_printf_i+0x148>
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	4632      	mov	r2, r6
 800715e:	4649      	mov	r1, r9
 8007160:	4640      	mov	r0, r8
 8007162:	47d0      	blx	sl
 8007164:	3001      	adds	r0, #1
 8007166:	d0ad      	beq.n	80070c4 <_printf_i+0x15c>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	079b      	lsls	r3, r3, #30
 800716c:	d413      	bmi.n	8007196 <_printf_i+0x22e>
 800716e:	68e0      	ldr	r0, [r4, #12]
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	4298      	cmp	r0, r3
 8007174:	bfb8      	it	lt
 8007176:	4618      	movlt	r0, r3
 8007178:	e7a6      	b.n	80070c8 <_printf_i+0x160>
 800717a:	2301      	movs	r3, #1
 800717c:	4632      	mov	r2, r6
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	47d0      	blx	sl
 8007184:	3001      	adds	r0, #1
 8007186:	d09d      	beq.n	80070c4 <_printf_i+0x15c>
 8007188:	3501      	adds	r5, #1
 800718a:	68e3      	ldr	r3, [r4, #12]
 800718c:	9903      	ldr	r1, [sp, #12]
 800718e:	1a5b      	subs	r3, r3, r1
 8007190:	42ab      	cmp	r3, r5
 8007192:	dcf2      	bgt.n	800717a <_printf_i+0x212>
 8007194:	e7eb      	b.n	800716e <_printf_i+0x206>
 8007196:	2500      	movs	r5, #0
 8007198:	f104 0619 	add.w	r6, r4, #25
 800719c:	e7f5      	b.n	800718a <_printf_i+0x222>
 800719e:	bf00      	nop
 80071a0:	08008009 	.word	0x08008009
 80071a4:	0800801a 	.word	0x0800801a

080071a8 <_sbrk_r>:
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4d06      	ldr	r5, [pc, #24]	@ (80071c4 <_sbrk_r+0x1c>)
 80071ac:	2300      	movs	r3, #0
 80071ae:	4604      	mov	r4, r0
 80071b0:	4608      	mov	r0, r1
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	f7fa f8cc 	bl	8001350 <_sbrk>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_sbrk_r+0x1a>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_sbrk_r+0x1a>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	240006e0 	.word	0x240006e0

080071c8 <_realloc_r>:
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	4680      	mov	r8, r0
 80071ce:	4615      	mov	r5, r2
 80071d0:	460c      	mov	r4, r1
 80071d2:	b921      	cbnz	r1, 80071de <_realloc_r+0x16>
 80071d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d8:	4611      	mov	r1, r2
 80071da:	f7ff bc73 	b.w	8006ac4 <_malloc_r>
 80071de:	b92a      	cbnz	r2, 80071ec <_realloc_r+0x24>
 80071e0:	f7ff fc04 	bl	80069ec <_free_r>
 80071e4:	2400      	movs	r4, #0
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	f000 f81a 	bl	8007224 <_malloc_usable_size_r>
 80071f0:	4285      	cmp	r5, r0
 80071f2:	4606      	mov	r6, r0
 80071f4:	d802      	bhi.n	80071fc <_realloc_r+0x34>
 80071f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071fa:	d8f4      	bhi.n	80071e6 <_realloc_r+0x1e>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4640      	mov	r0, r8
 8007200:	f7ff fc60 	bl	8006ac4 <_malloc_r>
 8007204:	4607      	mov	r7, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d0ec      	beq.n	80071e4 <_realloc_r+0x1c>
 800720a:	42b5      	cmp	r5, r6
 800720c:	462a      	mov	r2, r5
 800720e:	4621      	mov	r1, r4
 8007210:	bf28      	it	cs
 8007212:	4632      	movcs	r2, r6
 8007214:	f7ff fbdc 	bl	80069d0 <memcpy>
 8007218:	4621      	mov	r1, r4
 800721a:	4640      	mov	r0, r8
 800721c:	f7ff fbe6 	bl	80069ec <_free_r>
 8007220:	463c      	mov	r4, r7
 8007222:	e7e0      	b.n	80071e6 <_realloc_r+0x1e>

08007224 <_malloc_usable_size_r>:
 8007224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007228:	1f18      	subs	r0, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	bfbc      	itt	lt
 800722e:	580b      	ldrlt	r3, [r1, r0]
 8007230:	18c0      	addlt	r0, r0, r3
 8007232:	4770      	bx	lr

08007234 <_init>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr

08007240 <_fini>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr
