
keypad_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a0  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006cdc  08006cdc  00007cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  08006cec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000528  2400002c  08006d18  0000802c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000554  08006d18  00008554  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001467a  00000000  00000000  0000805a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028fb  00000000  00000000  0001c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec8  00000000  00000000  0001efd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b65  00000000  00000000  0001fe98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003470  00000000  00000000  000209fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015bad  00000000  00000000  00023e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135f72  00000000  00000000  00039a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0016f98c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d14  00000000  00000000  0016f9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000009d  00000000  00000000  001736e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400002c 	.word	0x2400002c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006634 	.word	0x08006634

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000030 	.word	0x24000030
 80002e8:	08006634 	.word	0x08006634

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LCD_Init>:

#include "main.h"

//This is a little useless at the moment.
//More functionality could be added later if it turns out to be necessary
void LCD_Init() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
	ssd1306_Init();
 80005e2:	f000 fabf 	bl	8000b64 <ssd1306_Init>
	ssd1306_Fill(White);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fb26 	bl	8000c38 <ssd1306_Fill>
	ssd1306_SetCursor(2, 2);
 80005ec:	2102      	movs	r1, #2
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 fc6c 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Clip", Font_6x8, Black);
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <LCD_Init+0xf8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005fc:	4836      	ldr	r0, [pc, #216]	@ (80006d8 <LCD_Init+0xfc>)
 80005fe:	f000 fc3f 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(52, 2);
 8000602:	2102      	movs	r1, #2
 8000604:	2034      	movs	r0, #52	@ 0x34
 8000606:	f000 fc61 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("||||||||||||", Font_6x8, Black);
 800060a:	4b32      	ldr	r3, [pc, #200]	@ (80006d4 <LCD_Init+0xf8>)
 800060c:	2200      	movs	r2, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000612:	4832      	ldr	r0, [pc, #200]	@ (80006dc <LCD_Init+0x100>)
 8000614:	f000 fc34 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 12);
 8000618:	210c      	movs	r1, #12
 800061a:	2002      	movs	r0, #2
 800061c:	f000 fc56 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Stored", Font_6x8, Black);
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <LCD_Init+0xf8>)
 8000622:	2200      	movs	r2, #0
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000628:	482d      	ldr	r0, [pc, #180]	@ (80006e0 <LCD_Init+0x104>)
 800062a:	f000 fc29 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(58, 12);
 800062e:	210c      	movs	r1, #12
 8000630:	203a      	movs	r0, #58	@ 0x3a
 8000632:	f000 fc4b 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("|", Font_6x8, Black);
 8000636:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <LCD_Init+0xf8>)
 8000638:	2200      	movs	r2, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800063e:	4829      	ldr	r0, [pc, #164]	@ (80006e4 <LCD_Init+0x108>)
 8000640:	f000 fc1e 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 22);
 8000644:	2116      	movs	r1, #22
 8000646:	2002      	movs	r0, #2
 8000648:	f000 fc40 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Active", Font_6x8, Black);
 800064c:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <LCD_Init+0xf8>)
 800064e:	2200      	movs	r2, #0
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000654:	4824      	ldr	r0, [pc, #144]	@ (80006e8 <LCD_Init+0x10c>)
 8000656:	f000 fc13 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 32);
 800065a:	2120      	movs	r1, #32
 800065c:	2002      	movs	r0, #2
 800065e:	f000 fc35 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Pitch 0", Font_6x8, Black);
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <LCD_Init+0xf8>)
 8000664:	2200      	movs	r2, #0
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800066a:	4820      	ldr	r0, [pc, #128]	@ (80006ec <LCD_Init+0x110>)
 800066c:	f000 fc08 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 42);
 8000670:	212a      	movs	r1, #42	@ 0x2a
 8000672:	2002      	movs	r0, #2
 8000674:	f000 fc2a 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Mode--------", Font_6x8, Black);
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <LCD_Init+0xf8>)
 800067a:	2200      	movs	r2, #0
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000680:	481b      	ldr	r0, [pc, #108]	@ (80006f0 <LCD_Init+0x114>)
 8000682:	f000 fbfd 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 42);
 8000686:	212a      	movs	r1, #42	@ 0x2a
 8000688:	2052      	movs	r0, #82	@ 0x52
 800068a:	f000 fc1f 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("REC", Font_6x8, Black);
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <LCD_Init+0xf8>)
 8000690:	2200      	movs	r2, #0
 8000692:	9200      	str	r2, [sp, #0]
 8000694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <LCD_Init+0x118>)
 8000698:	f000 fbf2 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(2, 52);
 800069c:	2134      	movs	r1, #52	@ 0x34
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 fc14 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("Source------", Font_6x8, Black);
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <LCD_Init+0xf8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ac:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <LCD_Init+0x11c>)
 80006ae:	f000 fbe7 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_SetCursor(82, 52);
 80006b2:	2134      	movs	r1, #52	@ 0x34
 80006b4:	2052      	movs	r0, #82	@ 0x52
 80006b6:	f000 fc09 	bl	8000ecc <ssd1306_SetCursor>
	ssd1306_WriteString("DIGITAL", Font_6x8, Black);
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <LCD_Init+0xf8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	9200      	str	r2, [sp, #0]
 80006c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <LCD_Init+0x120>)
 80006c4:	f000 fbdc 	bl	8000e80 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006c8:	f000 face 	bl	8000c68 <ssd1306_UpdateScreen>
	return;
 80006cc:	bf00      	nop
}
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08006c9c 	.word	0x08006c9c
 80006d8:	0800664c 	.word	0x0800664c
 80006dc:	08006654 	.word	0x08006654
 80006e0:	08006664 	.word	0x08006664
 80006e4:	0800666c 	.word	0x0800666c
 80006e8:	08006670 	.word	0x08006670
 80006ec:	08006678 	.word	0x08006678
 80006f0:	08006680 	.word	0x08006680
 80006f4:	08006690 	.word	0x08006690
 80006f8:	08006694 	.word	0x08006694
 80006fc:	080066a4 	.word	0x080066a4

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000704:	f000 f9c2 	bl	8000a8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 ff68 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f832 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f8e4 	bl	80008dc <MX_GPIO_Init>
  MX_I2C4_Init();
 8000714:	f000 f8a2 	bl	800085c <MX_I2C4_Init>
  ssd1306_Init();
 8000718:	f000 fa24 	bl	8000b64 <ssd1306_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fd95 	bl	800124c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fd92 	bl	800124c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000728:	2002      	movs	r0, #2
 800072a:	f000 fd8f 	bl	800124c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800072e:	2101      	movs	r1, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fe01 	bl	8001338 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <main+0x70>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <main+0x70>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <main+0x70>)
 8000746:	2200      	movs	r2, #0
 8000748:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <main+0x70>)
 800074c:	2200      	movs	r2, #0
 800074e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <main+0x70>)
 8000752:	2200      	movs	r2, #0
 8000754:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000756:	4906      	ldr	r1, [pc, #24]	@ (8000770 <main+0x70>)
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fe7d 	bl	8001458 <BSP_COM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <main+0x68>
  {
    Error_Handler();
 8000764:	f000 f9be 	bl	8000ae4 <Error_Handler>
  }
  LCD_Init();
 8000768:	f7ff ff38 	bl	80005dc <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t ColNum, RowNum, RowNumStable;
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <main+0x6c>
 8000770:	24000048 	.word	0x24000048

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b09c      	sub	sp, #112	@ 0x70
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	224c      	movs	r2, #76	@ 0x4c
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 ff2a 	bl	80065dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2220      	movs	r2, #32
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 ff24 	bl	80065dc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000794:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <SystemClock_Config+0xe0>)
 8000796:	f04f 32ff 	mov.w	r2, #4294967295
 800079a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800079e:	2004      	movs	r0, #4
 80007a0:	f002 f83e 	bl	8002820 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <SystemClock_Config+0xe4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000858 <SystemClock_Config+0xe4>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <SystemClock_Config+0xe4>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c0:	bf00      	nop
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <SystemClock_Config+0xe4>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ce:	d1f8      	bne.n	80007c2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007d8:	2340      	movs	r3, #64	@ 0x40
 80007da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007e8:	2308      	movs	r3, #8
 80007ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007f8:	230c      	movs	r3, #12
 80007fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	4618      	mov	r0, r3
 800080a:	f002 f863 	bl	80028d4 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000814:	f000 f966 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	233f      	movs	r3, #63	@ 0x3f
 800081a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2303      	movs	r3, #3
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2101      	movs	r1, #1
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fc7b 	bl	8003138 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000848:	f000 f94c 	bl	8000ae4 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3770      	adds	r7, #112	@ 0x70
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400
 8000858:	58024800 	.word	0x58024800

0800085c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <MX_I2C4_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <MX_I2C4_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_I2C4_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_I2C4_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_I2C4_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <MX_I2C4_Init+0x74>)
 8000898:	f001 fb0c 	bl	8001eb4 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 f91f 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	@ (80008d0 <MX_I2C4_Init+0x74>)
 80008aa:	f001 ff21 	bl	80026f0 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 f916 	bl	8000ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_I2C4_Init+0x74>)
 80008bc:	f001 ff63 	bl	8002786 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f90d 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000058 	.word	0x24000058
 80008d4:	58001c00 	.word	0x58001c00
 80008d8:	10707dbc 	.word	0x10707dbc

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b60      	ldr	r3, [pc, #384]	@ (8000a74 <MX_GPIO_Init+0x198>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008f8:	4a5e      	ldr	r2, [pc, #376]	@ (8000a74 <MX_GPIO_Init+0x198>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000902:	4b5c      	ldr	r3, [pc, #368]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000910:	4b58      	ldr	r3, [pc, #352]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000912:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000916:	4a57      	ldr	r2, [pc, #348]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000920:	4b54      	ldr	r3, [pc, #336]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000922:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b51      	ldr	r3, [pc, #324]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000930:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000934:	4a4f      	ldr	r2, [pc, #316]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800093e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094c:	4b49      	ldr	r3, [pc, #292]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800094e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000952:	4a48      	ldr	r2, [pc, #288]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800095c:	4b45      	ldr	r3, [pc, #276]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800095e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000962:	f003 0320 	and.w	r3, r3, #32
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	4b42      	ldr	r3, [pc, #264]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800096c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000970:	4a40      	ldr	r2, [pc, #256]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800097a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800097c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000980:	f003 0310 	and.w	r3, r3, #16
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000988:	4b3a      	ldr	r3, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800098a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800098e:	4a39      	ldr	r2, [pc, #228]	@ (8000a74 <MX_GPIO_Init+0x198>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000998:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0x198>)
 800099a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800099e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009ac:	4832      	ldr	r0, [pc, #200]	@ (8000a78 <MX_GPIO_Init+0x19c>)
 80009ae:	f001 fa67 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b8:	4830      	ldr	r0, [pc, #192]	@ (8000a7c <MX_GPIO_Init+0x1a0>)
 80009ba:	f001 fa61 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	482f      	ldr	r0, [pc, #188]	@ (8000a80 <MX_GPIO_Init+0x1a4>)
 80009c4:	f001 fa5c 	bl	8001e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80009c8:	230d      	movs	r3, #13
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	482a      	ldr	r0, [pc, #168]	@ (8000a84 <MX_GPIO_Init+0x1a8>)
 80009dc:	f001 f8a0 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <MX_GPIO_Init+0x1a4>)
 80009f4:	f001 f894 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481e      	ldr	r0, [pc, #120]	@ (8000a88 <MX_GPIO_Init+0x1ac>)
 8000a0e:	f001 f887 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a12:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4813      	ldr	r0, [pc, #76]	@ (8000a78 <MX_GPIO_Init+0x19c>)
 8000a2c:	f001 f878 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_GPIO_Init+0x1a0>)
 8000a4a:	f001 f869 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a4e:	2340      	movs	r3, #64	@ 0x40
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_GPIO_Init+0x1a4>)
 8000a66:	f001 f85b 	bl	8001b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	58024400 	.word	0x58024400
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58021800 	.word	0x58021800
 8000a80:	58020400 	.word	0x58020400
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58021400 	.word	0x58021400

08000a8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a9e:	f000 ff63 	bl	8001968 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aae:	231f      	movs	r3, #31
 8000ab0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ab2:	2387      	movs	r3, #135	@ 0x87
 8000ab4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aba:	2300      	movs	r3, #0
 8000abc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f000 ff81 	bl	80019d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f000 ff5e 	bl	8001998 <HAL_MPU_Enable>

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af04      	add	r7, sp, #16
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	2301      	movs	r3, #1
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2178      	movs	r1, #120	@ 0x78
 8000b1e:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <ssd1306_WriteCommand+0x2c>)
 8000b20:	f001 fa64 	bl	8001fec <HAL_I2C_Mem_Write>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000058 	.word	0x24000058

08000b30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b42:	9202      	str	r2, [sp, #8]
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	2240      	movs	r2, #64	@ 0x40
 8000b4e:	2178      	movs	r1, #120	@ 0x78
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <ssd1306_WriteData+0x30>)
 8000b52:	f001 fa4b 	bl	8001fec <HAL_I2C_Mem_Write>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	24000058 	.word	0x24000058

08000b64 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b68:	f7ff ffc2 	bl	8000af0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b6c:	2064      	movs	r0, #100	@ 0x64
 8000b6e:	f000 fdc7 	bl	8001700 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f9d6 	bl	8000f24 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b78:	2020      	movs	r0, #32
 8000b7a:	f7ff ffc1 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff ffbe 	bl	8000b00 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b84:	20b0      	movs	r0, #176	@ 0xb0
 8000b86:	f7ff ffbb 	bl	8000b00 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b8a:	20c8      	movs	r0, #200	@ 0xc8
 8000b8c:	f7ff ffb8 	bl	8000b00 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ffb5 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b96:	2010      	movs	r0, #16
 8000b98:	f7ff ffb2 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b9c:	2040      	movs	r0, #64	@ 0x40
 8000b9e:	f7ff ffaf 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ba2:	20ff      	movs	r0, #255	@ 0xff
 8000ba4:	f000 f9aa 	bl	8000efc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ba8:	20a1      	movs	r0, #161	@ 0xa1
 8000baa:	f7ff ffa9 	bl	8000b00 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bae:	20a6      	movs	r0, #166	@ 0xa6
 8000bb0:	f7ff ffa6 	bl	8000b00 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bb4:	20a8      	movs	r0, #168	@ 0xa8
 8000bb6:	f7ff ffa3 	bl	8000b00 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000bba:	203f      	movs	r0, #63	@ 0x3f
 8000bbc:	f7ff ffa0 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bc0:	20a4      	movs	r0, #164	@ 0xa4
 8000bc2:	f7ff ff9d 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bc6:	20d3      	movs	r0, #211	@ 0xd3
 8000bc8:	f7ff ff9a 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff ff97 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bd2:	20d5      	movs	r0, #213	@ 0xd5
 8000bd4:	f7ff ff94 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bd8:	20f0      	movs	r0, #240	@ 0xf0
 8000bda:	f7ff ff91 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bde:	20d9      	movs	r0, #217	@ 0xd9
 8000be0:	f7ff ff8e 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000be4:	2022      	movs	r0, #34	@ 0x22
 8000be6:	f7ff ff8b 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bea:	20da      	movs	r0, #218	@ 0xda
 8000bec:	f7ff ff88 	bl	8000b00 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bf0:	2012      	movs	r0, #18
 8000bf2:	f7ff ff85 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bf6:	20db      	movs	r0, #219	@ 0xdb
 8000bf8:	f7ff ff82 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000bfc:	2020      	movs	r0, #32
 8000bfe:	f7ff ff7f 	bl	8000b00 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c02:	208d      	movs	r0, #141	@ 0x8d
 8000c04:	f7ff ff7c 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c08:	2014      	movs	r0, #20
 8000c0a:	f7ff ff79 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 f988 	bl	8000f24 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 f80f 	bl	8000c38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c1a:	f000 f825 	bl	8000c68 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <ssd1306_Init+0xd0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <ssd1306_Init+0xd0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	@ (8000c34 <ssd1306_Init+0xd0>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	711a      	strb	r2, [r3, #4]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	240004ac 	.word	0x240004ac

08000c38 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <ssd1306_Fill+0x14>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e000      	b.n	8000c4e <ssd1306_Fill+0x16>
 8000c4c:	23ff      	movs	r3, #255	@ 0xff
 8000c4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c52:	4619      	mov	r1, r3
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <ssd1306_Fill+0x2c>)
 8000c56:	f005 fcc1 	bl	80065dc <memset>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	240000ac 	.word	0x240000ac

08000c68 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	e016      	b.n	8000ca2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3b50      	subs	r3, #80	@ 0x50
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff40 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff ff3d 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c86:	2010      	movs	r0, #16
 8000c88:	f7ff ff3a 	bl	8000b00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	01db      	lsls	r3, r3, #7
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <ssd1306_UpdateScreen+0x4c>)
 8000c92:	4413      	add	r3, r2
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff4a 	bl	8000b30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d9e5      	bls.n	8000c74 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	240000ac 	.word	0x240000ac

08000cb8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db3d      	blt.n	8000d4e <ssd1306_DrawPixel+0x96>
 8000cd2:	79bb      	ldrb	r3, [r7, #6]
 8000cd4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cd6:	d83a      	bhi.n	8000d4e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11a      	bne.n	8000d14 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	b2d8      	uxtb	r0, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	01db      	lsls	r3, r3, #7
 8000cea:	4413      	add	r3, r2
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <ssd1306_DrawPixel+0xa4>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b259      	sxtb	r1, r3
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	4603      	mov	r3, r0
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2c9      	uxtb	r1, r1
 8000d0e:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <ssd1306_DrawPixel+0xa4>)
 8000d10:	54d1      	strb	r1, [r2, r3]
 8000d12:	e01d      	b.n	8000d50 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	4413      	add	r3, r2
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <ssd1306_DrawPixel+0xa4>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b259      	sxtb	r1, r3
 8000d3e:	79fa      	ldrb	r2, [r7, #7]
 8000d40:	4603      	mov	r3, r0
 8000d42:	01db      	lsls	r3, r3, #7
 8000d44:	4413      	add	r3, r2
 8000d46:	b2c9      	uxtb	r1, r1
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <ssd1306_DrawPixel+0xa4>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
 8000d4c:	e000      	b.n	8000d50 <ssd1306_DrawPixel+0x98>
        return;
 8000d4e:	bf00      	nop
    }
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	240000ac 	.word	0x240000ac

08000d60 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4638      	mov	r0, r7
 8000d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d6e:	4623      	mov	r3, r4
 8000d70:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b1f      	cmp	r3, #31
 8000d76:	d902      	bls.n	8000d7e <ssd1306_WriteChar+0x1e>
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d7c:	d901      	bls.n	8000d82 <ssd1306_WriteChar+0x22>
        return 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e077      	b.n	8000e72 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000d82:	4b3e      	ldr	r3, [pc, #248]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	783b      	ldrb	r3, [r7, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2b80      	cmp	r3, #128	@ 0x80
 8000d8e:	dc06      	bgt.n	8000d9e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000d90:	4b3a      	ldr	r3, [pc, #232]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	461a      	mov	r2, r3
 8000d96:	787b      	ldrb	r3, [r7, #1]
 8000d98:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8000d9a:	2b40      	cmp	r3, #64	@ 0x40
 8000d9c:	dd01      	ble.n	8000da2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e067      	b.n	8000e72 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e04e      	b.n	8000e46 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	3b20      	subs	r3, #32
 8000dae:	7879      	ldrb	r1, [r7, #1]
 8000db0:	fb01 f303 	mul.w	r3, r1, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	440b      	add	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	e036      	b.n	8000e36 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b2d8      	uxtb	r0, r3
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <ssd1306_DrawPixel>
 8000dfe:	e017      	b.n	8000e30 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000e10:	885b      	ldrh	r3, [r3, #2]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf0c      	ite	eq
 8000e24:	2301      	moveq	r3, #1
 8000e26:	2300      	movne	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f7ff ff44 	bl	8000cb8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	3301      	adds	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	783b      	ldrb	r3, [r7, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d3c3      	bcc.n	8000dc8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	787b      	ldrb	r3, [r7, #1]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d3ab      	bcc.n	8000da8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d005      	beq.n	8000e66 <ssd1306_WriteChar+0x106>
 8000e5a:	68b9      	ldr	r1, [r7, #8]
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	3a20      	subs	r2, #32
 8000e60:	440a      	add	r2, r1
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	e000      	b.n	8000e68 <ssd1306_WriteChar+0x108>
 8000e66:	783a      	ldrb	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <ssd1306_WriteChar+0x11c>)
 8000e6e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	@ 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	240004ac 	.word	0x240004ac

08000e80 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	4638      	mov	r0, r7
 8000e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000e8e:	e013      	b.n	8000eb8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	7818      	ldrb	r0, [r3, #0]
 8000e94:	7e3b      	ldrb	r3, [r7, #24]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	463b      	mov	r3, r7
 8000e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e9c:	f7ff ff60 	bl	8000d60 <ssd1306_WriteChar>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d002      	beq.n	8000eb2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	e008      	b.n	8000ec4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e7      	bne.n	8000e90 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <ssd1306_SetCursor+0x2c>)
 8000ee2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <ssd1306_SetCursor+0x2c>)
 8000eea:	805a      	strh	r2, [r3, #2]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	240004ac 	.word	0x240004ac

08000efc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f06:	2381      	movs	r3, #129	@ 0x81
 8000f08:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fdf7 	bl	8000b00 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdf3 	bl	8000b00 <ssd1306_WriteCommand>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f34:	23af      	movs	r3, #175	@ 0xaf
 8000f36:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <ssd1306_SetDisplayOn+0x38>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	715a      	strb	r2, [r3, #5]
 8000f3e:	e004      	b.n	8000f4a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f40:	23ae      	movs	r3, #174	@ 0xae
 8000f42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <ssd1306_SetDisplayOn+0x38>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fdd7 	bl	8000b00 <ssd1306_WriteCommand>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	240004ac 	.word	0x240004ac

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f68:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f6c:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f78:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	58024400 	.word	0x58024400

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	@ 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	22c0      	movs	r2, #192	@ 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f005 fb11 	bl	80065dc <memset>
  if(hi2c->Instance==I2C4)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_I2C_MspInit+0xc8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d146      	bne.n	8001052 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000fc4:	f04f 0210 	mov.w	r2, #16
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fc38 	bl	8003850 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f7ff fd7d 	bl	8000ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000fec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8000ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001008:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800100c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001022:	2304      	movs	r3, #4
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <HAL_I2C_MspInit+0xd0>)
 8001030:	f000 fd76 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8001036:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001040:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_I2C_MspInit+0xcc>)
 8001046:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001052:	bf00      	nop
 8001054:	37e8      	adds	r7, #232	@ 0xe8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	58001c00 	.word	0x58001c00
 8001060:	58024400 	.word	0x58024400
 8001064:	58021400 	.word	0x58021400

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 faff 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f9a6 	bl	800141c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d8:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <SystemInit+0xd0>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <SystemInit+0xd0>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e8:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <SystemInit+0xd4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d807      	bhi.n	8001104 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f4:	4b2c      	ldr	r3, [pc, #176]	@ (80011a8 <SystemInit+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 030f 	bic.w	r3, r3, #15
 80010fc:	4a2a      	ldr	r2, [pc, #168]	@ (80011a8 <SystemInit+0xd4>)
 80010fe:	f043 0303 	orr.w	r3, r3, #3
 8001102:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <SystemInit+0xd8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <SystemInit+0xd8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001110:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <SystemInit+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <SystemInit+0xd8>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4924      	ldr	r1, [pc, #144]	@ (80011ac <SystemInit+0xd8>)
 800111c:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <SystemInit+0xdc>)
 800111e:	4013      	ands	r3, r2
 8001120:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <SystemInit+0xd4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b00      	cmp	r3, #0
 800112c:	d007      	beq.n	800113e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <SystemInit+0xd4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <SystemInit+0xd4>)
 8001138:	f043 0303 	orr.w	r3, r3, #3
 800113c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <SystemInit+0xd8>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <SystemInit+0xd8>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <SystemInit+0xd8>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <SystemInit+0xd8>)
 8001152:	4a18      	ldr	r2, [pc, #96]	@ (80011b4 <SystemInit+0xe0>)
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <SystemInit+0xd8>)
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <SystemInit+0xe4>)
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <SystemInit+0xd8>)
 800115e:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <SystemInit+0xe8>)
 8001160:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <SystemInit+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <SystemInit+0xd8>)
 800116a:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <SystemInit+0xe8>)
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <SystemInit+0xd8>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <SystemInit+0xd8>)
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <SystemInit+0xe8>)
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <SystemInit+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <SystemInit+0xd8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <SystemInit+0xd8>)
 8001186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800118a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <SystemInit+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <SystemInit+0xec>)
 8001194:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001198:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	52002000 	.word	0x52002000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b4:	02020200 	.word	0x02020200
 80011b8:	01ff0000 	.word	0x01ff0000
 80011bc:	01010280 	.word	0x01010280
 80011c0:	52004000 	.word	0x52004000

080011c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011ce:	f023 0302 	bic.w	r3, r3, #2
 80011d2:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80011d4:	bf00      	nop
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f9      	beq.n	80011d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	58024800 	.word	0x58024800

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001230 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011f8:	f7ff ffe4 	bl	80011c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f7ff ff6a 	bl	80010d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001226:	f005 f9e1 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fa69 	bl	8000700 <main>
  bx  lr
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001234:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001238:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 800123c:	08006cec 	.word	0x08006cec
  ldr r2, =_sbss
 8001240:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8001244:	24000554 	.word	0x24000554

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	@ 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <BSP_LED_Init+0x28>
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d006      	beq.n	8001274 <BSP_LED_Init+0x28>
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d003      	beq.n	8001274 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800126c:	f06f 0301 	mvn.w	r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001272:	e055      	b.n	8001320 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800127a:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <BSP_LED_Init+0xe0>)
 800127c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001280:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <BSP_LED_Init+0xe0>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <BSP_LED_Init+0xe0>)
 800128c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	e021      	b.n	80012de <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10f      	bne.n	80012c0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <BSP_LED_Init+0xe0>)
 80012a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012a6:	4a21      	ldr	r2, [pc, #132]	@ (800132c <BSP_LED_Init+0xe0>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <BSP_LED_Init+0xe0>)
 80012b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	e00e      	b.n	80012de <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <BSP_LED_Init+0xe0>)
 80012c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012c6:	4a19      	ldr	r2, [pc, #100]	@ (800132c <BSP_LED_Init+0xe0>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <BSP_LED_Init+0xe0>)
 80012d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <BSP_LED_Init+0xe4>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <BSP_LED_Init+0xe8>)
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	f107 0218 	add.w	r2, r7, #24
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fc0c 	bl	8001b20 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <BSP_LED_Init+0xe8>)
 800130c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <BSP_LED_Init+0xe4>)
 8001314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	f000 fdb0 	bl	8001e80 <HAL_GPIO_WritePin>
  }

  return ret;
 8001320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001322:	4618      	mov	r0, r3
 8001324:	3730      	adds	r7, #48	@ 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024400 	.word	0x58024400
 8001330:	08006cb8 	.word	0x08006cb8
 8001334:	2400000c 	.word	0x2400000c

08001338 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <BSP_PB_Init+0xcc>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800134e:	4a2d      	ldr	r2, [pc, #180]	@ (8001404 <BSP_PB_Init+0xcc>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <BSP_PB_Init+0xcc>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800136c:	2302      	movs	r3, #2
 800136e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <BSP_PB_Init+0xd0>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fbc7 	bl	8001b20 <HAL_GPIO_Init>
 8001392:	e031      	b.n	80013f8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001394:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001398:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <BSP_PB_Init+0xd0>)
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	f107 020c 	add.w	r2, r7, #12
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fbb9 	bl	8001b20 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4a16      	ldr	r2, [pc, #88]	@ (800140c <BSP_PB_Init+0xd4>)
 80013b4:	441a      	add	r2, r3
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4915      	ldr	r1, [pc, #84]	@ (8001410 <BSP_PB_Init+0xd8>)
 80013ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f000 fb68 	bl	8001a96 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4a10      	ldr	r2, [pc, #64]	@ (800140c <BSP_PB_Init+0xd4>)
 80013cc:	1898      	adds	r0, r3, r2
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <BSP_PB_Init+0xdc>)
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	f000 fb3d 	bl	8001a58 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013de:	2028      	movs	r0, #40	@ 0x28
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <BSP_PB_Init+0xe0>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	f000 fa87 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80013f0:	2328      	movs	r3, #40	@ 0x28
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fa9d 	bl	8001932 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58024400 	.word	0x58024400
 8001408:	24000018 	.word	0x24000018
 800140c:	240004b4 	.word	0x240004b4
 8001410:	08006cc0 	.word	0x08006cc0
 8001414:	2400001c 	.word	0x2400001c
 8001418:	24000020 	.word	0x24000020

0800141c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <BSP_PB_IRQHandler+0x20>)
 800142c:	4413      	add	r3, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fb46 	bl	8001ac0 <HAL_EXTI_IRQHandler>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	240004b4 	.word	0x240004b4

08001440 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800146e:	f06f 0301 	mvn.w	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e018      	b.n	80014a8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2294      	movs	r2, #148	@ 0x94
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <BSP_COM_Init+0x5c>)
 8001480:	4413      	add	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f852 	bl	800152c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2294      	movs	r2, #148	@ 0x94
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <BSP_COM_Init+0x5c>)
 8001492:	4413      	add	r3, r2
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f80e 	bl	80014b8 <MX_USART3_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014a2:	f06f 0303 	mvn.w	r3, #3
 80014a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240004bc 	.word	0x240004bc

080014b8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_USART3_Init+0x60>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	895b      	ldrh	r3, [r3, #10]
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	891b      	ldrh	r3, [r3, #8]
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	899b      	ldrh	r3, [r3, #12]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001504:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f003 ff82 	bl	8005410 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000008 	.word	0x24000008

0800151c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff8d 	bl	8001440 <BSP_PB_Callback>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001536:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800153a:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <COM1_MspInit+0xa8>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001544:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001546:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001554:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001558:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <COM1_MspInit+0xa8>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001564:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001572:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001582:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800158e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001592:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <COM1_MspInit+0xac>)
 80015ac:	f000 fab8 	bl	8001b20 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <COM1_MspInit+0xac>)
 80015c6:	f000 faab 	bl	8001b20 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020c00 	.word	0x58020c00

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f000 f980 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80015e8:	f001 ff5c 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4913      	ldr	r1, [pc, #76]	@ (8001648 <HAL_Init+0x6c>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_Init+0x68>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_Init+0x6c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x70>)
 800161e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_Init+0x74>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f814 	bl	8001654 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e002      	b.n	800163c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fc93 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400
 8001648:	08006ca8 	.word	0x08006ca8
 800164c:	24000004 	.word	0x24000004
 8001650:	24000000 	.word	0x24000000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e021      	b.n	80016ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_InitTick+0x64>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f965 	bl	800194e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f92f 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x68>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24000028 	.word	0x24000028
 80016b8:	24000000 	.word	0x24000000
 80016bc:	24000024 	.word	0x24000024

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	24000028 	.word	0x24000028
 80016e4:	24000550 	.word	0x24000550

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	24000550 	.word	0x24000550

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	24000028 	.word	0x24000028

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	4313      	orrs	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x40>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00
 800178c:	05fa0000 	.word	0x05fa0000

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	@ (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff40 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff90 	bl	800183c <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5f 	bl	80017e8 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff33 	bl	80017ac <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa4 	bl	80018a4 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800196c:	f3bf 8f5f 	dmb	sy
}
 8001970:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <HAL_MPU_Disable+0x28>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_MPU_Disable+0x28>)
 8001978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800197e:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_MPU_Disable+0x2c>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	e000ed90 	.word	0xe000ed90

08001998 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019a0:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <HAL_MPU_Enable+0x38>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_MPU_Enable+0x3c>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	4a09      	ldr	r2, [pc, #36]	@ (80019d4 <HAL_MPU_Enable+0x3c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019b6:	f3bf 8f4f 	dsb	sy
}
 80019ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019bc:	f3bf 8f6f 	isb	sy
}
 80019c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed90 	.word	0xe000ed90
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	785a      	ldrb	r2, [r3, #1]
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_MPU_ConfigRegion+0x7c>)
 80019e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_MPU_ConfigRegion+0x7c>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a19      	ldr	r2, [pc, #100]	@ (8001a54 <HAL_MPU_ConfigRegion+0x7c>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_MPU_ConfigRegion+0x7c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b1b      	ldrb	r3, [r3, #12]
 8001a00:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7adb      	ldrb	r3, [r3, #11]
 8001a06:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7a9b      	ldrb	r3, [r3, #10]
 8001a0e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7b5b      	ldrb	r3, [r3, #13]
 8001a16:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b9b      	ldrb	r3, [r3, #14]
 8001a1e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7bdb      	ldrb	r3, [r3, #15]
 8001a26:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7a5b      	ldrb	r3, [r3, #9]
 8001a2e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a1b      	ldrb	r3, [r3, #8]
 8001a36:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a38:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a40:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a42:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a44:	6113      	str	r3, [r2, #16]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed90 	.word	0xe000ed90

08001a58 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	460b      	mov	r3, r1
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e00a      	b.n	8001a8a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	605a      	str	r2, [r3, #4]
      break;
 8001a80:	e002      	b.n	8001a88 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
      break;
 8001a86:	bf00      	nop
  }

  return status;
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e003      	b.n	8001ab2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
  }
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	011a      	lsls	r2, r3, #4
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_EXTI_IRQHandler+0x5c>)
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4798      	blx	r3
    }
  }
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	58000088 	.word	0x58000088

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	@ 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b2e:	4b89      	ldr	r3, [pc, #548]	@ (8001d54 <HAL_GPIO_Init+0x234>)
 8001b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b32:	e194      	b.n	8001e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2101      	movs	r1, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8186 	beq.w	8001e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_GPIO_Init+0x44>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d130      	bne.n	8001bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 0201 	and.w	r2, r3, #1
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d017      	beq.n	8001c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d123      	bne.n	8001c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	69b9      	ldr	r1, [r7, #24]
 8001c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0203 	and.w	r2, r3, #3
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80e0 	beq.w	8001e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	4b2f      	ldr	r3, [pc, #188]	@ (8001d58 <HAL_GPIO_Init+0x238>)
 8001c9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d58 <HAL_GPIO_Init+0x238>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <HAL_GPIO_Init+0x238>)
 8001caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb6:	4a29      	ldr	r2, [pc, #164]	@ (8001d5c <HAL_GPIO_Init+0x23c>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a20      	ldr	r2, [pc, #128]	@ (8001d60 <HAL_GPIO_Init+0x240>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d052      	beq.n	8001d88 <HAL_GPIO_Init+0x268>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <HAL_GPIO_Init+0x244>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_GPIO_Init+0x22e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <HAL_GPIO_Init+0x248>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x22a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_GPIO_Init+0x24c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x226>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_GPIO_Init+0x250>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x222>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	@ (8001d74 <HAL_GPIO_Init+0x254>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x21e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d78 <HAL_GPIO_Init+0x258>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a19      	ldr	r2, [pc, #100]	@ (8001d7c <HAL_GPIO_Init+0x25c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <HAL_GPIO_Init+0x260>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_GPIO_Init+0x264>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x20e>
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	e02d      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d2e:	230a      	movs	r3, #10
 8001d30:	e02b      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d32:	2308      	movs	r3, #8
 8001d34:	e029      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e027      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e025      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e023      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e021      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e01f      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e01d      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01b      	b.n	8001d8a <HAL_GPIO_Init+0x26a>
 8001d52:	bf00      	nop
 8001d54:	58000080 	.word	0x58000080
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	58000400 	.word	0x58000400
 8001d60:	58020000 	.word	0x58020000
 8001d64:	58020400 	.word	0x58020400
 8001d68:	58020800 	.word	0x58020800
 8001d6c:	58020c00 	.word	0x58020c00
 8001d70:	58021000 	.word	0x58021000
 8001d74:	58021400 	.word	0x58021400
 8001d78:	58021800 	.word	0x58021800
 8001d7c:	58021c00 	.word	0x58021c00
 8001d80:	58022000 	.word	0x58022000
 8001d84:	58022400 	.word	0x58022400
 8001d88:	2300      	movs	r3, #0
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9a:	4938      	ldr	r1, [pc, #224]	@ (8001e7c <HAL_GPIO_Init+0x35c>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f ae63 	bne.w	8001b34 <HAL_GPIO_Init+0x14>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	3724      	adds	r7, #36	@ 0x24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	58000400 	.word	0x58000400

08001e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e90:	787b      	ldrb	r3, [r7, #1]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e9c:	e003      	b.n	8001ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	041a      	lsls	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08b      	b.n	8001fde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff f85a 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	@ 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d108      	bne.n	8001f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	e007      	b.n	8001f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_I2C_Init+0x134>)
 8001f72:	430b      	orrs	r3, r1
 8001f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69d9      	ldr	r1, [r3, #28]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	02008000 	.word	0x02008000

08001fec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	f040 80f9 	bne.w	8002206 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_I2C_Mem_Write+0x34>
 800201a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0ed      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_I2C_Mem_Write+0x4e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0e6      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002042:	f7ff fb51 	bl	80016e8 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f955 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0d1      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	@ 0x21
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800208c:	88f8      	ldrh	r0, [r7, #6]
 800208e:	893a      	ldrh	r2, [r7, #8]
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4603      	mov	r3, r0
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f8b9 	bl	8002214 <I2C_RequestMemoryWrite>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a9      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2bff      	cmp	r3, #255	@ 0xff
 80020bc:	d90e      	bls.n	80020dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22ff      	movs	r2, #255	@ 0xff
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	2300      	movs	r3, #0
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fad9 	bl	800268c <I2C_TransferConfig>
 80020da:	e00f      	b.n	80020fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fac8 	bl	800268c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f958 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e07b      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d034      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214e:	2b00      	cmp	r3, #0
 8002150:	d130      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	@ 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f8d1 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e04d      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002170:	b29b      	uxth	r3, r3
 8002172:	2bff      	cmp	r3, #255	@ 0xff
 8002174:	d90e      	bls.n	8002194 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	22ff      	movs	r2, #255	@ 0xff
 800217a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	b2da      	uxtb	r2, r3
 8002182:	8979      	ldrh	r1, [r7, #10]
 8002184:	2300      	movs	r3, #0
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 fa7d 	bl	800268c <I2C_TransferConfig>
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fa6c 	bl	800268c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d19e      	bne.n	80020fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f93e 	bl	8002444 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01a      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_I2C_Mem_Write+0x224>)
 80021e6:	400b      	ands	r3, r1
 80021e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	fe00e800 	.word	0xfe00e800

08002214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <I2C_RequestMemoryWrite+0xa4>)
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa25 	bl	800268c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	69b9      	ldr	r1, [r7, #24]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f8b5 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e02c      	b.n	80022b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800225c:	893b      	ldrh	r3, [r7, #8]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	629a      	str	r2, [r3, #40]	@ 0x28
 8002266:	e015      	b.n	8002294 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002268:	893b      	ldrh	r3, [r7, #8]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29b      	uxth	r3, r3
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f89b 	bl	80023b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e012      	b.n	80022b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2200      	movs	r2, #0
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f830 	bl	8002304 <I2C_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	80002000 	.word	0x80002000

080022bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d103      	bne.n	80022da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d007      	beq.n	80022f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	619a      	str	r2, [r3, #24]
  }
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002314:	e03b      	b.n	800238e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f8d6 	bl	80024cc <I2C_IsErrorOccurred>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e041      	b.n	80023ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002330:	d02d      	beq.n	800238e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff f9d9 	bl	80016e8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d122      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4013      	ands	r3, r2
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	d113      	bne.n	800238e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f043 0220 	orr.w	r2, r3, #32
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4013      	ands	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d0b4      	beq.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023c2:	e033      	b.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f87f 	bl	80024cc <I2C_IsErrorOccurred>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e031      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d025      	beq.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7ff f982 	bl	80016e8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11a      	bne.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d013      	beq.n	800242c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d1c4      	bne.n	80023c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002450:	e02f      	b.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f838 	bl	80024cc <I2C_IsErrorOccurred>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e02d      	b.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7ff f93f 	bl	80016e8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11a      	bne.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d013      	beq.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e007      	b.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d1c8      	bne.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d068      	beq.n	80025ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002500:	e049      	b.n	8002596 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d045      	beq.n	8002596 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f8ed 	bl	80016e8 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_IsErrorOccurred+0x54>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d13a      	bne.n	8002596 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002542:	d121      	bne.n	8002588 <I2C_IsErrorOccurred+0xbc>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800254a:	d01d      	beq.n	8002588 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b20      	cmp	r3, #32
 8002550:	d01a      	beq.n	8002588 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002562:	f7ff f8c1 	bl	80016e8 <HAL_GetTick>
 8002566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002568:	e00e      	b.n	8002588 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800256a:	f7ff f8bd 	bl	80016e8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b19      	cmp	r3, #25
 8002576:	d907      	bls.n	8002588 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0320 	orr.w	r3, r3, #32
 800257e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002586:	e006      	b.n	8002596 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b20      	cmp	r3, #32
 8002594:	d1e9      	bne.n	800256a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d003      	beq.n	80025ac <I2C_IsErrorOccurred+0xe0>
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0aa      	beq.n	8002502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d103      	bne.n	80025bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01c      	beq.n	800267a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fe3b 	bl	80022bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <I2C_IsErrorOccurred+0x1bc>)
 8002652:	400b      	ands	r3, r1
 8002654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	431a      	orrs	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800267a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800267e:	4618      	mov	r0, r3
 8002680:	3728      	adds	r7, #40	@ 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	fe00e800 	.word	0xfe00e800

0800268c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	4613      	mov	r3, r2
 800269c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a4:	7a7b      	ldrb	r3, [r7, #9]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ac:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ba:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	0d5b      	lsrs	r3, r3, #21
 80026c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026ca:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <I2C_TransferConfig+0x60>)
 80026cc:	430b      	orrs	r3, r1
 80026ce:	43db      	mvns	r3, r3
 80026d0:	ea02 0103 	and.w	r1, r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	03ff63ff 	.word	0x03ff63ff

080026f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	d138      	bne.n	8002778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002710:	2302      	movs	r3, #2
 8002712:	e032      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	@ 0x24
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b20      	cmp	r3, #32
 800279a:	d139      	bne.n	8002810 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e033      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2224      	movs	r2, #36	@ 0x24
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	2b06      	cmp	r3, #6
 8002832:	d00a      	beq.n	800284a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002834:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e040      	b.n	80028c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e03e      	b.n	80028c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800284a:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002852:	491f      	ldr	r1, [pc, #124]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800285a:	f7fe ff45 	bl	80016e8 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002862:	f7fe ff41 	bl	80016e8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002870:	d901      	bls.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e028      	b.n	80028c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002882:	d1ee      	bne.n	8002862 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b1e      	cmp	r3, #30
 8002888:	d008      	beq.n	800289c <HAL_PWREx_ConfigSupply+0x7c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b2e      	cmp	r3, #46	@ 0x2e
 800288e:	d005      	beq.n	800289c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b1d      	cmp	r3, #29
 8002894:	d002      	beq.n	800289c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b2d      	cmp	r3, #45	@ 0x2d
 800289a:	d114      	bne.n	80028c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800289c:	f7fe ff24 	bl	80016e8 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028a2:	e009      	b.n	80028b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028a4:	f7fe ff20 	bl	80016e8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028b2:	d901      	bls.n	80028b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e007      	b.n	80028c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028b8:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d1ee      	bne.n	80028a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024800 	.word	0x58024800

080028d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	@ 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f000 bc1f 	b.w	8003126 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80b3 	beq.w	8002a5c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b95      	ldr	r3, [pc, #596]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002900:	4b92      	ldr	r3, [pc, #584]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002908:	2b10      	cmp	r3, #16
 800290a:	d007      	beq.n	800291c <HAL_RCC_OscConfig+0x48>
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	2b18      	cmp	r3, #24
 8002910:	d112      	bne.n	8002938 <HAL_RCC_OscConfig+0x64>
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d10d      	bne.n	8002938 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b8b      	ldr	r3, [pc, #556]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8098 	beq.w	8002a5a <HAL_RCC_OscConfig+0x186>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 8093 	bne.w	8002a5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e3f6      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x7c>
 8002942:	4b82      	ldr	r3, [pc, #520]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a81      	ldr	r2, [pc, #516]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e058      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d112      	bne.n	800297e <HAL_RCC_OscConfig+0xaa>
 8002958:	4b7c      	ldr	r3, [pc, #496]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a7b      	ldr	r2, [pc, #492]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b79      	ldr	r3, [pc, #484]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a78      	ldr	r2, [pc, #480]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800296a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b76      	ldr	r3, [pc, #472]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a75      	ldr	r2, [pc, #468]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e041      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002986:	d112      	bne.n	80029ae <HAL_RCC_OscConfig+0xda>
 8002988:	4b70      	ldr	r3, [pc, #448]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	4b6d      	ldr	r3, [pc, #436]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a6c      	ldr	r2, [pc, #432]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 800299a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a69      	ldr	r2, [pc, #420]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e029      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80029b6:	d112      	bne.n	80029de <HAL_RCC_OscConfig+0x10a>
 80029b8:	4b64      	ldr	r3, [pc, #400]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a63      	ldr	r2, [pc, #396]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a60      	ldr	r2, [pc, #384]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5d      	ldr	r2, [pc, #372]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x12e>
 80029de:	4b5b      	ldr	r3, [pc, #364]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b58      	ldr	r3, [pc, #352]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b55      	ldr	r3, [pc, #340]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a54      	ldr	r2, [pc, #336]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 80029fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fe6d 	bl	80016e8 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a12:	f7fe fe69 	bl	80016e8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	@ 0x64
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e380      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a24:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x13e>
 8002a30:	e014      	b.n	8002a5c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7fe fe59 	bl	80016e8 <HAL_GetTick>
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3a:	f7fe fe55 	bl	80016e8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	@ 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e36c      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x166>
 8002a58:	e000      	b.n	8002a5c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 808c 	beq.w	8002b82 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a72:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1bc>
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	d137      	bne.n	8002af6 <HAL_RCC_OscConfig+0x222>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d132      	bne.n	8002af6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x1d4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e33e      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aa8:	4b28      	ldr	r3, [pc, #160]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 0219 	bic.w	r2, r3, #25
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4925      	ldr	r1, [pc, #148]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fe15 	bl	80016e8 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fe11 	bl	80016e8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e328      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	4917      	ldr	r1, [pc, #92]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	e045      	b.n	8002b82 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d028      	beq.n	8002b50 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0219 	bic.w	r2, r3, #25
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4910      	ldr	r1, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fdea 	bl	80016e8 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b18:	f7fe fde6 	bl	80016e8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e2fd      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	4901      	ldr	r1, [pc, #4]	@ (8002b4c <HAL_RCC_OscConfig+0x278>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
 8002b4a:	e01a      	b.n	8002b82 <HAL_RCC_OscConfig+0x2ae>
 8002b4c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b50:	4b97      	ldr	r3, [pc, #604]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a96      	ldr	r2, [pc, #600]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fdc4 	bl	80016e8 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b64:	f7fe fdc0 	bl	80016e8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e2d7      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b76:	4b8e      	ldr	r3, [pc, #568]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d06a      	beq.n	8002c64 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b98:	4b85      	ldr	r3, [pc, #532]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d007      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2e0>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b18      	cmp	r3, #24
 8002ba8:	d11b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x30e>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d116      	bne.n	8002be2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b80      	cmp	r3, #128	@ 0x80
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e2ac      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bcc:	4b78      	ldr	r3, [pc, #480]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	4975      	ldr	r1, [pc, #468]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be0:	e040      	b.n	8002c64 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d023      	beq.n	8002c32 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bea:	4b71      	ldr	r3, [pc, #452]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a70      	ldr	r2, [pc, #448]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fd77 	bl	80016e8 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fd73 	bl	80016e8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e28a      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c10:	4b67      	ldr	r3, [pc, #412]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1c:	4b64      	ldr	r3, [pc, #400]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	4961      	ldr	r1, [pc, #388]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60cb      	str	r3, [r1, #12]
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c32:	4b5f      	ldr	r3, [pc, #380]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5e      	ldr	r2, [pc, #376]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fd53 	bl	80016e8 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c46:	f7fe fd4f 	bl	80016e8 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e266      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c58:	4b55      	ldr	r3, [pc, #340]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d036      	beq.n	8002cde <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d019      	beq.n	8002cac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fd30 	bl	80016e8 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fd2c 	bl	80016e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e243      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c9e:	4b44      	ldr	r3, [pc, #272]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3b8>
 8002caa:	e018      	b.n	8002cde <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cac:	4b40      	ldr	r3, [pc, #256]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fd16 	bl	80016e8 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fd12 	bl	80016e8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e229      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cd2:	4b37      	ldr	r3, [pc, #220]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d036      	beq.n	8002d58 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fcf3 	bl	80016e8 <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d06:	f7fe fcef 	bl	80016e8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e206      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d18:	4b25      	ldr	r3, [pc, #148]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x432>
 8002d24:	e018      	b.n	8002d58 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d26:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fcd9 	bl	80016e8 <HAL_GetTick>
 8002d36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d3a:	f7fe fcd5 	bl	80016e8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1ec      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d4c:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80af 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_RCC_OscConfig+0x4e0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <HAL_RCC_OscConfig+0x4e0>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d72:	f7fe fcb9 	bl	80016e8 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fcb5 	bl	80016e8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	@ 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1cc      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_RCC_OscConfig+0x4e0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4e4>
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	4a02      	ldr	r2, [pc, #8]	@ (8002db0 <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dac:	e05b      	b.n	8002e66 <HAL_RCC_OscConfig+0x592>
 8002dae:	bf00      	nop
 8002db0:	58024400 	.word	0x58024400
 8002db4:	58024800 	.word	0x58024800
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d112      	bne.n	8002de6 <HAL_RCC_OscConfig+0x512>
 8002dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dcc:	4b9a      	ldr	r3, [pc, #616]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	4a99      	ldr	r2, [pc, #612]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd8:	4b97      	ldr	r3, [pc, #604]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	4a96      	ldr	r2, [pc, #600]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de4:	e03f      	b.n	8002e66 <HAL_RCC_OscConfig+0x592>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x540>
 8002dee:	4b92      	ldr	r3, [pc, #584]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a91      	ldr	r2, [pc, #580]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfa:	4b8f      	ldr	r3, [pc, #572]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	4a8e      	ldr	r2, [pc, #568]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e06:	4b8c      	ldr	r3, [pc, #560]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	4a8b      	ldr	r2, [pc, #556]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e12:	e028      	b.n	8002e66 <HAL_RCC_OscConfig+0x592>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b85      	cmp	r3, #133	@ 0x85
 8002e1a:	d112      	bne.n	8002e42 <HAL_RCC_OscConfig+0x56e>
 8002e1c:	4b86      	ldr	r3, [pc, #536]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a85      	ldr	r2, [pc, #532]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	4b83      	ldr	r3, [pc, #524]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2c:	4a82      	ldr	r2, [pc, #520]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e34:	4b80      	ldr	r3, [pc, #512]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	4a7f      	ldr	r2, [pc, #508]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	e011      	b.n	8002e66 <HAL_RCC_OscConfig+0x592>
 8002e42:	4b7d      	ldr	r3, [pc, #500]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a79      	ldr	r2, [pc, #484]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	4b77      	ldr	r3, [pc, #476]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a76      	ldr	r2, [pc, #472]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fc3b 	bl	80016e8 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe fc37 	bl	80016e8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e14c      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x5a2>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fc25 	bl	80016e8 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe fc21 	bl	80016e8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e136      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 812b 	beq.w	8003124 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ece:	4b5a      	ldr	r3, [pc, #360]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	f000 80bb 	beq.w	8003052 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f040 8095 	bne.w	8003010 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b54      	ldr	r3, [pc, #336]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a53      	ldr	r2, [pc, #332]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fbf9 	bl	80016e8 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe fbf5 	bl	80016e8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e10c      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	4b47      	ldr	r3, [pc, #284]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f1c:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_OscConfig+0x768>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	4942      	ldr	r1, [pc, #264]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f40:	3b01      	subs	r3, #1
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f62:	4935      	ldr	r1, [pc, #212]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f68:	4b33      	ldr	r3, [pc, #204]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	4a32      	ldr	r2, [pc, #200]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f74:	4b30      	ldr	r3, [pc, #192]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f78:	4b31      	ldr	r3, [pc, #196]	@ (8003040 <HAL_RCC_OscConfig+0x76c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	492d      	ldr	r1, [pc, #180]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f88:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f023 020c 	bic.w	r2, r3, #12
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	4928      	ldr	r1, [pc, #160]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f9a:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f023 0202 	bic.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4924      	ldr	r1, [pc, #144]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	4a21      	ldr	r2, [pc, #132]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd4:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fb7e 	bl	80016e8 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fb7a 	bl	80016e8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e091      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x71c>
 800300e:	e089      	b.n	8003124 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <HAL_RCC_OscConfig+0x764>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fb64 	bl	80016e8 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003022:	e00f      	b.n	8003044 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fb60 	bl	80016e8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d908      	bls.n	8003044 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e077      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
 8003036:	bf00      	nop
 8003038:	58024400 	.word	0x58024400
 800303c:	fffffc0c 	.word	0xfffffc0c
 8003040:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003044:	4b3a      	ldr	r3, [pc, #232]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e9      	bne.n	8003024 <HAL_RCC_OscConfig+0x750>
 8003050:	e068      	b.n	8003124 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003058:	4b35      	ldr	r3, [pc, #212]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b01      	cmp	r3, #1
 8003064:	d031      	beq.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d12a      	bne.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d122      	bne.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d11a      	bne.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	0a5b      	lsrs	r3, r3, #9
 8003098:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d111      	bne.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d108      	bne.n	80030ca <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e02b      	b.n	8003126 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d01f      	beq.n	8003124 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030e4:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	4a11      	ldr	r2, [pc, #68]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f0:	f7fe fafa 	bl	80016e8 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80030f6:	bf00      	nop
 80030f8:	f7fe faf6 	bl	80016e8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	4293      	cmp	r3, r2
 8003102:	d0f9      	beq.n	80030f8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003104:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 8003106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_RCC_OscConfig+0x860>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003110:	00d2      	lsls	r2, r2, #3
 8003112:	4907      	ldr	r1, [pc, #28]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <HAL_RCC_OscConfig+0x85c>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3730      	adds	r7, #48	@ 0x30
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	58024400 	.word	0x58024400
 8003134:	ffff0007 	.word	0xffff0007

08003138 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e19c      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b8a      	ldr	r3, [pc, #552]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b87      	ldr	r3, [pc, #540]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4985      	ldr	r1, [pc, #532]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b83      	ldr	r3, [pc, #524]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e184      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	4b7b      	ldr	r3, [pc, #492]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003198:	4b78      	ldr	r3, [pc, #480]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	4975      	ldr	r1, [pc, #468]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	4b70      	ldr	r3, [pc, #448]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d908      	bls.n	80031d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031c6:	4b6d      	ldr	r3, [pc, #436]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	496a      	ldr	r1, [pc, #424]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	4b64      	ldr	r3, [pc, #400]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d908      	bls.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031f4:	4b61      	ldr	r3, [pc, #388]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	495e      	ldr	r1, [pc, #376]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003202:	4313      	orrs	r3, r2
 8003204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	4b59      	ldr	r3, [pc, #356]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800321e:	429a      	cmp	r2, r3
 8003220:	d908      	bls.n	8003234 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003222:	4b56      	ldr	r3, [pc, #344]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	4953      	ldr	r1, [pc, #332]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003230:	4313      	orrs	r3, r2
 8003232:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4b4d      	ldr	r3, [pc, #308]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	429a      	cmp	r2, r3
 800324e:	d908      	bls.n	8003262 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f023 020f 	bic.w	r2, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4947      	ldr	r1, [pc, #284]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800325e:	4313      	orrs	r3, r2
 8003260:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d055      	beq.n	800331a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800326e:	4b43      	ldr	r3, [pc, #268]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4940      	ldr	r1, [pc, #256]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800327c:	4313      	orrs	r3, r2
 800327e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003288:	4b3c      	ldr	r3, [pc, #240]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d121      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0f6      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a0:	4b36      	ldr	r3, [pc, #216]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d115      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0ea      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032b8:	4b30      	ldr	r3, [pc, #192]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0de      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032c8:	4b2c      	ldr	r3, [pc, #176]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0d6      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4925      	ldr	r1, [pc, #148]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ea:	f7fe f9fd 	bl	80016e8 <HAL_GetTick>
 80032ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f2:	f7fe f9f9 	bl	80016e8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0be      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	429a      	cmp	r2, r3
 8003318:	d1eb      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b14      	ldr	r3, [pc, #80]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	429a      	cmp	r2, r3
 8003334:	d208      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003336:	4b11      	ldr	r3, [pc, #68]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x244>)
 8003344:	4313      	orrs	r3, r2
 8003346:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d214      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 020f 	bic.w	r2, r3, #15
 800335e:	4906      	ldr	r1, [pc, #24]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <HAL_RCC_ClockConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e086      	b.n	8003486 <HAL_RCC_ClockConfig+0x34e>
 8003378:	52002000 	.word	0x52002000
 800337c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	4b3f      	ldr	r3, [pc, #252]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003398:	429a      	cmp	r2, r3
 800339a:	d208      	bcs.n	80033ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800339c:	4b3c      	ldr	r3, [pc, #240]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	4939      	ldr	r1, [pc, #228]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d010      	beq.n	80033dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d208      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	492e      	ldr	r1, [pc, #184]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	4b28      	ldr	r3, [pc, #160]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d208      	bcs.n	800340a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033f8:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4922      	ldr	r1, [pc, #136]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003406:	4313      	orrs	r3, r2
 8003408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d010      	beq.n	8003438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003422:	429a      	cmp	r2, r3
 8003424:	d208      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4917      	ldr	r1, [pc, #92]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003434:	4313      	orrs	r3, r2
 8003436:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003438:	f000 f834 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	4912      	ldr	r1, [pc, #72]	@ (8003494 <HAL_RCC_ClockConfig+0x35c>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCC_ClockConfig+0x358>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <HAL_RCC_ClockConfig+0x35c>)
 8003460:	5cd3      	ldrb	r3, [r2, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <HAL_RCC_ClockConfig+0x360>)
 800346e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003470:	4a0a      	ldr	r2, [pc, #40]	@ (800349c <HAL_RCC_ClockConfig+0x364>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <HAL_RCC_ClockConfig+0x368>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe f8ea 	bl	8001654 <HAL_InitTick>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	58024400 	.word	0x58024400
 8003494:	08006ca8 	.word	0x08006ca8
 8003498:	24000004 	.word	0x24000004
 800349c:	24000000 	.word	0x24000000
 80034a0:	24000024 	.word	0x24000024

080034a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034aa:	4bb3      	ldr	r3, [pc, #716]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034b2:	2b18      	cmp	r3, #24
 80034b4:	f200 8155 	bhi.w	8003762 <HAL_RCC_GetSysClockFreq+0x2be>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	08003525 	.word	0x08003525
 80034c4:	08003763 	.word	0x08003763
 80034c8:	08003763 	.word	0x08003763
 80034cc:	08003763 	.word	0x08003763
 80034d0:	08003763 	.word	0x08003763
 80034d4:	08003763 	.word	0x08003763
 80034d8:	08003763 	.word	0x08003763
 80034dc:	08003763 	.word	0x08003763
 80034e0:	0800354b 	.word	0x0800354b
 80034e4:	08003763 	.word	0x08003763
 80034e8:	08003763 	.word	0x08003763
 80034ec:	08003763 	.word	0x08003763
 80034f0:	08003763 	.word	0x08003763
 80034f4:	08003763 	.word	0x08003763
 80034f8:	08003763 	.word	0x08003763
 80034fc:	08003763 	.word	0x08003763
 8003500:	08003551 	.word	0x08003551
 8003504:	08003763 	.word	0x08003763
 8003508:	08003763 	.word	0x08003763
 800350c:	08003763 	.word	0x08003763
 8003510:	08003763 	.word	0x08003763
 8003514:	08003763 	.word	0x08003763
 8003518:	08003763 	.word	0x08003763
 800351c:	08003763 	.word	0x08003763
 8003520:	08003557 	.word	0x08003557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003524:	4b94      	ldr	r3, [pc, #592]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003530:	4b91      	ldr	r3, [pc, #580]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	08db      	lsrs	r3, r3, #3
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	4a90      	ldr	r2, [pc, #576]	@ (800377c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003542:	e111      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003544:	4b8d      	ldr	r3, [pc, #564]	@ (800377c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003546:	61bb      	str	r3, [r7, #24]
      break;
 8003548:	e10e      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800354a:	4b8d      	ldr	r3, [pc, #564]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800354c:	61bb      	str	r3, [r7, #24]
      break;
 800354e:	e10b      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003550:	4b8c      	ldr	r3, [pc, #560]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003552:	61bb      	str	r3, [r7, #24]
      break;
 8003554:	e108      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003556:	4b88      	ldr	r3, [pc, #544]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003560:	4b85      	ldr	r3, [pc, #532]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800356a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800356c:	4b82      	ldr	r3, [pc, #520]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003576:	4b80      	ldr	r3, [pc, #512]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357a:	08db      	lsrs	r3, r3, #3
 800357c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80e1 	beq.w	800375c <HAL_RCC_GetSysClockFreq+0x2b8>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b02      	cmp	r3, #2
 800359e:	f000 8083 	beq.w	80036a8 <HAL_RCC_GetSysClockFreq+0x204>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f200 80a1 	bhi.w	80036ec <HAL_RCC_GetSysClockFreq+0x248>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x114>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d056      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035b6:	e099      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02d      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	4a6b      	ldr	r2, [pc, #428]	@ (800377c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ee:	4b62      	ldr	r3, [pc, #392]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003602:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800361e:	e087      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800378c <HAL_RCC_GetSysClockFreq+0x2e8>
 800362e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003632:	4b51      	ldr	r3, [pc, #324]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003642:	ed97 6a02 	vldr	s12, [r7, #8]
 8003646:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800364a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003662:	e065      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003790 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003676:	4b40      	ldr	r3, [pc, #256]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003686:	ed97 6a02 	vldr	s12, [r7, #8]
 800368a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800368e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800369a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036a6:	e043      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003794 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003788 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ea:	e021      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003790 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003712:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003788 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800372e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	0a5b      	lsrs	r3, r3, #9
 8003736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800373a:	3301      	adds	r3, #1
 800373c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003748:	edd7 6a07 	vldr	s13, [r7, #28]
 800374c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003754:	ee17 3a90 	vmov	r3, s15
 8003758:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800375a:	e005      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
      break;
 8003760:	e002      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003762:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003764:	61bb      	str	r3, [r7, #24]
      break;
 8003766:	bf00      	nop
  }

  return sysclockfreq;
 8003768:	69bb      	ldr	r3, [r7, #24]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3724      	adds	r7, #36	@ 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	58024400 	.word	0x58024400
 800377c:	03d09000 	.word	0x03d09000
 8003780:	003d0900 	.word	0x003d0900
 8003784:	007a1200 	.word	0x007a1200
 8003788:	46000000 	.word	0x46000000
 800378c:	4c742400 	.word	0x4c742400
 8003790:	4a742400 	.word	0x4a742400
 8003794:	4af42400 	.word	0x4af42400

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800379e:	f7ff fe81 	bl	80034a4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490f      	ldr	r1, [pc, #60]	@ (80037ec <HAL_RCC_GetHCLKFreq+0x54>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	4a09      	ldr	r2, [pc, #36]	@ (80037ec <HAL_RCC_GetHCLKFreq+0x54>)
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037d6:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	58024400 	.word	0x58024400
 80037ec:	08006ca8 	.word	0x08006ca8
 80037f0:	24000004 	.word	0x24000004
 80037f4:	24000000 	.word	0x24000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80037fc:	f7ff ffcc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4904      	ldr	r1, [pc, #16]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	58024400 	.word	0x58024400
 8003820:	08006ca8 	.word	0x08006ca8

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003828:	f7ff ffb6 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4904      	ldr	r1, [pc, #16]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x28>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	58024400 	.word	0x58024400
 800384c:	08006ca8 	.word	0x08006ca8

08003850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b0c8      	sub	sp, #288	@ 0x120
 8003856:	af00      	add	r7, sp, #0
 8003858:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800385c:	2300      	movs	r3, #0
 800385e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003862:	2300      	movs	r3, #0
 8003864:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003874:	2500      	movs	r5, #0
 8003876:	ea54 0305 	orrs.w	r3, r4, r5
 800387a:	d049      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800387c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003882:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003886:	d02f      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003888:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800388c:	d828      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800388e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003892:	d01a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003898:	d822      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800389e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038a2:	d007      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038a4:	e01c      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a6:	4ba7      	ldr	r3, [pc, #668]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	4aa6      	ldr	r2, [pc, #664]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038b2:	e01a      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b8:	3308      	adds	r3, #8
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fc43 	bl	8005148 <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038c8:	e00f      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ce:	3328      	adds	r3, #40	@ 0x28
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fcea 	bl	80052ac <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038de:	e004      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038f2:	4b94      	ldr	r3, [pc, #592]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003900:	4a90      	ldr	r2, [pc, #576]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003902:	430b      	orrs	r3, r1
 8003904:	6513      	str	r3, [r2, #80]	@ 0x50
 8003906:	e003      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003908:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800390c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800391c:	f04f 0900 	mov.w	r9, #0
 8003920:	ea58 0309 	orrs.w	r3, r8, r9
 8003924:	d047      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	2b04      	cmp	r3, #4
 800392e:	d82a      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800394d 	.word	0x0800394d
 800393c:	0800395b 	.word	0x0800395b
 8003940:	08003971 	.word	0x08003971
 8003944:	0800398f 	.word	0x0800398f
 8003948:	0800398f 	.word	0x0800398f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	4a7c      	ldr	r2, [pc, #496]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003956:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003958:	e01a      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395e:	3308      	adds	r3, #8
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fbf0 	bl	8005148 <RCCEx_PLL2_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800396e:	e00f      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003974:	3328      	adds	r3, #40	@ 0x28
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fc97 	bl	80052ac <RCCEx_PLL3_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003984:	e004      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003998:	4b6a      	ldr	r3, [pc, #424]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	f023 0107 	bic.w	r1, r3, #7
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a6:	4a67      	ldr	r2, [pc, #412]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80039c2:	f04f 0b00 	mov.w	fp, #0
 80039c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80039ca:	d054      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80039cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039d6:	d036      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80039d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80039dc:	d82f      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d032      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e8:	d829      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80039ec:	d02f      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80039ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80039f0:	d825      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039f2:	2b80      	cmp	r3, #128	@ 0x80
 80039f4:	d018      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80039f6:	2b80      	cmp	r3, #128	@ 0x80
 80039f8:	d821      	bhi.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d007      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003a02:	e01c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a04:	4b4f      	ldr	r3, [pc, #316]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	4a4e      	ldr	r2, [pc, #312]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a10:	e01e      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a16:	3308      	adds	r3, #8
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fb94 	bl	8005148 <RCCEx_PLL2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a26:	e013      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a2c:	3328      	adds	r3, #40	@ 0x28
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fc3b 	bl	80052ac <RCCEx_PLL3_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003a3c:	e008      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a44:	e004      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a58:	4b3a      	ldr	r3, [pc, #232]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	4a37      	ldr	r2, [pc, #220]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a82:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a8c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a90:	460b      	mov	r3, r1
 8003a92:	4313      	orrs	r3, r2
 8003a94:	d05c      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003aa0:	d03b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003aa2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003aa6:	d834      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aac:	d037      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab2:	d82e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ab4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ab8:	d033      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003aba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003abe:	d828      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac4:	d01a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	d822      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad4:	d007      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003ad6:	e01c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ae4:	e01e      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aea:	3308      	adds	r3, #8
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fb2a 	bl	8005148 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003afa:	e013      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b00:	3328      	adds	r3, #40	@ 0x28
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fbd1 	bl	80052ac <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003b10:	e008      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	4a02      	ldr	r2, [pc, #8]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b40:	e006      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d03a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	2b30      	cmp	r3, #48	@ 0x30
 8003b78:	d01f      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003b7a:	2b30      	cmp	r3, #48	@ 0x30
 8003b7c:	d819      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d00c      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d815      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d111      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b8e:	4bae      	ldr	r3, [pc, #696]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b92:	4aad      	ldr	r2, [pc, #692]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003b9a:	e011      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 facf 	bl	8005148 <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003bc8:	4b9f      	ldr	r3, [pc, #636]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	4a9c      	ldr	r2, [pc, #624]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bdc:	e003      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4313      	orrs	r3, r2
 8003c04:	d051      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c10:	d035      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c16:	d82e      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c1c:	d031      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c22:	d828      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c28:	d01a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2e:	d822      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c38:	d007      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b82      	ldr	r3, [pc, #520]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	4a81      	ldr	r2, [pc, #516]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c48:	e01c      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fa78 	bl	8005148 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e011      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c64:	3328      	adds	r3, #40	@ 0x28
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fb1f 	bl	80052ac <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c74:	e006      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d053      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd4:	d033      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cda:	d82c      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003cdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce0:	d02f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce6:	d826      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cec:	d02b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cf2:	d820      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf8:	d012      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cfe:	d81a      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d08:	d115      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d0e:	3308      	adds	r3, #8
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fa18 	bl	8005148 <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e015      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d24:	3328      	adds	r3, #40	@ 0x28
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fabf 	bl	80052ac <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d34:	e00a      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d54:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d62:	4a39      	ldr	r2, [pc, #228]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d060      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d9a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003d9e:	d039      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003da0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003da4:	d832      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003daa:	d035      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db0:	d82c      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db6:	d031      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dbc:	d826      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc2:	d02d      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003dc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc8:	d820      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dce:	d012      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dd4:	d81a      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d024      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dde:	d115      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de4:	3308      	adds	r3, #8
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f9ad 	bl	8005148 <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003df4:	e017      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfa:	3328      	adds	r3, #40	@ 0x28
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fa54 	bl	80052ac <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e00c      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e12:	e008      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e14:	bf00      	nop
 8003e16:	e006      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e18:	bf00      	nop
 8003e1a:	e004      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e1c:	bf00      	nop
 8003e1e:	e002      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10e      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e3e:	4a02      	ldr	r2, [pc, #8]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d037      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e7e:	d00e      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e84:	d816      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8e:	d111      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e90:	4bc4      	ldr	r3, [pc, #784]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4ac3      	ldr	r2, [pc, #780]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f94e 	bl	8005148 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10a      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ec6:	4bb7      	ldr	r3, [pc, #732]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed4:	4ab3      	ldr	r2, [pc, #716]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ee0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003efa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d039      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d81c      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f51 	.word	0x08003f51
 8003f18:	08003f25 	.word	0x08003f25
 8003f1c:	08003f33 	.word	0x08003f33
 8003f20:	08003f51 	.word	0x08003f51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b9f      	ldr	r3, [pc, #636]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	4a9e      	ldr	r2, [pc, #632]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f30:	e00f      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f36:	3308      	adds	r3, #8
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f904 	bl	8005148 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f5a:	4b92      	ldr	r3, [pc, #584]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5e:	f023 0103 	bic.w	r1, r3, #3
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	4a8e      	ldr	r2, [pc, #568]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f6e:	e003      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f000 8099 	beq.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9a:	4b83      	ldr	r3, [pc, #524]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a82      	ldr	r2, [pc, #520]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd fb9f 	bl	80016e8 <HAL_GetTick>
 8003faa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fd fb9a 	bl	80016e8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	@ 0x64
 8003fbe:	d903      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc8:	4b77      	ldr	r3, [pc, #476]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ed      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d173      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003fdc:	4b71      	ldr	r3, [pc, #452]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe8:	4053      	eors	r3, r2
 8003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d015      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ffa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffe:	4b69      	ldr	r3, [pc, #420]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a68      	ldr	r2, [pc, #416]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b66      	ldr	r3, [pc, #408]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a65      	ldr	r2, [pc, #404]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004016:	4a63      	ldr	r2, [pc, #396]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402a:	d118      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fb5c 	bl	80016e8 <HAL_GetTick>
 8004030:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004034:	e00d      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fd fb57 	bl	80016e8 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004040:	1ad2      	subs	r2, r2, r3
 8004042:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004046:	429a      	cmp	r2, r3
 8004048:	d903      	bls.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004050:	e005      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004052:	4b54      	ldr	r3, [pc, #336]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0eb      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800405e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004062:	2b00      	cmp	r3, #0
 8004064:	d129      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800406a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800406e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004076:	d10e      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004078:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004084:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004088:	091a      	lsrs	r2, r3, #4
 800408a:	4b48      	ldr	r3, [pc, #288]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800408c:	4013      	ands	r3, r2
 800408e:	4a45      	ldr	r2, [pc, #276]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004090:	430b      	orrs	r3, r1
 8004092:	6113      	str	r3, [r2, #16]
 8004094:	e005      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004096:	4b43      	ldr	r3, [pc, #268]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800409c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040a0:	6113      	str	r3, [r2, #16]
 80040a2:	4b40      	ldr	r3, [pc, #256]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	4a3c      	ldr	r2, [pc, #240]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80040c2:	e003      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f002 0301 	and.w	r3, r2, #1
 80040d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f000 8090 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f6:	2b28      	cmp	r3, #40	@ 0x28
 80040f8:	d870      	bhi.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	080041e5 	.word	0x080041e5
 8004104:	080041dd 	.word	0x080041dd
 8004108:	080041dd 	.word	0x080041dd
 800410c:	080041dd 	.word	0x080041dd
 8004110:	080041dd 	.word	0x080041dd
 8004114:	080041dd 	.word	0x080041dd
 8004118:	080041dd 	.word	0x080041dd
 800411c:	080041dd 	.word	0x080041dd
 8004120:	080041b1 	.word	0x080041b1
 8004124:	080041dd 	.word	0x080041dd
 8004128:	080041dd 	.word	0x080041dd
 800412c:	080041dd 	.word	0x080041dd
 8004130:	080041dd 	.word	0x080041dd
 8004134:	080041dd 	.word	0x080041dd
 8004138:	080041dd 	.word	0x080041dd
 800413c:	080041dd 	.word	0x080041dd
 8004140:	080041c7 	.word	0x080041c7
 8004144:	080041dd 	.word	0x080041dd
 8004148:	080041dd 	.word	0x080041dd
 800414c:	080041dd 	.word	0x080041dd
 8004150:	080041dd 	.word	0x080041dd
 8004154:	080041dd 	.word	0x080041dd
 8004158:	080041dd 	.word	0x080041dd
 800415c:	080041dd 	.word	0x080041dd
 8004160:	080041e5 	.word	0x080041e5
 8004164:	080041dd 	.word	0x080041dd
 8004168:	080041dd 	.word	0x080041dd
 800416c:	080041dd 	.word	0x080041dd
 8004170:	080041dd 	.word	0x080041dd
 8004174:	080041dd 	.word	0x080041dd
 8004178:	080041dd 	.word	0x080041dd
 800417c:	080041dd 	.word	0x080041dd
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041dd 	.word	0x080041dd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041dd 	.word	0x080041dd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	58024400 	.word	0x58024400
 80041a8:	58024800 	.word	0x58024800
 80041ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b4:	3308      	adds	r3, #8
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 ffc5 	bl	8005148 <RCCEx_PLL2_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041c4:	e00f      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ca:	3328      	adds	r3, #40	@ 0x28
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f86c 	bl	80052ac <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041da:	e004      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80041e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80041ee:	4bc0      	ldr	r3, [pc, #768]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041fe:	4abc      	ldr	r2, [pc, #752]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6553      	str	r3, [r2, #84]	@ 0x54
 8004204:	e003      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800420a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f002 0302 	and.w	r3, r2, #2
 800421a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004224:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d043      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004236:	2b05      	cmp	r3, #5
 8004238:	d824      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800423a:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	0800428d 	.word	0x0800428d
 8004244:	08004259 	.word	0x08004259
 8004248:	0800426f 	.word	0x0800426f
 800424c:	0800428d 	.word	0x0800428d
 8004250:	0800428d 	.word	0x0800428d
 8004254:	0800428d 	.word	0x0800428d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425c:	3308      	adds	r3, #8
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 ff71 	bl	8005148 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800426c:	e00f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004272:	3328      	adds	r3, #40	@ 0x28
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f818 	bl	80052ac <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004282:	e004      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004296:	4b96      	ldr	r3, [pc, #600]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f023 0107 	bic.w	r1, r3, #7
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a6:	4a92      	ldr	r2, [pc, #584]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f002 0304 	and.w	r3, r2, #4
 80042c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042cc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d043      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d824      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80042e2:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	08004335 	.word	0x08004335
 80042ec:	08004301 	.word	0x08004301
 80042f0:	08004317 	.word	0x08004317
 80042f4:	08004335 	.word	0x08004335
 80042f8:	08004335 	.word	0x08004335
 80042fc:	08004335 	.word	0x08004335
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004304:	3308      	adds	r3, #8
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ff1d 	bl	8005148 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004314:	e00f      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ffc4 	bl	80052ac <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800432a:	e004      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004336:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800433e:	4b6c      	ldr	r3, [pc, #432]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f023 0107 	bic.w	r1, r3, #7
 8004346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800434e:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004350:	430b      	orrs	r3, r1
 8004352:	6593      	str	r3, [r2, #88]	@ 0x58
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800435a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f002 0320 	and.w	r3, r2, #32
 800436a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800436e:	2300      	movs	r3, #0
 8004370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	d055      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438a:	d033      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004390:	d82c      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004396:	d02f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439c:	d826      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800439e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043a2:	d02b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80043a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043a8:	d820      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ae:	d012      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b4:	d81a      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d022      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043be:	d115      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c4:	3308      	adds	r3, #8
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 febd 	bl	8005148 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043d4:	e015      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043da:	3328      	adds	r3, #40	@ 0x28
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 ff64 	bl	80052ac <RCCEx_PLL3_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043ea:	e00a      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043f2:	e006      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043f4:	bf00      	nop
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004416:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800441a:	4a35      	ldr	r2, [pc, #212]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004426:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800442a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004440:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d058      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800444a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800444e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004452:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004456:	d033      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004458:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800445c:	d82c      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d02f      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d826      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800446a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800446e:	d02b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004470:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004474:	d820      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800447a:	d012      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004480:	d81a      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d022      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d115      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004490:	3308      	adds	r3, #8
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fe57 	bl	8005148 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044a0:	e015      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a6:	3328      	adds	r3, #40	@ 0x28
 80044a8:	2102      	movs	r1, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fefe 	bl	80052ac <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044b6:	e00a      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044c0:	bf00      	nop
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044c4:	bf00      	nop
 80044c6:	e002      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044c8:	bf00      	nop
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10e      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044e6:	4a02      	ldr	r2, [pc, #8]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004512:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d055      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800451c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004520:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004524:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004528:	d033      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800452a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800452e:	d82c      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004534:	d02f      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d826      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800453c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004540:	d02b      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004542:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004546:	d820      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004548:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454c:	d012      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800454e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004552:	d81a      	bhi.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d022      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455c:	d115      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004562:	3308      	adds	r3, #8
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fdee 	bl	8005148 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004572:	e015      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004578:	3328      	adds	r3, #40	@ 0x28
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fe95 	bl	80052ac <RCCEx_PLL3_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004588:	e00a      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004592:	bf00      	nop
 8004594:	e004      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004596:	bf00      	nop
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80045b8:	4a9d      	ldr	r2, [pc, #628]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f002 0308 	and.w	r3, r2, #8
 80045d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d01e      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045fa:	3328      	adds	r3, #40	@ 0x28
 80045fc:	2102      	movs	r1, #2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fe54 	bl	80052ac <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004610:	4b87      	ldr	r3, [pc, #540]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004620:	4a83      	ldr	r2, [pc, #524]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f002 0310 	and.w	r3, r2, #16
 8004632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004636:	2300      	movs	r3, #0
 8004638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800463c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d01e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800464e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004652:	d10c      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004658:	3328      	adds	r3, #40	@ 0x28
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fe25 	bl	80052ac <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800466e:	4b70      	ldr	r3, [pc, #448]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800467a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800467e:	4a6c      	ldr	r2, [pc, #432]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800469a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d03e      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80046ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b0:	d022      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80046b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b6:	d81b      	bhi.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d00b      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80046c2:	e015      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c8:	3308      	adds	r3, #8
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fd3b 	bl	8005148 <RCCEx_PLL2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046d8:	e00f      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fde2 	bl	80052ac <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800470e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004712:	4a47      	ldr	r2, [pc, #284]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6593      	str	r3, [r2, #88]	@ 0x58
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800471e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800472e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004730:	2300      	movs	r3, #0
 8004732:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004734:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d03b      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800473e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800474a:	d01f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800474c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004750:	d818      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800475c:	d007      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800475e:	e011      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4a32      	ldr	r2, [pc, #200]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004772:	3328      	adds	r3, #40	@ 0x28
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fd98 	bl	80052ac <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004796:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047c4:	2300      	movs	r3, #0
 80047c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80047c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d034      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d007      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80047e2:	e011      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80047f0:	e00e      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fca4 	bl	8005148 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004806:	e003      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004810:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10d      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800481a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800481c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004826:	4a02      	ldr	r2, [pc, #8]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004828:	430b      	orrs	r3, r1
 800482a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800482e:	bf00      	nop
 8004830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004838:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800484a:	2300      	movs	r3, #0
 800484c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800484e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d00c      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485c:	3328      	adds	r3, #40	@ 0x28
 800485e:	2102      	movs	r1, #2
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fd23 	bl	80052ac <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800487e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004880:	2300      	movs	r3, #0
 8004882:	667b      	str	r3, [r7, #100]	@ 0x64
 8004884:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d038      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489a:	d018      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d811      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a6:	d014      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80048a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ac:	d80b      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80048b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b6:	d106      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b8:	4bc3      	ldr	r3, [pc, #780]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4ac2      	ldr	r2, [pc, #776]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048c4:	e008      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048cc:	e004      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80048d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048e0:	4bb9      	ldr	r3, [pc, #740]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	4ab5      	ldr	r2, [pc, #724]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048f2:	430b      	orrs	r3, r1
 80048f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048f6:	e003      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800490c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800490e:	2300      	movs	r3, #0
 8004910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004912:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004916:	460b      	mov	r3, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800491c:	4baa      	ldr	r3, [pc, #680]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800491e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004920:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800492a:	4aa7      	ldr	r2, [pc, #668]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800492c:	430b      	orrs	r3, r1
 800492e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800493c:	653b      	str	r3, [r7, #80]	@ 0x50
 800493e:	2300      	movs	r3, #0
 8004940:	657b      	str	r3, [r7, #84]	@ 0x54
 8004942:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004946:	460b      	mov	r3, r1
 8004948:	4313      	orrs	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800494c:	4b9e      	ldr	r3, [pc, #632]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495a:	4a9b      	ldr	r2, [pc, #620]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800495c:	430b      	orrs	r3, r1
 800495e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800496c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800496e:	2300      	movs	r3, #0
 8004970:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004972:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800497c:	4b92      	ldr	r3, [pc, #584]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800498a:	4a8f      	ldr	r2, [pc, #572]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800498c:	430b      	orrs	r3, r1
 800498e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800499c:	643b      	str	r3, [r7, #64]	@ 0x40
 800499e:	2300      	movs	r3, #0
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d00e      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ac:	4b86      	ldr	r3, [pc, #536]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	4a85      	ldr	r2, [pc, #532]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049b6:	6113      	str	r3, [r2, #16]
 80049b8:	4b83      	ldr	r3, [pc, #524]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ba:	6919      	ldr	r1, [r3, #16]
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049c4:	4a80      	ldr	r2, [pc, #512]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d8:	2300      	movs	r3, #0
 80049da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049dc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049e6:	4b78      	ldr	r3, [pc, #480]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80049ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f4:	4a74      	ldr	r2, [pc, #464]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a08:	2300      	movs	r3, #0
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a16:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a26:	4a68      	ldr	r2, [pc, #416]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	2100      	movs	r1, #0
 8004a36:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb79 	bl	8005148 <RCCEx_PLL2_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	2100      	movs	r1, #0
 8004a76:	6239      	str	r1, [r7, #32]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d011      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fb59 	bl	8005148 <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	61b9      	str	r1, [r7, #24]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d011      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004acc:	3308      	adds	r3, #8
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fb39 	bl	8005148 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	2100      	movs	r1, #0
 8004af6:	6139      	str	r1, [r7, #16]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b02:	460b      	mov	r3, r1
 8004b04:	4313      	orrs	r3, r2
 8004b06:	d011      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0c:	3328      	adds	r3, #40	@ 0x28
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fbcb 	bl	80052ac <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004b1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	2100      	movs	r1, #0
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d011      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4c:	3328      	adds	r3, #40	@ 0x28
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fbab 	bl	80052ac <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004b5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	2100      	movs	r1, #0
 8004b76:	6039      	str	r1, [r7, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d011      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8c:	3328      	adds	r3, #40	@ 0x28
 8004b8e:	2102      	movs	r1, #2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fb8b 	bl	80052ac <RCCEx_PLL3_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ba8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004bac:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400

08004bcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004bd0:	f7fe fde2 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4904      	ldr	r1, [pc, #16]	@ (8004bf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	08006ca8 	.word	0x08006ca8

08004bf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	@ 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c00:	4ba1      	ldr	r3, [pc, #644]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c0a:	4b9f      	ldr	r3, [pc, #636]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	0b1b      	lsrs	r3, r3, #12
 8004c10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c16:	4b9c      	ldr	r3, [pc, #624]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c22:	4b99      	ldr	r3, [pc, #612]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	08db      	lsrs	r3, r3, #3
 8004c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8111 	beq.w	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	f000 8083 	beq.w	8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	f200 80a1 	bhi.w	8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d056      	beq.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c62:	e099      	b.n	8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c64:	4b88      	ldr	r3, [pc, #544]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02d      	beq.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c70:	4b85      	ldr	r3, [pc, #532]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	4a84      	ldr	r2, [pc, #528]	@ (8004e8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cca:	e087      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d0e:	e065      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d22:	4b59      	ldr	r3, [pc, #356]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d52:	e043      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b48      	ldr	r3, [pc, #288]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d96:	e021      	b.n	8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b37      	ldr	r3, [pc, #220]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e02:	ee17 2a90 	vmov	r2, s15
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e24:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e30:	ee17 2a90 	vmov	r2, s15
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e38:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5e:	ee17 2a90 	vmov	r2, s15
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e66:	e008      	b.n	8004e7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	609a      	str	r2, [r3, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	3724      	adds	r7, #36	@ 0x24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	03d09000 	.word	0x03d09000
 8004e90:	46000000 	.word	0x46000000
 8004e94:	4c742400 	.word	0x4c742400
 8004e98:	4a742400 	.word	0x4a742400
 8004e9c:	4af42400 	.word	0x4af42400

08004ea0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	@ 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ea8:	4ba1      	ldr	r3, [pc, #644]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004eb2:	4b9f      	ldr	r3, [pc, #636]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	0d1b      	lsrs	r3, r3, #20
 8004eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ebc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ebe:	4b9c      	ldr	r3, [pc, #624]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eca:	4b99      	ldr	r3, [pc, #612]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	08db      	lsrs	r3, r3, #3
 8004ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8111 	beq.w	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f000 8083 	beq.w	8004ffc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	f200 80a1 	bhi.w	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d056      	beq.n	8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f0a:	e099      	b.n	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f0c:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02d      	beq.n	8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f18:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	4a84      	ldr	r2, [pc, #528]	@ (8005134 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b7b      	ldr	r3, [pc, #492]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f72:	e087      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800513c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b6a      	ldr	r3, [pc, #424]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb6:	e065      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b59      	ldr	r3, [pc, #356]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffa:	e043      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b48      	ldr	r3, [pc, #288]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005022:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800503e:	e021      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005082:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005084:	4b2a      	ldr	r3, [pc, #168]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	0a5b      	lsrs	r3, r3, #9
 800508a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800509a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800509e:	edd7 6a07 	vldr	s13, [r7, #28]
 80050a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050aa:	ee17 2a90 	vmov	r2, s15
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d8:	ee17 2a90 	vmov	r2, s15
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050e0:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	0e1b      	lsrs	r3, r3, #24
 80050e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80050fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005106:	ee17 2a90 	vmov	r2, s15
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800510e:	e008      	b.n	8005122 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
}
 8005122:	bf00      	nop
 8005124:	3724      	adds	r7, #36	@ 0x24
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
 8005134:	03d09000 	.word	0x03d09000
 8005138:	46000000 	.word	0x46000000
 800513c:	4c742400 	.word	0x4c742400
 8005140:	4a742400 	.word	0x4a742400
 8005144:	4af42400 	.word	0x4af42400

08005148 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005156:	4b53      	ldr	r3, [pc, #332]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b03      	cmp	r3, #3
 8005160:	d101      	bne.n	8005166 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e099      	b.n	800529a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005166:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a4e      	ldr	r2, [pc, #312]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800516c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fc fab9 	bl	80016e8 <HAL_GetTick>
 8005176:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005178:	e008      	b.n	800518c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800517a:	f7fc fab5 	bl	80016e8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e086      	b.n	800529a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800518c:	4b45      	ldr	r3, [pc, #276]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005198:	4b42      	ldr	r3, [pc, #264]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	493f      	ldr	r1, [pc, #252]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	025b      	lsls	r3, r3, #9
 80051be:	b29b      	uxth	r3, r3
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051dc:	4931      	ldr	r1, [pc, #196]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051e2:	4b30      	ldr	r3, [pc, #192]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	492d      	ldr	r1, [pc, #180]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80051f4:	4b2b      	ldr	r3, [pc, #172]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	f023 0220 	bic.w	r2, r3, #32
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	4928      	ldr	r1, [pc, #160]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005212:	4b24      	ldr	r3, [pc, #144]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005216:	4b24      	ldr	r3, [pc, #144]	@ (80052a8 <RCCEx_PLL2_Config+0x160>)
 8005218:	4013      	ands	r3, r2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	69d2      	ldr	r2, [r2, #28]
 800521e:	00d2      	lsls	r2, r2, #3
 8005220:	4920      	ldr	r1, [pc, #128]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005226:	4b1f      	ldr	r3, [pc, #124]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800522c:	f043 0310 	orr.w	r3, r3, #16
 8005230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d106      	bne.n	8005246 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005238:	4b1a      	ldr	r3, [pc, #104]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800523e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005242:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005244:	e00f      	b.n	8005266 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800524c:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	4a14      	ldr	r2, [pc, #80]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005256:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005258:	e005      	b.n	8005266 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800525a:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	4a11      	ldr	r2, [pc, #68]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005260:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005264:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a0e      	ldr	r2, [pc, #56]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005272:	f7fc fa39 	bl	80016e8 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005278:	e008      	b.n	800528c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800527a:	f7fc fa35 	bl	80016e8 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e006      	b.n	800529a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <RCCEx_PLL2_Config+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	ffff0007 	.word	0xffff0007

080052ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ba:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d101      	bne.n	80052ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e099      	b.n	80053fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d6:	f7fc fa07 	bl	80016e8 <HAL_GetTick>
 80052da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052dc:	e008      	b.n	80052f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052de:	f7fc fa03 	bl	80016e8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e086      	b.n	80053fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f0      	bne.n	80052de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80052fc:	4b42      	ldr	r3, [pc, #264]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	051b      	lsls	r3, r3, #20
 800530a:	493f      	ldr	r1, [pc, #252]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800530c:	4313      	orrs	r3, r2
 800530e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	025b      	lsls	r3, r3, #9
 8005322:	b29b      	uxth	r3, r3
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	3b01      	subs	r3, #1
 800533a:	061b      	lsls	r3, r3, #24
 800533c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005340:	4931      	ldr	r1, [pc, #196]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005346:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	492d      	ldr	r1, [pc, #180]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005358:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	4928      	ldr	r1, [pc, #160]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800536a:	4b27      	ldr	r3, [pc, #156]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005374:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005376:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537a:	4b24      	ldr	r3, [pc, #144]	@ (800540c <RCCEx_PLL3_Config+0x160>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	69d2      	ldr	r2, [r2, #28]
 8005382:	00d2      	lsls	r2, r2, #3
 8005384:	4920      	ldr	r1, [pc, #128]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800538a:	4b1f      	ldr	r3, [pc, #124]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	4a1e      	ldr	r2, [pc, #120]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 8005390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4a19      	ldr	r2, [pc, #100]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053a8:	e00f      	b.n	80053ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053b0:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	4a14      	ldr	r2, [pc, #80]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053bc:	e005      	b.n	80053ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a11      	ldr	r2, [pc, #68]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc f987 	bl	80016e8 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053dc:	e008      	b.n	80053f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053de:	f7fc f983 	bl	80016e8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e006      	b.n	80053fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	58024400 	.word	0x58024400
 800540c:	ffff0007 	.word	0xffff0007

08005410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e042      	b.n	80054a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f83b 	bl	80054b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2224      	movs	r2, #36	@ 0x24
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fe9e 	bl	800619c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f82f 	bl	80054c4 <UART_SetConfig>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e01b      	b.n	80054a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800547e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800548e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 ff1d 	bl	80062e0 <UART_CheckIdleState>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b092      	sub	sp, #72	@ 0x48
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	431a      	orrs	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4bbe      	ldr	r3, [pc, #760]	@ (80057ec <UART_SetConfig+0x328>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4ab3      	ldr	r2, [pc, #716]	@ (80057f0 <UART_SetConfig+0x32c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800552c:	4313      	orrs	r3, r2
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	4baf      	ldr	r3, [pc, #700]	@ (80057f4 <UART_SetConfig+0x330>)
 8005538:	4013      	ands	r3, r2
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005540:	430b      	orrs	r3, r1
 8005542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	f023 010f 	bic.w	r1, r3, #15
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4aa6      	ldr	r2, [pc, #664]	@ (80057f8 <UART_SetConfig+0x334>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d177      	bne.n	8005654 <UART_SetConfig+0x190>
 8005564:	4ba5      	ldr	r3, [pc, #660]	@ (80057fc <UART_SetConfig+0x338>)
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800556c:	2b28      	cmp	r3, #40	@ 0x28
 800556e:	d86d      	bhi.n	800564c <UART_SetConfig+0x188>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <UART_SetConfig+0xb4>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	0800561d 	.word	0x0800561d
 800557c:	0800564d 	.word	0x0800564d
 8005580:	0800564d 	.word	0x0800564d
 8005584:	0800564d 	.word	0x0800564d
 8005588:	0800564d 	.word	0x0800564d
 800558c:	0800564d 	.word	0x0800564d
 8005590:	0800564d 	.word	0x0800564d
 8005594:	0800564d 	.word	0x0800564d
 8005598:	08005625 	.word	0x08005625
 800559c:	0800564d 	.word	0x0800564d
 80055a0:	0800564d 	.word	0x0800564d
 80055a4:	0800564d 	.word	0x0800564d
 80055a8:	0800564d 	.word	0x0800564d
 80055ac:	0800564d 	.word	0x0800564d
 80055b0:	0800564d 	.word	0x0800564d
 80055b4:	0800564d 	.word	0x0800564d
 80055b8:	0800562d 	.word	0x0800562d
 80055bc:	0800564d 	.word	0x0800564d
 80055c0:	0800564d 	.word	0x0800564d
 80055c4:	0800564d 	.word	0x0800564d
 80055c8:	0800564d 	.word	0x0800564d
 80055cc:	0800564d 	.word	0x0800564d
 80055d0:	0800564d 	.word	0x0800564d
 80055d4:	0800564d 	.word	0x0800564d
 80055d8:	08005635 	.word	0x08005635
 80055dc:	0800564d 	.word	0x0800564d
 80055e0:	0800564d 	.word	0x0800564d
 80055e4:	0800564d 	.word	0x0800564d
 80055e8:	0800564d 	.word	0x0800564d
 80055ec:	0800564d 	.word	0x0800564d
 80055f0:	0800564d 	.word	0x0800564d
 80055f4:	0800564d 	.word	0x0800564d
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	0800564d 	.word	0x0800564d
 8005600:	0800564d 	.word	0x0800564d
 8005604:	0800564d 	.word	0x0800564d
 8005608:	0800564d 	.word	0x0800564d
 800560c:	0800564d 	.word	0x0800564d
 8005610:	0800564d 	.word	0x0800564d
 8005614:	0800564d 	.word	0x0800564d
 8005618:	08005645 	.word	0x08005645
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e326      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e322      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e31e      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e31a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800563c:	2320      	movs	r3, #32
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e316      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005644:	2340      	movs	r3, #64	@ 0x40
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e312      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800564c:	2380      	movs	r3, #128	@ 0x80
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e30e      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a69      	ldr	r2, [pc, #420]	@ (8005800 <UART_SetConfig+0x33c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d130      	bne.n	80056c0 <UART_SetConfig+0x1fc>
 800565e:	4b67      	ldr	r3, [pc, #412]	@ (80057fc <UART_SetConfig+0x338>)
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	2b05      	cmp	r3, #5
 8005668:	d826      	bhi.n	80056b8 <UART_SetConfig+0x1f4>
 800566a:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <UART_SetConfig+0x1ac>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005689 	.word	0x08005689
 8005674:	08005691 	.word	0x08005691
 8005678:	08005699 	.word	0x08005699
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	2300      	movs	r3, #0
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e2f0      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005696:	e2ec      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569e:	e2e8      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e2e4      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056a8:	2320      	movs	r3, #32
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e2e0      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056b0:	2340      	movs	r3, #64	@ 0x40
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e2dc      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e2d8      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005804 <UART_SetConfig+0x340>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d130      	bne.n	800572c <UART_SetConfig+0x268>
 80056ca:	4b4c      	ldr	r3, [pc, #304]	@ (80057fc <UART_SetConfig+0x338>)
 80056cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d826      	bhi.n	8005724 <UART_SetConfig+0x260>
 80056d6:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0x218>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	080056fd 	.word	0x080056fd
 80056e4:	08005705 	.word	0x08005705
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005715 	.word	0x08005715
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fa:	e2ba      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005702:	e2b6      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e2b2      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e2ae      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005714:	2320      	movs	r3, #32
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e2aa      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800571c:	2340      	movs	r3, #64	@ 0x40
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e2a6      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e2a2      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a35      	ldr	r2, [pc, #212]	@ (8005808 <UART_SetConfig+0x344>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d130      	bne.n	8005798 <UART_SetConfig+0x2d4>
 8005736:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <UART_SetConfig+0x338>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	2b05      	cmp	r3, #5
 8005740:	d826      	bhi.n	8005790 <UART_SetConfig+0x2cc>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <UART_SetConfig+0x284>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005761 	.word	0x08005761
 800574c:	08005769 	.word	0x08005769
 8005750:	08005771 	.word	0x08005771
 8005754:	08005779 	.word	0x08005779
 8005758:	08005781 	.word	0x08005781
 800575c:	08005789 	.word	0x08005789
 8005760:	2300      	movs	r3, #0
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e284      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e280      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e27c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e278      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005780:	2320      	movs	r3, #32
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e274      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005788:	2340      	movs	r3, #64	@ 0x40
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e270      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005790:	2380      	movs	r3, #128	@ 0x80
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e26c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1b      	ldr	r2, [pc, #108]	@ (800580c <UART_SetConfig+0x348>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d142      	bne.n	8005828 <UART_SetConfig+0x364>
 80057a2:	4b16      	ldr	r3, [pc, #88]	@ (80057fc <UART_SetConfig+0x338>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b05      	cmp	r3, #5
 80057ac:	d838      	bhi.n	8005820 <UART_SetConfig+0x35c>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <UART_SetConfig+0x2f0>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057cd 	.word	0x080057cd
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	080057dd 	.word	0x080057dd
 80057c0:	080057e5 	.word	0x080057e5
 80057c4:	08005811 	.word	0x08005811
 80057c8:	08005819 	.word	0x08005819
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e24e      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e24a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e246      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e242      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80057ec:	cfff69f3 	.word	0xcfff69f3
 80057f0:	58000c00 	.word	0x58000c00
 80057f4:	11fff4ff 	.word	0x11fff4ff
 80057f8:	40011000 	.word	0x40011000
 80057fc:	58024400 	.word	0x58024400
 8005800:	40004400 	.word	0x40004400
 8005804:	40004800 	.word	0x40004800
 8005808:	40004c00 	.word	0x40004c00
 800580c:	40005000 	.word	0x40005000
 8005810:	2320      	movs	r3, #32
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e22c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005818:	2340      	movs	r3, #64	@ 0x40
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581e:	e228      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e224      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4ab1      	ldr	r2, [pc, #708]	@ (8005af4 <UART_SetConfig+0x630>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d176      	bne.n	8005920 <UART_SetConfig+0x45c>
 8005832:	4bb1      	ldr	r3, [pc, #708]	@ (8005af8 <UART_SetConfig+0x634>)
 8005834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800583a:	2b28      	cmp	r3, #40	@ 0x28
 800583c:	d86c      	bhi.n	8005918 <UART_SetConfig+0x454>
 800583e:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0x380>)
 8005840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005844:	080058e9 	.word	0x080058e9
 8005848:	08005919 	.word	0x08005919
 800584c:	08005919 	.word	0x08005919
 8005850:	08005919 	.word	0x08005919
 8005854:	08005919 	.word	0x08005919
 8005858:	08005919 	.word	0x08005919
 800585c:	08005919 	.word	0x08005919
 8005860:	08005919 	.word	0x08005919
 8005864:	080058f1 	.word	0x080058f1
 8005868:	08005919 	.word	0x08005919
 800586c:	08005919 	.word	0x08005919
 8005870:	08005919 	.word	0x08005919
 8005874:	08005919 	.word	0x08005919
 8005878:	08005919 	.word	0x08005919
 800587c:	08005919 	.word	0x08005919
 8005880:	08005919 	.word	0x08005919
 8005884:	080058f9 	.word	0x080058f9
 8005888:	08005919 	.word	0x08005919
 800588c:	08005919 	.word	0x08005919
 8005890:	08005919 	.word	0x08005919
 8005894:	08005919 	.word	0x08005919
 8005898:	08005919 	.word	0x08005919
 800589c:	08005919 	.word	0x08005919
 80058a0:	08005919 	.word	0x08005919
 80058a4:	08005901 	.word	0x08005901
 80058a8:	08005919 	.word	0x08005919
 80058ac:	08005919 	.word	0x08005919
 80058b0:	08005919 	.word	0x08005919
 80058b4:	08005919 	.word	0x08005919
 80058b8:	08005919 	.word	0x08005919
 80058bc:	08005919 	.word	0x08005919
 80058c0:	08005919 	.word	0x08005919
 80058c4:	08005909 	.word	0x08005909
 80058c8:	08005919 	.word	0x08005919
 80058cc:	08005919 	.word	0x08005919
 80058d0:	08005919 	.word	0x08005919
 80058d4:	08005919 	.word	0x08005919
 80058d8:	08005919 	.word	0x08005919
 80058dc:	08005919 	.word	0x08005919
 80058e0:	08005919 	.word	0x08005919
 80058e4:	08005911 	.word	0x08005911
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e1c0      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e1bc      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e1b8      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e1b4      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005908:	2320      	movs	r3, #32
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e1b0      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005910:	2340      	movs	r3, #64	@ 0x40
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e1ac      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e1a8      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a75      	ldr	r2, [pc, #468]	@ (8005afc <UART_SetConfig+0x638>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d130      	bne.n	800598c <UART_SetConfig+0x4c8>
 800592a:	4b73      	ldr	r3, [pc, #460]	@ (8005af8 <UART_SetConfig+0x634>)
 800592c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b05      	cmp	r3, #5
 8005934:	d826      	bhi.n	8005984 <UART_SetConfig+0x4c0>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x478>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005955 	.word	0x08005955
 8005940:	0800595d 	.word	0x0800595d
 8005944:	08005965 	.word	0x08005965
 8005948:	0800596d 	.word	0x0800596d
 800594c:	08005975 	.word	0x08005975
 8005950:	0800597d 	.word	0x0800597d
 8005954:	2300      	movs	r3, #0
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e18a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e186      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e182      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e17e      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005974:	2320      	movs	r3, #32
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e17a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800597c:	2340      	movs	r3, #64	@ 0x40
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e176      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e172      	b.n	8005c72 <UART_SetConfig+0x7ae>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5b      	ldr	r2, [pc, #364]	@ (8005b00 <UART_SetConfig+0x63c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d130      	bne.n	80059f8 <UART_SetConfig+0x534>
 8005996:	4b58      	ldr	r3, [pc, #352]	@ (8005af8 <UART_SetConfig+0x634>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d826      	bhi.n	80059f0 <UART_SetConfig+0x52c>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0x4e4>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059c1 	.word	0x080059c1
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	080059d1 	.word	0x080059d1
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e154      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e150      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e14c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e148      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059e0:	2320      	movs	r3, #32
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e144      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059e8:	2340      	movs	r3, #64	@ 0x40
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e140      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e13c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a41      	ldr	r2, [pc, #260]	@ (8005b04 <UART_SetConfig+0x640>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f040 8082 	bne.w	8005b08 <UART_SetConfig+0x644>
 8005a04:	4b3c      	ldr	r3, [pc, #240]	@ (8005af8 <UART_SetConfig+0x634>)
 8005a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a0c:	2b28      	cmp	r3, #40	@ 0x28
 8005a0e:	d86d      	bhi.n	8005aec <UART_SetConfig+0x628>
 8005a10:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <UART_SetConfig+0x554>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005abd 	.word	0x08005abd
 8005a1c:	08005aed 	.word	0x08005aed
 8005a20:	08005aed 	.word	0x08005aed
 8005a24:	08005aed 	.word	0x08005aed
 8005a28:	08005aed 	.word	0x08005aed
 8005a2c:	08005aed 	.word	0x08005aed
 8005a30:	08005aed 	.word	0x08005aed
 8005a34:	08005aed 	.word	0x08005aed
 8005a38:	08005ac5 	.word	0x08005ac5
 8005a3c:	08005aed 	.word	0x08005aed
 8005a40:	08005aed 	.word	0x08005aed
 8005a44:	08005aed 	.word	0x08005aed
 8005a48:	08005aed 	.word	0x08005aed
 8005a4c:	08005aed 	.word	0x08005aed
 8005a50:	08005aed 	.word	0x08005aed
 8005a54:	08005aed 	.word	0x08005aed
 8005a58:	08005acd 	.word	0x08005acd
 8005a5c:	08005aed 	.word	0x08005aed
 8005a60:	08005aed 	.word	0x08005aed
 8005a64:	08005aed 	.word	0x08005aed
 8005a68:	08005aed 	.word	0x08005aed
 8005a6c:	08005aed 	.word	0x08005aed
 8005a70:	08005aed 	.word	0x08005aed
 8005a74:	08005aed 	.word	0x08005aed
 8005a78:	08005ad5 	.word	0x08005ad5
 8005a7c:	08005aed 	.word	0x08005aed
 8005a80:	08005aed 	.word	0x08005aed
 8005a84:	08005aed 	.word	0x08005aed
 8005a88:	08005aed 	.word	0x08005aed
 8005a8c:	08005aed 	.word	0x08005aed
 8005a90:	08005aed 	.word	0x08005aed
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005add 	.word	0x08005add
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005aed 	.word	0x08005aed
 8005aa4:	08005aed 	.word	0x08005aed
 8005aa8:	08005aed 	.word	0x08005aed
 8005aac:	08005aed 	.word	0x08005aed
 8005ab0:	08005aed 	.word	0x08005aed
 8005ab4:	08005aed 	.word	0x08005aed
 8005ab8:	08005ae5 	.word	0x08005ae5
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e0d6      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e0d2      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e0ce      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e0ca      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005adc:	2320      	movs	r3, #32
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e0c6      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005ae4:	2340      	movs	r3, #64	@ 0x40
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e0c2      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e0be      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005af4:	40011400 	.word	0x40011400
 8005af8:	58024400 	.word	0x58024400
 8005afc:	40007800 	.word	0x40007800
 8005b00:	40007c00 	.word	0x40007c00
 8005b04:	40011800 	.word	0x40011800
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4aad      	ldr	r2, [pc, #692]	@ (8005dc4 <UART_SetConfig+0x900>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d176      	bne.n	8005c00 <UART_SetConfig+0x73c>
 8005b12:	4bad      	ldr	r3, [pc, #692]	@ (8005dc8 <UART_SetConfig+0x904>)
 8005b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b1a:	2b28      	cmp	r3, #40	@ 0x28
 8005b1c:	d86c      	bhi.n	8005bf8 <UART_SetConfig+0x734>
 8005b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <UART_SetConfig+0x660>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005bc9 	.word	0x08005bc9
 8005b28:	08005bf9 	.word	0x08005bf9
 8005b2c:	08005bf9 	.word	0x08005bf9
 8005b30:	08005bf9 	.word	0x08005bf9
 8005b34:	08005bf9 	.word	0x08005bf9
 8005b38:	08005bf9 	.word	0x08005bf9
 8005b3c:	08005bf9 	.word	0x08005bf9
 8005b40:	08005bf9 	.word	0x08005bf9
 8005b44:	08005bd1 	.word	0x08005bd1
 8005b48:	08005bf9 	.word	0x08005bf9
 8005b4c:	08005bf9 	.word	0x08005bf9
 8005b50:	08005bf9 	.word	0x08005bf9
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005bf9 	.word	0x08005bf9
 8005b5c:	08005bf9 	.word	0x08005bf9
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005bd9 	.word	0x08005bd9
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005bf9 	.word	0x08005bf9
 8005b70:	08005bf9 	.word	0x08005bf9
 8005b74:	08005bf9 	.word	0x08005bf9
 8005b78:	08005bf9 	.word	0x08005bf9
 8005b7c:	08005bf9 	.word	0x08005bf9
 8005b80:	08005bf9 	.word	0x08005bf9
 8005b84:	08005be1 	.word	0x08005be1
 8005b88:	08005bf9 	.word	0x08005bf9
 8005b8c:	08005bf9 	.word	0x08005bf9
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005bf9 	.word	0x08005bf9
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bf9 	.word	0x08005bf9
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005bf9 	.word	0x08005bf9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e050      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e04c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e048      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e044      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005be8:	2320      	movs	r3, #32
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e040      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005bf0:	2340      	movs	r3, #64	@ 0x40
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e03c      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e038      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a71      	ldr	r2, [pc, #452]	@ (8005dcc <UART_SetConfig+0x908>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d130      	bne.n	8005c6c <UART_SetConfig+0x7a8>
 8005c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc8 <UART_SetConfig+0x904>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	d826      	bhi.n	8005c64 <UART_SetConfig+0x7a0>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x758>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c3d 	.word	0x08005c3d
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e01a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e016      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c44:	2308      	movs	r3, #8
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e012      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e00e      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e00a      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c5c:	2340      	movs	r3, #64	@ 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e006      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e002      	b.n	8005c72 <UART_SetConfig+0x7ae>
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a55      	ldr	r2, [pc, #340]	@ (8005dcc <UART_SetConfig+0x908>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f040 80f8 	bne.w	8005e6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	dc46      	bgt.n	8005d14 <UART_SetConfig+0x850>
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	db75      	blt.n	8005d76 <UART_SetConfig+0x8b2>
 8005c8a:	3b02      	subs	r3, #2
 8005c8c:	2b1e      	cmp	r3, #30
 8005c8e:	d872      	bhi.n	8005d76 <UART_SetConfig+0x8b2>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0x7d4>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005d1b 	.word	0x08005d1b
 8005c9c:	08005d77 	.word	0x08005d77
 8005ca0:	08005d23 	.word	0x08005d23
 8005ca4:	08005d77 	.word	0x08005d77
 8005ca8:	08005d77 	.word	0x08005d77
 8005cac:	08005d77 	.word	0x08005d77
 8005cb0:	08005d33 	.word	0x08005d33
 8005cb4:	08005d77 	.word	0x08005d77
 8005cb8:	08005d77 	.word	0x08005d77
 8005cbc:	08005d77 	.word	0x08005d77
 8005cc0:	08005d77 	.word	0x08005d77
 8005cc4:	08005d77 	.word	0x08005d77
 8005cc8:	08005d77 	.word	0x08005d77
 8005ccc:	08005d77 	.word	0x08005d77
 8005cd0:	08005d43 	.word	0x08005d43
 8005cd4:	08005d77 	.word	0x08005d77
 8005cd8:	08005d77 	.word	0x08005d77
 8005cdc:	08005d77 	.word	0x08005d77
 8005ce0:	08005d77 	.word	0x08005d77
 8005ce4:	08005d77 	.word	0x08005d77
 8005ce8:	08005d77 	.word	0x08005d77
 8005cec:	08005d77 	.word	0x08005d77
 8005cf0:	08005d77 	.word	0x08005d77
 8005cf4:	08005d77 	.word	0x08005d77
 8005cf8:	08005d77 	.word	0x08005d77
 8005cfc:	08005d77 	.word	0x08005d77
 8005d00:	08005d77 	.word	0x08005d77
 8005d04:	08005d77 	.word	0x08005d77
 8005d08:	08005d77 	.word	0x08005d77
 8005d0c:	08005d77 	.word	0x08005d77
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	d02a      	beq.n	8005d6e <UART_SetConfig+0x8aa>
 8005d18:	e02d      	b.n	8005d76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d1a:	f7fe ff57 	bl	8004bcc <HAL_RCCEx_GetD3PCLK1Freq>
 8005d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d20:	e02f      	b.n	8005d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe ff66 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d30:	e027      	b.n	8005d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d32:	f107 0318 	add.w	r3, r7, #24
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff f8b2 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d40:	e01f      	b.n	8005d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d42:	4b21      	ldr	r3, [pc, #132]	@ (8005dc8 <UART_SetConfig+0x904>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc8 <UART_SetConfig+0x904>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	08db      	lsrs	r3, r3, #3
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <UART_SetConfig+0x90c>)
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d60:	e00f      	b.n	8005d82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d62:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <UART_SetConfig+0x90c>)
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d66:	e00c      	b.n	8005d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d68:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd4 <UART_SetConfig+0x910>)
 8005d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6c:	e009      	b.n	8005d82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d74:	e005      	b.n	8005d82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 81ee 	beq.w	8006166 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <UART_SetConfig+0x914>)
 8005d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d9c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4413      	add	r3, r2
 8005da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d305      	bcc.n	8005dba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d910      	bls.n	8005ddc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005dc0:	e1d1      	b.n	8006166 <UART_SetConfig+0xca2>
 8005dc2:	bf00      	nop
 8005dc4:	40011c00 	.word	0x40011c00
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	58000c00 	.word	0x58000c00
 8005dd0:	03d09000 	.word	0x03d09000
 8005dd4:	003d0900 	.word	0x003d0900
 8005dd8:	08006cc4 	.word	0x08006cc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dde:	2200      	movs	r2, #0
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	60fa      	str	r2, [r7, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	4ac0      	ldr	r2, [pc, #768]	@ (80060ec <UART_SetConfig+0xc28>)
 8005dea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2200      	movs	r2, #0
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005dfe:	f7fa fa75 	bl	80002ec <__aeabi_uldivmod>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	020b      	lsls	r3, r1, #8
 8005e14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e18:	0202      	lsls	r2, r0, #8
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	6849      	ldr	r1, [r1, #4]
 8005e1e:	0849      	lsrs	r1, r1, #1
 8005e20:	2000      	movs	r0, #0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4605      	mov	r5, r0
 8005e26:	eb12 0804 	adds.w	r8, r2, r4
 8005e2a:	eb43 0905 	adc.w	r9, r3, r5
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	469a      	mov	sl, r3
 8005e36:	4693      	mov	fp, r2
 8005e38:	4652      	mov	r2, sl
 8005e3a:	465b      	mov	r3, fp
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa fa54 	bl	80002ec <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e52:	d308      	bcc.n	8005e66 <UART_SetConfig+0x9a2>
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e5a:	d204      	bcs.n	8005e66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	e17f      	b.n	8006166 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e6c:	e17b      	b.n	8006166 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e76:	f040 80bd 	bne.w	8005ff4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005e7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	dc48      	bgt.n	8005f14 <UART_SetConfig+0xa50>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	db7b      	blt.n	8005f7e <UART_SetConfig+0xaba>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d879      	bhi.n	8005f7e <UART_SetConfig+0xaba>
 8005e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e90 <UART_SetConfig+0x9cc>)
 8005e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e90:	08005f1b 	.word	0x08005f1b
 8005e94:	08005f23 	.word	0x08005f23
 8005e98:	08005f7f 	.word	0x08005f7f
 8005e9c:	08005f7f 	.word	0x08005f7f
 8005ea0:	08005f2b 	.word	0x08005f2b
 8005ea4:	08005f7f 	.word	0x08005f7f
 8005ea8:	08005f7f 	.word	0x08005f7f
 8005eac:	08005f7f 	.word	0x08005f7f
 8005eb0:	08005f3b 	.word	0x08005f3b
 8005eb4:	08005f7f 	.word	0x08005f7f
 8005eb8:	08005f7f 	.word	0x08005f7f
 8005ebc:	08005f7f 	.word	0x08005f7f
 8005ec0:	08005f7f 	.word	0x08005f7f
 8005ec4:	08005f7f 	.word	0x08005f7f
 8005ec8:	08005f7f 	.word	0x08005f7f
 8005ecc:	08005f7f 	.word	0x08005f7f
 8005ed0:	08005f4b 	.word	0x08005f4b
 8005ed4:	08005f7f 	.word	0x08005f7f
 8005ed8:	08005f7f 	.word	0x08005f7f
 8005edc:	08005f7f 	.word	0x08005f7f
 8005ee0:	08005f7f 	.word	0x08005f7f
 8005ee4:	08005f7f 	.word	0x08005f7f
 8005ee8:	08005f7f 	.word	0x08005f7f
 8005eec:	08005f7f 	.word	0x08005f7f
 8005ef0:	08005f7f 	.word	0x08005f7f
 8005ef4:	08005f7f 	.word	0x08005f7f
 8005ef8:	08005f7f 	.word	0x08005f7f
 8005efc:	08005f7f 	.word	0x08005f7f
 8005f00:	08005f7f 	.word	0x08005f7f
 8005f04:	08005f7f 	.word	0x08005f7f
 8005f08:	08005f7f 	.word	0x08005f7f
 8005f0c:	08005f7f 	.word	0x08005f7f
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d02e      	beq.n	8005f76 <UART_SetConfig+0xab2>
 8005f18:	e031      	b.n	8005f7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fd fc6d 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8005f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f20:	e033      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f22:	f7fd fc7f 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 8005f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f28:	e02f      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fe62 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f38:	e027      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe ffae 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	e01f      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4a:	4b69      	ldr	r3, [pc, #420]	@ (80060f0 <UART_SetConfig+0xc2c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f56:	4b66      	ldr	r3, [pc, #408]	@ (80060f0 <UART_SetConfig+0xc2c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	4a64      	ldr	r2, [pc, #400]	@ (80060f4 <UART_SetConfig+0xc30>)
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f68:	e00f      	b.n	8005f8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005f6a:	4b62      	ldr	r3, [pc, #392]	@ (80060f4 <UART_SetConfig+0xc30>)
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6e:	e00c      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f70:	4b61      	ldr	r3, [pc, #388]	@ (80060f8 <UART_SetConfig+0xc34>)
 8005f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f74:	e009      	b.n	8005f8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7c:	e005      	b.n	8005f8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80ea 	beq.w	8006166 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	4a55      	ldr	r2, [pc, #340]	@ (80060ec <UART_SetConfig+0xc28>)
 8005f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa4:	005a      	lsls	r2, r3, #1
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	441a      	add	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d916      	bls.n	8005fec <UART_SetConfig+0xb28>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc4:	d212      	bcs.n	8005fec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f023 030f 	bic.w	r3, r3, #15
 8005fce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	e0bc      	b.n	8006166 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ff2:	e0b8      	b.n	8006166 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	dc4b      	bgt.n	8006094 <UART_SetConfig+0xbd0>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f2c0 8087 	blt.w	8006110 <UART_SetConfig+0xc4c>
 8006002:	2b20      	cmp	r3, #32
 8006004:	f200 8084 	bhi.w	8006110 <UART_SetConfig+0xc4c>
 8006008:	a201      	add	r2, pc, #4	@ (adr r2, 8006010 <UART_SetConfig+0xb4c>)
 800600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600e:	bf00      	nop
 8006010:	0800609b 	.word	0x0800609b
 8006014:	080060a3 	.word	0x080060a3
 8006018:	08006111 	.word	0x08006111
 800601c:	08006111 	.word	0x08006111
 8006020:	080060ab 	.word	0x080060ab
 8006024:	08006111 	.word	0x08006111
 8006028:	08006111 	.word	0x08006111
 800602c:	08006111 	.word	0x08006111
 8006030:	080060bb 	.word	0x080060bb
 8006034:	08006111 	.word	0x08006111
 8006038:	08006111 	.word	0x08006111
 800603c:	08006111 	.word	0x08006111
 8006040:	08006111 	.word	0x08006111
 8006044:	08006111 	.word	0x08006111
 8006048:	08006111 	.word	0x08006111
 800604c:	08006111 	.word	0x08006111
 8006050:	080060cb 	.word	0x080060cb
 8006054:	08006111 	.word	0x08006111
 8006058:	08006111 	.word	0x08006111
 800605c:	08006111 	.word	0x08006111
 8006060:	08006111 	.word	0x08006111
 8006064:	08006111 	.word	0x08006111
 8006068:	08006111 	.word	0x08006111
 800606c:	08006111 	.word	0x08006111
 8006070:	08006111 	.word	0x08006111
 8006074:	08006111 	.word	0x08006111
 8006078:	08006111 	.word	0x08006111
 800607c:	08006111 	.word	0x08006111
 8006080:	08006111 	.word	0x08006111
 8006084:	08006111 	.word	0x08006111
 8006088:	08006111 	.word	0x08006111
 800608c:	08006111 	.word	0x08006111
 8006090:	08006103 	.word	0x08006103
 8006094:	2b40      	cmp	r3, #64	@ 0x40
 8006096:	d037      	beq.n	8006108 <UART_SetConfig+0xc44>
 8006098:	e03a      	b.n	8006110 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609a:	f7fd fbad 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 800609e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060a0:	e03c      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a2:	f7fd fbbf 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 80060a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060a8:	e038      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fda2 	bl	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b8:	e030      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ba:	f107 0318 	add.w	r3, r7, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe feee 	bl	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c8:	e028      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ca:	4b09      	ldr	r3, [pc, #36]	@ (80060f0 <UART_SetConfig+0xc2c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d012      	beq.n	80060fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060d6:	4b06      	ldr	r3, [pc, #24]	@ (80060f0 <UART_SetConfig+0xc2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	08db      	lsrs	r3, r3, #3
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	4a04      	ldr	r2, [pc, #16]	@ (80060f4 <UART_SetConfig+0xc30>)
 80060e2:	fa22 f303 	lsr.w	r3, r2, r3
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060e8:	e018      	b.n	800611c <UART_SetConfig+0xc58>
 80060ea:	bf00      	nop
 80060ec:	08006cc4 	.word	0x08006cc4
 80060f0:	58024400 	.word	0x58024400
 80060f4:	03d09000 	.word	0x03d09000
 80060f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b24      	ldr	r3, [pc, #144]	@ (8006190 <UART_SetConfig+0xccc>)
 80060fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006100:	e00c      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006102:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <UART_SetConfig+0xcd0>)
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006106:	e009      	b.n	800611c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610e:	e005      	b.n	800611c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800611a:	bf00      	nop
    }

    if (pclk != 0U)
 800611c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d021      	beq.n	8006166 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	4a1c      	ldr	r2, [pc, #112]	@ (8006198 <UART_SetConfig+0xcd4>)
 8006128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612c:	461a      	mov	r2, r3
 800612e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006130:	fbb3 f2f2 	udiv	r2, r3, r2
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	441a      	add	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	2b0f      	cmp	r3, #15
 800614a:	d909      	bls.n	8006160 <UART_SetConfig+0xc9c>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006152:	d205      	bcs.n	8006160 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	b29a      	uxth	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	e002      	b.n	8006166 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2201      	movs	r2, #1
 800616a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2201      	movs	r2, #1
 8006172:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006182:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006186:	4618      	mov	r0, r3
 8006188:	3748      	adds	r7, #72	@ 0x48
 800618a:	46bd      	mov	sp, r7
 800618c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006190:	03d09000 	.word	0x03d09000
 8006194:	003d0900 	.word	0x003d0900
 8006198:	08006cc4 	.word	0x08006cc4

0800619c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629a:	d10a      	bne.n	80062b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	@ 0x60
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f0:	f7fb f9fa 	bl	80016e8 <HAL_GetTick>
 80062f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b08      	cmp	r3, #8
 8006302:	d12f      	bne.n	8006364 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f88e 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d022      	beq.n	8006364 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006332:	653b      	str	r3, [r7, #80]	@ 0x50
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e063      	b.n	800642c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b04      	cmp	r3, #4
 8006370:	d149      	bne.n	8006406 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006372:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800637a:	2200      	movs	r2, #0
 800637c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f857 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03c      	beq.n	8006406 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	623b      	str	r3, [r7, #32]
   return(result);
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e6      	bne.n	800638c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3308      	adds	r3, #8
 80063dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063de:	61fa      	str	r2, [r7, #28]
 80063e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	617b      	str	r3, [r7, #20]
   return(result);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e5      	bne.n	80063be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e012      	b.n	800642c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3758      	adds	r7, #88	@ 0x58
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006444:	e04f      	b.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d04b      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fb f94b 	bl	80016e8 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e04e      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d037      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b80      	cmp	r3, #128	@ 0x80
 800647a:	d034      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b40      	cmp	r3, #64	@ 0x40
 8006480:	d031      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d110      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f839 	bl	8006510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2208      	movs	r2, #8
 80064a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e029      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064c0:	d111      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f81f 	bl	8006510 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0a0      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b095      	sub	sp, #84	@ 0x54
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800652c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006536:	643b      	str	r3, [r7, #64]	@ 0x40
 8006538:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800653c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	4b1e      	ldr	r3, [pc, #120]	@ (80065d8 <UART_EndRxTransfer+0xc8>)
 800655e:	4013      	ands	r3, r2
 8006560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800656a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006582:	2b01      	cmp	r3, #1
 8006584:	d118      	bne.n	80065b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	60bb      	str	r3, [r7, #8]
   return(result);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0310 	bic.w	r3, r3, #16
 800659a:	647b      	str	r3, [r7, #68]	@ 0x44
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	613b      	str	r3, [r7, #16]
   return(result);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80065cc:	bf00      	nop
 80065ce:	3754      	adds	r7, #84	@ 0x54
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	effffffe 	.word	0xeffffffe

080065dc <memset>:
 80065dc:	4402      	add	r2, r0
 80065de:	4603      	mov	r3, r0
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d100      	bne.n	80065e6 <memset+0xa>
 80065e4:	4770      	bx	lr
 80065e6:	f803 1b01 	strb.w	r1, [r3], #1
 80065ea:	e7f9      	b.n	80065e0 <memset+0x4>

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006624 <__libc_init_array+0x38>)
 80065f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006628 <__libc_init_array+0x3c>)
 80065f2:	1b64      	subs	r4, r4, r5
 80065f4:	10a4      	asrs	r4, r4, #2
 80065f6:	2600      	movs	r6, #0
 80065f8:	42a6      	cmp	r6, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	4d0b      	ldr	r5, [pc, #44]	@ (800662c <__libc_init_array+0x40>)
 80065fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006630 <__libc_init_array+0x44>)
 8006600:	f000 f818 	bl	8006634 <_init>
 8006604:	1b64      	subs	r4, r4, r5
 8006606:	10a4      	asrs	r4, r4, #2
 8006608:	2600      	movs	r6, #0
 800660a:	42a6      	cmp	r6, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f855 3b04 	ldr.w	r3, [r5], #4
 8006614:	4798      	blx	r3
 8006616:	3601      	adds	r6, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f855 3b04 	ldr.w	r3, [r5], #4
 800661e:	4798      	blx	r3
 8006620:	3601      	adds	r6, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	08006ce4 	.word	0x08006ce4
 8006628:	08006ce4 	.word	0x08006ce4
 800662c:	08006ce4 	.word	0x08006ce4
 8006630:	08006ce8 	.word	0x08006ce8

08006634 <_init>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr

08006640 <_fini>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr
